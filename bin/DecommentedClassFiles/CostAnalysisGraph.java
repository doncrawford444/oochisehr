/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.border.LineBorder;import javax.swing.border.MatteBorder;public class CostAnalysisGraph extends JPanel implements ActionListener, MouseListener {Font dataFont = new Font("serif", Font.PLAIN, 12);JLabel effectivenessJLabel = new JLabel();JLabel costJLabel = new JLabel("Cost");int[] graphPointsX;int[] graphPointsY;int graphHeight = 380;int graphWidth = 380;int originX = 50;int originY = 35;Color treatmentColor = new Color(0, 128, 128);String costX;String effectivenessOrUtilityY;CostAnalysisGraph(String utilityOrEffectiveness, String[] costEffectivenessTreatmentPointNames, double[] costPointsX, double[] effectivenessOrUtilityPointsY) {setBackground(Color.WHITE);setPreferredSize(new Dimension(465, 450));setLayout(null);costJLabel.setBounds(graphWidth + 12, graphHeight + 25, 100, 40);costJLabel.setFont(dataFont);effectivenessJLabel.setFont(dataFont);effectivenessJLabel.setText(utilityOrEffectiveness);effectivenessJLabel.setBounds(49, 0, 100, 40);add(effectivenessJLabel);add(costJLabel);if (null != costEffectivenessTreatmentPointNames) {double minX = Integer.MAX_VALUE;double minY = Integer.MAX_VALUE;double maxX = Integer.MIN_VALUE;double maxY = Integer.MIN_VALUE;boolean placePointXsInMiddle = false;boolean placePointYsInMiddle = false;graphPointsX = new int[costPointsX.length - 1];graphPointsY = new int[effectivenessOrUtilityPointsY.length - 1];JButton pointDotJButton = null;JButton pointTextJButton = null;GridBagConstraints pointTextButtonConstraints = new GridBagConstraints();JLabel treatmentNameJLabel;JLabel costAndEffectivenessOrUtilityJLabel;int ind = 1;while (ind < costPointsX.length) {if (costPointsX[ind] < minX) {minX = costPointsX[ind];}if (costPointsX[ind] > maxX) {maxX = costPointsX[ind];}if (effectivenessOrUtilityPointsY[ind] < minY) {minY = effectivenessOrUtilityPointsY[ind];}if (effectivenessOrUtilityPointsY[ind] > maxY) {maxY = effectivenessOrUtilityPointsY[ind];}ind++;}double stretchX = -1;double stretchY = -1;ind = 0;if ((maxX - minX) != 0) {stretchX = 0.75 * graphWidth / (maxX - minX);} else {stretchX = -1;placePointXsInMiddle = true;}stretchY = 0.75 * graphWidth / (maxY - minY);if (!placePointXsInMiddle) {while (ind < costPointsX.length - 1) {graphPointsX[ind] = (int) (Math.round(stretchX * (costPointsX[ind + 1] - minX)) + 0.125 * graphWidth + originX);graphPointsY[ind] = -(int) (Math.round(stretchY * (effectivenessOrUtilityPointsY[ind + 1] - minY)) + 0.125 * graphHeight) + originY + graphHeight;System.out.println("(" + costPointsX[ind] + ", " + effectivenessOrUtilityPointsY[ind] + ") (" + graphPointsX[ind] + ", " + graphPointsY[ind] + ")");ind++;}} else {while (ind < costPointsX.length - 1) {graphPointsX[ind] = graphWidth / 2 + originX;graphPointsY[ind] = -(int) (Math.round(stretchY * (effectivenessOrUtilityPointsY[ind + 1] - minY)) + 0.125 * graphHeight) + originY + graphHeight;System.out.println("(" + costPointsX[ind] + ", " + effectivenessOrUtilityPointsY[ind] + ") (" + graphPointsX[ind] + ", " + graphPointsY[ind] + ")");ind++;}}int pointInd = 0;while (pointInd < graphPointsX.length) {pointDotJButton = new JButton();pointTextJButton = new JButton();treatmentNameJLabel = new JLabel(costEffectivenessTreatmentPointNames[pointInd + 1] + ": ");if (String.valueOf(costPointsX[pointInd + 1]).length() > 6) {costX = String.valueOf(costPointsX[pointInd + 1]).substring(0, 5);} else {costX = String.valueOf(costPointsX[pointInd + 1]);}if (String.valueOf(costPointsX[pointInd + 1]).length() > 6) {effectivenessOrUtilityY = String.valueOf(effectivenessOrUtilityPointsY[pointInd + 1]).substring(0, 5);} else {effectivenessOrUtilityY = String.valueOf(effectivenessOrUtilityPointsY[pointInd + 1]);}costAndEffectivenessOrUtilityJLabel = new JLabel("cost: " + costX + ", " + utilityOrEffectiveness.toLowerCase() + ": " + effectivenessOrUtilityY);pointDotJButton.addMouseListener(this);pointDotJButton.setName("pointDotJButton|" + pointInd);pointDotJButton.setBounds(graphPointsX[pointInd] - 3, graphPointsY[pointInd] - 3, 7, 7);pointDotJButton.setBackground(SystemWindow.buttonColor);pointDotJButton.setBorder(new LineBorder(Color.BLACK, 1));pointDotJButton.setFont(Device.device.workspace.decisionSupportWindow.treatmentAnalysisDataFont);costAndEffectivenessOrUtilityJLabel.setBorder(new MatteBorder(0, 0, 2, 0, treatmentColor));pointTextJButton.setLayout(new GridBagLayout());pointTextButtonConstraints.gridy = 0;pointTextJButton.add(treatmentNameJLabel, pointTextButtonConstraints);pointTextButtonConstraints.gridy = 1;pointTextJButton.add(costAndEffectivenessOrUtilityJLabel, pointTextButtonConstraints);pointTextJButton.setBounds(graphPointsX[pointInd] - 3 - 140 + 7, graphPointsY[pointInd] - 3 - 35, 280, 40);pointTextJButton.setBorderPainted(false);pointTextJButton.setBackground(SystemWindow.buttonColor);pointTextJButton.setFont(Device.device.workspace.decisionSupportWindow.treatmentAnalysisDataFont);pointTextJButton.setOpaque(false);pointTextJButton.setForeground(treatmentColor);pointTextJButton.setVisible(false);pointTextJButton.setName("pointTextJButton|" + pointInd);add(pointDotJButton);add(pointTextJButton);pointInd++;}if (costPointsX.length == 2) {pointDotJButton.setBounds(graphWidth / 2 + originX, graphHeight / 2 + originY, 7, 7);pointTextJButton.setBounds(graphWidth / 2 + originX - 140 + 7, graphHeight / 2 + originY - 40, 280, 40);add(pointDotJButton);add(pointTextJButton);validate();repaint();}}}@Overridepublic void paintComponent(Graphics can) {super.paintComponent(can);can.setColor(Color.DARK_GRAY);can.drawLine(originX, originY, originX, graphHeight + originY);can.drawLine(originX + 1, originY, originX + 1, graphHeight + originY);can.drawLine(originX, graphHeight + originY, graphWidth + originX, graphHeight + originY);can.drawLine(originX, graphHeight + originY + 1, graphWidth + originX, graphHeight + originY + 1);can.setColor(treatmentColor);if (null != graphPointsX) {can.drawPolyline(graphPointsX, graphPointsY, graphPointsX.length);}}@Overridepublic void mouseClicked(MouseEvent m) {}@Overridepublic void mouseEntered(MouseEvent m) {int ind = 0;while (ind < getComponentCount()) {if (null != getComponent(ind).getName() && getComponent(ind).getName().equals("pointTextJButton|" + m.getComponent().getName().substring(16))) {((JComponent) m.getComponent()).setBorder(new LineBorder(treatmentColor, 2));getComponent(ind).setVisible(true);}ind++;}}@Overridepublic void mouseExited(MouseEvent m) {int ind = 0;while (ind < getComponentCount()) {if (null != getComponent(ind).getName() && getComponent(ind).getName().equals("pointTextJButton|" + m.getComponent().getName().substring(16))) {((JComponent) m.getComponent()).setBorder(new LineBorder(Color.BLACK, 1));getComponent(ind).setVisible(false);}ind++;}repaint();}@Overridepublic void mousePressed(MouseEvent m) {}@Overridepublic void mouseReleased(MouseEvent m) {}@Overridepublic void actionPerformed(ActionEvent e) {}}// EOF