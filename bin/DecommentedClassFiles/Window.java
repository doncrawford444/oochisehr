/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.CardLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.image.BufferedImage;import java.io.File;import javax.imageio.ImageIO;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JColorChooser;import javax.swing.JComponent;import javax.swing.JInternalFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.Timer;import javax.swing.border.Border;import javax.swing.border.CompoundBorder;import javax.swing.border.MatteBorder;import javax.swing.plaf.basic.BasicInternalFrameUI;public class Window extends JInternalFrame implements MouseListener {AnimatedIconButton animatedWindowIconJButton = new AnimatedIconButton();int initialPanelX;int initialPanelY;int initialMouseX;int initialMouseY;boolean initiateMouseEvent = true;JPanel titleBarBaseJPanel = new JPanel(new GridBagLayout());JPanel titleBarCenterJPanel = new JPanel(new GridBagLayout());JPanel mainJPanel = new JPanel(new GridBagLayout());JPanel talkbackBorderedGlassJPanel = new JPanel(new GridBagLayout());JPanel contentJPanel = new JPanel(new GridBagLayout());JPanel mainPanelCoverJPanel = new JPanel(new GridBagLayout());Border titleBarBottomBorder = new MatteBorder(0, 0, 1, 0, Color.BLACK);JPanel titleBarButtonJPanel = new JPanel(new GridBagLayout());JButton titleBarIconifyJButton = new JButton();JButton titleBarCloseJButton = new JButton();RoundedCornerJPanel titleBarEnabledLeftRoundedCornerJPanel = new RoundedCornerJPanel("LEFT", "ENABLED_COLOR");RoundedCornerJPanel titleBarEnabledRightRoundedCornerJPanel = new RoundedCornerJPanel("RIGHT", "ENABLED_COLOR");RoundedCornerJPanel titleBarDisabledLeftRoundedCornerJPanel = new RoundedCornerJPanel("LEFT", "DISABLED_COLOR");RoundedCornerJPanel titleBarDisabledRightRoundedCornerJPanel = new RoundedCornerJPanel("RIGHT", "DISABLED_COLOR");CardLayout titleBarLeftRoundedCornerPanelCardLayout = new CardLayout();CardLayout titleBarRightRoundedCornerPanelCardLayout = new CardLayout();JPanel titleBarLeftRoundedCornerCardedJPanel = new JPanel(titleBarLeftRoundedCornerPanelCardLayout);JPanel titleBarRightRoundedCornerCardedJPanel = new JPanel(titleBarRightRoundedCornerPanelCardLayout);JLabel titleBarJLabel = new JLabel();JPanel titleBarPusherJPanel = new JPanel(new GridBagLayout());JLabel titleBarPusherLineJLabel1 = new JLabel();JLabel titleBarPusherLineJLabel2 = new JLabel();JLabel titleBarPusherLineJLabel3 = new JLabel();JLabel titleBarPusherLineJLabel4 = new JLabel();JPanel talkBackIconJPanel = new JPanel(new GridBagLayout());JLabel talkbackIconJLabel = new JLabel();int talkbackFlashIndicatorDelayMilliseconds = 16;int flashMaskTranslucency;Timer flashTalkbackTimer;int flashTalkbackInd = 1;JPanel talkbackJPanel = new JPanel(new GridBagLayout());JLabel talkbackJLabel = new JLabel();JPanel talkbackIconTranslucentCoverJPanel = new JPanel(new GridBagLayout());JPanel talkBackIconBaseJPanel = new JPanel(new GridBagLayout());GridBagConstraints talkbackPanelConstraints = new GridBagConstraints();GridBagConstraints talkbackBorderedGlassPanelConstraints = new GridBagConstraints();GridBagConstraints talkBackIconBasePanelConstraints = new GridBagConstraints();GridBagConstraints talkBackIconJPanelConstraints = new GridBagConstraints();GridBagConstraints titleBarPusherPanelConstraints = new GridBagConstraints();GridBagConstraints titleBarPanelConstraints = new GridBagConstraints();GridBagConstraints rootConstraints = new GridBagConstraints();GridBagConstraints titleBarButtonPanelConstraints = new GridBagConstraints();GridBagConstraints titleBarCenterPanelConstraints = new GridBagConstraints();GridBagConstraints mainPanelConstraints = new GridBagConstraints();JColorChooser colorChooser;JPanel colorChooserJPanel = new JPanel(new GridBagLayout());JPanel colorChooserBaseJPanel = new JPanel(new GridBagLayout());Color titledBorderPanelColor = new Color(227, 227, 227);static Color titleBarEnabledColor = new Color(213, 227, 245);static Color titleBarDisabledColor = new Color(107, 114, 123);static Color titleBarEnabledWhiteFadedColor = new Color((titleBarEnabledColor.getRed() + 255) / 2, (titleBarEnabledColor.getGreen() + 255) / 2, (titleBarEnabledColor.getBlue() + 255) / 2);static Border titleBarEnabledTopBorder = new CompoundBorder(new MatteBorder(1, 0, 0, 0, Color.WHITE), new MatteBorder(1, 0, 0, 0, titleBarEnabledWhiteFadedColor));static Border titleBarDisabledTopBorder = new MatteBorder(2, 0, 0, 0, Color.LIGHT_GRAY);Window() {setLayout(new GridBagLayout());setIconifiable(true);setResizable(true);setMaximizable(true);setClosable(true);setDefaultCloseOperation(HIDE_ON_CLOSE);setOpaque(false);animatedWindowIconJButton.setVisible(false);animatedWindowIconJButton.addMouseListener(this);mainPanelCoverJPanel.setBackground(Device.translucentFrameCoverColor);mainPanelCoverJPanel.addMouseListener(this);mainPanelCoverJPanel.setName("mainPanelCoverJPanel");contentJPanel.setOpaque(false);mainJPanel.setOpaque(false);flashTalkbackTimer = new Timer(talkbackFlashIndicatorDelayMilliseconds, flashTalkbackIndicator);talkBackIconJPanel.setBackground(Color.WHITE);talkBackIconJPanelConstraints.weightx = 1;talkBackIconJPanelConstraints.fill = GridBagConstraints.HORIZONTAL;talkBackIconJPanelConstraints.gridx = 0;talkBackIconJPanel.add(new JLabel(" "), talkBackIconJPanelConstraints);talkBackIconJPanelConstraints.weightx = 0;talkBackIconJPanelConstraints.fill = GridBagConstraints.NONE;talkBackIconJPanelConstraints.gridx = 1;talkbackIconJLabel.setIcon(Device.newImageIcon(Device.binDir + "images/orangeAsterisk.gif"));talkBackIconJPanel.add(talkbackIconJLabel, talkBackIconJPanelConstraints);talkbackIconTranslucentCoverJPanel.setBackground(Color.WHITE);talkbackIconTranslucentCoverJPanel.setOpaque(true);talkBackIconBaseJPanel.setOpaque(true);talkBackIconBaseJPanel.setBackground(Color.WHITE);talkBackIconBasePanelConstraints.fill = GridBagConstraints.BOTH;talkBackIconBasePanelConstraints.gridy = 0;talkBackIconBasePanelConstraints.gridx = 0;talkBackIconBaseJPanel.setBackground(Color.WHITE);talkBackIconBaseJPanel.add(talkbackIconTranslucentCoverJPanel, talkBackIconBasePanelConstraints);talkBackIconBaseJPanel.add(talkBackIconJPanel, talkBackIconBasePanelConstraints);talkBackIconBasePanelConstraints.weightx = 1;talkBackIconBasePanelConstraints.weighty = 1;titleBarCenterJPanel.setBackground(titleBarEnabledColor);titleBarCenterJPanel.setBorder(titleBarEnabledTopBorder);titleBarCenterJPanel.add(titleBarJLabel, titleBarCenterPanelConstraints);titleBarCenterPanelConstraints.gridx = 1;titleBarCenterPanelConstraints.weightx = 1;titleBarCenterPanelConstraints.insets = new Insets(0, 9, 0, 9);titleBarCenterPanelConstraints.fill = GridBagConstraints.BOTH;titleBarCenterJPanel.add(titleBarPusherJPanel, titleBarCenterPanelConstraints);titleBarCenterPanelConstraints.gridx = 2;titleBarCenterPanelConstraints.weightx = 0;titleBarCenterPanelConstraints.insets = new Insets(0, 0, 0, 0);titleBarCenterJPanel.add(titleBarButtonJPanel, titleBarCenterPanelConstraints);titleBarBaseJPanel.addMouseListener(this);titleBarBaseJPanel.setName("titleBarBaseJPanel");titleBarBaseJPanel.setBorder(titleBarBottomBorder);setRootPaneCheckingEnabled(false);((BasicInternalFrameUI) this.getUI()).setNorthPane(titleBarBaseJPanel);setRootPaneCheckingEnabled(true);titleBarJLabel.setFont(new Font("Electron", Font.BOLD, 17));titleBarJLabel.setForeground(Color.DARK_GRAY);titleBarButtonJPanel.setOpaque(false);titleBarButtonPanelConstraints.insets = new Insets(0, 0, 0, 5);titleBarButtonJPanel.add(titleBarIconifyJButton, titleBarButtonPanelConstraints);titleBarButtonPanelConstraints.gridx = 1;titleBarButtonPanelConstraints.insets = new Insets(0, 5, 0, 0);titleBarButtonJPanel.add(titleBarCloseJButton, titleBarButtonPanelConstraints);BufferedImage titleBarIconifyButtonBufferedImage = null;BufferedImage titleBarCloseButtonBufferedImage = null;try {titleBarIconifyButtonBufferedImage = ImageIO.read(new File(Device.binDir + "images/green-button-md.png"));titleBarCloseButtonBufferedImage = ImageIO.read(new File(Device.binDir + "images/blue-button-md.png"));} catch (Exception e) {System.out.println("Error in reading in " + Device.binDir + "images/green-button-md.png or " + Device.binDir + " images/blue-button-md.png");}titleBarIconifyJButton.setIcon(new ImageIcon(titleBarIconifyButtonBufferedImage.getScaledInstance(63, 20, BufferedImage.SCALE_SMOOTH)));titleBarIconifyJButton.setFocusable(false);titleBarIconifyJButton.setMargin(new Insets(0, 0, 0, 0));titleBarIconifyJButton.addMouseListener(this);titleBarIconifyJButton.setName("titleBarIconifyJButton");titleBarIconifyJButton.setRolloverEnabled(false);titleBarIconifyJButton.setContentAreaFilled(false);titleBarIconifyJButton.setBorder(null);titleBarIconifyJButton.setBorderPainted(false);titleBarCloseJButton.setFocusable(false);titleBarCloseJButton.setIcon(new ImageIcon(titleBarCloseButtonBufferedImage.getScaledInstance(63, 20, BufferedImage.SCALE_SMOOTH)));titleBarCloseJButton.setMargin(new Insets(0, 0, 0, 0));titleBarCloseJButton.addMouseListener(this);titleBarCloseJButton.setName("titleBarCloseJButton");titleBarCloseJButton.setRolloverEnabled(false);titleBarCloseJButton.setContentAreaFilled(false);titleBarCloseJButton.setBorder(null);titleBarCloseJButton.setBorderPainted(false);titleBarPusherLineJLabel1.setBorder(new MatteBorder(0, 0, 1, 0, new Color(0, 0, 0, 96)));titleBarPusherLineJLabel2.setBorder(new MatteBorder(0, 0, 1, 0, new Color(0, 0, 0, 96)));titleBarPusherLineJLabel3.setBorder(new MatteBorder(0, 0, 1, 0, new Color(0, 0, 0, 96)));titleBarPusherJPanel.setOpaque(false);titleBarPusherPanelConstraints.fill = GridBagConstraints.BOTH;titleBarPusherPanelConstraints.weightx = 1;titleBarPusherPanelConstraints.ipady = 3;titleBarPusherJPanel.add(titleBarPusherLineJLabel1, titleBarPusherPanelConstraints);titleBarPusherPanelConstraints.gridy = 1;titleBarPusherJPanel.add(titleBarPusherLineJLabel2, titleBarPusherPanelConstraints);titleBarPusherPanelConstraints.gridy = 2;titleBarPusherJPanel.add(titleBarPusherLineJLabel3, titleBarPusherPanelConstraints);titleBarPusherPanelConstraints.gridy = 3;titleBarPusherJPanel.add(titleBarPusherLineJLabel4, titleBarPusherPanelConstraints);titleBarLeftRoundedCornerCardedJPanel.add(titleBarEnabledLeftRoundedCornerJPanel, "titleBarEnabledLeftRoundedCornerJPanel");titleBarLeftRoundedCornerCardedJPanel.add(titleBarDisabledLeftRoundedCornerJPanel, "titleBarDisabledLeftRoundedCornerJPanel");titleBarLeftRoundedCornerCardedJPanel.setOpaque(false);titleBarRightRoundedCornerCardedJPanel.add(titleBarEnabledRightRoundedCornerJPanel, "titleBarEnabledRightRoundedCornerJPanel");titleBarRightRoundedCornerCardedJPanel.add(titleBarDisabledRightRoundedCornerJPanel, "titleBarDisabledRightRoundedCornerJPanel");titleBarRightRoundedCornerCardedJPanel.setOpaque(false);titleBarPanelConstraints.weighty = 1;titleBarPanelConstraints.fill = GridBagConstraints.BOTH;titleBarBaseJPanel.add(titleBarLeftRoundedCornerCardedJPanel, titleBarPanelConstraints);titleBarPanelConstraints.gridx = 1;titleBarPanelConstraints.weightx = 1;titleBarBaseJPanel.add(titleBarCenterJPanel, titleBarPanelConstraints);titleBarPanelConstraints.gridx = 2;titleBarPanelConstraints.weightx = 0;titleBarBaseJPanel.add(titleBarRightRoundedCornerCardedJPanel, titleBarPanelConstraints);talkbackBorderedGlassJPanel.setBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(BorderFactory.createLineBorder(new Color(255, 255, 255, 32)), BorderFactory.createLineBorder(new Color(255, 255, 255, 64))), new CompoundBorder(BorderFactory.createLineBorder(new Color(255, 255, 255, 96)), BorderFactory.createLineBorder(new Color(255, 255, 255, 128)))), new CompoundBorder(new CompoundBorder(BorderFactory.createLineBorder(new Color(255, 255, 255, 160)), BorderFactory.createLineBorder(new Color(255, 255, 255, 192))), new CompoundBorder(BorderFactory.createLineBorder(new Color(255, 255, 255, 224)), BorderFactory.createLineBorder(new Color(255, 255, 255, 255))))));talkbackBorderedGlassJPanel.setOpaque(false);talkbackBorderedGlassPanelConstraints.weighty = 1;talkbackBorderedGlassPanelConstraints.weightx = 1;talkbackBorderedGlassPanelConstraints.fill = GridBagConstraints.BOTH;talkbackBorderedGlassJPanel.add(talkbackJPanel, talkbackBorderedGlassPanelConstraints);talkbackPanelConstraints.weightx = 0;talkbackPanelConstraints.weighty = 1;talkbackPanelConstraints.gridx = 0;talkbackJPanel.add(talkBackIconBaseJPanel, talkbackPanelConstraints);talkbackJPanel.setBackground(Color.WHITE);talkbackPanelConstraints.gridx = 1;talkbackPanelConstraints.weightx = 1;talkbackPanelConstraints.anchor = GridBagConstraints.WEST;talkbackJPanel.add(talkbackJLabel, talkbackPanelConstraints);mainPanelConstraints.gridy = 0;mainPanelConstraints.weightx = 1;mainPanelConstraints.fill = GridBagConstraints.HORIZONTAL;mainPanelConstraints.insets = new Insets(2, 0, 0, 0);mainJPanel.add(talkbackBorderedGlassJPanel, mainPanelConstraints);mainPanelConstraints.weighty = 1;mainPanelConstraints.gridy = 1;mainPanelConstraints.fill = GridBagConstraints.BOTH;mainJPanel.add(contentJPanel, mainPanelConstraints);rootConstraints.gridy = 0;rootConstraints.gridx = 0;rootConstraints.weighty = .5;rootConstraints.weightx = .5;rootConstraints.fill = GridBagConstraints.BOTH;add(mainPanelCoverJPanel, rootConstraints);add(mainJPanel, rootConstraints);}ActionListener flashTalkbackIndicator = new ActionListener() {public void actionPerformed(ActionEvent evt) {if (flashTalkbackInd < 8 | (flashTalkbackInd > 14 && flashTalkbackInd < 22) | (flashTalkbackInd > 28 && flashTalkbackInd < 36)) {flashMaskTranslucency = flashMaskTranslucency - 36;talkbackIconTranslucentCoverJPanel.setBackground(new Color(255, 255, 255, flashMaskTranslucency));talkBackIconBaseJPanel.validate();talkBackIconBaseJPanel.repaint();} else {flashMaskTranslucency = flashMaskTranslucency + 36;if (flashMaskTranslucency > 254) {flashMaskTranslucency = 254;}talkbackIconTranslucentCoverJPanel.setBackground(new Color(255, 255, 255, flashMaskTranslucency));talkBackIconBaseJPanel.validate();talkBackIconBaseJPanel.repaint();}flashTalkbackInd++;if (flashTalkbackInd > (int) (0.75 * (double) Device.device.frameRate)) {flashTalkbackTimer.stop();}}};void addTalkbackText(String line1, String line2, boolean startFlashTalkbackTimer) {flashTalkbackTimer.stop();flashMaskTranslucency = 255;flashTalkbackInd = 1;if (startFlashTalkbackTimer) {flashTalkbackTimer.start();}talkbackJLabel.setFont(new Font("Electron", Font.BOLD, 20));talkbackJLabel.setText(line1);}@Overridepublic void mouseClicked(MouseEvent m) {if (((JComponent) m.getSource()).getName().equals("mainPanelCoverJPanel") || ((JComponent) m.getSource()).getName().equals("titleBarBaseJPanel")) {Device.device.workspace.switchActiveWindowTo(this);} else if (m.getComponent().getName().equals("titleBarIconifyJButton")) {animatedWindowIconJButton.iconifyComponent(this);} else if (m.getComponent().getName().equals("titleBarCloseJButton")) {System.out.println("Mouse clicked titleBarCloseJButton");setVisible(false);}}@Overridepublic void mouseEntered(MouseEvent m) {}@Overridepublic void mouseExited(MouseEvent m) {}@Overridepublic void mousePressed(MouseEvent m) {if (m.getComponent().getName().equals("titleBarIconifyJButton")) {animatedWindowIconJButton.iconifyComponent(this);} else if (m.getComponent().getName().equals("titleBarCloseJButton")) {setVisible(false);}}@Overridepublic void mouseReleased(MouseEvent m) {if (m.getComponent().getName().equals("titleBarIconifyJButton")) {System.out.println("Mouse released titleBarIconifyJButton");setVisible(false);animatedWindowIconJButton.animationTimer.start();} else if (m.getComponent().getName().equals("titleBarCloseJButton")) {System.out.println("Mouse released titleBarCloseJButton");setVisible(false);}}class RoundedCornerJPanel extends JPanel {String pLeftOrRightCorner;Color color;Color translucentTitleBarColorAlpha85;Color translucentTitleBarColorAlpha128;Color translucentTitleBarColorAlpha170;Color translucentTitleBarEnabledWhiteFadedColorAlpha85;Color translucentTitleBarEnabledWhiteFadedColorAlpha170;Color translucentTitleBarEnabledWhiteFadedColorAlpha210;RoundedCornerJPanel(String leftOrRightCorner, String enabledOrDisabledColor) {pLeftOrRightCorner = leftOrRightCorner;if (enabledOrDisabledColor.equals("ENABLED_COLOR")) {color = titleBarEnabledColor;} else {color = titleBarDisabledColor;}setOpaque(false);setSize(17, 40);setPreferredSize(new Dimension(17, 40));}@Overridepublic void paintComponent(Graphics can) {int x = 0;super.paintComponent(can);translucentTitleBarColorAlpha85 = new Color(titleBarEnabledColor.getRed(), titleBarEnabledColor.getGreen(), titleBarEnabledColor.getBlue(), 85);translucentTitleBarColorAlpha128 = new Color(titleBarEnabledColor.getRed(), titleBarEnabledColor.getGreen(), titleBarEnabledColor.getBlue(), 128);translucentTitleBarColorAlpha170 = new Color(titleBarEnabledColor.getRed(), titleBarEnabledColor.getGreen(), titleBarEnabledColor.getBlue(), 170);translucentTitleBarEnabledWhiteFadedColorAlpha85 = new Color(titleBarEnabledWhiteFadedColor.getRed(), titleBarEnabledWhiteFadedColor.getGreen(), titleBarEnabledWhiteFadedColor.getBlue(), 85);translucentTitleBarEnabledWhiteFadedColorAlpha170 = new Color(titleBarEnabledWhiteFadedColor.getRed(), titleBarEnabledWhiteFadedColor.getGreen(), titleBarEnabledWhiteFadedColor.getBlue(), 170);translucentTitleBarEnabledWhiteFadedColorAlpha210 = new Color(titleBarEnabledWhiteFadedColor.getRed(), titleBarEnabledWhiteFadedColor.getGreen(), titleBarEnabledWhiteFadedColor.getBlue(), 210);int[] yPixelForXOf = new int[15];yPixelForXOf[0] = 9;yPixelForXOf[1] = 7;yPixelForXOf[2] = 6;yPixelForXOf[3] = 5;yPixelForXOf[4] = 4;yPixelForXOf[5] = 3;yPixelForXOf[6] = 3;yPixelForXOf[7] = 2;yPixelForXOf[8] = 2;yPixelForXOf[9] = 2;yPixelForXOf[10] = 2;yPixelForXOf[11] = 2;yPixelForXOf[12] = 2;yPixelForXOf[13] = 2;yPixelForXOf[14] = 2;int ind;can.setColor(color);ind = 0;while (ind < yPixelForXOf.length) {can.drawLine(f(pLeftOrRightCorner, ind + 2), yPixelForXOf[ind], f(pLeftOrRightCorner, ind + 2), 40);ind++;}can.setColor(translucentTitleBarColorAlpha128);can.fillRect(f(pLeftOrRightCorner, 3), 6, 1, 1);can.fillRect(f(pLeftOrRightCorner, 4), 5, 1, 1);can.fillRect(f(pLeftOrRightCorner, 5), 4, 1, 1);can.fillRect(f(pLeftOrRightCorner, 6), 3, 1, 1);can.setColor(translucentTitleBarColorAlpha85);can.fillRect(f(pLeftOrRightCorner, 2), 7, 1, 1);can.setColor(translucentTitleBarColorAlpha170);can.fillRect(f(pLeftOrRightCorner, 2), 8, 1, 1);can.setColor(new Color(255, 255, 255, 85));can.fillRect(f(pLeftOrRightCorner, 0), 15, 1, 1);can.setColor(new Color(255, 255, 255, 170));can.fillRect(f(pLeftOrRightCorner, 0), 16, 1, 1);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha85);can.fillRect(f(pLeftOrRightCorner, 1), 10, 1, 1);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha170);can.fillRect(f(pLeftOrRightCorner, 1), 11, 1, 1);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha85);can.fillRect(f(pLeftOrRightCorner, 7), 2, 1, 1);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha170);can.fillRect(f(pLeftOrRightCorner, 8), 2, 1, 1);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha210);can.fillRect(f(pLeftOrRightCorner, 9), 2, 1, 1);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha85);can.setColor(translucentTitleBarEnabledWhiteFadedColorAlpha170);can.fillRect(f(pLeftOrRightCorner, 7), 3, 1, 1);can.setColor(Color.WHITE);can.drawLine(f(pLeftOrRightCorner, 0), 17, f(pLeftOrRightCorner, 0), 40);can.setColor(titleBarEnabledWhiteFadedColor);can.drawLine(f(pLeftOrRightCorner, 12), 1, f(pLeftOrRightCorner, 16), 1);can.drawLine(f(pLeftOrRightCorner, 1), 12, f(pLeftOrRightCorner, 1), 40);}int f(String ppLeftOrRightCorner, int x) {if (ppLeftOrRightCorner.equals("RIGHT")) {x = 16 - x;}return x;}}class AnimatedIconButton extends JButton {double windowShear = 0;double notePadYShear = 0.0;int iconImageWidth;int iconImageHeight;int frameInd;int moveX;int moveY;int animatedWindowIconHomePositionX;int animatedWindowIconHomePositionY;int pWindowGetX;int pWindowGetY;int pWindowGetWidth;int pWindowGetHeight;ActionListener animationListener = new ActionListener() {public void actionPerformed(ActionEvent evt) {moveX = (animatedWindowIconHomePositionX + moveX) / 2;moveY = (animatedWindowIconHomePositionY + moveY) / 2;if (frameInd == 1) {setVisible(true);xScale = 2.5;yScale = 2.5;} else if (frameInd == 2) {xScale = 1.7;yScale = 1.7;} else if (frameInd == 3) {xScale = 1.4;yScale = 1.4;} else if (frameInd == 4) {xScale = 1.2;yScale = 1.2;} else if (frameInd == 5) {xScale = 1.0;yScale = 1.0;} else if (frameInd == 6) {xScale = 0.85;yScale = 0.85;} else if (frameInd == 7) {xScale = 0.7;yScale = 0.7;} else if (frameInd == 8) {xScale = 0.85;yScale = 0.85;} else if (frameInd == 9) {xScale = 1.0;yScale = 1.0;}setBounds(moveX, moveY, (int) (iconImageWidth * xScale), (int) (iconImageHeight * yScale));validate();if (frameInd > 3) {animationTimer.stop();}frameInd++;}};Timer animationTimer = new Timer((int) (1000 / Device.frameRate), animationListener);double xScale = 1;double yScale = 1;GridBagConstraints gridBagConstraints = new GridBagConstraints();ImageIcon imageIcon = new ImageIcon();AnimatedIconButton() {setLayout(new GridBagLayout());setBorder(null);setContentAreaFilled(false);setRolloverEnabled(false);setBorderPainted(false);gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;gridBagConstraints.weightx = 1;gridBagConstraints.weighty = 1;add(new JLabel(imageIcon), gridBagConstraints);animationTimer.setInitialDelay(0);}public void iconifyComponent(Component component) {iconImageWidth = (int) (component.getWidth() / 5.1);iconImageHeight = (int) (component.getHeight() / 5.1);frameInd = 1;xScale = 1;yScale = 1;int yTranslation = 0;if (windowShear < 0) {yTranslation = (int) (-windowShear * component.getWidth());}BufferedImage bufferedImage = new BufferedImage(component.getWidth(), component.getHeight() + yTranslation, BufferedImage.TYPE_INT_ARGB);Graphics2D g2d = bufferedImage.createGraphics();component.paint(g2d.create(0, yTranslation, component.getWidth(), component.getHeight()));imageIcon.setImage(bufferedImage.getScaledInstance(iconImageWidth, iconImageHeight, bufferedImage.SCALE_SMOOTH));moveX = component.getX() + component.getWidth() / 2 - iconImageWidth / 2;moveY = component.getY() + component.getHeight() / 2 - iconImageHeight / 2;setSize(iconImageWidth, iconImageHeight);}@Overridepublic void paintComponent(Graphics can) {super.paintComponent(can);}}}// EOF