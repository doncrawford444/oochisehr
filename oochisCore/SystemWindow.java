/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.CardLayout;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Image;import java.awt.Insets;import java.awt.Point;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.image.BufferedImage;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.FileReader;import java.io.IOException;import java.io.OutputStreamWriter;import java.util.Calendar;import java.util.Date;import java.util.Vector;import javax.imageio.ImageIO;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JColorChooser;import javax.swing.JComponent;import javax.swing.JEditorPane;import javax.swing.JFileChooser;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JPasswordField;import javax.swing.JPopupMenu;import javax.swing.JRadioButton;import javax.swing.JScrollBar;import javax.swing.JScrollPane;import javax.swing.JSlider;import javax.swing.JTabbedPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.JToggleButton;import javax.swing.SwingConstants;import javax.swing.Timer;import javax.swing.UIManager;import javax.swing.border.BevelBorder;import javax.swing.border.Border;import javax.swing.border.CompoundBorder;import javax.swing.border.EtchedBorder;import javax.swing.border.LineBorder;import javax.swing.border.MatteBorder;import javax.swing.border.TitledBorder;import javax.swing.filechooser.FileFilter;import javax.swing.plaf.ColorUIResource;public class SystemWindow extends Window implements MouseListener, ActionListener, FocusListener, Cloneable {	Color modifyFieldInactiveColor = new Color(180, 170, 170);	Vector<Vector<Vector<String>>> foundUserIndexesVector;	Color menuBarColor;	JPopupMenu deleteUserJPopupMenu = new JPopupMenu();	JLabel deleteUserPopupMenuJLabel = new JLabel();	JButton deleteUserPopupMenuYesJButton = new JButton(" Yes ");	JButton deleteUserPopupMenuNoJButton = new JButton(" No ");	int pageHeaderPanelHeight = 80;	Dimension systemFrameLocation = new Dimension(10, 10);	static Color reflectBlue = new Color(238, 241, 255);	static Border buttonBorder = null;	static Border panelBorder = null;	static Border paperBorder = new CompoundBorder(new MatteBorder(0, 0, 2, 2, new Color(165, 155, 152)), new MatteBorder(1, 1, 0, 0, reflectBlue));	String elementDatatype = "";	String selectedUserIDForAuthorizations = null;	int relativeItemInd;	static Color outputColor = new Color(150, 75, 150);	String relativeCaretLocation;	boolean itemSpaceSelected = false;	static Dimension templatePageDimension = new Dimension(670, 880);	int defaultHeaderFontSize = 16;	Vector<JPanel> numbersJPanels = new Vector<JPanel>();	int templateMinimumFontSize = 10;	int templateMaximumFontSize = 22;	static int maxFormLines = 32;	Vector<Vector<String>> codeSetRecordPlusHeaderVector;	String chosenTemplateSection = "";	static Color quintessentialThemeColor = new Color(209, 200, 177);	static Color lightQuintessentialThemeColor = new Color(232, 228, 216);	static Border blockBorder = new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new CompoundBorder(new LineBorder(quintessentialThemeColor, 8), new BevelBorder(BevelBorder.LOWERED)));	static Border mainContentPanelBorder = new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new CompoundBorder(new LineBorder(quintessentialThemeColor, 8), new BevelBorder(BevelBorder.LOWERED)));	String componentAndSubcomponentDatatypesAndPositions = "";	String givenMedicalCodeElementIdentifier = "";	JPopupMenu promptForComponentOrSubComponentsPanelJPopupMenu = new JPopupMenu();	static Font systemFont = new Font("Electron", Font.BOLD, 17);	static Font PracticeAssistantAppointmentFont = new Font("Electron", Font.BOLD, 17);	JRadioButton arielSystemFontJRadioButton = new JRadioButton("Ariel");	JRadioButton serifSystemFontJRadioButton = new JRadioButton("Serif");	JRadioButton electronSystemFontJRadioButton = new JRadioButton("Electron");	static Color mainButtonsFontColor = new Color(90, 46, 46);	Vector recentChartID = new Vector();	Vector tabLocation = new Vector();	boolean isWallpaperSelected = false;	String wallpaperScaleType = "";	String pageNumberButtonTalkBack;	static Vector hL7MedicalCodeVector;	JPanel templatePageNumbersJPanel;	JScrollPane templatePageNumberJScrollPane;	int templateSectionNumberEntry = -1;	int templatePageNumberEntry = -1;	boolean previewSectionIsCover = true;	static Color manillaColor = new Color(252, 246, 214);	static Integer chartTemplateChoiceIndice;	int previewGridLine = 1;	int largestSlotWidth;	int maxDataItemsPerLine = 40;	String templateName = null;	String numbers = "0123456789";	String letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";	String lettersAndNumbers = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";	String lettersAndNumbersAndQwertyNumberRowSymbles = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+=-`";	Vector template;	Vector templatePageDataCellConstraintsVector;	Vector templateChartInformation;	Vector templateChartCover;	Vector templateChartDemographics;	Vector templateChartActivities;	Vector templateChartHistory;	Vector templateChartInsurance;	Integer numChartSections;	Vector individualPatientIndex;	Integer numChartCoverForms;	Integer numDemographicsForms;	Integer numActivitiesForms;	Integer numHistoryForms;	Integer numInsuranceForms;	static Color outerPanelColor = quintessentialThemeColor;	Color recessedPanelColor = new Color(239, 239, 239);	Color innerPanelColor = new Color(160, 160, 255);	Color popDownColor = new Color(239, 239, 239);	static Color bileButtonColor = new Color(255, 247, 233);	static Color buttonColor = bileButtonColor;	String fontChoice;	int fontSize;	JLabel appearanceFontSizeJLabel = new JLabel("Enter font size (12 to 22): ");	JLabel appearanceFontTypeJLabel = new JLabel("Desired font type: ");	JLabel appearanceColorJLabel = new JLabel("Window background color: ");	JTextField fontSizeJTextField = new JTextField(3);	int firstChartIDIndex;	int secondChartIDIndex;	int userClick;	JPanel contentCoverJPanel = new JPanel(new GridBagLayout());	JLabel contentPanelCoverJLabel = new JLabel("System Options");	JPanel systemButtonsJPanel = new JPanel(new GridBagLayout());	JPanel systemButtonsBaseJPanel = new JPanel(new GridBagLayout());	JTextField authorizationsSelectedUserIDJTextField = new JTextField(14);	JTextField authorizationsSelectedChartIDJTextField = new JTextField(14);	String selectedSingleChartID;	int selectedChartIDIndex;	String firstSelectedChartID;	String secondSelectedChartID;	String singleSelectedChartID;	Vector newUserDataStruct;	JPanel addUserJPanel = new JPanel(new GridBagLayout());	JPanel addNewUserPanelBaseJPanel = new JPanel(new GridBagLayout());	JPanel addNewUserPanelButtonsJPanel = new JPanel(new GridBagLayout());	JLabel addNewUserPanelEnterNewUserJLabel = new JLabel("Enter new user:");	JLabel addNewUserPanelUserIDJLabel = new JLabel("New userID: ");	JLabel addNewUserPanelPasswordJLabel = new JLabel("New password: ");	JLabel addNewUserPanelReEnterPasswordJLabel = new JLabel("Re-enter password: ");	JToggleButton addNewUserPanelShowPasswordJToggleButton = new JToggleButton("Show password");	JLabel addNewUserPanelFacilityJLabel = new JLabel("Facility: ");	JLabel addNewUserPanelPrefixJLabel = new JLabel("Prefix: ");	JLabel addNewUserPanelFirstNameJLabel = new JLabel("First name: ");	JLabel addNewUserPanelMiddleNameJLabel = new JLabel("Middle name: ");	JLabel addNewUserPanelLastNameJLabel = new JLabel("Last name: ");	JLabel addNewUserPanelSuffixJLabel = new JLabel("Suffix: ");	JLabel addNewUserPanelDegreeJLabel = new JLabel("Degree: ");	JButton addNewUserPanelSaveJButton = new JButton(" Save ");	JButton addNewUserPanelClearJButton = new JButton(" Clear ");	JTextField addNewUserPanelEnterUserIDEntryJTextField = new JTextField(12);	JPasswordField addNewUserPanelEnterPasswordEntryJPasswordField = new JPasswordField(12);	JPasswordField addNewUserPanelReEnterPasswordEntryJPasswordField = new JPasswordField(12);	JTextField addNewUserPanelFacilityEntryJTextField = new JTextField(12);	JTextField addNewUserPanelPrefixEntryJTextField = new JTextField(12);	JTextField addNewUserPanelFirstNameEntryJTextField = new JTextField(12);	JTextField addNewUserPanelMiddleNameEntryJTextField = new JTextField(12);	JTextField addNewUserPanelLastNameEntryJTextField = new JTextField(12);	JTextField addNewUserPanelSuffixEntryJTextField = new JTextField(12);	JTextField addNewUserPanelDegreeEntryJTextField = new JTextField(12);	JButton setAuthorizationsForANewUserButton = new JButton("setAuthorizationsForANewUserButton");	JPanel authorizationsJPanel = new JPanel(new GridBagLayout());	JPanel authorizationTopJPanel = new JPanel(new GridBagLayout());	JLabel authorizationsSelectedUserIDJLabel = new JLabel("Authorize by userID: ");	JLabel authorizationsSelectedChartIDJLabel = new JLabel("Authorize by chartID(s): ");	JPanel authorizationInputSpecifiedChartsJPanel = new JPanel(new GridBagLayout());	JLabel authorizationInputSpecifiedChartsJLabel = new JLabel("Authorizations apply to: ");	JToggleButton authorizationInputAuthorizationsApplyToAllChartsJToggleButton = new JToggleButton(" all charts ");	JToggleButton authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton = new JToggleButton(" specified charts only ");	JPanel authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesJPanel = new JPanel(new GridBagLayout());	JScrollPane authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesJScrollPane = new JScrollPane(authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesJPanel);	JTextField authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyUserIDEntryJTextField = new JTextField(12);	JPanel authorizationInputContentJPanel = new JPanel(new GridBagLayout());	JPanel authorizationInputBlankJPanel = new JPanel(new GridBagLayout());	CardLayout authorizationInputCardLayout = new CardLayout();	JPanel authorizationInputCardedJPanel = new JPanel(authorizationInputCardLayout);	JButton authorizationsOKJButton = new JButton(" OK ");	CardLayout systemCardLayout = new CardLayout();	JPanel cardedMainContentJPanel = new JPanel(systemCardLayout);	static String[] fileNames = new String[21];	JFileChooser wallpaperFileChooser;	Color signoffButtonSelectedColor = new Color(192, 255, 192);	Color signoffButtonDeselectedColor = new Color(255, 192, 192);	JLabel userAuthorizationsSystemSetUpJLabel = new JLabel("System - Set up: ");	JLabel userAuthorizationsSystemUserAccountsJLabel = new JLabel("System - User accounts: ");	JLabel userAuthorizationsSystemAppearanceJLabel = new JLabel("System - Appearance: ");	JLabel userAuthorizationsSystemTemplatesJLabel = new JLabel("System - Templates: ");	JLabel userAuthorizationsChartsDemographicsJLabel = new JLabel("Charts - Demographics: ");	JLabel userAuthorizationsChartsActivitiesJLabel = new JLabel("Charts - Activities: ");	JLabel userAuthorizationsChartsHistoryJLabel = new JLabel("Charts - History: ");	JLabel userAuthorizationsChartsInsuranceJLabel = new JLabel("Charts - Insurance: ");	JLabel userAuthorizationsDecisionSupportJLabel = new JLabel("Decision Support: ");	JLabel userAuthorizationsMessagingJLabel = new JLabel("Messaging: ");	JLabel userAuthorizationsPracticeAssistantBillingJLabel = new JLabel("Practice Assistant - Billing: ");	JLabel userAuthorizationsPracticeAssistantSchedulingJLabel = new JLabel("Practice Assistant - Scheduling: ");	JRadioButton authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUISystemSetUpViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUISystemSetUpManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUISystemAppearanceViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUISystemAppearanceManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUISystemTemplatesViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUISystemTemplatesManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIChartsHistoryViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIChartsHistoryManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIDecisionSupportViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIDecisionSupportManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIMessagingViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIMessagingManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton = new JRadioButton("manage");	JRadioButton authorizationsAddNewUserMUIPracticeAssistantSchedulingViewJRadioButton = new JRadioButton("view only");	JRadioButton authorizationsAddNewUserMUIPracticeAssistantSchedulingManageJRadioButton = new JRadioButton("manage");	String resetType;	JButton resetAuthorizationChangesJButton = new JButton(" Reset ");	JPanel appearanceWallpaperFileChooserJPanel = new JPanel(new GridBagLayout());	JLabel wallpaperPanelHeaderJLabel = new JLabel("Select a wallpaper image:");	JPanel wallpaperButtonsJPanel = new JPanel(new GridBagLayout());	JToggleButton wallpaperCenterOptionJToggleButton = new JToggleButton(" Center ");	JToggleButton wallpaperStretchOptionJToggleButton = new JToggleButton(" Stretch ");	JToggleButton wallpaperZoomOptionJToggleButton = new JToggleButton(" Zoom ");	JButton wallpaperRemoveOptionJButton = new JButton(" Remove ");	JButton saveAuthorizationsJButton = new JButton(" Save ");	JPanel appearanceJPanel = new JPanel(new GridBagLayout());	CardLayout appearanceCardLayout = new CardLayout();	JPanel appearanceCardedJPanel = new JPanel(appearanceCardLayout);	JPanel appearanceColorAndTranslucencyJPanel = new JPanel(new GridBagLayout());	JPanel colorAndTranslucencyButtonsJPanel = new JPanel(new GridBagLayout());	JPanel appearanceColorAndTranslucencyPanelBaseJPanel = new JPanel(new GridBagLayout());	JPanel appearanceTranslucencyJPanel = new JPanel(new GridBagLayout());	JLabel appearanceTranslucencyJLabel = new JLabel("Window background translucency:");	JPanel appearanceColorAndTranslucencyPanelTickLabelsJPanel = new JPanel(new GridBagLayout());	JLabel appearanceTranslucencySolidJLabel = new JLabel("solid -");	JLabel appearanceTranslucencyMediumJLabel = new JLabel("- medium -");	JLabel appearanceTranslucencyVeryLightJLabel = new JLabel("- very light");	JSlider appearanceTranslucencyJSlider = new JSlider();	JButton colorAndTranslucencyOkJButton = new JButton(" Ok ");	JPanel appearanceBorderThemeJPanel = new JPanel(new GridBagLayout());	JPanel appearanceBorderThemePictureJPanel = new JPanel(new GridBagLayout());	JPanel appearanceBorderThemeButtonsJPanel = new JPanel(new GridBagLayout());	JPanel appearanceFontingPanelBaseJPanel = new JPanel(new GridBagLayout());	JPanel appearanceFontingJPanel = new JPanel(new GridBagLayout());	JPanel appearanceFontSizeJPanel = new JPanel(new GridBagLayout());	JPanel appearanceFontTypeJPanel = new JPanel(new GridBagLayout());	JPanel appearanceFontingButtonsJPanel = new JPanel(new GridBagLayout());	JPanel fontExamplesJPanel = new JPanel(new GridBagLayout());	JPanel fontExamplesPanelBaseJPanel = new JPanel(new GridBagLayout());	JLabel fontSize12JLabel = new JLabel("Font size 12  ");	JLabel fontSize13JLabel = new JLabel("  Font size 13");	JLabel fontSize14JLabel = new JLabel("Font size 14  ");	JLabel fontSize15JLabel = new JLabel("  Font size 15");	JLabel fontSize16JLabel = new JLabel("Font size 16  ");	JLabel fontSize17JLabel = new JLabel("  Font size 17");	JLabel fontSize18JLabel = new JLabel("Font size 18  ");	JLabel fontSize19JLabel = new JLabel("  Font size 19");	JLabel fontSize20JLabel = new JLabel("Font size 20  ");	JLabel fontSize21JLabel = new JLabel("  Font size 21");	JLabel fontSize22JLabel = new JLabel("Font size 22  ");	JLabel appearanceFontingTitleJLabel = new JLabel("Font:");	JButton setWallpaperButton = new JButton();	JPanel appearancePanelButtonsJPanel = new JPanel(new GridBagLayout());	JToggleButton appearanceFrameColorAndTranslucencyJToggleButton = new JToggleButton(" Window background ");	JToggleButton appearanceWallpaperJToggleButton = new JToggleButton(" Wallpaper ");	JToggleButton appearanceThemeJToggleButton = new JToggleButton(" Border-theme ");	JToggleButton appearanceFontingJToggleButton = new JToggleButton(" Font ");	JToggleButton slickBorderThemeJToggleButton = new JToggleButton(" Slick ");	JToggleButton slateBorderThemeJToggleButton = new JToggleButton(" Slate ");	JToggleButton roundedBorderThemeJToggleButton = new JToggleButton(" Rounded ");	JToggleButton highContrastBorderThemeJToggleButton = new JToggleButton(" High contrast ");	JToggleButton systemAdministrationJToggleButton = new JToggleButton("System administration");	JToggleButton userAccountsJToggleButton = new JToggleButton("User accounts");	JToggleButton systemAppearanceJToggleButton = new JToggleButton("Appearance");	JToggleButton templatesJToggleButton = new JToggleButton("Templates");	JPanel userAccountsPanelButtonsJPanel = new JPanel(new GridBagLayout());	JPanel modifyUserJPanel = new JPanel(new GridBagLayout());	JPanel modifyUserPanelBaseJPanel = new JPanel(new GridBagLayout());	JPanel modifyUserButtonsJPanel = new JPanel(new GridBagLayout());	JButton modifyUserPanelSaveJButton = new JButton(" Save ");	JButton modifyUserPanelDeleteUserJButton = new JButton(" Delete user ");	JToggleButton userIndexJToggleButton = new JToggleButton(" User index ");	JToggleButton addNewUserJToggleButton = new JToggleButton(" Add user ");	JToggleButton authorizationsJToggleButton = new JToggleButton(" Authorizations ");	JToggleButton modifyUserJToggleButton = new JToggleButton(" Modify user ");	JPanel modifyUserPanelUsersFoundJPanel = new JPanel(new GridBagLayout());	JLabel modifyUserPanelMatchingUsersHeaderJLabel = new JLabel("Matching Users: ");	JLabel foundUserIndexesSizeJLabel = new JLabel("");	JButton nextFoundUserIndexesIndJButton = new JButton(" > ");	JButton backFoundUserIndexesIndJButton = new JButton(" < ");	JLabel modifyUserPanelHeaderJLabel = new JLabel("Modify User ID And Name");	JLabel modifyUserPanelChangeFromJLabel = new JLabel("Change from:");	JLabel modifyUserPanelChangeToJLabel = new JLabel("Change it to:");	JLabel modifyUserPanelUserIDJLabel = new JLabel("Modify userID: ");	JLabel modifyUserPanelEnterPasswordJLabel = new JLabel("Modify password: ");	JLabel modifyUserPanelReEnterPasswordJLabel = new JLabel("Re-enter password: ");	JLabel modifyUserPanelFacilityJLabel = new JLabel("Facility: ");	JLabel modifyUserPanelPrefixJLabel = new JLabel("Prefix: ");	JLabel modifyUserPanelFirstNameJLabel = new JLabel("First name: ");	JLabel modifyUserPanelMiddleNameJLabel = new JLabel("Middle name: ");	JLabel modifyUserPanelLastNameJLabel = new JLabel("Last name: ");	JLabel modifyUserPanelSuffixJLabel = new JLabel("Suffix: ");	JLabel modifyUserPanelDegreeJLabel = new JLabel("Degree: ");	String previousUnmodifiedShortUserID;	JPanel modifyUserPanelUsersEntryButtonsJPanel = new JPanel(new GridBagLayout());	JButton modifyUserPanelEnterEntryOkJButton = new JButton("    Ok    ");	JButton modifyUserPanelEnterEntryClearJButton = new JButton("   Clear   ");	JTextField modifyUserPanelEnterUserIDEntryJTextField = new JTextField(12);	JPasswordField modifyUserPanelEnterPasswordEntryJPasswordField = new JPasswordField(12);	JPasswordField modifyUserPanelReEnterPasswordEntryJPasswordField = new JPasswordField(12);	JTextField modifyUserPanelFacilityEntryJTextField = new JTextField(12);	JTextField modifyUserPanelPrefixEntryJTextField = new JTextField(12);	JTextField modifyUserPanelFirstNameEntryJTextField = new JTextField(12);	JTextField modifyUserPanelMiddleNameEntryJTextField = new JTextField(12);	JTextField modifyUserPanelLastNameEntryJTextField = new JTextField(12);	JTextField modifyUserPanelSuffixEntryJTextField = new JTextField(12);	JTextField modifyUserPanelDegreeEntryJTextField = new JTextField(12);	JTextField modifyUserPanelEnterUserIDFilledJTextField = new JTextField(12);	JPasswordField modifyUserPanelEnterPasswordFilledJPasswordField = new JPasswordField(12);	JPasswordField modifyUserPanelReEnterPasswordFilledJPasswordField = new JPasswordField(12);	JTextField modifyUserPanelFacilityFilledJTextField = new JTextField(12);	JTextField modifyUserPanelPrefixFilledJTextField = new JTextField(12);	JTextField modifyUserPanelFirstNameFilledJTextField = new JTextField(12);	JTextField modifyUserPanelMiddleNameFilledJTextField = new JTextField(12);	JTextField modifyUserPanelLastNameFilledJTextField = new JTextField(12);	JTextField modifyUserPanelSuffixFilledJTextField = new JTextField(12);	JTextField modifyUserPanelDegreeFilledJTextField = new JTextField(12);	boolean viewChartButtonLastSelectedState1 = false;	boolean viewChartButtonLastSelectedState2 = false;	boolean viewChartButtonLastSelectedState3 = false;	boolean viewChartButtonLastSelectedState4 = false;	boolean viewChartButtonLastSelectedState5 = false;	boolean viewChartButtonLastSelectedState6 = false;	boolean viewChartButtonLastSelectedState7 = false;	boolean viewChartButtonLastSelectedState8 = false;	boolean viewChartButtonLastSelectedState9 = false;	boolean viewChartButtonLastSelectedState10 = false;	boolean viewChartButtonLastSelectedState11 = false;	JToggleButton includeItemNumbersJToggleButton = new JToggleButton(" Include item numbers ");	JPanel previewContentJPanel = new JPanel(new GridBagLayout());	JPanel templatePreviewJPanel = new JPanel(new GridBagLayout());	JPanel marginedPaperPanelPlusContents = new JPanel(new GridBagLayout());	CardLayout templatePreviewPaperFormCardLayout = new CardLayout();	public JPanel templatePreviewCardedPaperFormJPanel;	JPanel templateGetDataItemPanelSizeJPanel = new JPanel(new GridBagLayout());	JPanel templatePreviewPageJPanel;	JPanel templatePreviewPageNumbersJPanel;	JPanel templatePageClickableCoverJPanel;	JPanel blinkingCaretJPanel = new JPanel(new GridBagLayout());	JPanel itemPositioningJPanel = new JPanel(new GridBagLayout());	JPanel dataCellItemHighlightJPanel = new JPanel();	ActionListener blinkingCaret = new ActionListener() {		public void actionPerformed(ActionEvent evt) {			if (blinkingCaretJPanel.isOpaque()) {				blinkingCaretJPanel.setOpaque(false);				blinkingCaretJPanel.repaint();			} else {				blinkingCaretJPanel.setOpaque(true);				blinkingCaretJPanel.repaint();			}		}	};	Timer blinkingCaretTimer = new Timer(600, blinkingCaret);	JButton templateAddDataItemJButton = new JButton(" Add ");	JButton templateDeleteDataItemJButton = new JButton(" Delete item ");	JButton templateSaveAsTemplateJButton = new JButton(" Save as ");	JButton templateDeleteDataTemplateJButton = new JButton(" Delete template ");	JLabel templateDeleteDataTemplateJLabel = new JLabel();	JButton templateDeleteDataTemplateYesJButton = new JButton(" Yes ");	JButton templateDeleteDataTemplateNoJButton = new JButton(" No ");	JPopupMenu templateDeleteDataTemplateJPopupMenu = new JPopupMenu();	JTabbedPane templatePreviewJTabbedPane = new JTabbedPane();	public static JTextArea[][][] templateDescriptionDisplayJTextArea;	public static Object[][][] templateDataDisplayObject;	public static JLabel templatePage1PanelSection1JLabel;	JButton templateChooseTemplateJButton = new JButton("    New/open    ");	JTextField templateChooseTemplateJTextField = new JTextField(8);	Border templateItemFormatPanelPanelsMatteBorder = new MatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY);	JPanel templateChooseTemplateJPanel = new JPanel(new GridBagLayout());	JPanel templateItemOrientationJPanel = new JPanel(new GridBagLayout());	JPanel templateJPanel = new JPanel(new GridBagLayout());	JPanel templatePanelTemplateSectionPageAndItemJPanel = new JPanel(new GridBagLayout());	JPanel templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel = new JPanel(new GridBagLayout());	JPanel templateItemFormatJPanel = new JPanel(new GridBagLayout());	JPanel templateHorizontalLine2JPanel = new JPanel(new GridBagLayout());	JButton listCodeSetsJButton = new JButton(" Code set ");	JButton templateAtomicMedicalCodeFieldNamePanelPopupJButton = new JButton(" Medical code ");	JButton templateDatatypePanelJButton = new JButton(" Datatype ");	JPanel templateItemNumberJPanel = new JPanel(new GridBagLayout());	JTextField templateItemNumberJTextField = new JTextField(2);	JButton templateItemNumberJButton = new JButton(" Item number ");	JPanel templateInputCharacterLengthPromptJPanel = new JPanel(new GridBagLayout());	JPanel templateInputCharacterLengthPromptPusherPanel = new JPanel(new GridBagLayout());	JLabel templateInputCharacterLengthPromptJLabel = new JLabel("Expected character-length of input: ");	JTextField templateInputCharacterLengthJTextField = new JTextField(2);	JLabel templateItemOrientationPromptJLabel = new JLabel("Orientation: ");	JPanel templateItemMarginsInPixelsJPanel = new JPanel(new GridBagLayout());	JPanel templateItemMarginsInPixelsPusherJPanel = new JPanel(new GridBagLayout());	JLabel templateItemMarginsInPixelsPromptJLabel = new JLabel("Margins (in pixels): ");	JLabel templateItemMarginsInPixelsLeftJLabel = new JLabel("Left: ");	JLabel templateItemMarginsInPixelsRightJLabel = new JLabel("   Right: ");	JLabel templateItemMarginsInPixelsTopJLabel = new JLabel("   Top: ");	JLabel templateItemMarginsInPixelsBottomJLabel = new JLabel("   Bottom: ");	JTextField templateItemMarginsInPixelsLeftJTextField = new JTextField(2);	JTextField templateItemMarginsInPixelsRightJTextField = new JTextField(2);	JTextField templateItemMarginsInPixelsTopJTextField = new JTextField(2);	JTextField templateItemMarginsInPixelsBottomJTextField = new JTextField(2);	JTextField templateVisibleFieldDescriptionJTextField = new JTextField();	JPanel templateVisibleFieldDescriptionJPanel = new JPanel(new GridBagLayout());	JToggleButton templateMedicalCodeDetailsPanelJToggleButton = new JToggleButton(" Code details ");	JLabel templateVisibleFieldDescriptionPanelJLabel = new JLabel(" Item label (default is the field or subcomponent name plus \": \")");	JPanel codeDetailsJPanel = new JPanel(new GridBagLayout());	JPopupMenu codeDetailsPanelJPopupMenu = new JPopupMenu();	TitledBorder templateMedicalCodeElementNumberPanelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Element:");	TitledBorder templateMedicalCodeDescriptionLabelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Description:");	TitledBorder templateMedicalCodeLengthPanelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Component:");	TitledBorder templateMedicalCodeUsedInPanelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Subcomponent:");	TitledBorder templateMedicalCodeDatatypePanelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Datatype:");	TitledBorder templateMedicalCodeReferenceLabelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Reference:");	TitledBorder templateFieldDescriptorLabelTitledBorder = new TitledBorder(new LineBorder(new Color(128, 128, 255), 2), "Field name:");	JPanel codeDetailsPanelElementNumberJPanel = new JPanel(new GridBagLayout());	JPanel codeDetailsPanelElementDataTypeJPanel = new JPanel(new GridBagLayout());	JPanel codeDetailsPanelComponentNumberAndDatatypeJPanel = new JPanel(new GridBagLayout());	JPanel codeDetailsPanelSubComponentNumberAndDatatypeJPanel = new JPanel(new GridBagLayout());	JLabel templateMedicalCodeElementNumberJLabel = new JLabel(" ");	JLabel templateMedicalCodeDescriptionJLabel = new JLabel(" ");	JLabel codeDetailsPanelSubComponentNumberAndDatatypeJLabel = new JLabel(" ");	JLabel codeDetailsPanelElementDataTypeJLabel = new JLabel(" ");	JLabel templateMedicalCodeSubcomponentJLabel = new JLabel(" ");	JLabel codeDetailsPanelReferenceJLabel = new JLabel(" ");	JLabel codeDetailsPanelAtomicNameJLabel = new JLabel(" ");	JLabel codeDetailsPanelElementNameJLabel = new JLabel(" ");	JPanel templateMedicalCodeSetJPanel = new JPanel(new GridBagLayout());	JButton templateDatatypeTextJButton = new JButton(" Text ");	JButton templateDatatypeImageJButton = new JButton(" Image ");	JButton templateDatatypeAudioJButton = new JButton(" Audio ");	JButton templateDatatypeVideoJButton = new JButton(" Video ");	JPopupMenu templateDatatypeMoreButtonJPopupMenu = new JPopupMenu();	JPanel templateDatatypeJPanel = new JPanel(new GridBagLayout());	JPanel templateAtomicMedicalCodeJPanel = new JPanel(new GridBagLayout());	JPanel templateAtomicMedicalCodeFieldsJPanel = new JPanel(new GridBagLayout());	JPanel templateAtomicMedicalCodeChoicesJPanel = new JPanel(new GridBagLayout());	JButton templateAtomicMedicalCodeOkJButton = new JButton(" Ok ");	JLabel templateAtomicMedicalCodeHeaderJLabel = new JLabel("Search medical codes:");	JTextField templateAtomicMedicalCodeJTextField = new JTextField();	JPopupMenu templateAtomicMedicalCodeFieldsJPopupMenu = new JPopupMenu();	Dimension templateAtomicMedicalCodeFieldsJPopupMenuDimension = new Dimension(600, 600);	JTextField templateMedicalCodeJTextField = new JTextField(8);	JTextField templateCodeSetNameJTextField = new JTextField(8);	JButton templateSectionJButton = new JButton(" Section ");	JTextField templateSectionJTextField = new JTextField(8);	JPanel templateSectionJPanel = new JPanel(new GridBagLayout());	JPopupMenu templateSectionButtonJPopupMenu = new JPopupMenu();	JButton templateChartCoverSectionJButton = new JButton(" Chart cover ");	JButton templateDemographicsSectionJButton = new JButton(" Demographics ");	JButton templateInsuranceSectionJButton = new JButton(" Insurance ");	JLabel templateSectionHeader1JLabel = new JLabel("Activities and History");	JLabel templateSectionHeader2JLabel = new JLabel("sections have items added");	JLabel templateSectionHeader3JLabel = new JLabel("in open charts (not templates).");	JButton templatePageNumberJButton = new JButton(" Page ");	JTextField templatePageNumberJTextField = new JTextField(4);	JPanel templatePageNumberJPanel = new JPanel(new GridBagLayout());	JPopupMenu templatePageNumberButtonJPopupMenu = new JPopupMenu();	JPanel templateItemBoxBorderPromptJPanel = new JPanel(new GridBagLayout());	JLabel templateItemBoxBorderPromptJLabel = new JLabel("Box-border: ");	JPanel templateItemBoxBorderPusherJPanel = new JPanel(new GridBagLayout());	JRadioButton templateItemBoxBorderYesJRadioButton = new JRadioButton("Yes");	JRadioButton templateItemBoxBorderNoJRadioButton = new JRadioButton("No");	JLabel templatePromptToFillBeforeClosingChartJLabel = new JLabel("Prompt user to fill this entry before closing chart: ");	JToggleButton alignWithTopJToggleButton = new JToggleButton(" Align with top ");	JTextField userReadableInternalDatatypeJTextField = new JTextField(8);	JPanel templatePromptToFillBeforeClosingJPanel = new JPanel(new GridBagLayout());	JRadioButton templatePromptToFillBeforeClosingChartYesJRadioButton = new JRadioButton("Yes");	JRadioButton templatePromptToFillBeforeClosingChartNoJRadioButton = new JRadioButton("No");	JRadioButton templateItemLeftToRightOrientationJRadioButton = new JRadioButton("Left-right  ");	JRadioButton templateItemTopToBottomOrientationJRadioButton = new JRadioButton("Top-bottom");	JPanel templateVisibilityToggleButtonsJPanel = new JPanel(new GridBagLayout());	JButton templateOpenButton = new JButton("Open template");	JButton templateSaveButton = new JButton("Save");	JButton templateResetButton = new JButton("Clear");	JButton templateCloseJButton = new JButton("Close");	JPopupMenu templateMedicalCodingSetJPopupMenu = new JPopupMenu();	JPopupMenu templateChooseTemplateJPopupMenu = new JPopupMenu("Template: ");	JPanel templateChooseExistingTemplateJPanel = new JPanel(new GridBagLayout());	JScrollPane templateChooseTemplateJScrollPane = new JScrollPane(templateChooseExistingTemplateJPanel);	JPanel templateChooseTemplatePopupMenuJPanel = new JPanel(new GridBagLayout());	JPanel templatePanelButtonsJPanel = new JPanel(new GridBagLayout());	JPanel templatePanelPusherJPanel = new JPanel(new GridBagLayout());	JPanel templateItemFontSizeJPanel = new JPanel(new GridBagLayout());	JTextField templateItemFontSizeJTextField = new JTextField(2);	JLabel templateItemFontSizeJLabel = new JLabel("Font size: ");	JPanel templateItemFontTypeJPanel = new JPanel(new GridBagLayout());	JLabel templateItemFontTypeJLabel = new JLabel("Font type: ");	JRadioButton templateItemArielFontTypeJRadioButton = new JRadioButton("Ariel  ");	JRadioButton templateItemSerifFontTypeJRadioButton = new JRadioButton("Serif  ");	JRadioButton templateItemElectronFontTypeJRadioButton = new JRadioButton("Electron");	JLabel newInternalTemplateJLabel = new JLabel("New: ");	JLabel templateChooseExistingTemplateJLabel = new JLabel("Existing: ");	JTextField templateChooseNewTemplateJTextField = new JTextField(10);	JButton templateChooseNewTemplateOKJButton = new JButton(" Ok ");	JButton hL7JButton = new JButton(" Health Level 7 (HL-7) ");	JButton cPTJButton = new JButton(" Current Procedural Terminology (CPT) ");	JButton iCDJButton = new JButton(" International Classification of Disease (ICD-10) ");	JButton lOINCJButton = new JButton(" LOINC (LOINC) ");	JButton hCPCSLevel1JButton = new JButton(" Healthcare Common Procedure Coding System Level 1 (HCPCS1)");	JButton hCPCSLevel2JButton = new JButton(" Healthcare Common Procedure Coding System Level 2 (HCPCS2)");	JButton uncodedItemJButton = new JButton(" Unencoded ");	Vector<String> medicalCodeSet = null;	String codeSetIdentifier;	JTextField templateMedicalCodingSchemeJTextField = new JTextField(12);	JTextField templateHL7ElementNumberJTextField = new JTextField(12);	JTextField templateHL7FieldNameJTextField = new JTextField(12);	JTextField templateHL7SequenceNumberJTextField = new JTextField(12);	CardLayout systemDevelopmentPanelCardLayout = new CardLayout();	JPanel systemDevelopmentPanelCardedJPanel = new JPanel(systemDevelopmentPanelCardLayout);	CardLayout systemAdministrationCardedPanelCardLayout = new CardLayout();	JPanel systemAdministrationCardedJPanel = new JPanel(systemAdministrationCardedPanelCardLayout);	JPanel systemDevelopmentBasePanelButtonsJPanel = new JPanel(new GridBagLayout());	JPanel systemAdministrationBaseJPanel = new JPanel(new GridBagLayout());	JPanel systemDevelopmentCardedPanelBaseJPanel = new JPanel(new GridBagLayout());	CardLayout systemAdministrationPanelCardLayout = new CardLayout();	JPanel systemDevelopmentCardedJPanel = new JPanel(systemAdministrationPanelCardLayout);	JPanel systemAdministrationPanelButtonsJPanel = new JPanel(new GridBagLayout());	JPanel uMLDiagramsPanelScrollPaneJPanel = new JPanel(new GridBagLayout());	JScrollPane uMLDiagramsPanelJScrollPane = new JScrollPane(uMLDiagramsPanelScrollPaneJPanel);	JScrollBar uMLDiagramsPanelHorizontalJScrollbar = new JScrollBar(JScrollBar.HORIZONTAL, 40, 40, 40, 100);	JScrollBar uMLDiagramsPanelVerticalJScrollbar = new JScrollBar(JScrollBar.VERTICAL, 40, 40, 40, 100);	JPanel uMLDiagramsJPanel = new JPanel(new GridBagLayout());	JPanel dataDiagramsJPanel = new JPanel(new GridBagLayout());	JPanel eventDiagramsJPanel = new JPanel(new GridBagLayout());	JPanel dataWorkflowDiagramsJPanel = new JPanel(new GridBagLayout());	JToggleButton systemDevelopmentJToggleButton = new JToggleButton(" System development ");	JToggleButton setUpJToggleButton = new JToggleButton(" Set up ");	JButton setUpPanelCreateDesktopIconPromptJButton = new JButton(" Create a Vitality Desktop icon ");	JPanel zoomUMLDiagramTextFieldJPanel = new JPanel(new GridBagLayout());	JTextField zoomUMLDiagramJTextField = new JTextField(4);	JLabel zoomUMLDiagramJLabel = new JLabel("Zoom %: ");	JButton uMLDiagramJButton = new JButton(" UML diagram ");	JButton placeFilesOnDesktopJButton = new JButton(" Place files on desktop ");	JButton placeImageOnDesktopJButton = new JButton(" Place image on desktop ");	JPanel setUpJPanel = new JPanel(new GridBagLayout());	JPanel setUpPanelCreateDesktopIconPromptJPanel = new JPanel(new GridBagLayout());	JPanel setUpPanelBaseJPanel = new JPanel(new GridBagLayout());	JLabel setUpPanelProgramDirectoryURLPromptJLabel = new JLabel("Program directory URL: ");	JTextField setUpPanelProgramDirectoryURLJTextField = new JTextField(20);	JLabel setUpPanelClaimsFileURLPromptJLabel = new JLabel("Claims file URL: ");	JTextField setUpPanelClaimsFileURLJTextField = new JTextField(20);	JLabel setUpPanelBrowserExecutableURLPromptJLabel = new JLabel("Browser executable URL: ");	JTextField setUpPanelBrowserExecutableURLJTextField = new JTextField(20);	JLabel setUpPanelNetworkNodeDirectoryPromptJLabel = new JLabel("Network node directory URL: ");	JTextField setUpPanelNetworkNodeDirectoryURLJTextField = new JTextField(20);	JLabel setUpPanelLoginReAttemptsAllowedBeforeTheSystemAdministratorIsRequiredToLoginJLabel = new JLabel("Login re-attempts before exit: ");	JTextField setUpPanelLoginReAttemptsAllowedBeforeTheSystemAdministratorIsRequiredToLoginJTextField = new JTextField(20);	JLabel setUpPanelSystemAdministratorUserNamePromptJLabel = new JLabel("System administrator's user name: ");	JTextField setUpPanelSystemAdministratorUserNameJTextField = new JTextField(20);	JLabel setUpPanelSystemAdministratorPasswordPromptJLabel = new JLabel("System administrator's password: ");	JTextField setUpPanelSystemAdministratorPasswordJTextField = new JTextField(20);	JPanel userAccountsJPanel = new JPanel(new GridBagLayout());	CardLayout userAccountsCardLayout = new CardLayout();	JPanel userAccountsCardedJPanel = new JPanel(userAccountsCardLayout);	CardLayout userIndexCardLayout = new CardLayout();	JPanel userIndexCardedJPanel = new JPanel(userIndexCardLayout);	JPanel listedUserIndexBaseJPanel = new JPanel(new GridBagLayout());	JPanel fullUserIndexJPanel = new JPanel(new GridBagLayout());	static Dimension paperSizeDimension = new Dimension(669, 866);	Color userIndexHighLightColor = new Color(153, 153, 255);	JScrollPane userIndexJScrollPane = new JScrollPane(userIndexCardedJPanel);	JPanel userIndexScrollPaneBaseJPanel = new JPanel(new GridBagLayout());	JPanel userIndexButtonsJPanel = new JPanel(new GridBagLayout());	JButton userIndexPrintJButton = new JButton(" Print ");	JButton showDeletedUsersJButton = new JButton(" Show deleted users ");	JToggleButton fullUserIndexJToggleButton = new JToggleButton(" Master user index ");	JToggleButton listedUserIndexJToggleButton = new JToggleButton(" User lists ");	JPanel userIndexPanelBaseJPanel = new JPanel(new GridBagLayout());	int[] nextLineGridWidthStop = new int[20];	int templatePrecedingDataItemPanelGridY = 0;	int templatePrecedingDataItemPanelGridX = 0;	int templatePrecedingItemOriginX = 0;	int templatePrecedingItemLineHeight = 1;	int templatePrecedingItemWidth = 0;	boolean dataItemPanelStartedOutTooWide = false;	int precedingDataItemLineHeight;	int precedingDataItemWidth;	int precedingDataItemOriginX;	int minimumHeightInRow;	int maxRowPixelHeight;	int newDataItemPanelHeight;	int newDataItemPanelWidth;	int newDataItemPanelMinimumWidth;	int[][] pageConstraintInts = new int[30][6];	JPanel cursorPanelPusherJPanel = new JPanel();	GridBagConstraints zoomUMLDiagramButtonPanelConstraints = new GridBagConstraints();	GridBagConstraints systemDevelopmentCardedPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints systemDevelopmentBasePanelButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints templatePanelTemplateSectionPageAndItemPanelConstraints = new GridBagConstraints();	GridBagConstraints templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceFontTypePanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceFontSizePanelConstraints = new GridBagConstraints();	GridBagConstraints authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesPanelConstraints = new GridBagConstraints();	GridBagConstraints setUpPanelCreateDesktopIconPromptPanelConstraints = new GridBagConstraints();	GridBagConstraints modifyUserPanelUsersEntryButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints modifyUserPanelUsersFoundPanelConstraints = new GridBagConstraints();	GridBagConstraints templateInputCharacterLengthPromptPanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemBoxBorderPromptPanelConstraints = new GridBagConstraints();	GridBagConstraints deleteUserPopupMenuConstraints = new GridBagConstraints();	GridBagConstraints userIndexScrollPaneBasePanelConstraints = new GridBagConstraints();	GridBagConstraints templateDeleteDataTemplatePopupMenuConstraints = new GridBagConstraints();	GridBagConstraints templateAtomicMedicalCodeChoicesPanelConstraints = new GridBagConstraints();	GridBagConstraints templateAtomicMedicalCodeFieldsPanelConstraints = new GridBagConstraints();	GridBagConstraints authorizationInputContentPanelConstraints = new GridBagConstraints();	GridBagConstraints authorizationInputSpecifiedChartsPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceThemePicturePanelConstraints = new GridBagConstraints();	GridBagConstraints templateChooseTemplatePopupMenuPanelConstraints = new GridBagConstraints();	GridBagConstraints templateChooseExistingTemplatePanelConstraints = new GridBagConstraints();	GridBagConstraints templateVisibilityToggleButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints fullUserIndexPanelConstraints = new GridBagConstraints();	GridBagConstraints listedUserIndexPanelConstraints = new GridBagConstraints();	GridBagConstraints userIndexPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints userIndexButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints authorizationTopPanelConstraints = new GridBagConstraints();	GridBagConstraints authorizationsPanelConstraints = new GridBagConstraints();	GridBagConstraints modifyUserPanelConstraints = new GridBagConstraints();	GridBagConstraints modifyUserPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints modifyUserButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceFontsAndColorBasePanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceColorAndTranslucencyPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceColorAndTranslucencyPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints colorAndTranslucencyButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceBorderThemePanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceFontingPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceFontingPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceFontingButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints wallpaperFileChooserPanelConstraints = new GridBagConstraints();	GridBagConstraints wallpaperButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints authorizationOneConstraints = new GridBagConstraints();	GridBagConstraints addNewUserPanelConstraints = new GridBagConstraints();	GridBagConstraints addUserBasePanelConstraints = new GridBagConstraints();	GridBagConstraints systemButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints systemButtonsBasePanelConstraints = new GridBagConstraints();	GridBagConstraints contentPanelConstraints = new GridBagConstraints();	GridBagConstraints coverPanelConstraints = new GridBagConstraints();	GridBagConstraints templatePanelConstraints = new GridBagConstraints();	GridBagConstraints templatePromptToFillBeforeClosingPanelConstraints = new GridBagConstraints();	GridBagConstraints administrativeJPanelConstraints = new GridBagConstraints();	GridBagConstraints setUpPanelConstraints = new GridBagConstraints();	GridBagConstraints systemAdministrationBasePanelConstraints = new GridBagConstraints();	GridBagConstraints systemAdministrationPanelButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints setUpPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints userAccountsPanelConstraints = new GridBagConstraints();	GridBagConstraints userAccountsPanelButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints appearancePanelButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints appearancePanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceTranslucencyPanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints = new GridBagConstraints();	GridBagConstraints templateFieldNamePanelConstraints = new GridBagConstraints();	GridBagConstraints colorChooserPanelConstraints = new GridBagConstraints();	GridBagConstraints templateMedicalCodeSetPanelConstraints = new GridBagConstraints();	GridBagConstraints templateAtomicMedicalCodePanelConstraints = new GridBagConstraints();	GridBagConstraints templateAtomicMedicalCodeMenuItemPanelConstraints = new GridBagConstraints();	GridBagConstraints codeDetailsPanelConstraints = new GridBagConstraints();	GridBagConstraints templateDatatypePanelConstraints = new GridBagConstraints();	GridBagConstraints templatePreviewItemAnchorConstraints = new GridBagConstraints();	GridBagConstraints templatePreviewPanelConstraints = new GridBagConstraints();	GridBagConstraints templateSectionNumberButtonPopupMenuConstraints = new GridBagConstraints();	GridBagConstraints contentPaneConstraints = new GridBagConstraints();	GridBagConstraints templateMedicalCodingSchemePopupMenuConstraints = new GridBagConstraints();	GridBagConstraints templateVisibleFieldDescriptionPanelConstraints = new GridBagConstraints();	GridBagConstraints colorChooserBasePanelConstraints = new GridBagConstraints();	GridBagConstraints appearanceBorderThemeButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints fontExamplesPanelConstraints = new GridBagConstraints();	GridBagConstraints fontExamplesPanelBasePanelConstraints = new GridBagConstraints();	GridBagConstraints promptForComponentOrSubComponentsPanelConstraints = new GridBagConstraints();	GridBagConstraints addNewUserPanelButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints templatePanelButtonsPanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemFontSizePanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemFontTypePanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemFormatPanelConstraints = new GridBagConstraints();	GridBagConstraints templateChooseTemplatePanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemOrientationPanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemNumberPanelConstraints = new GridBagConstraints();	GridBagConstraints templateItemMarginsInPixelsPanelConstraints = new GridBagConstraints();	GridBagConstraints templateSectionPanelConstraints = new GridBagConstraints();	GridBagConstraints templatePageNumberPanelConstraints = new GridBagConstraints();	GridBagConstraints templateDatatypeMoreButtonPopupMenuConstraints = new GridBagConstraints();	GridBagConstraints uMLDiagramsPanelConstraints = new GridBagConstraints();	JColorChooser colorChooser;	JPanel colorChooserJPanel = new JPanel(new GridBagLayout());	JPanel colorChooserBaseJPanel = new JPanel(new GridBagLayout());	Color titledBorderPanelColor = new Color(227, 227, 227);	public SystemWindow() {		setLocation(systemFrameLocation.width, systemFrameLocation.height);		titleBarJLabel.setText("System  -  Oochis EHR");		addTalkbackText("System  -  Oochis EHR", null, false);		fontChoice = fontChoice();		fontSize = fontSize();		fileNames[0] = "Main.java";		fileNames[1] = "Device.java";		fileNames[2] = "Workspace.java";		fileNames[3] = "Access.java";		fileNames[4] = "SystemWindow.java";		fileNames[5] = "ChartingWindow.java";		fileNames[6] = "MessagingWindow.java";		fileNames[7] = "DecisionSupportWindow.java";		fileNames[8] = "PracticeWindow.java";		fileNames[9] = "CostAnalysisGraph.java";		fileNames[10] = "EffectCurveGraphPanel.java";		fileNames[11] = "LifeExpectancy1Panels.java";		fileNames[12] = "LifeExpectancy2Panels.java";		fileNames[13] = "MolecularNetworksPanel.java";		fileNames[14] = "MolecularAssembler.java";		fileNames[15] = "Io.java";		fileNames[16] = "NotePad.java";		fileNames[17] = "AdministratorData.java";		fileNames[18] = "UserData.java";		fileNames[19] = "PatientData.java";		fileNames[20] = "Window.java";		addNewUserPanelEnterUserIDEntryJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		JPanel coverLabelJPanel = new JPanel(new GridBagLayout());		coverPanelConstraints.anchor = GridBagConstraints.CENTER;		coverPanelConstraints.weighty = 1;		coverPanelConstraints.weightx = 1;		coverPanelConstraints.fill = GridBagConstraints.BOTH;		coverPanelConstraints.insets = new Insets(12, 12, 12, 12);		coverLabelJPanel.add(contentPanelCoverJLabel);		coverLabelJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		contentCoverJPanel.setBackground(this.lightQuintessentialThemeColor);		contentCoverJPanel.add(coverLabelJPanel, coverPanelConstraints);		wallpaperFileChooser = new JFileChooser(determineWallpaperDirectory());		wallpaperFileChooser.setControlButtonsAreShown(false);		wallpaperFileChooser.addActionListener(this);		wallpaperFileChooser.setAcceptAllFileFilterUsed(false);		wallpaperFileChooser.setMultiSelectionEnabled(false);		promptForComponentOrSubComponentsPanelJPopupMenu.setBorder(new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(Color.LIGHT_GRAY, 5)), new LineBorder(Color.GRAY)));		itemPositioningJPanel.setOpaque(false);		itemPositioningJPanel.setSize(new Dimension(1, 1));		itemPositioningJPanel.setPreferredSize(new Dimension(1, 1));		dataCellItemHighlightJPanel.setBackground(new Color(128, 128, 255, 62));		blinkingCaretJPanel.setOpaque(false);		blinkingCaretJPanel.setBackground(Color.DARK_GRAY);		blinkingCaretJPanel.setSize(new Dimension(2, 22));		blinkingCaretJPanel.setPreferredSize(new Dimension(2, 22));		FileFilter imageFilter = new FileFilter() {			@Override			public boolean accept(File file) {				if (file.isDirectory()) {					return true;				}				int separator = file.getName().lastIndexOf(".");				String extension = file.getName().substring(separator + 1, file.getName().length());				if (extension != null) {					if (extension.equals("jpeg") || extension.equals("jpg")) {						return true;					} else {						return false;					}				}				return false;			}			@Override			public String getDescription() {				return "Wallpaper must be a jpeg image.";			}		};		wallpaperFileChooser.setFileFilter(imageFilter);		wallpaperStretchOptionJToggleButton.addActionListener(this);		wallpaperZoomOptionJToggleButton.addActionListener(this);		wallpaperCenterOptionJToggleButton.addActionListener(this);		wallpaperRemoveOptionJButton.addActionListener(this);		wallpaperCenterOptionJToggleButton.setActionCommand("wallpaperCenterOptionJToggleButton");		wallpaperStretchOptionJToggleButton.setActionCommand("wallpaperStretchOptionJToggleButton");		wallpaperZoomOptionJToggleButton.setActionCommand("wallpaperZoomOptionJToggleButton");		wallpaperRemoveOptionJButton.setActionCommand("wallpaperRemoveOptionJButton");		wallpaperButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		wallpaperButtonsJPanel.setBackground(quintessentialThemeColor);		wallpaperButtonsPanelConstraints.insets = new Insets(9, 9, 9, 5);		wallpaperButtonsJPanel.add(wallpaperZoomOptionJToggleButton, wallpaperButtonsPanelConstraints);		wallpaperButtonsPanelConstraints.gridx = 1;		wallpaperButtonsPanelConstraints.insets = new Insets(9, 4, 9, 5);		wallpaperButtonsJPanel.add(wallpaperCenterOptionJToggleButton, wallpaperButtonsPanelConstraints);		wallpaperButtonsPanelConstraints.gridx = 2;		wallpaperButtonsJPanel.add(wallpaperStretchOptionJToggleButton, wallpaperButtonsPanelConstraints);		wallpaperButtonsPanelConstraints.gridx = 3;		wallpaperButtonsPanelConstraints.insets = new Insets(9, 4, 9, 9);		wallpaperButtonsJPanel.add(wallpaperRemoveOptionJButton, wallpaperButtonsPanelConstraints);		wallpaperFileChooserPanelConstraints.gridy = 0;		wallpaperFileChooserPanelConstraints.insets = new Insets(0, 0, 0, 0);		wallpaperFileChooserPanelConstraints.weightx = 1;		wallpaperFileChooserPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		appearanceWallpaperFileChooserJPanel.add(wallpaperButtonsJPanel, wallpaperFileChooserPanelConstraints);		wallpaperFileChooserPanelConstraints.gridy = 1;		wallpaperFileChooserPanelConstraints.insets = new Insets(6, 2, 0, 2);		appearanceWallpaperFileChooserJPanel.add(wallpaperPanelHeaderJLabel, wallpaperFileChooserPanelConstraints);		wallpaperFileChooserPanelConstraints.gridy = 2;		wallpaperFileChooserPanelConstraints.gridx = 0;		wallpaperFileChooserPanelConstraints.weighty = 1;		appearanceWallpaperFileChooserJPanel.add(wallpaperFileChooser, wallpaperFileChooserPanelConstraints);		fullUserIndexJPanel.setBackground(lightQuintessentialThemeColor);		fullUserIndexJPanel.setPreferredSize(paperSizeDimension);		listedUserIndexBaseJPanel.setBackground(lightQuintessentialThemeColor);		listedUserIndexBaseJPanel.setPreferredSize(paperSizeDimension);		userIndexPrintJButton.addActionListener(this);		userIndexPrintJButton.setActionCommand("userIndexPrintJButton");		userIndexPrintJButton.setRolloverEnabled(false);		listedUserIndexJToggleButton.addActionListener(this);		listedUserIndexJToggleButton.setActionCommand("listedUserIndexJToggleButton");		listedUserIndexJToggleButton.setRolloverEnabled(false);		fullUserIndexJToggleButton.addActionListener(this);		fullUserIndexJToggleButton.setActionCommand("fullUserIndexJToggleButton");		fullUserIndexJToggleButton.setRolloverEnabled(false);		userIndexPanelBaseJPanel.setOpaque(false);		userIndexButtonsJPanel.setOpaque(false);		userIndexButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		userIndexButtonsPanelConstraints.insets = new Insets(10, 10, 10, 5);		userIndexButtonsJPanel.add(userIndexPrintJButton, userIndexButtonsPanelConstraints);		userIndexButtonsPanelConstraints.gridx = 1;		userIndexButtonsJPanel.add(showDeletedUsersJButton, userIndexButtonsPanelConstraints);		userIndexButtonsPanelConstraints.gridx = 2;		userIndexButtonsJPanel.add(fullUserIndexJToggleButton, userIndexButtonsPanelConstraints);		userIndexButtonsPanelConstraints.gridx = 3;		userIndexButtonsPanelConstraints.insets = new Insets(10, 5, 10, 10);		userIndexButtonsJPanel.add(listedUserIndexJToggleButton, userIndexButtonsPanelConstraints);		userIndexPanelBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		userIndexPanelBaseJPanel.add(userIndexButtonsJPanel, userIndexPanelBasePanelConstraints);		userIndexPanelBasePanelConstraints.gridy = 1;		userIndexPanelBasePanelConstraints.weighty = 1;		userIndexPanelBasePanelConstraints.weightx = 1;		userIndexPanelBasePanelConstraints.fill = GridBagConstraints.BOTH;		userIndexPanelBaseJPanel.add(userIndexJScrollPane, userIndexPanelBasePanelConstraints);		setAuthorizationsForANewUserButton.addActionListener(this);		setAuthorizationsForANewUserButton.setActionCommand("setAuthorizationsForANewUserButton");		addNewUserPanelClearJButton.addActionListener(this);		addNewUserPanelClearJButton.setActionCommand("addNewUserPanelClearJButton");		addNewUserPanelClearJButton.setMnemonic('R');		addNewUserPanelSaveJButton.addActionListener(this);		addNewUserPanelSaveJButton.setActionCommand("addNewUserPanelSaveJButton");		addNewUserPanelSaveJButton.setMnemonic('S');		addNewUserPanelBaseJPanel.setBackground(lightQuintessentialThemeColor);		addUserBasePanelConstraints.weightx = 1;		addUserBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		addUserJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		addUserJPanel.setBackground(quintessentialThemeColor);		addNewUserPanelBaseJPanel.add(addNewUserPanelButtonsJPanel, addUserBasePanelConstraints);		addUserBasePanelConstraints.weighty = 1;		addUserBasePanelConstraints.gridy = 1;		addUserBasePanelConstraints.fill = GridBagConstraints.BOTH;		addUserBasePanelConstraints.insets = new Insets(24, 24, 24, 24);		addNewUserPanelBaseJPanel.add(addUserJPanel, addUserBasePanelConstraints);		addNewUserPanelShowPasswordJToggleButton.addActionListener(this);		addNewUserPanelShowPasswordJToggleButton.setActionCommand("addNewUserPanelShowPasswordJToggleButton");		addNewUserPanelConstraints.gridwidth = 2;		addUserJPanel.add(addNewUserPanelEnterNewUserJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addNewUserPanelConstraints.insets = new Insets(3, 3, 3, 3);		addNewUserPanelConstraints.gridwidth = 1;		addUserJPanel.add(addNewUserPanelUserIDJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelEnterUserIDEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 3;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelPasswordJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelEnterPasswordEntryJPasswordField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 4;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelReEnterPasswordJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelReEnterPasswordEntryJPasswordField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 5;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelFacilityJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelFacilityEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 6;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelPrefixJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelPrefixEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 7;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelFirstNameJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelFirstNameEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 9;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelMiddleNameJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelMiddleNameEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 10;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelLastNameJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelLastNameEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 11;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelSuffixJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelSuffixEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridy = 12;		addNewUserPanelConstraints.gridx = 0;		addNewUserPanelConstraints.anchor = GridBagConstraints.EAST;		addUserJPanel.add(addNewUserPanelDegreeJLabel, addNewUserPanelConstraints);		addNewUserPanelConstraints.gridx = 1;		addNewUserPanelConstraints.anchor = GridBagConstraints.WEST;		addUserJPanel.add(addNewUserPanelDegreeEntryJTextField, addNewUserPanelConstraints);		addNewUserPanelButtonsJPanel.setBackground(quintessentialThemeColor);		addNewUserPanelButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		addNewUserPanelButtonsPanelConstraints.insets = new Insets(10, 10, 10, 5);		addNewUserPanelButtonsJPanel.add(addNewUserPanelClearJButton, addNewUserPanelButtonsPanelConstraints);		addNewUserPanelButtonsPanelConstraints.insets = new Insets(10, 5, 10, 10);		addNewUserPanelButtonsPanelConstraints.gridx = 1;		addNewUserPanelButtonsJPanel.add(addNewUserPanelSaveJButton, addNewUserPanelButtonsPanelConstraints);		modifyUserJToggleButton.setMnemonic('M');		modifyUserJToggleButton.setActionCommand("modifyUserJToggleButton");		modifyUserJToggleButton.addActionListener(this);		userIndexJToggleButton.setMnemonic('U');		userIndexJToggleButton.addActionListener(this);		userIndexJToggleButton.setActionCommand("userIndexJToggleButton");		addNewUserJToggleButton.setMnemonic('N');		addNewUserJToggleButton.addActionListener(this);		addNewUserJToggleButton.setActionCommand("addNewUserJToggleButton");		authorizationsJToggleButton.addActionListener(this);		authorizationsJToggleButton.setActionCommand("authorizationsJButton");		authorizationsJToggleButton.setMnemonic('A');		userAccountsCardedJPanel.add(addNewUserPanelBaseJPanel, "addNewUserPanelBaseJPanel");		userAccountsCardedJPanel.add(modifyUserPanelBaseJPanel, "modifyUserPanelBaseJPanel");		userAccountsCardedJPanel.add(authorizationsJPanel, "authorizationsJPanel");		userAccountsCardedJPanel.add(userIndexPanelBaseJPanel, "userIndexPanelBaseJPanel");		userIndexCardedJPanel.add(fullUserIndexJPanel, "fullUserIndexJPanel");		userIndexCardedJPanel.add(listedUserIndexBaseJPanel, "listedUserIndexJPanel");		userAccountsPanelButtonsJPanel.setBackground(quintessentialThemeColor);		userAccountsPanelButtonsPanelConstraints.fill = GridBagConstraints.BOTH;		userAccountsPanelButtonsPanelConstraints.weightx = 1;		userAccountsPanelButtonsPanelConstraints.insets = new Insets(6, 6, 6, 6);		userAccountsPanelButtonsJPanel.add(userIndexJToggleButton, userAccountsPanelButtonsPanelConstraints);		userAccountsPanelButtonsPanelConstraints.insets = new Insets(6, 0, 6, 6);		userAccountsPanelButtonsPanelConstraints.gridx = 1;		userAccountsPanelButtonsJPanel.add(addNewUserJToggleButton, userAccountsPanelButtonsPanelConstraints);		userAccountsPanelButtonsPanelConstraints.gridx = 2;		userAccountsPanelButtonsJPanel.add(modifyUserJToggleButton, userAccountsPanelButtonsPanelConstraints);		userAccountsPanelButtonsPanelConstraints.gridx = 3;		userAccountsPanelButtonsJPanel.add(authorizationsJToggleButton, userAccountsPanelButtonsPanelConstraints);		userAccountsPanelButtonsJPanel.setBackground(quintessentialThemeColor);		userAccountsPanelConstraints.insets = new Insets(6, 6, 6, 6);		userAccountsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		userAccountsPanelConstraints.weighty = 0;		userAccountsPanelConstraints.weightx = 1;		userAccountsPanelConstraints.insets = new Insets(0, 0, 4, 0);		userAccountsJPanel.add(userAccountsPanelButtonsJPanel, userAccountsPanelConstraints);		userAccountsPanelConstraints.fill = GridBagConstraints.BOTH;		userAccountsPanelConstraints.gridy = 1;		userAccountsPanelConstraints.weighty = 1;		userAccountsPanelConstraints.insets = new Insets(0, 0, 0, 0);		userAccountsJPanel.add(userAccountsCardedJPanel, userAccountsPanelConstraints);		resetAuthorizationChangesJButton.addActionListener(this);		resetAuthorizationChangesJButton.setActionCommand("resetAuthorizationChangesButton");		saveAuthorizationsJButton.addActionListener(this);		saveAuthorizationsJButton.setActionCommand("saveAuthorizationsJButton");		authorizationsOKJButton.addActionListener(this);		authorizationsOKJButton.setActionCommand("authorizationsOKJButton");		authorizationsSelectedUserIDJTextField.addActionListener(this);		authorizationsSelectedUserIDJTextField.setActionCommand("authorizationsSelectedUserIDJTextField");		authorizationsSelectedChartIDJTextField.setName("selectedChartIDField");		authorizationTopJPanel.setBackground(quintessentialThemeColor);		authorizationTopJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		authorizationsAddNewUserMUISystemSetUpViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemSetUpViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemSetUpViewJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemSetUpViewJRadioButton");		authorizationsAddNewUserMUISystemSetUpManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemSetUpManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemSetUpManageJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemSetUpManageJRadioButton");		authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton");		authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton");		authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemAppearanceViewJRadioButton");		authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemAppearanceManageJRadioButton");		authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemTemplatesViewJRadioButton");		authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.setActionCommand("authorizationsAddNewUserMUISystemTemplatesManageJRadioButton");		authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton");		authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton");		authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton");		authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton");		authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsHistoryViewJRadioButton");		authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsHistoryManageJRadioButton");		authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton");		authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton");		authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIDecisionSupportViewJRadioButton");		authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIDecisionSupportManageJRadioButton");		authorizationsAddNewUserMUIMessagingViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIMessagingViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIMessagingViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIMessagingViewJRadioButton");		authorizationsAddNewUserMUIMessagingManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIMessagingManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIMessagingManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIMessagingManageJRadioButton");		authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton");		authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton");		authorizationsAddNewUserMUIPracticeAssistantSchedulingViewJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIPracticeAssistantSchedulingViewJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIPracticeAssistantSchedulingViewJRadioButton.setActionCommand("authorizationsAddNewUserMUIPracticeAssistantSchedulingViewJRadioButton");		authorizationsAddNewUserMUIPracticeAssistantSchedulingManageJRadioButton.setOpaque(false);		authorizationsAddNewUserMUIPracticeAssistantSchedulingManageJRadioButton.addActionListener(this);		authorizationsAddNewUserMUIPracticeAssistantSchedulingManageJRadioButton.setActionCommand("authorizationsAddNewUserMUIPracticeAssistantSchedulingManageJRadioButton");		authorizationTopPanelConstraints.insets = new Insets(9, 9, 9, 0);		authorizationTopJPanel.add(authorizationsSelectedUserIDJLabel, authorizationTopPanelConstraints);		authorizationTopPanelConstraints.gridx = 1;		authorizationTopPanelConstraints.insets = new Insets(9, 0, 9, 0);		authorizationTopJPanel.add(authorizationsSelectedUserIDJTextField, authorizationTopPanelConstraints);		authorizationTopPanelConstraints.gridx = 2;		authorizationTopPanelConstraints.insets = new Insets(9, 9, 9, 9);		authorizationTopJPanel.add(authorizationsOKJButton, authorizationTopPanelConstraints);		authorizationTopPanelConstraints.gridx = 3;		authorizationTopPanelConstraints.insets = new Insets(9, 9, 9, 4);		authorizationTopJPanel.add(resetAuthorizationChangesJButton, authorizationTopPanelConstraints);		authorizationTopPanelConstraints.gridx = 4;		authorizationTopPanelConstraints.insets = new Insets(9, 4, 9, 9);		authorizationTopJPanel.add(saveAuthorizationsJButton, authorizationTopPanelConstraints);		authorizationInputAuthorizationsApplyToAllChartsJToggleButton.setActionCommand("authorizationInputAuthorizationsApplyToAllChartsJToggleButton");		authorizationInputAuthorizationsApplyToAllChartsJToggleButton.addActionListener(this);		authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton.setActionCommand("authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton");		authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton.addActionListener(this);		authorizationInputSpecifiedChartsPanelConstraints.gridwidth = 2;		authorizationInputSpecifiedChartsJPanel.add(authorizationInputSpecifiedChartsJLabel, authorizationInputSpecifiedChartsPanelConstraints);		authorizationInputSpecifiedChartsPanelConstraints.gridy = 1;		authorizationInputSpecifiedChartsPanelConstraints.gridwidth = 1;		authorizationInputSpecifiedChartsJPanel.add(authorizationInputAuthorizationsApplyToAllChartsJToggleButton, authorizationInputSpecifiedChartsPanelConstraints);		authorizationInputSpecifiedChartsPanelConstraints.gridx = 1;		authorizationInputSpecifiedChartsJPanel.add(authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton, authorizationInputSpecifiedChartsPanelConstraints);		authorizationInputSpecifiedChartsPanelConstraints.gridwidth = 2;		authorizationInputSpecifiedChartsPanelConstraints.gridy = 2;		authorizationInputSpecifiedChartsPanelConstraints.gridx = 0;		authorizationInputSpecifiedChartsJPanel.add(authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesJScrollPane, authorizationInputSpecifiedChartsPanelConstraints);		authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesJPanel.add(authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyUserIDEntryJTextField, authorizationInputAuthorizationsApplyToSpecifiedChartsIDEntriesPanelConstraints);		authorizationInputSpecifiedChartsJPanel.setOpaque(false);		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentPanelConstraints.gridwidth = 3;		authorizationInputContentJPanel.add(authorizationInputSpecifiedChartsJPanel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 1;		authorizationInputContentPanelConstraints.gridwidth = 1;		authorizationInputContentJPanel.add(userAuthorizationsSystemSetUpJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemSetUpViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemSetUpManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 2;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsSystemUserAccountsJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 3;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsSystemAppearanceJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemAppearanceViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemAppearanceManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 4;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsSystemTemplatesJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemTemplatesViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUISystemTemplatesManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 5;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsChartsDemographicsJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 6;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsChartsActivitiesJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 7;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsChartsHistoryJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsHistoryViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsHistoryManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 8;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsChartsInsuranceJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 9;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsMessagingJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIMessagingViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIMessagingManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 10;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsDecisionSupportJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIDecisionSupportViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIDecisionSupportManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 11;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsPracticeAssistantBillingJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridy = 12;		authorizationInputContentPanelConstraints.gridx = 0;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.EAST;		authorizationInputContentJPanel.add(userAuthorizationsPracticeAssistantSchedulingJLabel, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 1;		authorizationInputContentPanelConstraints.anchor = GridBagConstraints.WEST;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIPracticeAssistantSchedulingViewJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputContentPanelConstraints.gridx = 2;		authorizationInputContentJPanel.add(authorizationsAddNewUserMUIPracticeAssistantSchedulingManageJRadioButton, authorizationInputContentPanelConstraints);		authorizationInputBlankJPanel.setBackground(quintessentialThemeColor);		authorizationInputCardedJPanel.add(authorizationInputBlankJPanel, "authorizationInputBlankJPanel");		authorizationInputCardedJPanel.add(authorizationInputContentJPanel, "authorizationInputContentPanel");		authorizationsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		authorizationsPanelConstraints.weightx = 1;		authorizationsPanelConstraints.gridy = 1;		authorizationsJPanel.add(authorizationTopJPanel, authorizationsPanelConstraints);		authorizationsPanelConstraints.gridy = 2;		authorizationsPanelConstraints.weightx = 0;		authorizationsPanelConstraints.weighty = 1;		authorizationInputContentJPanel.setBackground(lightQuintessentialThemeColor);		authorizationsJPanel.add(authorizationInputCardedJPanel, authorizationsPanelConstraints);		modifyUserPanelBaseJPanel.setBackground(lightQuintessentialThemeColor);		modifyUserPanelBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		modifyUserPanelBasePanelConstraints.weighty = 0;		modifyUserPanelBasePanelConstraints.weightx = 1;		modifyUserPanelBasePanelConstraints.insets = new Insets(0, 0, 0, 0);		modifyUserPanelBaseJPanel.add(modifyUserButtonsJPanel, modifyUserPanelBasePanelConstraints);		modifyUserPanelBasePanelConstraints.gridy = 1;		modifyUserPanelBasePanelConstraints.weighty = 1;		modifyUserPanelBasePanelConstraints.fill = GridBagConstraints.BOTH;		modifyUserPanelBasePanelConstraints.insets = new Insets(12, 12, 12, 12);		modifyUserPanelBaseJPanel.add(modifyUserJPanel, modifyUserPanelBasePanelConstraints);		modifyUserJPanel.setOpaque(false);		modifyUserPanelSaveJButton.addActionListener(this);		modifyUserPanelSaveJButton.setActionCommand("modifyUserPanelSaveJButton");		modifyUserPanelDeleteUserJButton.addActionListener(this);		modifyUserPanelDeleteUserJButton.setActionCommand("modifyUserPanelDeleteUserJButton");		nextFoundUserIndexesIndJButton.addActionListener(this);		nextFoundUserIndexesIndJButton.setActionCommand("nextFoundUserIndexesIndJButton");		backFoundUserIndexesIndJButton.addActionListener(this);		backFoundUserIndexesIndJButton.setActionCommand("backFoundUserIndexesIndJButton");		foundUserIndexesSizeJLabel.setHorizontalTextPosition(JLabel.CENTER);		foundUserIndexesSizeJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 20));		foundUserIndexesSizeJLabel.setBackground(Color.WHITE);		foundUserIndexesSizeJLabel.setOpaque(true);		foundUserIndexesSizeJLabel.setBorder(new LineBorder(Color.GRAY, 1));		modifyUserPanelUsersFoundJPanel.setOpaque(false);		foundUserIndexesSizeJLabel.setPreferredSize(new Dimension(60, 60));		modifyUserPanelUsersFoundPanelConstraints.gridy = 0;		modifyUserPanelUsersFoundPanelConstraints.gridx = 0;		modifyUserPanelUsersFoundPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserPanelUsersFoundPanelConstraints.weighty = 1;		modifyUserPanelUsersFoundPanelConstraints.fill = GridBagConstraints.BOTH;		modifyUserPanelUsersFoundJPanel.add(backFoundUserIndexesIndJButton, modifyUserPanelUsersFoundPanelConstraints);		modifyUserPanelUsersFoundPanelConstraints.gridx = 1;		modifyUserPanelUsersFoundPanelConstraints.anchor = GridBagConstraints.CENTER;		modifyUserPanelUsersFoundPanelConstraints.weightx = 1;		modifyUserPanelUsersFoundJPanel.add(foundUserIndexesSizeJLabel, modifyUserPanelUsersFoundPanelConstraints);		modifyUserPanelUsersFoundPanelConstraints.gridx = 2;		modifyUserPanelUsersFoundPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserPanelUsersFoundPanelConstraints.fill = GridBagConstraints.NONE;		modifyUserPanelUsersFoundPanelConstraints.weightx = 0;		modifyUserPanelUsersFoundJPanel.add(nextFoundUserIndexesIndJButton, modifyUserPanelUsersFoundPanelConstraints);		modifyUserPanelHeaderJLabel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));		setUserAccountsField(addNewUserPanelEnterUserIDEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelEnterPasswordEntryJPasswordField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelReEnterPasswordEntryJPasswordField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelFirstNameEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelMiddleNameEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelLastNameEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelSuffixEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelFacilityEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelPrefixEntryJTextField, "addNewUserEntryField");		setUserAccountsField(addNewUserPanelDegreeEntryJTextField, "addNewUserEntryField");		setUserAccountsField(modifyUserPanelEnterUserIDEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelEnterPasswordEntryJPasswordField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelReEnterPasswordEntryJPasswordField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelFirstNameEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelMiddleNameEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelLastNameEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelSuffixEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelFacilityEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelPrefixEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelDegreeEntryJTextField, "modifyUserEntryField");		setUserAccountsField(modifyUserPanelEnterUserIDFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelEnterPasswordFilledJPasswordField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelReEnterPasswordFilledJPasswordField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelFirstNameFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelMiddleNameFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelLastNameFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelSuffixFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelFacilityFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelPrefixFilledJTextField, "modifyUserFilledField");		setUserAccountsField(modifyUserPanelDegreeFilledJTextField, "modifyUserFilledField");		modifyUserPanelEnterEntryClearJButton.addActionListener(this);		modifyUserPanelEnterEntryClearJButton.setActionCommand("modifyUserPanelEnterEntryClearJButton");		modifyUserPanelEnterEntryOkJButton.addActionListener(this);		modifyUserPanelEnterEntryOkJButton.setActionCommand("modifyUserPanelEnterEntryOkJButton");		modifyUserPanelEnterPasswordFilledJPasswordField.setEchoChar((char) 0);		modifyUserPanelReEnterPasswordFilledJPasswordField.setEchoChar((char) 0);		modifyUserPanelConstraints.gridy = 0;		modifyUserPanelConstraints.gridwidth = 3;		modifyUserPanelConstraints.weightx = 1;		modifyUserPanelConstraints.insets = new Insets(0, 0, 20, 0);		modifyUserJPanel.add(modifyUserPanelHeaderJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 1;		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.weightx = 0;		modifyUserPanelConstraints.gridwidth = 1;		modifyUserPanelConstraints.insets = new Insets(0, 0, 0, 0);		modifyUserJPanel.add(modifyUserPanelMatchingUsersHeaderJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 2;		modifyUserJPanel.add(modifyUserPanelUsersFoundJPanel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 3;		modifyUserJPanel.add(modifyUserPanelChangeFromJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelChangeToJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 4;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserPanelConstraints.insets = new Insets(3, 3, 3, 3);		modifyUserJPanel.add(modifyUserPanelUserIDJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelEnterUserIDEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelEnterUserIDFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 5;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelEnterPasswordJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelEnterPasswordEntryJPasswordField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelEnterPasswordFilledJPasswordField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 6;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelReEnterPasswordJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelReEnterPasswordEntryJPasswordField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelReEnterPasswordFilledJPasswordField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 7;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelFacilityJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelFacilityEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelFacilityFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 8;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelPrefixJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelPrefixEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelPrefixFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 9;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelFirstNameJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelFirstNameEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelFirstNameFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 10;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelMiddleNameJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelMiddleNameEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelMiddleNameFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.gridy = 11;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelLastNameJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelLastNameEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelLastNameFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 12;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelSuffixJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelSuffixEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelSuffixFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 13;		modifyUserPanelConstraints.gridx = 0;		modifyUserPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserJPanel.add(modifyUserPanelDegreeJLabel, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 1;		modifyUserPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserJPanel.add(modifyUserPanelDegreeEntryJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridx = 2;		modifyUserJPanel.add(modifyUserPanelDegreeFilledJTextField, modifyUserPanelConstraints);		modifyUserPanelConstraints.gridy = 14;		modifyUserPanelConstraints.gridx = 1;		modifyUserJPanel.add(modifyUserPanelUsersEntryButtonsJPanel, modifyUserPanelConstraints);		modifyUserPanelUsersEntryButtonsJPanel.setOpaque(false);		modifyUserPanelUsersEntryButtonsPanelConstraints.anchor = GridBagConstraints.WEST;		modifyUserPanelUsersEntryButtonsPanelConstraints.insets = new Insets(0, 0, 0, 4);		modifyUserPanelUsersEntryButtonsJPanel.add(modifyUserPanelEnterEntryOkJButton, modifyUserPanelUsersEntryButtonsPanelConstraints);		modifyUserPanelUsersEntryButtonsPanelConstraints.gridx = 1;		modifyUserPanelUsersEntryButtonsPanelConstraints.anchor = GridBagConstraints.EAST;		modifyUserPanelUsersEntryButtonsPanelConstraints.insets = new Insets(0, 4, 0, 0);		modifyUserPanelUsersEntryButtonsJPanel.add(modifyUserPanelEnterEntryClearJButton, modifyUserPanelUsersEntryButtonsPanelConstraints);		modifyUserButtonsJPanel.setBackground(quintessentialThemeColor);		modifyUserButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		modifyUserButtonsPanelConstraints.insets = new Insets(6, 6, 6, 3);		modifyUserButtonsJPanel.add(modifyUserPanelSaveJButton, modifyUserButtonsPanelConstraints);		modifyUserButtonsPanelConstraints.gridx = 1;		modifyUserButtonsPanelConstraints.insets = new Insets(6, 3, 6, 6);		modifyUserButtonsJPanel.add(modifyUserPanelDeleteUserJButton, modifyUserButtonsPanelConstraints);		appearanceThemeJToggleButton.addActionListener(this);		appearanceThemeJToggleButton.setActionCommand("appearanceBorderThemeJToggleButton");		appearanceFrameColorAndTranslucencyJToggleButton.addActionListener(this);		appearanceFrameColorAndTranslucencyJToggleButton.setActionCommand("appearanceColorAndTranslucencyJToggleButton");		appearanceFontingJToggleButton.addActionListener(this);		appearanceFontingJToggleButton.setActionCommand("appearanceFontingJToggleButton");		appearanceWallpaperJToggleButton.addActionListener(this);		appearanceWallpaperJToggleButton.setActionCommand("appearanceWallpaperJToggleButton");		slickBorderThemeJToggleButton.addActionListener(this);		slickBorderThemeJToggleButton.setActionCommand("slickBorderThemeJToggleButton");		slateBorderThemeJToggleButton.addActionListener(this);		slateBorderThemeJToggleButton.setActionCommand("slateBorderThemeJToggleButton");		roundedBorderThemeJToggleButton.addActionListener(this);		roundedBorderThemeJToggleButton.setActionCommand("roundedBorderThemeJToggleButton");		highContrastBorderThemeJToggleButton.setBorder(new LineBorder(Color.BLACK, 4));		highContrastBorderThemeJToggleButton.setBackground(Color.WHITE);		highContrastBorderThemeJToggleButton.setFont(new Font("Electron", Font.BOLD, 20));		highContrastBorderThemeJToggleButton.addActionListener(this);		highContrastBorderThemeJToggleButton.setActionCommand("highContrastThemeJButton");		fontSizeJTextField.addActionListener(this);		appearanceThemePicturePanelConstraints.insets = new Insets(30, 0, 30, 0);		appearanceBorderThemePictureJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		appearanceBorderThemePictureJPanel.setBackground(Color.WHITE);		appearanceBorderThemePictureJPanel.add(new JLabel(new ImageIcon(Device.device.binDir + "images/appearanceThemePic.png")), appearanceThemePicturePanelConstraints);		appearanceBorderThemeButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		appearanceBorderThemeButtonsJPanel.setBackground(quintessentialThemeColor);		appearanceBorderThemeButtonsPanelConstraints.insets = new Insets(9, 9, 9, 5);		appearanceBorderThemeButtonsJPanel.add(slickBorderThemeJToggleButton, appearanceBorderThemeButtonsPanelConstraints);		appearanceBorderThemeButtonsPanelConstraints.gridx = 1;		appearanceBorderThemeButtonsPanelConstraints.insets = new Insets(9, 4, 9, 5);		appearanceBorderThemeButtonsJPanel.add(slateBorderThemeJToggleButton, appearanceBorderThemeButtonsPanelConstraints);		appearanceBorderThemeButtonsPanelConstraints.gridx = 2;		appearanceBorderThemeButtonsJPanel.add(roundedBorderThemeJToggleButton, appearanceBorderThemeButtonsPanelConstraints);		appearanceBorderThemeButtonsPanelConstraints.gridx = 3;		appearanceBorderThemeButtonsPanelConstraints.insets = new Insets(9, 4, 9, 9);		appearanceBorderThemeButtonsJPanel.add(highContrastBorderThemeJToggleButton, appearanceBorderThemeButtonsPanelConstraints);		appearanceBorderThemePanelConstraints.weighty = 0;		appearanceBorderThemePanelConstraints.fill = GridBagConstraints.BOTH;		appearanceBorderThemePanelConstraints.weightx = 1;		appearanceBorderThemeJPanel.add(appearanceBorderThemeButtonsJPanel, appearanceBorderThemePanelConstraints);		appearanceBorderThemePanelConstraints.weighty = 1;		appearanceBorderThemePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		appearanceBorderThemePanelConstraints.gridy = 1;		appearanceBorderThemePanelConstraints.insets = new Insets(12, 12, 12, 12);		appearanceBorderThemeJPanel.add(appearanceBorderThemePictureJPanel, appearanceBorderThemePanelConstraints);		fontSize12JLabel.setFont(new Font("Ariel", Font.BOLD, 12));		fontSize13JLabel.setFont(new Font("Ariel", Font.BOLD, 13));		fontSize14JLabel.setFont(new Font("Ariel", Font.BOLD, 14));		fontSize15JLabel.setFont(new Font("Ariel", Font.BOLD, 15));		fontSize16JLabel.setFont(new Font("Ariel", Font.BOLD, 16));		fontSize17JLabel.setFont(new Font("Ariel", Font.BOLD, 17));		fontSize18JLabel.setFont(new Font("Ariel", Font.BOLD, 18));		fontSize19JLabel.setFont(new Font("Ariel", Font.BOLD, 19));		fontSize20JLabel.setFont(new Font("Ariel", Font.BOLD, 20));		fontSize21JLabel.setFont(new Font("Ariel", Font.BOLD, 21));		fontSize22JLabel.setFont(new Font("Ariel", Font.BOLD, 22));		fontExamplesPanelBaseJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		fontExamplesPanelBaseJPanel.setBackground(Color.WHITE);		fontExamplesJPanel.setName("fontExamplesJPanel");		fontExamplesPanelBasePanelConstraints.insets = new Insets(20, 60, 0, 60);		fontExamplesPanelBaseJPanel.add(fontExamplesJPanel, fontExamplesPanelBasePanelConstraints);		fontExamplesJPanel.setBackground(Color.WHITE);		fontExamplesPanelConstraints.insets = new Insets(18, 18, 3, 3);		fontExamplesJPanel.add(fontSize12JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridx = 1;		fontExamplesPanelConstraints.insets = new Insets(18, 3, 3, 18);		fontExamplesJPanel.add(fontSize13JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridy = 1;		fontExamplesPanelConstraints.gridx = 0;		fontExamplesPanelConstraints.insets = new Insets(3, 18, 3, 3);		fontExamplesJPanel.add(fontSize14JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridx = 1;		fontExamplesPanelConstraints.insets = new Insets(3, 3, 3, 18);		fontExamplesJPanel.add(fontSize15JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridy = 2;		fontExamplesPanelConstraints.gridx = 0;		fontExamplesPanelConstraints.insets = new Insets(3, 18, 3, 3);		fontExamplesJPanel.add(fontSize16JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridx = 1;		fontExamplesPanelConstraints.insets = new Insets(3, 3, 3, 18);		fontExamplesJPanel.add(fontSize17JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridy = 3;		fontExamplesPanelConstraints.gridx = 0;		fontExamplesPanelConstraints.insets = new Insets(3, 18, 3, 3);		fontExamplesJPanel.add(fontSize18JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridx = 1;		fontExamplesPanelConstraints.insets = new Insets(3, 3, 3, 18);		fontExamplesJPanel.add(fontSize19JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridy = 4;		fontExamplesPanelConstraints.gridx = 0;		fontExamplesPanelConstraints.insets = new Insets(3, 18, 3, 3);		fontExamplesJPanel.add(fontSize20JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridx = 1;		fontExamplesPanelConstraints.insets = new Insets(3, 3, 3, 18);		fontExamplesJPanel.add(fontSize21JLabel, fontExamplesPanelConstraints);		fontExamplesPanelConstraints.gridy = 5;		fontExamplesPanelConstraints.gridx = 0;		fontExamplesPanelConstraints.insets = new Insets(3, 18, 18, 3);		fontExamplesJPanel.add(fontSize22JLabel, fontExamplesPanelConstraints);		serifSystemFontJRadioButton.setFont(new Font("Serif", Font.BOLD, 14));		serifSystemFontJRadioButton.setOpaque(false);		serifSystemFontJRadioButton.addActionListener(this);		serifSystemFontJRadioButton.setActionCommand("serifSystemFontJRadioButton");		serifSystemFontJRadioButton.setName("Serif");		arielSystemFontJRadioButton.setFont(new Font("Ariel", Font.BOLD, 14));		arielSystemFontJRadioButton.setOpaque(false);		arielSystemFontJRadioButton.addActionListener(this);		arielSystemFontJRadioButton.setActionCommand("arielSystemFontJRadioButton");		arielSystemFontJRadioButton.setName("Ariel");		electronSystemFontJRadioButton.setFont(new Font("Electron", Font.BOLD, 14));		electronSystemFontJRadioButton.setOpaque(false);		electronSystemFontJRadioButton.addActionListener(this);		electronSystemFontJRadioButton.setActionCommand("electronSystemFontJRadioButton");		electronSystemFontJRadioButton.setName("Electron");		appearanceFontSizeJPanel.setOpaque(false);		appearanceFontSizeJPanel.add(appearanceFontSizeJLabel, appearanceFontSizePanelConstraints);		appearanceFontSizePanelConstraints.gridx = 1;		appearanceFontSizeJPanel.add(fontSizeJTextField, appearanceFontSizePanelConstraints);		fontSizeJTextField.setActionCommand("fontSizeJTextField");		fontSizeJTextField.addActionListener(this);		appearanceFontingPanelConstraints.gridy = 0;		appearanceFontingPanelConstraints.fill = GridBagConstraints.BOTH;		appearanceFontingPanelConstraints.weightx = 1;		appearanceFontingPanelConstraints.insets = new Insets(0, 0, 3, 0);		appearanceFontingJPanel.add(fontExamplesPanelBaseJPanel, appearanceFontingPanelConstraints);		appearanceFontingPanelConstraints.gridy = 1;		appearanceFontingPanelConstraints.insets = new Insets(3, 0, 3, 0);		appearanceFontingJPanel.add(appearanceFontSizeJPanel, appearanceFontingPanelConstraints);		appearanceFontingPanelConstraints.gridy = 2;		appearanceFontingPanelConstraints.insets = new Insets(3, 0, 6, 0);		appearanceFontingJPanel.add(appearanceFontTypeJPanel, appearanceFontingPanelConstraints);		appearanceFontTypeJPanel.setName("appearanceFontTypeJPanel");		appearanceFontTypeJPanel.setOpaque(false);		appearanceFontTypeJPanel.add(appearanceFontTypeJLabel, appearanceFontTypePanelConstraints);		appearanceFontTypePanelConstraints.gridx = 1;		appearanceFontTypePanelConstraints.insets = new Insets(0, 0, 0, 8);		appearanceFontTypeJPanel.add(serifSystemFontJRadioButton, appearanceFontTypePanelConstraints);		appearanceFontTypePanelConstraints.gridx = 2;		appearanceFontTypeJPanel.add(arielSystemFontJRadioButton, appearanceFontTypePanelConstraints);		appearanceFontTypePanelConstraints.gridx = 3;		appearanceFontTypePanelConstraints.insets = new Insets(0, 0, 0, 0);		appearanceFontTypeJPanel.add(electronSystemFontJRadioButton, appearanceFontTypePanelConstraints);		appearanceFontingButtonsJPanel.setBackground(quintessentialThemeColor);		appearanceFontingButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		appearanceFontingButtonsPanelConstraints.ipadx = 30;		appearanceFontingButtonsPanelConstraints.insets = new Insets(9, 9, 9, 9);		appearanceFontingButtonsJPanel.add(appearanceFontingTitleJLabel, appearanceFontingButtonsPanelConstraints);		appearanceFontingPanelBasePanelConstraints.weightx = 1;		appearanceFontingPanelBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		appearanceFontingPanelBaseJPanel.add(appearanceFontingButtonsJPanel, appearanceFontingPanelBasePanelConstraints);		appearanceFontingPanelBasePanelConstraints.gridy = 1;		appearanceFontingPanelBasePanelConstraints.weighty = 1;		appearanceFontingPanelBasePanelConstraints.fill = GridBagConstraints.BOTH;		appearanceFontingPanelBaseJPanel.add(appearanceFontingJPanel, appearanceFontingPanelBasePanelConstraints);		if (Access.isUserLoggedIn) {			if (((String) getElement(5, "userFontChoice", null)).equals("Electron")) {				electronSystemFontJRadioButton.setSelected(true);				arielSystemFontJRadioButton.setSelected(false);				serifSystemFontJRadioButton.setSelected(false);			} else if (((String) getElement(5, "userFontChoice", null)).equals("Ariel")) {				electronSystemFontJRadioButton.setSelected(false);				arielSystemFontJRadioButton.setSelected(true);				serifSystemFontJRadioButton.setSelected(false);			} else if (((String) getElement(5, "userFontChoice", null)).equals("Serif")) {				electronSystemFontJRadioButton.setSelected(false);				arielSystemFontJRadioButton.setSelected(false);				serifSystemFontJRadioButton.setSelected(true);			}		} else {			if (((String) getElement(6, "defaultFontChoice", null)).equals("Electron")) {				electronSystemFontJRadioButton.setSelected(true);				arielSystemFontJRadioButton.setSelected(false);				serifSystemFontJRadioButton.setSelected(false);			} else if (((String) getElement(6, "defaultFontChoice", null)).equals("Ariel")) {				electronSystemFontJRadioButton.setSelected(false);				arielSystemFontJRadioButton.setSelected(true);				serifSystemFontJRadioButton.setSelected(false);			} else if (((String) getElement(6, "defaultFontChoice", null)).equals("Serif")) {				electronSystemFontJRadioButton.setSelected(false);				arielSystemFontJRadioButton.setSelected(false);				serifSystemFontJRadioButton.setSelected(true);			}		}		appearancePanelButtonsPanelConstraints.anchor = GridBagConstraints.WEST;		appearancePanelButtonsPanelConstraints.fill = GridBagConstraints.BOTH;		appearancePanelButtonsPanelConstraints.weightx = 1;		appearancePanelButtonsPanelConstraints.insets = new Insets(6, 6, 6, 6);		appearancePanelButtonsJPanel.add(appearanceFrameColorAndTranslucencyJToggleButton, appearancePanelButtonsPanelConstraints);		appearancePanelButtonsPanelConstraints.gridx = 1;		appearancePanelButtonsPanelConstraints.insets = new Insets(6, 0, 6, 6);		appearancePanelButtonsJPanel.add(appearanceWallpaperJToggleButton, appearancePanelButtonsPanelConstraints);		appearancePanelButtonsPanelConstraints.gridx = 2;		appearancePanelButtonsJPanel.add(appearanceThemeJToggleButton, appearancePanelButtonsPanelConstraints);		appearancePanelButtonsPanelConstraints.gridx = 3;		appearancePanelButtonsJPanel.add(appearanceFontingJToggleButton, appearancePanelButtonsPanelConstraints);		appearancePanelButtonsJPanel.setBackground(quintessentialThemeColor);		appearanceTranslucencyJSlider.setBackground(Color.BLUE);		appearanceTranslucencyJSlider.setOpaque(false);		appearanceTranslucencyJSlider.setMajorTickSpacing(42);		appearanceTranslucencyJSlider.setMinorTickSpacing(21);		appearanceTranslucencyJSlider.setPaintTicks(true);		appearanceTranslucencyJSlider.setMinimum(0);		appearanceTranslucencyJSlider.setMaximum(170);		appearanceTranslucencyJSlider.setPreferredSize(new Dimension(372, 120));		appearanceTranslucencyJSlider.setSize(new Dimension(372, 120));		if (Access.isUserLoggedIn) {			appearanceTranslucencyJSlider.setValue((Integer) getElement(7, "userTranslucency", null));		} else {			appearanceTranslucencyJSlider.setValue((Integer) getElement(8, "defaultTranslucency", null));		}		appearanceTranslucencyJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.gridx = 0;		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.gridwidth = 3;		appearanceColorAndTranslucencyPanelTickLabelsJPanel.add(appearanceTranslucencyJSlider, appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints);		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.gridy = 1;		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.gridwidth = 1;		appearanceColorAndTranslucencyPanelTickLabelsJPanel.add(appearanceTranslucencySolidJLabel, appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints);		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.gridx = 1;		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.weightx = 1;		appearanceColorAndTranslucencyPanelTickLabelsJPanel.add(appearanceTranslucencyMediumJLabel, appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints);		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.weightx = 0;		appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints.gridx = 2;		appearanceColorAndTranslucencyPanelTickLabelsJPanel.add(appearanceTranslucencyVeryLightJLabel, appearanceColorAndTranslucencyPanelTickLabelsPanelConstraints);		appearanceTranslucencyPanelConstraints.insets = new Insets(6, 0, 6, 0);		appearanceTranslucencyJPanel.add(appearanceTranslucencyJLabel, appearanceTranslucencyPanelConstraints);		appearanceTranslucencyPanelConstraints.gridy = 1;		appearanceTranslucencyJPanel.add(appearanceColorAndTranslucencyPanelTickLabelsJPanel, appearanceTranslucencyPanelConstraints);		colorAndTranslucencyOkJButton.addActionListener(this);		colorAndTranslucencyOkJButton.setActionCommand("colorAndTranslucencyOkJButton");		colorChooser = new JColorChooser();		colorChooser.removeChooserPanel(colorChooser.getChooserPanels()[2]);		colorChooserJPanel.add(colorChooser, colorChooserPanelConstraints);		colorChooserJPanel.setBackground(lightQuintessentialThemeColor);		colorChooserBaseJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		colorChooserBasePanelConstraints.weightx = 1;		colorChooserBaseJPanel.add(appearanceColorJLabel, colorChooserBasePanelConstraints);		colorChooserBasePanelConstraints.gridy = 1;		colorChooserBaseJPanel.add(colorChooserJPanel, colorChooserBasePanelConstraints);		colorChooser.setPreviewPanel(new JPanel());		colorChooser.setColor(new Color(254, 255, 255));		appearanceColorAndTranslucencyPanelConstraints.fill = GridBagConstraints.BOTH;		appearanceColorAndTranslucencyPanelConstraints.weighty = 1;		appearanceColorAndTranslucencyPanelConstraints.weightx = 1;		appearanceColorAndTranslucencyPanelConstraints.insets = new Insets(40, 40, 20, 40);		appearanceColorAndTranslucencyJPanel.add(colorChooserBaseJPanel, appearanceColorAndTranslucencyPanelConstraints);		appearanceColorAndTranslucencyPanelConstraints.gridy = 1;		appearanceColorAndTranslucencyPanelConstraints.weighty = 0;		appearanceColorAndTranslucencyPanelConstraints.insets = new Insets(20, 40, 40, 40);		appearanceColorAndTranslucencyJPanel.add(appearanceTranslucencyJPanel, appearanceColorAndTranslucencyPanelConstraints);		colorAndTranslucencyButtonsJPanel.setBackground(quintessentialThemeColor);		colorAndTranslucencyButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		colorAndTranslucencyButtonsPanelConstraints.ipadx = 30;		colorAndTranslucencyButtonsPanelConstraints.insets = new Insets(9, 9, 9, 9);		colorAndTranslucencyButtonsJPanel.add(colorAndTranslucencyOkJButton, colorAndTranslucencyButtonsPanelConstraints);		appearanceColorAndTranslucencyPanelBasePanelConstraints.weighty = 1;		appearanceColorAndTranslucencyPanelBasePanelConstraints.fill = GridBagConstraints.BOTH;		appearanceColorAndTranslucencyPanelBaseJPanel.add(colorAndTranslucencyButtonsJPanel, appearanceColorAndTranslucencyPanelBasePanelConstraints);		appearanceColorAndTranslucencyPanelBasePanelConstraints.gridy = 1;		appearanceColorAndTranslucencyPanelBasePanelConstraints.weighty = 0;		appearanceColorAndTranslucencyPanelBasePanelConstraints.weightx = 1;		appearanceColorAndTranslucencyPanelBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		appearanceColorAndTranslucencyPanelBaseJPanel.add(appearanceColorAndTranslucencyJPanel, appearanceColorAndTranslucencyPanelBasePanelConstraints);		appearanceColorAndTranslucencyJPanel.setBackground(lightQuintessentialThemeColor);		appearanceFontingJPanel.setBackground(lightQuintessentialThemeColor);		appearanceBorderThemeJPanel.setBackground(lightQuintessentialThemeColor);		appearanceCardedJPanel.add(appearanceColorAndTranslucencyPanelBaseJPanel, "appearanceColorAndTranslucencyPanelBaseJPanel");		appearanceCardedJPanel.add(appearanceFontingPanelBaseJPanel, "appearanceFontingPanelBaseJPanel");		appearanceCardedJPanel.add(appearanceBorderThemeJPanel, "appearanceThemeJPanel");		appearanceCardedJPanel.add(appearanceWallpaperFileChooserJPanel, "appearanceWallpaperFileChooserJPanel");		appearancePanelConstraints.weighty = 0;		appearancePanelConstraints.weightx = 1;		appearancePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		appearancePanelConstraints.insets = new Insets(0, 0, 4, 0);		appearanceJPanel.add(appearancePanelButtonsJPanel, appearancePanelConstraints);		appearancePanelConstraints.gridy = 1;		appearancePanelConstraints.weighty = 1;		appearancePanelConstraints.weightx = 1;		appearancePanelConstraints.fill = GridBagConstraints.BOTH;		appearancePanelConstraints.insets = new Insets(0, 0, 0, 0);		appearanceJPanel.add(appearanceCardedJPanel, appearancePanelConstraints);		templateChooseNewTemplateJTextField.addActionListener(this);		templateChooseNewTemplateJTextField.setActionCommand("templateChooseNewTemplateJTextField");		templateMedicalCodingSetJPopupMenu.setLayout(new GridBagLayout());		templateMedicalCodingSetJPopupMenu.setBackground(quintessentialThemeColor);		templateMedicalCodingSetJPopupMenu.setBorder(new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(Color.LIGHT_GRAY, 5)), new LineBorder(Color.GRAY)));		templateChooseTemplatePopupMenuJPanel.setBackground(quintessentialThemeColor);		templateChooseTemplatePopupMenuPanelConstraints.insets = new Insets(2, 4, 0, 0);		templateChooseTemplatePopupMenuPanelConstraints.anchor = GridBagConstraints.WEST;		templateChooseTemplatePopupMenuJPanel.add(newInternalTemplateJLabel, templateChooseTemplatePopupMenuPanelConstraints);		templateChooseTemplatePopupMenuPanelConstraints.insets = new Insets(2, 0, 0, 0);		templateChooseTemplatePopupMenuPanelConstraints.gridx = 1;		templateChooseTemplatePopupMenuPanelConstraints.weightx = 1;		templateChooseTemplatePopupMenuPanelConstraints.fill = GridBagConstraints.BOTH;		templateChooseTemplatePopupMenuJPanel.add(templateChooseNewTemplateJTextField, templateChooseTemplatePopupMenuPanelConstraints);		templateChooseTemplatePopupMenuPanelConstraints.gridx = 2;		templateChooseNewTemplateOKJButton.addActionListener(this);		templateChooseNewTemplateOKJButton.setActionCommand("templateChooseNewTemplateOKJButton");		templateChooseTemplatePopupMenuPanelConstraints.insets = new Insets(2, 0, 0, 4);		templateChooseTemplatePopupMenuPanelConstraints.weightx = 0;		templateChooseTemplatePopupMenuJPanel.add(templateChooseNewTemplateOKJButton, templateChooseTemplatePopupMenuPanelConstraints);		templateChooseTemplatePopupMenuPanelConstraints.gridy = 1;		templateChooseTemplatePopupMenuPanelConstraints.gridx = 0;		templateChooseTemplatePopupMenuPanelConstraints.gridwidth = 3;		templateChooseTemplatePopupMenuPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		JPanel templateChooseNewTemplateHorizontalLineJPanel = new JPanel(new GridBagLayout());		templateChooseNewTemplateHorizontalLineJPanel.setBorder(new MatteBorder(0, 0, 2, 0, new Color(128, 128, 128, 128)));		templateChooseTemplatePopupMenuPanelConstraints.insets = new Insets(6, 4, 2, 4);		templateChooseTemplatePopupMenuPanelConstraints.weightx = 1;		templateChooseTemplatePopupMenuJPanel.add(templateChooseNewTemplateHorizontalLineJPanel, templateChooseTemplatePopupMenuPanelConstraints);		templateChooseTemplatePopupMenuPanelConstraints.fill = GridBagConstraints.BOTH;		templateChooseTemplatePopupMenuPanelConstraints.weighty = 1;		templateChooseTemplatePopupMenuPanelConstraints.weightx = 1;		templateChooseTemplatePopupMenuPanelConstraints.gridy = 3;		templateChooseTemplatePopupMenuPanelConstraints.insets = new Insets(0, 4, 0, 4);		templateChooseTemplatePopupMenuJPanel.add(templateChooseTemplateJScrollPane, templateChooseTemplatePopupMenuPanelConstraints);		templateChooseTemplatePopupMenuPanelConstraints.weighty = 0;		templateChooseTemplatePopupMenuPanelConstraints.weightx = 0;		templateChooseTemplatePopupMenuPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateChooseTemplateJScrollPane.setBorder(null);		templateChooseTemplateJPopupMenu.setLayout(new GridBagLayout());		GridBagConstraints templateChooseTemplatePopupMenuConstraints = new GridBagConstraints();		templateChooseTemplatePopupMenuConstraints.weighty = 1;		templateChooseTemplatePopupMenuConstraints.weightx = 1;		templateChooseTemplatePopupMenuConstraints.fill = GridBagConstraints.BOTH;		templateChooseExistingTemplateJPanel.setBackground(quintessentialThemeColor);		templateChooseTemplateJScrollPane.setBackground(Color.GREEN);		templateChooseTemplateJPopupMenu.add(templateChooseTemplatePopupMenuJPanel, templateChooseTemplatePopupMenuConstraints);		templateItemTopToBottomOrientationJRadioButton.setContentAreaFilled(false);		templateItemLeftToRightOrientationJRadioButton.setContentAreaFilled(false);		templateItemTopToBottomOrientationJRadioButton.addActionListener(this);		templateItemTopToBottomOrientationJRadioButton.setActionCommand("templateDisplayedDataItemTopToBottomOrientationJRadioButton");		templateItemLeftToRightOrientationJRadioButton.addActionListener(this);		templateItemLeftToRightOrientationJRadioButton.setActionCommand("templateDisplayedDataItemLeftToRightOrientationJRadioButton");		templatePromptToFillBeforeClosingChartYesJRadioButton.addActionListener(this);		templatePromptToFillBeforeClosingChartYesJRadioButton.setActionCommand("templateRequiredFieldYesJRadioButton");		templatePromptToFillBeforeClosingChartNoJRadioButton.addActionListener(this);		templatePromptToFillBeforeClosingChartNoJRadioButton.setActionCommand("templateRequiredFieldNoJRadioButton");		templateItemBoxBorderYesJRadioButton.setContentAreaFilled(false);		templateItemBoxBorderYesJRadioButton.addActionListener(this);		templateItemBoxBorderYesJRadioButton.setActionCommand("templateItemBoxBorderYesJRadioButton");		templateItemBoxBorderNoJRadioButton.setOpaque(false);		templateItemBoxBorderNoJRadioButton.setContentAreaFilled(false);		templateItemBoxBorderNoJRadioButton.setActionCommand("templateItemBoxBorderNoJRadioButton");		templatePromptToFillBeforeClosingJPanel.setOpaque(false);		templatePromptToFillBeforeClosingChartYesJRadioButton.setContentAreaFilled(false);		templatePromptToFillBeforeClosingChartNoJRadioButton.setContentAreaFilled(false);		templateAddDataItemJButton.addActionListener(this);		templateAddDataItemJButton.setRolloverEnabled(false);		templateAddDataItemJButton.setMnemonic('k');		templateAddDataItemJButton.setActionCommand("templateAddDataItemJButton");		templateVisibleFieldDescriptionJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		codeDetailsJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateInputCharacterLengthJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateMedicalCodeJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateCodeSetNameJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateItemNumberJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		userReadableInternalDatatypeJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateCodeSetNameJTextField.setEditable(false);		templateCodeSetNameJTextField.setBackground(Color.LIGHT_GRAY);		includeItemNumbersJToggleButton.addActionListener(this);		includeItemNumbersJToggleButton.setActionCommand("toggleItemNumberVisibilityJToggleButton");		templatePromptToFillBeforeClosingJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templateItemBoxBorderPromptJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templateItemOrientationJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templateItemFontSizeJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templateItemFontTypeJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templateItemMarginsInPixelsJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templateInputCharacterLengthPromptJPanel.setBorder(templateItemFormatPanelPanelsMatteBorder);		templatePromptToFillBeforeClosingPanelConstraints.gridy = 0;		templatePromptToFillBeforeClosingPanelConstraints.weightx = 1;		templatePromptToFillBeforeClosingPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templatePromptToFillBeforeClosingJPanel.add(templatePromptToFillBeforeClosingChartJLabel, templatePromptToFillBeforeClosingPanelConstraints);		templatePromptToFillBeforeClosingPanelConstraints.gridx = 1;		templatePromptToFillBeforeClosingPanelConstraints.weightx = 0;		templatePromptToFillBeforeClosingPanelConstraints.fill = GridBagConstraints.NONE;		templatePromptToFillBeforeClosingJPanel.add(templatePromptToFillBeforeClosingChartYesJRadioButton, templatePromptToFillBeforeClosingPanelConstraints);		templatePromptToFillBeforeClosingPanelConstraints.gridx = 2;		templatePromptToFillBeforeClosingJPanel.add(templatePromptToFillBeforeClosingChartNoJRadioButton, templatePromptToFillBeforeClosingPanelConstraints);		templateItemBoxBorderPromptJPanel.setOpaque(false);		templateItemBoxBorderPromptPanelConstraints.gridx = 0;		templateItemBoxBorderPromptJPanel.add(templateItemBoxBorderPromptJLabel, templateItemBoxBorderPromptPanelConstraints);		templateItemBoxBorderPromptPanelConstraints.gridx = 1;		templateItemBoxBorderPromptJPanel.add(templateItemBoxBorderYesJRadioButton, templateItemBoxBorderPromptPanelConstraints);		templateItemBoxBorderPromptPanelConstraints.weightx = 1;		templateItemBoxBorderPromptPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateItemBoxBorderPromptJPanel.add(templateItemBoxBorderPusherJPanel, templateItemBoxBorderPromptPanelConstraints);		templateItemBoxBorderPromptPanelConstraints.gridx = 2;		templateItemBoxBorderPromptPanelConstraints.weightx = 0;		templateItemBoxBorderPromptPanelConstraints.fill = GridBagConstraints.NONE;		templateItemBoxBorderPromptJPanel.add(templateItemBoxBorderNoJRadioButton, templateItemBoxBorderPromptPanelConstraints);		templateOpenButton.addActionListener(this);		templateOpenButton.setActionCommand("templateOpenButton");		templateSaveButton.addActionListener(this);		templateSaveButton.setActionCommand("templateSaveButton");		templateResetButton.addActionListener(this);		templateResetButton.setActionCommand("templateResetButton");		hL7JButton.addActionListener(this);		hL7JButton.setActionCommand("hL7JButton");		hL7JButton.setMnemonic('H');		cPTJButton.addActionListener(this);		cPTJButton.setActionCommand("cPTJButton");		cPTJButton.setMnemonic('C');		iCDJButton.addActionListener(this);		iCDJButton.setActionCommand("iCDJButton");		iCDJButton.setMnemonic('I');		lOINCJButton.addActionListener(this);		lOINCJButton.setActionCommand("lOINCJButton");		lOINCJButton.setMnemonic('L');		hCPCSLevel1JButton.addActionListener(this);		hCPCSLevel1JButton.setActionCommand("hCPCSLevel1JButton");		hCPCSLevel1JButton.setMnemonic('1');		hCPCSLevel2JButton.addActionListener(this);		hCPCSLevel2JButton.setActionCommand("hCPCSLevel2JButton");		hCPCSLevel2JButton.setMnemonic('2');		uncodedItemJButton.addActionListener(this);		uncodedItemJButton.setActionCommand("customCodingDictionaryJButton");		uncodedItemJButton.setMnemonic('C');		templateAtomicMedicalCodeFieldNamePanelPopupJButton.addActionListener(this);		templateAtomicMedicalCodeFieldNamePanelPopupJButton.setActionCommand("templateAtomicMedicalCodeFieldNamePanelPopupJButton");		templateAtomicMedicalCodeFieldNamePanelPopupJButton.setMnemonic('F');		codeDetailsJPanel.setBackground(recessedPanelColor);		codeDetailsPanelAtomicNameJLabel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateFieldDescriptorLabelTitledBorder));		codeDetailsPanelConstraints.gridwidth = 6;		codeDetailsPanelConstraints.anchor = GridBagConstraints.WEST;		codeDetailsPanelConstraints.weightx = 1;		codeDetailsPanelConstraints.fill = GridBagConstraints.BOTH;		codeDetailsPanelConstraints.anchor = GridBagConstraints.WEST;		codeDetailsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		codeDetailsPanelConstraints.insets = new Insets(5, 3, 0, 3);		codeDetailsPanelElementDataTypeJPanel.add(codeDetailsPanelElementDataTypeJLabel);		codeDetailsPanelComponentNumberAndDatatypeJPanel.add(codeDetailsPanelSubComponentNumberAndDatatypeJLabel);		codeDetailsPanelSubComponentNumberAndDatatypeJPanel.add(templateMedicalCodeSubcomponentJLabel);		codeDetailsPanelElementNumberJPanel.add(templateMedicalCodeElementNumberJLabel);		codeDetailsPanelConstraints.gridwidth = 1;		codeDetailsJPanel.add(codeDetailsPanelElementNumberJPanel, codeDetailsPanelConstraints);		codeDetailsPanelConstraints.gridx = 1;		codeDetailsJPanel.add(codeDetailsPanelElementDataTypeJPanel, codeDetailsPanelConstraints);		codeDetailsPanelConstraints.gridx = 2;		codeDetailsJPanel.add(codeDetailsPanelComponentNumberAndDatatypeJPanel, codeDetailsPanelConstraints);		codeDetailsPanelConstraints.gridx = 3;		codeDetailsJPanel.add(codeDetailsPanelSubComponentNumberAndDatatypeJPanel, codeDetailsPanelConstraints);		codeDetailsPanelConstraints.gridy = 1;		codeDetailsPanelConstraints.gridx = 0;		codeDetailsPanelConstraints.gridwidth = 4;		codeDetailsJPanel.add(codeDetailsPanelAtomicNameJLabel, codeDetailsPanelConstraints);		codeDetailsPanelConstraints.gridy = 2;		codeDetailsJPanel.add(codeDetailsPanelReferenceJLabel, codeDetailsPanelConstraints);		codeDetailsPanelJPopupMenu.add(codeDetailsJPanel);		codeDetailsPanelElementNumberJPanel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateMedicalCodeElementNumberPanelTitledBorder));		templateMedicalCodeDescriptionJLabel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateMedicalCodeDescriptionLabelTitledBorder));		codeDetailsPanelComponentNumberAndDatatypeJPanel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateMedicalCodeLengthPanelTitledBorder));		codeDetailsPanelSubComponentNumberAndDatatypeJPanel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateMedicalCodeUsedInPanelTitledBorder));		codeDetailsPanelElementDataTypeJPanel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateMedicalCodeDatatypePanelTitledBorder));		codeDetailsPanelReferenceJLabel.setBorder(new CompoundBorder(new LineBorder(new Color(160, 160, 160), 1), templateMedicalCodeReferenceLabelTitledBorder));		templateMedicalCodeElementNumberPanelTitledBorder.setTitleFont(systemFont);		templateMedicalCodeDescriptionLabelTitledBorder.setTitleFont(systemFont);		templateMedicalCodeLengthPanelTitledBorder.setTitleFont(systemFont);		templateMedicalCodeDatatypePanelTitledBorder.setTitleFont(systemFont);		templateMedicalCodeUsedInPanelTitledBorder.setTitleFont(systemFont);		templateMedicalCodeReferenceLabelTitledBorder.setTitleFont(systemFont);		templateMedicalCodeSetPanelConstraints.insets = new Insets(6, 6, 6, 6);		templateMedicalCodeSetJPanel.add(templateCodeSetNameJTextField, templateMedicalCodeSetPanelConstraints);		templateMedicalCodeSetPanelConstraints.gridy = 1;		templateMedicalCodeSetPanelConstraints.insets = new Insets(0, 6, 6, 6);		templateMedicalCodeSetPanelConstraints.weightx = 1;		templateMedicalCodeSetPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateMedicalCodeSetJPanel.add(listCodeSetsJButton, templateMedicalCodeSetPanelConstraints);		templateAtomicMedicalCodeOkJButton.addActionListener(this);		templateAtomicMedicalCodeOkJButton.setActionCommand("templateAtomicMedicalCodeOkJButton");		templateAtomicMedicalCodeJTextField.addActionListener(this);		templateAtomicMedicalCodeJTextField.setActionCommand("templateAtomicMedicalCodeOkJButton");		templateAtomicMedicalCodeChoicesPanelConstraints.weighty = 1;		templateAtomicMedicalCodeChoicesPanelConstraints.weightx = 1;		templateAtomicMedicalCodeChoicesPanelConstraints.fill = GridBagConstraints.BOTH;		templateAtomicMedicalCodeFieldsJPanel.setBackground(lightQuintessentialThemeColor);		templateAtomicMedicalCodeChoicesJPanel.setBackground(Color.WHITE);		templateAtomicMedicalCodeFieldsPanelConstraints.gridx = 0;		templateAtomicMedicalCodeFieldsPanelConstraints.gridy = 0;		templateAtomicMedicalCodeFieldsPanelConstraints.weightx = 1;		templateAtomicMedicalCodeFieldsPanelConstraints.fill = GridBagConstraints.BOTH;		templateAtomicMedicalCodeFieldsPanelConstraints.gridwidth = 2;		templateAtomicMedicalCodeFieldsPanelConstraints.insets = new Insets(10, 10, 5, 10);		templateAtomicMedicalCodeFieldsJPanel.add(templateAtomicMedicalCodeHeaderJLabel, templateAtomicMedicalCodeFieldsPanelConstraints);		templateAtomicMedicalCodeFieldsPanelConstraints.gridy = 1;		templateAtomicMedicalCodeFieldsPanelConstraints.gridwidth = 1;		templateAtomicMedicalCodeFieldsPanelConstraints.insets = new Insets(5, 10, 5, 5);		templateAtomicMedicalCodeFieldsJPanel.add(templateAtomicMedicalCodeJTextField, templateAtomicMedicalCodeFieldsPanelConstraints);		templateAtomicMedicalCodeFieldsPanelConstraints.gridx = 1;		templateAtomicMedicalCodeFieldsPanelConstraints.weightx = 0;		templateAtomicMedicalCodeFieldsPanelConstraints.insets = new Insets(5, 5, 10, 10);		templateAtomicMedicalCodeFieldsJPanel.add(templateAtomicMedicalCodeOkJButton, templateAtomicMedicalCodeFieldsPanelConstraints);		templateAtomicMedicalCodeFieldsPanelConstraints.gridx = 0;		templateAtomicMedicalCodeFieldsPanelConstraints.gridy = 2;		templateAtomicMedicalCodeFieldsPanelConstraints.weighty = 1;		templateAtomicMedicalCodeFieldsPanelConstraints.gridwidth = 2;		templateAtomicMedicalCodeFieldsPanelConstraints.insets = new Insets(5, 10, 10, 10);		templateAtomicMedicalCodeChoicesJPanel.setBorder(new LineBorder(Color.GRAY, 1));		templateAtomicMedicalCodeFieldsJPanel.add(templateAtomicMedicalCodeChoicesJPanel, templateAtomicMedicalCodeFieldsPanelConstraints);		templateAtomicMedicalCodeFieldsJPopupMenu.setSize(templateAtomicMedicalCodeFieldsJPopupMenuDimension);		templateAtomicMedicalCodeFieldsJPopupMenu.setPreferredSize(templateAtomicMedicalCodeFieldsJPopupMenuDimension);		templateAtomicMedicalCodeFieldsJPopupMenu.add(templateAtomicMedicalCodeFieldsJPanel);		templateAtomicMedicalCodeFieldsJPopupMenu.setBorder(blockBorder);		templateAtomicMedicalCodePanelConstraints.insets = new Insets(6, 6, 6, 6);		templateAtomicMedicalCodePanelConstraints.weightx = 1;		templateAtomicMedicalCodePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateAtomicMedicalCodeJPanel.add(templateMedicalCodeJTextField, templateAtomicMedicalCodePanelConstraints);		templateAtomicMedicalCodePanelConstraints.insets = new Insets(0, 6, 6, 6);		templateAtomicMedicalCodePanelConstraints.gridy = 2;		templateAtomicMedicalCodeJPanel.add(templateAtomicMedicalCodeFieldNamePanelPopupJButton, templateAtomicMedicalCodePanelConstraints);		templateSectionButtonJPopupMenu.setLayout(new GridBagLayout());		templateSectionButtonJPopupMenu.setBackground(quintessentialThemeColor);		templateSectionButtonJPopupMenu.setBorder(new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(Color.LIGHT_GRAY, 5)), new LineBorder(Color.GRAY)));		templateSectionNumberButtonPopupMenuConstraints.fill = GridBagConstraints.HORIZONTAL;		templateSectionNumberButtonPopupMenuConstraints.gridy = 0;		templateSectionNumberButtonPopupMenuConstraints.insets = new Insets(9, 9, 0, 9);		templateSectionButtonJPopupMenu.add(templateChartCoverSectionJButton, templateSectionNumberButtonPopupMenuConstraints);		templateSectionNumberButtonPopupMenuConstraints.gridy = 1;		templateSectionButtonJPopupMenu.add(templateDemographicsSectionJButton, templateSectionNumberButtonPopupMenuConstraints);		templateSectionNumberButtonPopupMenuConstraints.gridy = 2;		templateSectionNumberButtonPopupMenuConstraints.insets = new Insets(9, 9, 0, 9);		templateSectionButtonJPopupMenu.add(templateInsuranceSectionJButton, templateSectionNumberButtonPopupMenuConstraints);		templateSectionNumberButtonPopupMenuConstraints.gridy = 3;		templateSectionNumberButtonPopupMenuConstraints.insets = new Insets(0, 9, 0, 9);		templateSectionNumberButtonPopupMenuConstraints.fill = GridBagConstraints.NONE;		templateSectionButtonJPopupMenu.add(templateSectionHeader1JLabel, templateSectionNumberButtonPopupMenuConstraints);		templateSectionNumberButtonPopupMenuConstraints.gridy = 4;		templateSectionButtonJPopupMenu.add(templateSectionHeader2JLabel, templateSectionNumberButtonPopupMenuConstraints);		templateSectionNumberButtonPopupMenuConstraints.gridy = 5;		templateSectionNumberButtonPopupMenuConstraints.insets = new Insets(0, 9, 9, 9);		templateSectionButtonJPopupMenu.add(templateSectionHeader3JLabel, templateSectionNumberButtonPopupMenuConstraints);		templateChartCoverSectionJButton.addActionListener(this);		templateChartCoverSectionJButton.setActionCommand("templateChartCoverSectionJButton");		templateChartCoverSectionJButton.setName("Chart cover");		templateChartCoverSectionJButton.setMnemonic('C');		templateDemographicsSectionJButton.addActionListener(this);		templateDemographicsSectionJButton.setActionCommand("templateDemographicsSectionJButton");		templateDemographicsSectionJButton.setName("Demographics");		templateDemographicsSectionJButton.setMnemonic('D');		templateInsuranceSectionJButton.addActionListener(this);		templateInsuranceSectionJButton.setActionCommand("templateInsuranceSectionJButton");		templateInsuranceSectionJButton.setName("Insurance");		templateInsuranceSectionJButton.setMnemonic('I');		templateSectionJButton.addActionListener(this);		templateSectionJButton.setActionCommand("templateSectionJButton");		templateSectionJButton.setMnemonic('S');		templatePageNumberButtonJPopupMenu.setLayout(new GridBagLayout());		templateItemNumberJButton.addActionListener(this);		templateItemNumberJButton.setActionCommand("templateItemNumberJButton");		templateItemNumberJButton.setMnemonic('I');		templatePageNumberJButton.addActionListener(this);		templatePageNumberJButton.setActionCommand("templatePageNumberJButton");		templatePageNumberJButton.setMnemonic('P');		templateChooseExistingTemplatePanelConstraints.anchor = GridBagConstraints.WEST;		templateChooseExistingTemplatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateChooseExistingTemplatePanelConstraints.weightx = 1;		templateChooseExistingTemplatePanelConstraints.insets = new Insets(5, 1, 5, 1);		templateChooseTemplateJButton.addActionListener(this);		templateChooseTemplateJButton.setActionCommand("templateChooseTemplateJButton");		templateChooseTemplateJButton.setMnemonic('T');		templateHorizontalLine2JPanel.setOpaque(false);		templateMedicalCodeSetJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateMedicalCodeSetJPanel.setBackground(lightQuintessentialThemeColor);		templateAtomicMedicalCodeJPanel.setBackground(lightQuintessentialThemeColor);		templateAtomicMedicalCodeJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateHorizontalLine2JPanel.setBorder(new MatteBorder(0, 0, 3, 0, new Color(64, 64, 64, 128)));		templateDatatypeTextJButton.addActionListener(this);		templateDatatypeImageJButton.addActionListener(this);		templateDatatypeAudioJButton.addActionListener(this);		templateDatatypeVideoJButton.addActionListener(this);		templateDatatypeTextJButton.setActionCommand("templateDatatypeTextJButton");		templateDatatypeImageJButton.setActionCommand("templateDatatypeImageJButton");		templateDatatypeAudioJButton.setActionCommand("templateDatatypeAudioJButton");		templateDatatypeVideoJButton.setActionCommand("templateDatatypeVideoJButton");		templateDatatypeMoreButtonJPopupMenu.setLayout(new GridBagLayout());		templateDatatypeMoreButtonJPopupMenu.setBackground(quintessentialThemeColor);		templateDatatypeMoreButtonJPopupMenu.setBorder(new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(Color.LIGHT_GRAY, 5)), new LineBorder(Color.GRAY)));		templateDatatypeMoreButtonPopupMenuConstraints.insets = new Insets(9, 9, 0, 9);		templateDatatypeMoreButtonPopupMenuConstraints.fill = GridBagConstraints.HORIZONTAL;		templateDatatypeMoreButtonJPopupMenu.add(templateDatatypeTextJButton, templateDatatypeMoreButtonPopupMenuConstraints);		templateDatatypeMoreButtonPopupMenuConstraints.gridy = 1;		templateDatatypeMoreButtonJPopupMenu.add(templateDatatypeImageJButton, templateDatatypeMoreButtonPopupMenuConstraints);		templateDatatypeMoreButtonPopupMenuConstraints.gridy = 2;		templateDatatypeMoreButtonJPopupMenu.add(templateDatatypeAudioJButton, templateDatatypeMoreButtonPopupMenuConstraints);		templateDatatypeMoreButtonPopupMenuConstraints.gridy = 3;		templateDatatypeMoreButtonPopupMenuConstraints.insets = new Insets(9, 9, 9, 9);		templateDatatypeMoreButtonJPopupMenu.add(templateDatatypeVideoJButton, templateDatatypeMoreButtonPopupMenuConstraints);		templateDatatypePanelJButton.addActionListener(this);		templateDatatypePanelJButton.setActionCommand("templateDatatypePanelJButton");		templateDatatypeJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateDatatypeJPanel.setBackground(lightQuintessentialThemeColor);		userReadableInternalDatatypeJTextField.setBackground(Color.LIGHT_GRAY);		templateDatatypePanelConstraints.insets = new Insets(6, 6, 3, 6);		templateDatatypeJPanel.add(userReadableInternalDatatypeJTextField, templateDatatypePanelConstraints);		templateDatatypePanelConstraints.gridy = 1;		templateDatatypePanelConstraints.insets = new Insets(3, 6, 6, 6);		templateDatatypePanelConstraints.weightx = 1;		templateDatatypePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateDatatypeJPanel.add(templateDatatypePanelJButton, templateDatatypePanelConstraints);		listCodeSetsJButton.addActionListener(this);		listCodeSetsJButton.setActionCommand("listCodeSetsJButton");		listCodeSetsJButton.setMnemonic('L');		templateMedicalCodeJTextField.setEditable(false);		templateMedicalCodeJTextField.setBackground(Color.LIGHT_GRAY);		templateMedicalCodeJTextField.addFocusListener(this);		templateMedicalCodeJTextField.addActionListener(this);		templateMedicalCodeJTextField.setActionCommand("templateMedicalCodeJTextField");		templateMedicalCodeJTextField.setName("templateMedicalCodeJTextField");		templateDeleteDataItemJButton.setActionCommand("templateDeleteDataItemJButton");		templateDeleteDataItemJButton.addActionListener(this);		templateDeleteDataItemJButton.setRolloverEnabled(false);		templateDeleteDataTemplateYesJButton.setActionCommand("templateDeleteDataTemplateYesJButton");		templateDeleteDataTemplateYesJButton.addActionListener(this);		templateDeleteDataTemplateYesJButton.setRolloverEnabled(false);		templateDeleteDataTemplateNoJButton.setActionCommand("templateDeleteDataTemplateNoJButton");		templateDeleteDataTemplateNoJButton.addActionListener(this);		templateDeleteDataTemplateNoJButton.setRolloverEnabled(false);		templateDeleteDataTemplateJPopupMenu.setLayout(new GridBagLayout());		templateDeleteDataTemplatePopupMenuConstraints.gridx = 0;		templateDeleteDataTemplatePopupMenuConstraints.gridwidth = 2;		templateDeleteDataTemplatePopupMenuConstraints.insets = new Insets(10, 10, 5, 10);		templateDeleteDataTemplateJPopupMenu.add(templateDeleteDataTemplateJLabel, templateDeleteDataTemplatePopupMenuConstraints);		templateDeleteDataTemplatePopupMenuConstraints.gridy = 1;		templateDeleteDataTemplatePopupMenuConstraints.gridwidth = 1;		templateDeleteDataTemplatePopupMenuConstraints.insets = new Insets(5, 10, 10, 5);		templateDeleteDataTemplateJPopupMenu.add(templateDeleteDataTemplateYesJButton, templateDeleteDataTemplatePopupMenuConstraints);		templateDeleteDataTemplatePopupMenuConstraints.gridx = 1;		templateDeleteDataTemplatePopupMenuConstraints.insets = new Insets(5, 5, 10, 5);		templateDeleteDataTemplateJPopupMenu.add(templateDeleteDataTemplateNoJButton, templateDeleteDataTemplatePopupMenuConstraints);		deleteUserPopupMenuYesJButton.addActionListener(this);		deleteUserPopupMenuYesJButton.setActionCommand("deleteUserPopupMenuYesJButton");		deleteUserPopupMenuNoJButton.addActionListener(this);		deleteUserPopupMenuNoJButton.setActionCommand("deleteUserPopupMenuNoJButton");		deleteUserJPopupMenu.setLayout(new GridBagLayout());		deleteUserJPopupMenu.setBorder(blockBorder);		deleteUserJPopupMenu.setBackground(quintessentialThemeColor);		deleteUserPopupMenuConstraints.gridx = 0;		deleteUserPopupMenuConstraints.gridwidth = 2;		deleteUserPopupMenuConstraints.insets = new Insets(10, 10, 5, 10);		deleteUserJPopupMenu.add(deleteUserPopupMenuJLabel, deleteUserPopupMenuConstraints);		deleteUserPopupMenuConstraints.gridy = 1;		deleteUserPopupMenuConstraints.gridwidth = 1;		deleteUserPopupMenuConstraints.insets = new Insets(5, 10, 10, 5);		deleteUserJPopupMenu.add(deleteUserPopupMenuYesJButton, deleteUserPopupMenuConstraints);		deleteUserPopupMenuConstraints.gridx = 1;		deleteUserPopupMenuConstraints.insets = new Insets(5, 5, 10, 5);		deleteUserJPopupMenu.add(deleteUserPopupMenuNoJButton, deleteUserPopupMenuConstraints);		templateItemNumberJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateItemNumberJPanel.setBackground(lightQuintessentialThemeColor);		templateItemNumberJTextField.setBackground(Color.LIGHT_GRAY);		templateItemNumberPanelConstraints.insets = new Insets(6, 6, 3, 6);		templateItemNumberJPanel.add(templateItemNumberJTextField, templateItemNumberPanelConstraints);		templateItemNumberPanelConstraints.gridy = 1;		templateItemNumberPanelConstraints.insets = new Insets(3, 6, 6, 6);		templateItemNumberPanelConstraints.weightx = 1;		templateItemNumberPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateItemNumberJPanel.add(templateItemNumberJButton, templateItemNumberPanelConstraints);		templateVisibleFieldDescriptionJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateVisibleFieldDescriptionJPanel.setBackground(lightQuintessentialThemeColor);		templateVisibleFieldDescriptionPanelConstraints.weightx = 1;		templateVisibleFieldDescriptionPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateVisibleFieldDescriptionPanelConstraints.insets = new Insets(0, 4, 0, 9);		templateVisibleFieldDescriptionJPanel.add(templateVisibleFieldDescriptionPanelJLabel, templateVisibleFieldDescriptionPanelConstraints);		templateVisibleFieldDescriptionPanelConstraints.gridx = 1;		templateVisibleFieldDescriptionPanelConstraints.gridwidth = 1;		templateVisibleFieldDescriptionJPanel.add(includeItemNumbersJToggleButton, templateVisibleFieldDescriptionPanelConstraints);		templateVisibleFieldDescriptionPanelConstraints.gridwidth = 2;		templateVisibleFieldDescriptionPanelConstraints.gridy = 1;		templateVisibleFieldDescriptionPanelConstraints.gridx = 0;		templateVisibleFieldDescriptionPanelConstraints.weightx = 1;		templateVisibleFieldDescriptionPanelConstraints.fill = GridBagConstraints.BOTH;		templateVisibleFieldDescriptionPanelConstraints.insets = new Insets(0, 9, 9, 9);		templateVisibleFieldDescriptionJPanel.add(templateVisibleFieldDescriptionJTextField, templateVisibleFieldDescriptionPanelConstraints);		templateMedicalCodeDetailsPanelJToggleButton.setActionCommand("templateMedicalCodeDetailsPanelJToggleButton");		templateMedicalCodeDetailsPanelJToggleButton.addActionListener(this);		templateMedicalCodeDetailsPanelJToggleButton.setRolloverEnabled(false);		templateItemArielFontTypeJRadioButton.addActionListener(this);		templateItemArielFontTypeJRadioButton.setActionCommand("templateItemArielFontTypeJRadioButton");		templateItemArielFontTypeJRadioButton.setOpaque(false);		templateItemSerifFontTypeJRadioButton.addActionListener(this);		templateItemSerifFontTypeJRadioButton.setActionCommand("templateItemSerifFontTypeJRadioButton");		templateItemSerifFontTypeJRadioButton.setOpaque(false);		templateItemElectronFontTypeJRadioButton.addActionListener(this);		templateItemElectronFontTypeJRadioButton.setActionCommand("templateItemElectronFontTypeJRadioButton");		templateItemElectronFontTypeJRadioButton.setOpaque(false);		templateItemFontSizeJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateItemFontSizeJPanel.setOpaque(false);		templateItemFontSizePanelConstraints.anchor = GridBagConstraints.WEST;		templateItemFontSizeJPanel.add(templateItemFontSizeJLabel, templateItemFontSizePanelConstraints);		templateItemFontSizePanelConstraints.gridx = 1;		templateItemFontSizePanelConstraints.weightx = 1;		templateItemFontSizePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateItemFontSizeJPanel.add(templateItemFontSizeJTextField, templateItemFontSizePanelConstraints);		templateItemFontTypeJPanel.setOpaque(false);		templateItemFontTypePanelConstraints.gridx = 0;		templateItemFontTypePanelConstraints.fill = GridBagConstraints.NONE;		templateItemFontTypeJPanel.add(templateItemFontTypeJLabel, templateItemFontTypePanelConstraints);		templateItemFontTypePanelConstraints.gridx = 1;		templateItemFontTypeJPanel.add(templateItemArielFontTypeJRadioButton, templateItemFontTypePanelConstraints);		templateItemFontTypePanelConstraints.gridx = 2;		templateItemFontTypeJPanel.add(templateItemSerifFontTypeJRadioButton, templateItemFontTypePanelConstraints);		templateItemFontTypePanelConstraints.gridx = 3;		templateItemFontTypeJPanel.add(templateItemElectronFontTypeJRadioButton, templateItemFontTypePanelConstraints);		templatePanelButtonsJPanel.setBackground(quintessentialThemeColor);		templatePanelButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		templatePanelButtonsPanelConstraints.insets = new Insets(9, 10, 9, 5);		templatePanelButtonsJPanel.add(templateAddDataItemJButton, templatePanelButtonsPanelConstraints);		templatePanelButtonsPanelConstraints.gridx = 1;		templatePanelButtonsPanelConstraints.insets = new Insets(9, 5, 9, 25);		templatePanelButtonsJPanel.add(templateDeleteDataItemJButton, templatePanelButtonsPanelConstraints);		templatePanelButtonsPanelConstraints.gridx = 2;		templatePanelButtonsPanelConstraints.insets = new Insets(9, 25, 9, 10);		templatePanelButtonsJPanel.add(templateDeleteDataTemplateJButton, templatePanelButtonsPanelConstraints);		templatePanelButtonsPanelConstraints.gridx = 3;		templatePanelButtonsJPanel.add(templateSaveAsTemplateJButton, templatePanelButtonsPanelConstraints);		templateChooseTemplateJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateChooseTemplateJPanel.setBackground(lightQuintessentialThemeColor);		templateChooseTemplateJTextField.setEditable(false);		templateChooseTemplateJTextField.setDisabledTextColor(Color.BLACK);		templateChooseTemplateJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateChooseTemplateJTextField.setBackground(Color.LIGHT_GRAY);		templateChooseTemplatePanelConstraints.insets = new Insets(6, 6, 3, 6);		templateChooseTemplateJPanel.add(templateChooseTemplateJTextField, templateChooseTemplatePanelConstraints);		templateChooseTemplatePanelConstraints.weightx = 1;		templateChooseTemplatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateChooseTemplatePanelConstraints.gridy = 1;		templateChooseTemplatePanelConstraints.insets = new Insets(3, 6, 6, 6);		templateChooseTemplateJPanel.add(templateChooseTemplateJButton, templateChooseTemplatePanelConstraints);		templateSectionJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateSectionJPanel.setBackground(lightQuintessentialThemeColor);		templateSectionJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateSectionJTextField.setEnabled(false);		templateSectionJTextField.setDisabledTextColor(Color.BLACK);		templateSectionJTextField.setBackground(Color.LIGHT_GRAY);		templateSectionPanelConstraints.insets = new Insets(6, 6, 3, 6);		templateSectionJPanel.add(templateSectionJTextField, templateSectionPanelConstraints);		templateSectionPanelConstraints.gridy = 1;		templateSectionPanelConstraints.insets = new Insets(3, 6, 6, 6);		templateSectionPanelConstraints.weightx = 1;		templateSectionPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateSectionJPanel.add(templateSectionJButton, templateSectionPanelConstraints);		templatePageNumberJTextField.setDisabledTextColor(Color.BLACK);		templatePageNumberJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templatePageNumberJPanel.setBackground(lightQuintessentialThemeColor);		templatePageNumberJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templatePageNumberJTextField.setBackground(Color.LIGHT_GRAY);		templatePageNumberPanelConstraints.insets = new Insets(6, 6, 3, 6);		templatePageNumberJPanel.add(templatePageNumberJTextField, templatePageNumberPanelConstraints);		templatePageNumberPanelConstraints.gridy = 1;		templatePageNumberPanelConstraints.insets = new Insets(3, 6, 6, 6);		templatePageNumberPanelConstraints.weightx = 1;		templatePageNumberPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templatePageNumberJPanel.add(templatePageNumberJButton, templatePageNumberPanelConstraints);		templateItemOrientationJPanel.setOpaque(false);		templateItemOrientationPanelConstraints.anchor = GridBagConstraints.WEST;		templateItemOrientationPanelConstraints.gridx = 0;		templateItemOrientationJPanel.add(templateItemOrientationPromptJLabel, templateItemOrientationPanelConstraints);		templateItemOrientationPanelConstraints.gridx = 1;		templateItemOrientationJPanel.add(templateItemLeftToRightOrientationJRadioButton, templateItemOrientationPanelConstraints);		templateItemOrientationPanelConstraints.gridx = 2;		templateItemOrientationJPanel.add(templateItemTopToBottomOrientationJRadioButton, templateItemOrientationPanelConstraints);		templateInputCharacterLengthPromptPusherPanel.setOpaque(false);		templateInputCharacterLengthPromptJPanel.setOpaque(false);		templateInputCharacterLengthPromptJPanel.add(templateInputCharacterLengthPromptJLabel, templateInputCharacterLengthPromptPanelConstraints);		templateInputCharacterLengthPromptPanelConstraints.gridx = 1;		templateInputCharacterLengthPromptJPanel.add(templateInputCharacterLengthJTextField, templateInputCharacterLengthPromptPanelConstraints);		templateInputCharacterLengthPromptPanelConstraints.gridx = 2;		templateInputCharacterLengthPromptPanelConstraints.weightx = 1;		templateInputCharacterLengthPromptPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateInputCharacterLengthPromptJPanel.add(templateInputCharacterLengthPromptPusherPanel, templateInputCharacterLengthPromptPanelConstraints);		templateItemMarginsInPixelsLeftJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateItemMarginsInPixelsRightJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateItemMarginsInPixelsTopJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateItemMarginsInPixelsBottomJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));		templateItemMarginsInPixelsJPanel.setOpaque(false);		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsPromptJLabel, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 1;		templateItemMarginsInPixelsPanelConstraints.weightx = 1;		templateItemMarginsInPixelsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsPusherJPanel, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 2;		templateItemMarginsInPixelsPanelConstraints.weightx = 0;		templateItemMarginsInPixelsPanelConstraints.fill = GridBagConstraints.NONE;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsLeftJLabel, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 3;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsLeftJTextField, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 4;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsRightJLabel, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 5;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsRightJTextField, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 6;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsTopJLabel, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 7;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsTopJTextField, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 8;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsBottomJLabel, templateItemMarginsInPixelsPanelConstraints);		templateItemMarginsInPixelsPanelConstraints.gridx = 9;		templateItemMarginsInPixelsJPanel.add(templateItemMarginsInPixelsBottomJTextField, templateItemMarginsInPixelsPanelConstraints);		templateItemFormatJPanel.setBackground(lightQuintessentialThemeColor);		templateItemFormatJPanel.setBorder(new LineBorder(new Color(85, 85, 85), 1));		templateItemFormatPanelConstraints.gridy = 0;		templateItemFormatPanelConstraints.weightx = 1;		templateItemFormatPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateItemFormatPanelConstraints.anchor = GridBagConstraints.WEST;		templateItemFormatPanelConstraints.insets = new Insets(0, 6, 6, 6);		templateItemFormatPanelConstraints.gridwidth = 2;		templateItemFormatJPanel.add(templatePromptToFillBeforeClosingJPanel, templateItemFormatPanelConstraints);		templateItemFormatPanelConstraints.gridwidth = 1;		templateItemFormatPanelConstraints.gridy = 1;		templateItemFormatPanelConstraints.gridx = 0;		templateItemFormatJPanel.add(templateItemBoxBorderPromptJPanel, templateItemFormatPanelConstraints);		templateItemFormatPanelConstraints.gridx = 1;		templateItemFormatJPanel.add(templateItemOrientationJPanel, templateItemFormatPanelConstraints);		templateItemFormatPanelConstraints.gridy = 2;		templateItemFormatPanelConstraints.gridx = 0;		templateItemFormatPanelConstraints.gridwidth = 1;		templateItemFormatJPanel.add(templateItemFontSizeJPanel, templateItemFormatPanelConstraints);		templateItemFormatPanelConstraints.gridx = 1;		templateItemFormatJPanel.add(templateItemFontTypeJPanel, templateItemFormatPanelConstraints);		templateItemFormatPanelConstraints.gridy = 3;		templateItemFormatPanelConstraints.gridx = 0;		templateItemFormatPanelConstraints.gridwidth = 2;		templateItemFormatJPanel.add(templateItemMarginsInPixelsJPanel, templateItemFormatPanelConstraints);		templateItemFormatPanelConstraints.gridy = 4;		templateItemFormatPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateItemFormatPanelConstraints.weightx = 0;		templateItemFormatJPanel.add(templateInputCharacterLengthPromptJPanel, templateItemFormatPanelConstraints);		templatePanelPusherJPanel.setBackground(quintessentialThemeColor);		templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel.setOpaque(false);		templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel.setBorder(new TitledBorder("Item's associated medical code:"));		templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel.add(templateMedicalCodeSetJPanel, templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints);		templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints.gridx = 1;		templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel.add(templateDatatypeJPanel, templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints);		templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints.gridx = 2;		templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel.add(templateAtomicMedicalCodeJPanel, templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints);		templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints.gridx = 3;		templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel.add(templateMedicalCodeDetailsPanelJToggleButton, templatePanelCodeSetDataTypeCodeAndCodeDetailsPanelConstraints);		templatePanelTemplateSectionPageAndItemJPanel.setOpaque(false);		templatePanelTemplateSectionPageAndItemJPanel.setBorder(new TitledBorder("Item's location:"));		templatePanelTemplateSectionPageAndItemJPanel.add(templateChooseTemplateJPanel, templatePanelTemplateSectionPageAndItemPanelConstraints);		templatePanelTemplateSectionPageAndItemPanelConstraints.gridx = 1;		templatePanelTemplateSectionPageAndItemJPanel.add(templateSectionJPanel, templatePanelTemplateSectionPageAndItemPanelConstraints);		templatePanelTemplateSectionPageAndItemPanelConstraints.gridx = 2;		templatePanelTemplateSectionPageAndItemJPanel.add(templatePageNumberJPanel, templatePanelTemplateSectionPageAndItemPanelConstraints);		templatePanelTemplateSectionPageAndItemPanelConstraints.gridx = 3;		templatePanelTemplateSectionPageAndItemJPanel.add(templateItemNumberJPanel, templatePanelTemplateSectionPageAndItemPanelConstraints);		templatePanelConstraints.gridy = 1;		templatePanelConstraints.gridx = 0;		templatePanelConstraints.gridwidth = 4;		templatePanelConstraints.insets = new Insets(5, 10, 5, 10);		templateJPanel.add(templateHorizontalLine2JPanel, templatePanelConstraints);		templatePanelConstraints.gridy = 1;		templatePanelConstraints.gridx = 0;		templatePanelConstraints.insets = new Insets(5, 5, 12, 5);		templatePanelConstraints.weightx = 1;		templatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		templateJPanel.add(templatePanelTemplateSectionPageAndItemJPanel, templatePanelConstraints);		templatePanelConstraints.gridy = 2;		templateJPanel.add(templatePanelCodeSetDataTypeCodeAndCodeDetailsJPanel, templatePanelConstraints);		templatePanelConstraints.gridy = 3;		templatePanelConstraints.gridwidth = 4;		templatePanelConstraints.insets = new Insets(5, 10, 5, 10);		templatePanelConstraints.anchor = GridBagConstraints.CENTER;		templateJPanel.add(templateVisibleFieldDescriptionJPanel, templatePanelConstraints);		templatePanelConstraints.gridy = 4;		templatePanelConstraints.anchor = GridBagConstraints.WEST;		templateJPanel.add(templateItemFormatJPanel, templatePanelConstraints);		templatePanelConstraints.weightx = 1;		templatePanelConstraints.anchor = GridBagConstraints.CENTER;		templatePanelConstraints.insets = new Insets(5, 10, 5, 10);		templatePanelConstraints.gridy = 5;		templatePanelConstraints.weighty = 0;		templateJPanel.add(templateVisibilityToggleButtonsJPanel, templatePanelConstraints);		templatePanelConstraints.insets = new Insets(5, 0, 0, 0);		templatePanelConstraints.gridy = 6;		templateJPanel.add(templatePanelButtonsJPanel, templatePanelConstraints);		templatePanelConstraints.insets = new Insets(0, 0, 0, 0);		templatePanelConstraints.weighty = 1;		templatePanelConstraints.weightx = 1;		templatePanelConstraints.gridy = 7;		templatePanelConstraints.fill = GridBagConstraints.BOTH;		templateJPanel.add(templatePanelPusherJPanel, templatePanelConstraints);		templateVisibilityToggleButtonsJPanel.setOpaque(false);		templateVisibilityToggleButtonsJPanel.add(alignWithTopJToggleButton, templateVisibilityToggleButtonsPanelConstraints);		contentCoverJPanel.setBackground(quintessentialThemeColor);		templateJPanel.setBackground(quintessentialThemeColor);		appearanceJPanel.setOpaque(false);		userAccountsJPanel.setOpaque(false);		uMLDiagramJButton.setActionCommand("uMLDiagramJButton");		uMLDiagramJButton.addActionListener(this);		systemAdministrationJToggleButton.setActionCommand("systemAdministrationJToggleButton");		systemAdministrationJToggleButton.addActionListener(this);		placeFilesOnDesktopJButton.setActionCommand("placeFilesOnDesktopJButton");		placeFilesOnDesktopJButton.addActionListener(this);		placeImageOnDesktopJButton.setActionCommand("placeImageOnDesktopJButton");		placeImageOnDesktopJButton.addActionListener(this);		setUpJPanel.setOpaque(false);		setUpPanelConstraints.insets = new Insets(0, 0, 6, 0);		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpJPanel.add(setUpPanelLoginReAttemptsAllowedBeforeTheSystemAdministratorIsRequiredToLoginJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelLoginReAttemptsAllowedBeforeTheSystemAdministratorIsRequiredToLoginJTextField, setUpPanelConstraints);		setUpPanelConstraints.gridy = 1;		setUpPanelConstraints.gridx = 0;		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpJPanel.add(setUpPanelSystemAdministratorUserNamePromptJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelSystemAdministratorUserNameJTextField, setUpPanelConstraints);		setUpPanelConstraints.gridy = 2;		setUpPanelConstraints.gridx = 0;		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpPanelConstraints.insets = new Insets(0, 0, 12, 0);		setUpJPanel.add(setUpPanelSystemAdministratorPasswordPromptJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelSystemAdministratorPasswordJTextField, setUpPanelConstraints);		setUpPanelConstraints.gridy = 3;		setUpPanelConstraints.gridx = 0;		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpPanelConstraints.insets = new Insets(0, 0, 6, 0);		setUpJPanel.add(setUpPanelProgramDirectoryURLPromptJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelProgramDirectoryURLJTextField, setUpPanelConstraints);		setUpPanelConstraints.gridy = 4;		setUpPanelConstraints.gridx = 0;		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpJPanel.add(setUpPanelNetworkNodeDirectoryPromptJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelNetworkNodeDirectoryURLJTextField, setUpPanelConstraints);		setUpPanelConstraints.gridy = 5;		setUpPanelConstraints.gridx = 0;		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpJPanel.add(setUpPanelClaimsFileURLPromptJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelClaimsFileURLJTextField, setUpPanelConstraints);		setUpPanelConstraints.gridy = 6;		setUpPanelConstraints.gridx = 0;		setUpPanelConstraints.anchor = GridBagConstraints.EAST;		setUpPanelConstraints.insets = new Insets(0, 0, 12, 0);		setUpJPanel.add(setUpPanelBrowserExecutableURLPromptJLabel, setUpPanelConstraints);		setUpPanelConstraints.gridx = 1;		setUpPanelConstraints.anchor = GridBagConstraints.WEST;		setUpJPanel.add(setUpPanelBrowserExecutableURLJTextField, setUpPanelConstraints);		setUpPanelCreateDesktopIconPromptJPanel.setOpaque(false);		setUpPanelCreateDesktopIconPromptPanelConstraints.anchor = GridBagConstraints.EAST;		setUpPanelCreateDesktopIconPromptPanelConstraints.fill = GridBagConstraints.VERTICAL;		setUpPanelCreateDesktopIconPromptPanelConstraints.gridheight = 2;		setUpPanelCreateDesktopIconPromptPanelConstraints.insets = new Insets(0, 0, 0, 0);		setUpPanelCreateDesktopIconPromptJPanel.add(setUpPanelCreateDesktopIconPromptJButton, setUpPanelCreateDesktopIconPromptPanelConstraints);		systemDevelopmentJToggleButton.setActionCommand("systemDevelopmentJToggleButton");		systemDevelopmentJToggleButton.addActionListener(this);		systemAdministrationPanelButtonsJPanel.setOpaque(false);		systemAdministrationPanelButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		systemAdministrationPanelButtonsPanelConstraints.gridx = 0;		systemAdministrationPanelButtonsPanelConstraints.insets = new Insets(6, 6, 6, 3);		systemAdministrationPanelButtonsJPanel.add(setUpJToggleButton, systemAdministrationPanelButtonsPanelConstraints);		systemAdministrationPanelButtonsPanelConstraints.gridx = 1;		systemAdministrationPanelButtonsPanelConstraints.insets = new Insets(6, 3, 6, 3);		systemAdministrationPanelButtonsJPanel.add(systemDevelopmentJToggleButton, systemAdministrationPanelButtonsPanelConstraints);		systemAdministrationPanelButtonsPanelConstraints.gridx = 2;		systemAdministrationPanelButtonsPanelConstraints.insets = new Insets(6, 3, 6, 6);		systemAdministrationPanelButtonsJPanel.add(setUpPanelCreateDesktopIconPromptJPanel, systemAdministrationPanelButtonsPanelConstraints);		systemDevelopmentCardedPanelBasePanelConstraints.fill = GridBagConstraints.BOTH;		systemDevelopmentCardedPanelBasePanelConstraints.weightx = 1;		systemDevelopmentCardedPanelBaseJPanel.add(systemDevelopmentBasePanelButtonsJPanel, systemDevelopmentCardedPanelBasePanelConstraints);		systemDevelopmentCardedPanelBasePanelConstraints.gridy = 1;		systemDevelopmentCardedPanelBasePanelConstraints.weighty = 1;		systemDevelopmentCardedPanelBaseJPanel.add(systemDevelopmentCardedJPanel, systemDevelopmentCardedPanelBasePanelConstraints);		systemAdministrationCardedJPanel.add(setUpPanelBaseJPanel, "setUpPanelBaseJPanel");		systemAdministrationCardedJPanel.add(systemDevelopmentCardedPanelBaseJPanel, "systemDevelopmentCardedPanelBaseJPanel");		systemAdministrationBaseJPanel.setOpaque(false);		systemAdministrationBasePanelConstraints.fill = GridBagConstraints.BOTH;		systemAdministrationBasePanelConstraints.weightx = 1;		systemAdministrationBaseJPanel.add(systemAdministrationPanelButtonsJPanel, systemAdministrationBasePanelConstraints);		systemAdministrationBasePanelConstraints.gridy = 1;		systemAdministrationBasePanelConstraints.weighty = 1;		systemAdministrationBaseJPanel.add(systemAdministrationCardedJPanel, systemAdministrationBasePanelConstraints);		zoomUMLDiagramJTextField.addActionListener(this);		zoomUMLDiagramJTextField.setActionCommand("zoomUMLDiagramJTextField");		zoomUMLDiagramTextFieldJPanel.setOpaque(false);		zoomUMLDiagramTextFieldJPanel.add(zoomUMLDiagramJLabel, zoomUMLDiagramButtonPanelConstraints);		zoomUMLDiagramButtonPanelConstraints.gridx = 1;		zoomUMLDiagramButtonPanelConstraints.weightx = 1;		zoomUMLDiagramButtonPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		zoomUMLDiagramTextFieldJPanel.add(zoomUMLDiagramJTextField, zoomUMLDiagramButtonPanelConstraints);		systemDevelopmentBasePanelButtonsJPanel.setBackground(quintessentialThemeColor);		systemDevelopmentBasePanelButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));		systemDevelopmentBasePanelButtonsPanelConstraints.gridy = 0;		systemDevelopmentBasePanelButtonsPanelConstraints.gridx = 0;		systemDevelopmentBasePanelButtonsPanelConstraints.insets = new Insets(6, 6, 6, 3);		systemDevelopmentBasePanelButtonsJPanel.add(uMLDiagramJButton, systemDevelopmentBasePanelButtonsPanelConstraints);		systemDevelopmentBasePanelButtonsPanelConstraints.gridx = 1;		systemDevelopmentBasePanelButtonsPanelConstraints.insets = new Insets(6, 3, 6, 10);		systemDevelopmentBasePanelButtonsJPanel.add(zoomUMLDiagramTextFieldJPanel, systemDevelopmentBasePanelButtonsPanelConstraints);		systemDevelopmentBasePanelButtonsPanelConstraints.gridy = 0;		systemDevelopmentBasePanelButtonsPanelConstraints.gridx = 2;		systemDevelopmentBasePanelButtonsPanelConstraints.insets = new Insets(6, 10, 6, 6);		systemDevelopmentBasePanelButtonsJPanel.add(placeFilesOnDesktopJButton, systemDevelopmentBasePanelButtonsPanelConstraints);		systemDevelopmentBasePanelButtonsPanelConstraints.gridx = 3;		systemDevelopmentBasePanelButtonsPanelConstraints.insets = new Insets(6, 3, 6, 6);		systemDevelopmentBasePanelButtonsJPanel.add(placeImageOnDesktopJButton, systemDevelopmentBasePanelButtonsPanelConstraints);		uMLDiagramsPanelScrollPaneJPanel.setBackground(lightQuintessentialThemeColor);		uMLDiagramsPanelJScrollPane.setOpaque(false);		uMLDiagramsPanelJScrollPane.setHorizontalScrollBar(uMLDiagramsPanelHorizontalJScrollbar);		uMLDiagramsPanelJScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);		uMLDiagramsPanelJScrollPane.setVerticalScrollBar(uMLDiagramsPanelVerticalJScrollbar);		uMLDiagramsPanelJScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);		uMLDiagramsJPanel.setBackground(lightQuintessentialThemeColor);		uMLDiagramsPanelConstraints.weighty = 1;		uMLDiagramsPanelConstraints.weightx = 1;		uMLDiagramsPanelConstraints.fill = GridBagConstraints.BOTH;		uMLDiagramsJPanel.add(uMLDiagramsPanelJScrollPane, uMLDiagramsPanelConstraints);		systemDevelopmentCardedJPanel.add(uMLDiagramsJPanel, "uMLDiagramsJPanel");		systemDevelopmentCardedJPanel.add(dataDiagramsJPanel, "dataDiagramsJPanel");		systemDevelopmentCardedJPanel.add(eventDiagramsJPanel, "eventDiagramsJPanel");		systemDevelopmentCardedJPanel.add(dataWorkflowDiagramsJPanel, "dataWorkflowDiagramsJPanel");		setUpPanelBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);		setUpPanelBaseJPanel.add(setUpJPanel, setUpPanelBasePanelConstraints);		cardedMainContentJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);		cardedMainContentJPanel.add(contentCoverJPanel, "contentCoverJPanel");		cardedMainContentJPanel.add(systemAdministrationBaseJPanel, "systemAdministrationBaseJPanel");		cardedMainContentJPanel.add(userAccountsJPanel, "userAccountsJPanel");		cardedMainContentJPanel.add(appearanceJPanel, "appearanceJPanel");		cardedMainContentJPanel.add(templateJPanel, "templateJPanel");		setUpJToggleButton.setMnemonic('A');		setUpJToggleButton.addActionListener(this);		setUpJToggleButton.setActionCommand("setUpJToggleButton");		userAccountsJToggleButton.setMnemonic('U');		userAccountsJToggleButton.addActionListener(this);		userAccountsJToggleButton.setActionCommand("userAccountsJToggleButton");		systemAppearanceJToggleButton.setMnemonic('p');		systemAppearanceJToggleButton.addActionListener(this);		systemAppearanceJToggleButton.setActionCommand("systemAppearanceJToggleButton");		templatesJToggleButton.setActionCommand("templatesJToggleButton");		templatesJToggleButton.setMnemonic('T');		templatesJToggleButton.addActionListener(this);		systemButtonsJPanel.setBackground(quintessentialThemeColor);		systemButtonsPanelConstraints.fill = GridBagConstraints.BOTH;		systemButtonsPanelConstraints.weightx = 1;		systemButtonsPanelConstraints.insets = new Insets(6, 6, 6, 3);		systemButtonsPanelConstraints.gridy = 0;		systemButtonsPanelConstraints.ipady = 12;		systemButtonsJPanel.add(systemAdministrationJToggleButton, systemButtonsPanelConstraints);		systemButtonsPanelConstraints.gridx = 1;		systemButtonsPanelConstraints.insets = new Insets(6, 3, 6, 3);		systemButtonsJPanel.add(userAccountsJToggleButton, systemButtonsPanelConstraints);		systemButtonsPanelConstraints.gridx = 2;		systemButtonsJPanel.add(systemAppearanceJToggleButton, systemButtonsPanelConstraints);		systemButtonsPanelConstraints.gridx = 3;		systemButtonsPanelConstraints.insets = new Insets(6, 3, 6, 6);		systemButtonsJPanel.add(templatesJToggleButton, systemButtonsPanelConstraints);		systemButtonsBaseJPanel.setOpaque(false);		systemButtonsBaseJPanel.setBackground(quintessentialThemeColor);		systemButtonsBasePanelConstraints.weighty = 1;		systemButtonsBasePanelConstraints.weightx = 1;		systemButtonsBasePanelConstraints.fill = GridBagConstraints.BOTH;		systemButtonsBaseJPanel.add(systemButtonsJPanel, systemButtonsBasePanelConstraints);		contentPanelConstraints.weightx = 1;		contentPanelConstraints.fill = GridBagConstraints.BOTH;		contentPanelConstraints.insets = new Insets(0, 0, 4, 0);		contentJPanel.add(systemButtonsBaseJPanel, contentPanelConstraints);		contentPanelConstraints.weightx = 0;		contentPanelConstraints.weighty = 1;		contentPanelConstraints.insets = new Insets(0, 0, 0, 0);		contentPanelConstraints.gridy = 1;		contentJPanel.add(cardedMainContentJPanel, contentPanelConstraints);		includeItemNumbersJToggleButton.setSelected(false);		cursorPanelPusherJPanel.setOpaque(false);		pack();		//placeDecommentedSourceFilesOnDesktop();	}	public void doBorderTheme(String borderTheme) {		MatteBorder lightMatteBorder0 = new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 0));		MatteBorder lightMatteBorder1 = new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 64));		MatteBorder lightMatteBorder2 = new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 128));		MatteBorder lightMatteBorder3 = new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 170));		MatteBorder darkMatteBorder0 = new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 32));		MatteBorder darkMatteBorder1 = new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 48));		MatteBorder darkMatteBorder2 = new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 64));		MatteBorder darkMatteBorder3 = new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80));		MatteBorder darkMatteBorder4 = new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 96));		MatteBorder darkMatteBorder5 = new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128));		Border shadowedBorder = new CompoundBorder(new CompoundBorder(new CompoundBorder(darkMatteBorder5, darkMatteBorder4), new CompoundBorder(new CompoundBorder(lightMatteBorder3, darkMatteBorder3), lightMatteBorder2)), new CompoundBorder(new CompoundBorder(darkMatteBorder2, new CompoundBorder(lightMatteBorder1, darkMatteBorder1)), new CompoundBorder(lightMatteBorder0, darkMatteBorder0)));		Border cardedPanelBorder = null;		Border buttonsPanelBorder = null;		Color slickLineColor = new Color(98, 98, 98);		if (borderTheme.equals("SLATE")) {			buttonBorder = new BevelBorder(BevelBorder.RAISED);			panelBorder = new BevelBorder(BevelBorder.RAISED);			buttonColor = bileButtonColor;			buttonsPanelBorder = new BevelBorder(BevelBorder.RAISED);			cardedPanelBorder = new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new CompoundBorder(new LineBorder(quintessentialThemeColor, 14), new BevelBorder(BevelBorder.LOWERED)));			mainContentPanelBorder = new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new CompoundBorder(new LineBorder(quintessentialThemeColor, 8), new BevelBorder(BevelBorder.LOWERED)));			quintessentialThemeColor = new Color(209, 200, 177);			lightQuintessentialThemeColor = new Color(232, 228, 216);		} else if (borderTheme.equals("SLICK")) {			buttonBorder = new EtchedBorder();			panelBorder = new LineBorder(new Color(112, 112, 112), 1);			blockBorder = new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new CompoundBorder(new LineBorder(quintessentialThemeColor, 8), new EtchedBorder()));			buttonColor = bileButtonColor;			buttonsPanelBorder = new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(quintessentialThemeColor, 9)), new EtchedBorder());			cardedPanelBorder = new CompoundBorder(new CompoundBorder(new MatteBorder(0, 1, 1, 1, Color.DARK_GRAY), new MatteBorder(1, 0, 0, 0, Color.WHITE)), new CompoundBorder(new LineBorder(quintessentialThemeColor, 14), new BevelBorder(BevelBorder.LOWERED)));			mainContentPanelBorder = new CompoundBorder(new LineBorder(quintessentialThemeColor, 9), new BevelBorder(BevelBorder.LOWERED));			quintessentialThemeColor = new Color(209, 200, 177);			lightQuintessentialThemeColor = new Color(232, 228, 216);		} else if (borderTheme.equals("ROUNDED")) {			buttonBorder = shadowedBorder;			panelBorder = shadowedBorder;			blockBorder = new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new CompoundBorder(new LineBorder(quintessentialThemeColor, 8), new BevelBorder(BevelBorder.LOWERED)));			buttonColor = bileButtonColor;			buttonsPanelBorder = shadowedBorder;			cardedPanelBorder = shadowedBorder;			mainContentPanelBorder = shadowedBorder;			quintessentialThemeColor = new Color(209, 200, 177);			lightQuintessentialThemeColor = new Color(232, 228, 216);		} else if (borderTheme.equals("HIGH_CONTRAST")) {			buttonBorder = new LineBorder(Color.BLACK, 3);			panelBorder = new LineBorder(Color.BLACK, 3);			buttonColor = Color.WHITE;			buttonsPanelBorder = new LineBorder(Color.BLACK, 3);			cardedPanelBorder = new LineBorder(Color.BLACK, 3);			mainContentPanelBorder = new LineBorder(Color.BLACK, 3);			quintessentialThemeColor = Color.WHITE;			lightQuintessentialThemeColor = Color.WHITE;		}		Device.device.workspace.decisionSupportWindow.statisticsPanelButtonsJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.dataQueryInputJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.costAnalysisButtonsBaseJPanel.setBorder(SystemWindow.panelBorder);		Device.device.workspace.decisionSupportWindow.treatmentEffectAnalysisButtonsJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.statisticsPatientChartEntryHeaderJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.statisticsTimeRangeEntryHeaderJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.statisticsMedicalCodeEntryHeaderJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.dSCoverJPanel.setBorder(shadowedBorder);		Device.device.workspace.decisionSupportWindow.mainButtonsJPanel.setBorder(shadowedBorder);		Device.device.workspace.decisionSupportWindow.addressBarJPanel.setBorder(shadowedBorder);		Device.device.workspace.decisionSupportWindow.decisionSupportBrowserBorderJPanel.setBorder(shadowedBorder);		Device.device.workspace.decisionSupportWindow.decisionAnalysisBaseButtonsJPanel.setBorder(buttonsPanelBorder);		Device.device.workspace.decisionSupportWindow.dataQueryOutputJPanel.setBorder(SystemWindow.blockBorder);		Device.device.workspace.decisionSupportWindow.statisticsPanelContentCardedJPanel.setBorder(SystemWindow.blockBorder);		Device.device.workspace.decisionSupportWindow.decisionAnalysisPanelCardedJPanel.setBorder(SystemWindow.blockBorder);		Device.device.workspace.decisionSupportWindow.molecularNetworkChooserJScrollPane.setBorder(SystemWindow.blockBorder);		PracticeWindow.viewMedicalCodesCardedJPanel.setBorder(mainContentPanelBorder);		PracticeWindow.outputNetworkPanelContentJPanel.setBorder(mainContentPanelBorder);		PracticeWindow.inputNetworkPanelContentJPanel.setBorder(mainContentPanelBorder);		PracticeWindow.patientIndexJScrollPane.setBorder(mainContentPanelBorder);		PracticeWindow.viewMedicalCodesButtonsJPanel.setBorder(panelBorder);		PracticeWindow.patientIndexButtonsJPanel.setBorder(panelBorder);		PracticeWindow.outputNetworkHeaderJPanel.setBorder(panelBorder);		PracticeWindow.inputNetworkHeaderJPanel.setBorder(panelBorder);		MessagingWindow.addressPanelButtonJPanel.setBorder(panelBorder);		MessagingWindow.editContactsButtonJPanel.setBorder(panelBorder);		reColorizeAllButtons(Device.device.workspace.systemWindow, buttonColor);		reColorizeAllButtons(Device.device.workspace.messagingWindow, buttonColor);		reColorizeAllButtons(Device.device.workspace.practiceAssistantWindow, buttonColor);		reColorizeAllButtons(Device.device.workspace.decisionSupportWindow, buttonColor);		reColorizeAllButtons(Device.device.workspace.chartingWindow, buttonColor);		reBorderAllButtons(Device.device.workspace.systemWindow, buttonBorder);		reBorderAllButtons(Device.device.workspace.messagingWindow, buttonBorder);		reBorderAllButtons(Device.device.workspace.practiceAssistantWindow, buttonBorder);		reBorderAllButtons(Device.device.workspace.decisionSupportWindow, buttonBorder);		reBorderAllButtons(Device.device.workspace.chartingWindow, buttonBorder);		appearancePanelButtonsJPanel.setBorder(buttonsPanelBorder);		userAccountsPanelButtonsJPanel.setBorder(panelBorder);		systemButtonsJPanel.setBorder(panelBorder);		templatePanelPusherJPanel.setBorder(panelBorder);		contentCoverJPanel.setBorder(panelBorder);		templateJPanel.setBorder(panelBorder);		setUpPanelBaseJPanel.setBorder(cardedPanelBorder);		appearanceCardedJPanel.setBorder(cardedPanelBorder);		userAccountsCardedJPanel.setBorder(cardedPanelBorder);		Device.device.validate();		Device.device.repaint();		reSize(true, "appearanceJPanel");	}	public void reColorizeAllButtons(Container container, Color color) {		int ind = 0;		while (ind < container.getComponentCount()) {			if (container.getComponent(ind) instanceof JButton) {				((JButton) (container.getComponent(ind))).setBackground(color);			} else if (container.getComponent(ind) instanceof JToggleButton) {				((JToggleButton) (container.getComponent(ind))).setBackground(color);			} else if (container.getComponent(ind) instanceof Container) {				reColorizeAllButtons(((Container) (container.getComponent(ind))), color);			}			ind++;		}		if (color == bileButtonColor) {			ChartingWindow.menuBar.setBackground(menuBarColor);		} else {			ChartingWindow.menuBar.setBackground(color);		}	}	public void reBorderAllButtons(Container container, Border border) {		int ind = 0;		while (ind < container.getComponentCount()) {			if (container.getComponent(ind) instanceof JButton) {				((JButton) (container.getComponent(ind))).setBorder(border);			} else if (container.getComponent(ind) instanceof JToggleButton) {				((JToggleButton) (container.getComponent(ind))).setBorder(border);			} else if (container.getComponent(ind) instanceof Container && !(container.getComponent(ind).equals(Device.device.workspace.chartingWindow.tabButtonsJPanel)) && !(container.getComponent(ind).equals(Device.device.workspace.chartingWindow.menuBar)) && !(null != container.getComponent(ind).getName() && container.getComponent(ind).getName().toLowerCase().contains("paper"))) {				reBorderAllButtons(((Container) (container.getComponent(ind))), border);			}			ind++;		}	}	public String fontChoice() {		int[] o = { 3, 3, 3 };		String answer;		if (Access.isUserLoggedIn && ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(0)).elementAt(5).elementAt(1).equals("TRUE")) {			answer = ((String) getElement(14, "userFontChoice", null));		} else {			answer = ((String) getElement(15, "defaultFontChoice", null));		}		return answer;	}	private void fillAndShowTemplateChooseTemplatePopupMenu() {		templateChooseNewTemplateOKJButton.setBackground(SystemWindow.buttonColor);		templateChooseNewTemplateOKJButton.setBorder(SystemWindow.buttonBorder);		clearTemplateInputBelow("template");		int numButtons = (Integer) getElement(16, "numTemplates", null) - 1;		if (numButtons > 8) {			numButtons = 8;		}		int panelHeight = 0;		if (templateChooseExistingTemplateJPanel.getComponentCount() > 0) {			panelHeight = (4 + (int) (Integer.valueOf(((JButton) (templateChooseExistingTemplateJPanel.getComponent(0))).getHeight()))) * (numButtons) + 4;		} else {			panelHeight = (4 + 20) * (numButtons) + 4;		}		templateChooseExistingTemplateJPanel.removeAll();		int ind = 1;		while (ind < (Integer) getElement(17, "numTemplates", null)) {			templateChooseExistingTemplatePanelConstraints.gridy = ind;			templateChooseExistingTemplateJPanel.add(new JButton((String) getElement(18, "templateName", Integer.toString(ind))), templateChooseExistingTemplatePanelConstraints);			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setName(String.valueOf(ind));			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setBorder(new LineBorder(new Color(92, 92, 92), 1));			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setOpaque(true);			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setBackground(buttonColor);			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).addActionListener(this);			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setActionCommand("anExistingTemplateButton");			((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setFont(systemFont);			if (templateName != null && templateName.equals((String) getElement(19, "templateName", Integer.toString(ind)))) {				((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setEnabled(false);				((JButton) (templateChooseExistingTemplateJPanel.getComponent(ind - 1))).setBackground(new Color(230, 255, 230));			}			ind++;		}		templateChooseTemplateJPopupMenu.show(templateChooseTemplateJPanel, 0, templateChooseTemplateJPanel.getHeight());		templateChooseNewTemplateJTextField.requestFocusInWindow();	}	public JPanel[] getTemplatePage(int sectionNumber, int pageNumber) {		JPanel templatePageBaseJPanel = new JPanel(new GridBagLayout());		JPanel existingTemplatePageJPanel = new JPanel();		JPanel existingTemplatePageNumbersJPanel = new JPanel();		JPanel templatePageHeaderJPanel = new JPanel(new GridBagLayout());		JPanel dataItemJPanel = new JPanel(new GridBagLayout());		JPanel dataItemNumberJPanel;		JLabel pusherJLabel = new JLabel(" ");		GridBagConstraints templatePageBasePanelConstraints = new GridBagConstraints();		existingTemplatePageNumbersJPanel.setLayout(null);		templatePageHeaderJPanel.setBackground(Color.WHITE);		templatePageBaseJPanel.setBackground(Color.WHITE);		String sectionName = sectionName(sectionNumber);		pusherJLabel.setBackground(Color.WHITE);		dataItemJPanel.setBackground(Color.WHITE);		templatePageBaseJPanel.add(templatePageHeaderJPanel, templatePageBasePanelConstraints);		int itemNumberInd = 0;		int numItemsOnPage = ((Vector) (((Vector) (template.elementAt(sectionNumber))).elementAt(pageNumber))).size() - 1;		SystemWindow.println("    sectionNumber: " + sectionNumber);		SystemWindow.println("    pageNumber: " + pageNumber);		SystemWindow.println("    numItemsOnPage: " + numItemsOnPage);		while (itemNumberInd < numItemsOnPage) {			Vector itemInformation = ((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16))).elementAt(chartTemplateChoiceIndice)))))).elementAt(sectionNumber))).elementAt(pageNumber))).elementAt(itemNumberInd))).elementAt(1)));			String description = (String) (itemInformation.elementAt(0));			String userReadableDatatype = (String) (itemInformation.elementAt(1));			String medicalCodeDatatype = (String) (itemInformation.elementAt(2));			boolean isEntryPrompted = (Boolean) (itemInformation.elementAt(3));			String fieldOrientation = (String) (itemInformation.elementAt(4));			String fontType = (String) (itemInformation.elementAt(5));			String fontSize = (String) (itemInformation.elementAt(6));			boolean isBoxBordered = (Boolean) (itemInformation.elementAt(7));			int fieldCharLength = (Integer) (itemInformation.elementAt(8));			int leftMargin = (Integer) (itemInformation.elementAt(9));			int rightMargin = (Integer) (itemInformation.elementAt(10));			int topMargin = (Integer) (itemInformation.elementAt(11));			int bottomMargin = (Integer) (itemInformation.elementAt(12));			int boundsX = ((Rectangle) (itemInformation.elementAt(14))).x;			int boundsY = ((Rectangle) (itemInformation.elementAt(14))).y;			int boundsWidth = ((Rectangle) (itemInformation.elementAt(14))).width;			int boundsHeight = ((Rectangle) (itemInformation.elementAt(14))).height;			dataItemJPanel = createDataCellItemJPanel(new int[] { sectionNumber, pageNumber, itemNumberInd }, itemInformation);			dataItemNumberJPanel = new JPanel(new GridBagLayout());			dataItemJPanel.setBounds(boundsX, boundsY, boundsWidth, boundsHeight);			dataItemNumberJPanel.setBounds(boundsX, boundsY, boundsWidth, boundsHeight);			dataItemNumberJPanel.setOpaque(false);			dataItemNumberJPanel.add(new JLabel());			((JLabel) (dataItemNumberJPanel.getComponent(0))).setBackground(new Color(255, 212, 212));			((JLabel) (dataItemNumberJPanel.getComponent(0))).setFont(new Font("Ariel", Font.BOLD, 18));			((JLabel) (dataItemNumberJPanel.getComponent(0))).setBorder(new LineBorder(new Color(231, 188, 188), 1));			((JLabel) (dataItemNumberJPanel.getComponent(0))).setForeground(new Color(0, 156, 164));			((JLabel) (dataItemNumberJPanel.getComponent(0))).setOpaque(true);			String string = String.valueOf(itemNumberInd);			if (itemNumberInd < 10) {				((JLabel) (dataItemNumberJPanel.getComponent(0))).setText("  " + string + ".");			} else if (itemNumberInd < 100) {				((JLabel) (dataItemNumberJPanel.getComponent(0))).setText(" " + string + ".");			} else {				((JLabel) (dataItemNumberJPanel.getComponent(0))).setText(string + ".");			}			((JLabel) (dataItemNumberJPanel.getComponent(0))).setVisible(false);			existingTemplatePageJPanel.add(dataItemJPanel);			existingTemplatePageNumbersJPanel.add(dataItemNumberJPanel);			itemNumberInd++;		}		templateItemNumberJTextField.setText(String.valueOf(numItemsOnPage));		templateItemNumberJTextField.setBackground(Color.WHITE);		int margin;		if (Device.device.screenSize.getWidth() <= 800) {			margin = 8;		} else {			margin = 72;		}		templatePageBasePanelConstraints.gridy = 1;		existingTemplatePageJPanel.setLayout(null);		existingTemplatePageJPanel.setPreferredSize(templatePageDimension);		existingTemplatePageJPanel.setSize(templatePageDimension);		existingTemplatePageJPanel.setMaximumSize(templatePageDimension);		existingTemplatePageJPanel.setMinimumSize(templatePageDimension);		JPanel[] returnJPanels = { existingTemplatePageJPanel, existingTemplatePageNumbersJPanel };		return returnJPanels;	}	private int getRemainingWidthAsAlignedWithItemAbove(int addingItemGridY, int addingItemGridX, int addingItemGridwidth) {		JPanel itemAboveJPanel = ((JPanel) (templatePreviewPageJPanel.getComponentAt(new Point(addingItemGridX + 5, addingItemGridY - 12))));		int itemAboveGridwidth = itemAboveJPanel.getWidth();		int itemAboveGridx = itemAboveJPanel.getX();		int alignedWidth = -1;		if (addingItemGridX + addingItemGridwidth <= itemAboveGridx + itemAboveGridwidth) {			alignedWidth = itemAboveGridwidth + (itemAboveGridx - addingItemGridX);		}		return alignedWidth;	}	private void fillTemplateMedicalCodingSchemePopupMenu(String sectionDictionaries) {		if (sectionDictionaries.equals("Demographics")) {			templateMedicalCodingSetJPopupMenu.removeAll();			templateMedicalCodingSchemePopupMenuConstraints.fill = GridBagConstraints.HORIZONTAL;			templateMedicalCodingSchemePopupMenuConstraints.weightx = 1;			templateMedicalCodingSchemePopupMenuConstraints.gridy = 0;			templateMedicalCodingSchemePopupMenuConstraints.insets = new Insets(9, 9, 0, 9);			templateMedicalCodingSetJPopupMenu.add(hL7JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 1;			templateMedicalCodingSchemePopupMenuConstraints.insets = new Insets(9, 9, 9, 9);			templateMedicalCodingSetJPopupMenu.add(uncodedItemJButton, templateMedicalCodingSchemePopupMenuConstraints);		} else if (sectionDictionaries.equals("Insurance")) {			templateMedicalCodingSetJPopupMenu.removeAll();			templateMedicalCodingSchemePopupMenuConstraints.gridy = 0;			templateMedicalCodingSetJPopupMenu.add(hL7JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 1;			templateMedicalCodingSetJPopupMenu.add(hCPCSLevel1JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 2;			templateMedicalCodingSetJPopupMenu.add(hCPCSLevel2JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 3;			templateMedicalCodingSetJPopupMenu.add(uncodedItemJButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 4;			templateMedicalCodingSetJPopupMenu.add(new JLabel("    Please enter the name of your new"), templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 5;			templateMedicalCodingSetJPopupMenu.add(new JLabel("    custom code set into the field above"), templateMedicalCodingSchemePopupMenuConstraints);		} else if (sectionDictionaries.equals("Chart cover")) {			templateMedicalCodingSetJPopupMenu.removeAll();			templateMedicalCodingSchemePopupMenuConstraints.fill = GridBagConstraints.HORIZONTAL;			templateMedicalCodingSchemePopupMenuConstraints.weightx = 1;			templateMedicalCodingSchemePopupMenuConstraints.gridy = 0;			templateMedicalCodingSchemePopupMenuConstraints.insets = new Insets(9, 9, 0, 9);			templateMedicalCodingSetJPopupMenu.add(hL7JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 1;			templateMedicalCodingSetJPopupMenu.add(cPTJButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 2;			templateMedicalCodingSetJPopupMenu.add(iCDJButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 3;			templateMedicalCodingSetJPopupMenu.add(hCPCSLevel1JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 4;			templateMedicalCodingSetJPopupMenu.add(hCPCSLevel2JButton, templateMedicalCodingSchemePopupMenuConstraints);			templateMedicalCodingSchemePopupMenuConstraints.gridy = 5;			templateMedicalCodingSchemePopupMenuConstraints.insets = new Insets(9, 9, 9, 9);			templateMedicalCodingSetJPopupMenu.add(uncodedItemJButton, templateMedicalCodingSchemePopupMenuConstraints);		}	}	private String isValid(String validForString, String input, Object parameter) {		String isValidAnswer = "UNTRUE";		boolean charFound = false;		int isValidInnerInd = 0;		int isValidOuterInd = 0;		String validCharacters = null;		if (validForString.equals("pageNumber")) {			int ind = 0;			while (ind < input.length()) {				if (!numbers.contains(input.subSequence(ind, ind + 1))) {					isValidAnswer = "The page number entered is not a number; please re-enter.";				}				ind++;			}			if (isValidAnswer.equals("UNTRUE")) {				if (Integer.parseInt(input) <= (int) (Integer) (((Vector) (template.elementAt(0))).elementAt(2 * (Integer) parameter + 1))) {					isValidAnswer = "TRUE";				} else {					isValidAnswer = "The page number does not exist.";				}			}		} else if (validForString.equals("pageNumber")) {		} else if (validForString.equals("templateItemNumberJTextField")) {			if (input.toUpperCase().trim().equals("header")) {				isValidAnswer = "TRUE";			} else {				validCharacters = numbers;			}			while (isValidAnswer.equals("UNTRUE") & isValidOuterInd < input.length()) {				while (!charFound & isValidInnerInd < validCharacters.length()) {					if (input.charAt(isValidOuterInd) == validCharacters.charAt(isValidInnerInd)) {						charFound = true;					}					isValidInnerInd++;				}				if (!charFound) {					isValidAnswer = "Incorrect item number entered; please enter only numbers except \"header\" (or \"0\") may be used for the header item number.";				}				isValidOuterInd++;			}			if (isValidAnswer.equals("UNTRUE") && input.length() < 4) {				isValidAnswer = "TRUE";			} else {				isValidAnswer = "Incorrect item number entered; please enter a number less than 1000.";			}		} else if (validForString.equals("templateName")) {			if (((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).contains(input)) {				SystemWindow.println("Found template via it's name.");				isValidAnswer = "Template, \"" + input + ",\" already exists.";			} else {				validCharacters = lettersAndNumbers;			}			while (isValidAnswer.equals("UNTRUE") & isValidOuterInd < input.length()) {				while (!charFound & isValidInnerInd < validCharacters.length()) {					if (input.charAt(isValidOuterInd) == validCharacters.charAt(isValidInnerInd)) {						charFound = true;					}					isValidInnerInd++;				}				if (!charFound) {					isValidAnswer = "The " + validForString + "must be contain only letters, numbers, and the symbles, \"`~!@#$%^&*()-_=+\"";				}				isValidOuterInd++;			}			if (isValidAnswer.equals("UNTRUE")) {				isValidAnswer = "TRUE";			}		} else if (validForString.equals("validSingleSelectedChartID")) {			int ind = 0;			while (ind < input.length()) {				if (true) {					isValidAnswer = "Please enter only the number.";				}				ind++;			}			if (!isValidAnswer.equals("UNTRUE")) {			}			ind = 0;			while (ind < input.length()) {				if (!numbers.contains(input.subSequence(ind, ind + 1))) {					isValidAnswer = "Please enter only the number.";				}				ind++;			}		} else if (validForString.equals("number")) {		}		return isValidAnswer;	}	public Rectangle processNewDataItemBounds(int[] chartLocation, Vector itemAttributes) {		JPanel newDataCellItemJPanel = createDataCellItemJPanel(chartLocation, itemAttributes);		Rectangle bounds = null;		templateGetDataItemPanelSizeJPanel.add(newDataCellItemJPanel);		validate();		repaint();		newDataItemPanelHeight = newDataCellItemJPanel.getHeight();		newDataItemPanelWidth = newDataCellItemJPanel.getWidth();		if (((String) (itemAttributes.elementAt(1))).equals("text")) {			newDataItemPanelMinimumWidth = newDataCellItemJPanel.getWidth() - ((JComponent) (newDataCellItemJPanel.getComponent(1))).getWidth() + 20;		}		templateGetDataItemPanelSizeJPanel.remove(newDataCellItemJPanel);		validate();		repaint();		if (relativeCaretLocation.equals("left")) {			bounds = new Rectangle(itemPositioningJPanel.getX() - newDataCellItemJPanel.getWidth(), itemPositioningJPanel.getY(), newDataCellItemJPanel.getWidth(), newDataCellItemJPanel.getHeight());		} else {			bounds = new Rectangle(itemPositioningJPanel.getX(), itemPositioningJPanel.getY(), newDataCellItemJPanel.getWidth(), newDataCellItemJPanel.getHeight());		}		if (bounds.y > 0 && alignWithTopJToggleButton.isSelected() && ((String) (itemAttributes.elementAt(1))).equals("text")) {			bounds.width = getRemainingWidthAsAlignedWithItemAbove(bounds.y, bounds.x, bounds.width);		}		newDataCellItemJPanel.setBounds(bounds);		boolean itemFits = true;		if (bounds.width != -1) {			int ind = 0;			while (ind < templatePreviewPageJPanel.getComponentCount()) {				if (newDataCellItemJPanel.getBounds().intersects(((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds())) {					itemFits = false;				}				ind++;			}		} else {			itemFits = false;		}		System.out.println("bounds: " + bounds);		System.out.println("itemFits: " + itemFits);		if (itemFits) {			String itemPanelNumber;			if (chartLocation[2] < 10) {				itemPanelNumber = "  " + chartLocation[2] + ".";			} else if (chartLocation[2] < 100) {				itemPanelNumber = " " + chartLocation[2] + ".";			} else {				itemPanelNumber = chartLocation[2] + ".";			}			GridBagConstraints numbersPanelsConstraints = new GridBagConstraints();			numbersPanelsConstraints.anchor = GridBagConstraints.WEST;			numbersJPanels.add(new JPanel(new GridBagLayout()));			JLabel itemNumberJLabel = new JLabel(itemPanelNumber);			itemNumberJLabel.setForeground(new Color(96, 96, 255));			itemNumberJLabel.setBackground(Color.WHITE);			numbersJPanels.lastElement().add(itemNumberJLabel, numbersPanelsConstraints);			numbersJPanels.lastElement().getComponent(0).setBackground(Color.WHITE);			numbersJPanels.lastElement().setBounds(bounds);			numbersJPanels.lastElement().setOpaque(false);			numbersJPanels.lastElement().setFont(new Font("Electron", Font.BOLD, 18));			numbersJPanels.lastElement().setBorder(new LineBorder(new Color(231, 188, 188), 1));			numbersJPanels.lastElement().setForeground(new Color(0, 156, 164));			numbersJPanels.lastElement().setVisible(false);			numbersJPanels.lastElement().setMaximumSize(new Dimension(newDataItemPanelWidth, newDataItemPanelHeight));			templatePreviewPageJPanel.add(newDataCellItemJPanel);			SystemWindow.println("newDataCellItemJPanel.getBounds(): " + newDataCellItemJPanel.getBounds());			templatePreviewPageNumbersJPanel.add(numbersJPanels.lastElement());			templatePageClickableCoverJPanel.remove(blinkingCaretJPanel);			templatePageClickableCoverJPanel.remove(itemPositioningJPanel);			templatePageClickableCoverJPanel.validate();			templatePageClickableCoverJPanel.repaint();			itemSpaceSelected = false;			validate();			repaint();			return bounds;		} else {			if (bounds.width == -1) {				addTalkbackText("The item is too long to align (shorten the item).", null, true);			} else {				addTalkbackText("The item does not fit in the available space", null, true);			}			return null;		}	}	private JPanel createDataCellItemJPanel(int[] itemStructLocation, Vector itemInformation) {		String description = (String) (itemInformation.elementAt(0));		String orientation = (String) (itemInformation.elementAt(4));		String userReadableDatatype = (String) (itemInformation.elementAt(1));		int expectedLengthIfStringData = (Integer) (itemInformation.elementAt(8));		boolean isRequiredField = (Boolean) (itemInformation.elementAt(3));		boolean isBoxBordered = (Boolean) (itemInformation.elementAt(7));		int leftMargin = (Integer) (itemInformation.elementAt(9));		int rightMargin = (Integer) (itemInformation.elementAt(10));		int topMargin = (Integer) (itemInformation.elementAt(11));		int bottomMargin = (Integer) (itemInformation.elementAt(12));		String pFontType = (String) (itemInformation.elementAt(5));		int pFontSize = (Integer) (itemInformation.elementAt(6));		Font font = new Font(pFontType, Font.BOLD, pFontSize);		JPanel itemJPanel = new JPanel(new GridBagLayout());		itemJPanel.setBackground(Color.WHITE);		GridBagConstraints newDataItemPanelConstraints = new GridBagConstraints();		newDataItemPanelConstraints.gridy = 0;		newDataItemPanelConstraints.gridx = 0;		newDataItemPanelConstraints.weightx = 1;		newDataItemPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		if (userReadableDatatype.equals("header")) {			JLabel pageHeaderSpacerJLabel = new JLabel(" ");			JLabel pageHeaderJLabel = new JLabel(description + " ");			SystemWindow.println("description: " + description);			JLabel pageHeaderSectionAndPageJLabel = null;			if (itemStructLocation[0] == 0) {				pageHeaderSectionAndPageJLabel = new JLabel("Chart cover page " + itemStructLocation[1] + ".");			} else if (itemStructLocation[0] == 1) {				pageHeaderSectionAndPageJLabel = new JLabel("Demographics page " + itemStructLocation[1] + ".");			} else if (itemStructLocation[0] == 2) {				pageHeaderSectionAndPageJLabel = new JLabel("Activities page " + itemStructLocation[1] + ".");			} else if (itemStructLocation[0] == 3) {				pageHeaderSectionAndPageJLabel = new JLabel("History page " + itemStructLocation[1] + ".");			} else if (itemStructLocation[0] == 4) {				pageHeaderSectionAndPageJLabel = new JLabel("Insurance page " + itemStructLocation[1] + ".");			}			pageHeaderJLabel.setFont(font);			pageHeaderSpacerJLabel.setFont(font);			pageHeaderSectionAndPageJLabel.setFont(font);			itemJPanel.setBorder(new MatteBorder(topMargin, leftMargin, bottomMargin, rightMargin, Color.WHITE));			itemJPanel.add(pageHeaderJLabel, newDataItemPanelConstraints);			newDataItemPanelConstraints.weightx = 1;			newDataItemPanelConstraints.fill = GridBagConstraints.HORIZONTAL;			itemJPanel.add(pageHeaderSpacerJLabel, newDataItemPanelConstraints);			newDataItemPanelConstraints.weightx = 0;			newDataItemPanelConstraints.fill = GridBagConstraints.NONE;			itemJPanel.add(pageHeaderSectionAndPageJLabel, newDataItemPanelConstraints);		} else if (userReadableDatatype.equals("text")) {			newDataItemPanelConstraints.weightx = 0;			newDataItemPanelConstraints.fill = GridBagConstraints.NONE;			itemJPanel.add(new JTextArea(description + " "), newDataItemPanelConstraints);			((JTextArea) (itemJPanel.getComponent(0))).setOpaque(true);			((JTextArea) (itemJPanel.getComponent(0))).setBackground(Color.WHITE);			((JTextArea) (itemJPanel.getComponent(0))).setFont(font);			((JTextArea) (itemJPanel.getComponent(0))).setBorder(new MatteBorder(0, 0, 4, 0, new Color(255, 255, 255, 0)));			((JTextArea) (itemJPanel.getComponent(0))).setMargin(new Insets(0, 6, 0, 6));			if (orientation.equals("left to right")) {				newDataItemPanelConstraints.gridx = 1;			} else {				newDataItemPanelConstraints.gridy = 1;			}			newDataItemPanelConstraints.weightx = 1;			newDataItemPanelConstraints.fill = GridBagConstraints.HORIZONTAL;			if (elementDatatype.equals("TS")) {				itemJPanel.add(hL7TSFromCalendarPanel(font, isRequiredField, "systemFrame", null), newDataItemPanelConstraints);			} else {				itemJPanel.add(new JTextArea(), newDataItemPanelConstraints);				((JTextArea) (itemJPanel.getComponent(1))).setColumns(expectedLengthIfStringData);				((JTextArea) (itemJPanel.getComponent(1))).setBorder(new CompoundBorder(new MatteBorder(0, 0, 2, 2, new Color(255, 255, 255, 0)), new MatteBorder(0, 0, 2, 0, Color.BLACK)));				((JTextArea) (itemJPanel.getComponent(1))).setOpaque(true);				((JTextArea) (itemJPanel.getComponent(1))).setFont(font);				if (!isRequiredField) {					((JTextArea) (itemJPanel.getComponent(1))).setBackground(Color.WHITE);				} else {					((JTextArea) (itemJPanel.getComponent(1))).setBackground(ChartingWindow.importantFieldHighlightColor);				}			}		} else if (userReadableDatatype.equals("image")) {			itemJPanel.add(new JTextArea(description + " "), newDataItemPanelConstraints);			((JTextArea) (itemJPanel.getComponent(0))).setOpaque(true);			((JTextArea) (itemJPanel.getComponent(0))).setBackground(Color.WHITE);			((JTextArea) (itemJPanel.getComponent(0))).setFont(font);			((JTextArea) (itemJPanel.getComponent(0))).setBorder(new MatteBorder(0, 0, 4, 0, new Color(255, 255, 255, 0)));			((JTextArea) (itemJPanel.getComponent(0))).setMargin(new Insets(0, 6, 0, 6));			if (orientation.equals("left to right")) {				newDataItemPanelConstraints.gridx = 1;			} else {				newDataItemPanelConstraints.gridy = 1;			}			itemJPanel.add(new JPanel(new GridBagLayout()), newDataItemPanelConstraints);			((JPanel) (itemJPanel.getComponent(1))).add(new JLabel("Paste image here."));			((JPanel) (itemJPanel.getComponent(1))).setSize(new Dimension(200, 200));			((JPanel) (itemJPanel.getComponent(1))).setPreferredSize(new Dimension(200, 200));			((JPanel) (itemJPanel.getComponent(1))).setBorder(new BevelBorder(BevelBorder.LOWERED));			((JPanel) (itemJPanel.getComponent(1))).setOpaque(true);			if (!isRequiredField) {				((JPanel) (itemJPanel.getComponent(1))).setBackground(new Color(192, 192, 255));			} else {				((JPanel) (itemJPanel.getComponent(1))).setBackground(ChartingWindow.importantFieldHighlightColor);			}		} else if (userReadableDatatype.equals("audio")) {			itemJPanel.add(new JTextArea(description + " "), newDataItemPanelConstraints);			((JTextArea) (itemJPanel.getComponent(0))).setOpaque(true);			((JTextArea) (itemJPanel.getComponent(0))).setBackground(Color.WHITE);			((JTextArea) (itemJPanel.getComponent(0))).setFont(font);			((JTextArea) (itemJPanel.getComponent(0))).setBorder(new MatteBorder(0, 0, 4, 0, new Color(255, 255, 255, 0)));			((JTextArea) (itemJPanel.getComponent(0))).setMargin(new Insets(0, 6, 0, 6));			if (orientation.equals("left to right")) {				newDataItemPanelConstraints.gridx = 1;			} else {				newDataItemPanelConstraints.gridy = 1;			}			itemJPanel.add(new JPanel(new GridBagLayout()), newDataItemPanelConstraints);			((JPanel) (itemJPanel.getComponent(1))).add(new JLabel("Paste audio here."));			((JPanel) (itemJPanel.getComponent(1))).setSize(new Dimension(200, 80));			((JPanel) (itemJPanel.getComponent(1))).setPreferredSize(new Dimension(200, 80));			((JPanel) (itemJPanel.getComponent(1))).setBorder(new BevelBorder(BevelBorder.RAISED));			((JPanel) (itemJPanel.getComponent(1))).setOpaque(true);			if (!isRequiredField) {				((JPanel) (itemJPanel.getComponent(1))).setBackground(new Color(156, 156, 176));			} else {				((JPanel) (itemJPanel.getComponent(1))).setBackground(ChartingWindow.importantFieldHighlightColor);			}		} else if (userReadableDatatype.equals("video")) {			itemJPanel.add(new JTextArea(description + " "), newDataItemPanelConstraints);			((JTextArea) (itemJPanel.getComponent(0))).setOpaque(true);			((JTextArea) (itemJPanel.getComponent(0))).setBackground(Color.WHITE);			((JTextArea) (itemJPanel.getComponent(0))).setFont(font);			((JTextArea) (itemJPanel.getComponent(0))).setBorder(new MatteBorder(0, 0, 4, 0, new Color(255, 255, 255, 0)));			((JTextArea) (itemJPanel.getComponent(0))).setMargin(new Insets(0, 6, 0, 6));			if (orientation.equals("left to right")) {				newDataItemPanelConstraints.gridx = 1;			} else {				newDataItemPanelConstraints.gridy = 1;			}			itemJPanel.add(new JPanel(new GridBagLayout()), newDataItemPanelConstraints);			((JPanel) (itemJPanel.getComponent(1))).add(new JLabel("Paste video here."));			((JPanel) (itemJPanel.getComponent(1))).setSize(new Dimension(364, 205));			((JPanel) (itemJPanel.getComponent(1))).setPreferredSize(new Dimension(364, 205));			((JPanel) (itemJPanel.getComponent(1))).setBorder(new BevelBorder(BevelBorder.RAISED));			((JPanel) (itemJPanel.getComponent(1))).setOpaque(true);			if (isRequiredField) {				((JPanel) (itemJPanel.getComponent(1))).setBackground(Color.BLACK);			} else {				((JPanel) (itemJPanel.getComponent(1))).setBackground(ChartingWindow.importantFieldHighlightColor);			}		}		if (isBoxBordered) {			itemJPanel.setBorder(new CompoundBorder(new MatteBorder(topMargin, leftMargin, bottomMargin, rightMargin, new Color(255, 255, 255, 0)), new LineBorder(Color.BLACK, 1)));		} else {			itemJPanel.setBorder(new MatteBorder(topMargin, leftMargin, bottomMargin, rightMargin, new Color(255, 255, 255, 0)));		}		return itemJPanel;	}	public Component hL7TSFromCalendarPanel(Font font, boolean isRequiredField, String window, String calendarLocation) {		Color backgroundColor = Color.WHITE;		JLabel timeStampCalendarTimePromptJLabel = new JLabel("Time: ");		JPanel timeStampCalendarJPanel = new JPanel(new GridBagLayout());		JLabel timeStampCalendarDateJLabel = new JLabel("Date: ");		JTextField timeStampCalendarDayOfWeekJTextField = new JTextField(6);		JTextField timeStampCalendarComma1AndSpaceJTextField = new JTextField();		JTextField timeStampCalendarMonthJTextField = new JTextField(6);		JTextField timeStampCalendarDayOfMonthJTextField = new JTextField(2);		JTextField timeStampCalendarComma2JTextField = new JTextField();		JTextField timeStampCalendarYearJTextField = new JTextField(4);		JTextField timeStampCalendarHourJTextField = new JTextField(2);		JTextField timeStampCalendarColonJTextField = new JTextField();		JTextField timeStampCalendarMinuteJTextField = new JTextField(2);		JTextField timeStampCalendarAmPmJTextField = new JTextField(2);		GridBagConstraints timeStampCalendarDateAndTimePanelConstraints = new GridBagConstraints();		Border userInputLineBorder = new MatteBorder(0, 0, 1, 0, Color.BLACK);		if (isRequiredField) {			backgroundColor = ChartingWindow.importantFieldHighlightColor;		}		timeStampCalendarDayOfWeekJTextField.setFont(font);		timeStampCalendarComma1AndSpaceJTextField.setFont(font);		timeStampCalendarMonthJTextField.setFont(font);		timeStampCalendarDayOfMonthJTextField.setFont(font);		timeStampCalendarComma2JTextField.setFont(font);		timeStampCalendarYearJTextField.setFont(font);		timeStampCalendarHourJTextField.setFont(font);		timeStampCalendarColonJTextField.setFont(font);		timeStampCalendarMinuteJTextField.setFont(font);		timeStampCalendarAmPmJTextField.setFont(font);		if (window.equals("chartsFrame")) {			System.out.println("calendarLocation: " + calendarLocation);			int firstDeliminatorIndex = calendarLocation.indexOf("|");			int secondDeliminatorIndex = calendarLocation.indexOf("|", firstDeliminatorIndex + 1);			int sectionNumber = Integer.parseInt(calendarLocation.substring(0, firstDeliminatorIndex));			int pageNumber = Integer.parseInt(calendarLocation.substring(firstDeliminatorIndex + 1, secondDeliminatorIndex));			int itemNumber = Integer.parseInt(calendarLocation.substring(secondDeliminatorIndex + 1, calendarLocation.length()));			String birthDateInMillisString;			if (null != (birthDateInMillisString = ((String) (((Vector) (((Vector) (((Vector) (((Vector) (Access.patientDataStruct.elementAt(1))).elementAt(sectionNumber))).elementAt(pageNumber))).elementAt(itemNumber))).elementAt(0))))) {				long birthDateInMillis = Long.parseLong(birthDateInMillisString);				Calendar hL7TSCalendar = Calendar.getInstance();				hL7TSCalendar.setTimeInMillis(birthDateInMillis);				timeStampCalendarDayOfWeekJTextField.setText(ChartingWindow.dayOfWeek[hL7TSCalendar.get(Calendar.DAY_OF_WEEK) - 1]);				timeStampCalendarMonthJTextField.setText(ChartingWindow.month[hL7TSCalendar.get(Calendar.MONTH)]);				timeStampCalendarDayOfMonthJTextField.setText(String.valueOf(hL7TSCalendar.get(Calendar.DAY_OF_MONTH)));				timeStampCalendarYearJTextField.setText(String.valueOf(hL7TSCalendar.get(Calendar.YEAR)));				timeStampCalendarHourJTextField.setText(String.valueOf(hL7TSCalendar.get(Calendar.HOUR)));				timeStampCalendarMinuteJTextField.setText(String.valueOf(hL7TSCalendar.get(Calendar.MINUTE)));				timeStampCalendarAmPmJTextField.setText(ChartingWindow.aMPM[hL7TSCalendar.get(Calendar.AM_PM)]);			}			timeStampCalendarDayOfWeekJTextField.addKeyListener(Device.device.workspace.chartingWindow);			timeStampCalendarDayOfWeekJTextField.addFocusListener(Device.device.workspace.chartingWindow);			timeStampCalendarDayOfWeekJTextField.addActionListener(Device.device.workspace.chartingWindow);			timeStampCalendarDayOfWeekJTextField.setActionCommand("timeStampCalendarDayOfWeekJTextField|" + calendarLocation);			timeStampCalendarDayOfWeekJTextField.setName("timeStampCalendarDayOfWeekJTextField|" + calendarLocation);			timeStampCalendarMonthJTextField.addKeyListener(Device.device.workspace.chartingWindow);			timeStampCalendarMonthJTextField.addFocusListener(Device.device.workspace.chartingWindow);			timeStampCalendarMonthJTextField.addActionListener(Device.device.workspace.chartingWindow);			timeStampCalendarMonthJTextField.setActionCommand("timeStampCalendarMonthJTextField|" + calendarLocation);			timeStampCalendarMonthJTextField.setName("timeStampCalendarMonthJTextField|" + calendarLocation);			timeStampCalendarDayOfMonthJTextField.addKeyListener(Device.device.workspace.chartingWindow);			timeStampCalendarDayOfMonthJTextField.addFocusListener(Device.device.workspace.chartingWindow);			timeStampCalendarDayOfMonthJTextField.addActionListener(Device.device.workspace.chartingWindow);			timeStampCalendarDayOfMonthJTextField.setActionCommand("timeStampCalendarDayOfMonthJTextField|" + calendarLocation);			timeStampCalendarDayOfMonthJTextField.setName("timeStampCalendarDayOfMonthJTextField|" + calendarLocation);			timeStampCalendarYearJTextField.addKeyListener(Device.device.workspace.chartingWindow);			timeStampCalendarYearJTextField.addFocusListener(Device.device.workspace.chartingWindow);			timeStampCalendarYearJTextField.addActionListener(Device.device.workspace.chartingWindow);			timeStampCalendarYearJTextField.setActionCommand("timeStampCalendarYearJTextField|" + calendarLocation);			timeStampCalendarYearJTextField.setName("timeStampCalendarYearJTextField|" + calendarLocation);			timeStampCalendarHourJTextField.addKeyListener(Device.device.workspace.chartingWindow);			timeStampCalendarHourJTextField.addFocusListener(Device.device.workspace.chartingWindow);			timeStampCalendarHourJTextField.addActionListener(Device.device.workspace.chartingWindow);			timeStampCalendarHourJTextField.setActionCommand("timeStampCalendarHourJTextField|" + calendarLocation);			timeStampCalendarHourJTextField.setName("timeStampCalendarHourJTextField|" + calendarLocation);			timeStampCalendarMinuteJTextField.addKeyListener(Device.device.workspace.chartingWindow);			timeStampCalendarMinuteJTextField.addFocusListener(Device.device.workspace.chartingWindow);			timeStampCalendarMinuteJTextField.addActionListener(Device.device.workspace.chartingWindow);			timeStampCalendarMinuteJTextField.setActionCommand("timeStampCalendarMinuteJTextField|" + calendarLocation);			timeStampCalendarMinuteJTextField.setName("timeStampCalendarMinuteJTextField|" + calendarLocation);			timeStampCalendarAmPmJTextField.addMouseListener(Device.device.workspace.chartingWindow);			timeStampCalendarAmPmJTextField.setName("timeStampCalendarAmPmJTextField|" + calendarLocation);		}		timeStampCalendarDayOfWeekJTextField.setBorder(null);		timeStampCalendarDayOfWeekJTextField.setBackground(backgroundColor);		timeStampCalendarDayOfWeekJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarDayOfWeekJTextField.setHorizontalAlignment(SwingConstants.RIGHT);		timeStampCalendarComma1AndSpaceJTextField.setText(", ");		timeStampCalendarComma1AndSpaceJTextField.setBorder(null);		timeStampCalendarComma1AndSpaceJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarComma1AndSpaceJTextField.setEditable(false);		timeStampCalendarComma1AndSpaceJTextField.setBackground(backgroundColor);		timeStampCalendarMonthJTextField.setBorder(null);		timeStampCalendarMonthJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarMonthJTextField.setHorizontalAlignment(SwingConstants.RIGHT);		timeStampCalendarMonthJTextField.setBackground(backgroundColor);		timeStampCalendarDayOfMonthJTextField.setBorder(null);		timeStampCalendarDayOfMonthJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarDayOfMonthJTextField.setBackground(backgroundColor);		timeStampCalendarDayOfMonthJTextField.setHorizontalAlignment(SwingConstants.RIGHT);		timeStampCalendarComma2JTextField.setText(",");		timeStampCalendarComma2JTextField.setBorder(null);		timeStampCalendarComma2JTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarComma2JTextField.setEditable(false);		timeStampCalendarComma2JTextField.setBackground(backgroundColor);		timeStampCalendarYearJTextField.setBorder(null);		timeStampCalendarYearJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarYearJTextField.setHorizontalAlignment(SwingConstants.CENTER);		timeStampCalendarHourJTextField.setBorder(null);		timeStampCalendarHourJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarHourJTextField.setHorizontalAlignment(SwingConstants.RIGHT);		timeStampCalendarColonJTextField.setText(":");		timeStampCalendarColonJTextField.setBorder(null);		timeStampCalendarColonJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarColonJTextField.setEditable(false);		timeStampCalendarColonJTextField.setBackground(backgroundColor);		timeStampCalendarMinuteJTextField.setBorder(null);		timeStampCalendarMinuteJTextField.setForeground(SystemWindow.outputColor);		timeStampCalendarMinuteJTextField.setHorizontalAlignment(SwingConstants.LEFT);		timeStampCalendarAmPmJTextField.setBorder(null);		timeStampCalendarAmPmJTextField.setEnabled(false);		timeStampCalendarAmPmJTextField.setDisabledTextColor(SystemWindow.outputColor);		timeStampCalendarAmPmJTextField.setHorizontalAlignment(SwingConstants.LEFT);		timeStampCalendarAmPmJTextField.setBackground(backgroundColor);		timeStampCalendarJPanel.setOpaque(false);		timeStampCalendarJPanel.setBorder(userInputLineBorder);		timeStampCalendarDateAndTimePanelConstraints.gridy = 0;		timeStampCalendarDateAndTimePanelConstraints.gridx = 0;		timeStampCalendarJPanel.add(timeStampCalendarDateJLabel, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarDayOfWeekJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarComma1AndSpaceJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarDateAndTimePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		timeStampCalendarDateAndTimePanelConstraints.weightx = 1;		timeStampCalendarJPanel.add(timeStampCalendarMonthJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarDateAndTimePanelConstraints.fill = GridBagConstraints.NONE;		timeStampCalendarDateAndTimePanelConstraints.weightx = 0;		timeStampCalendarJPanel.add(timeStampCalendarDayOfMonthJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarComma2JTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarYearJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarTimePromptJLabel, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarHourJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarColonJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarJPanel.add(timeStampCalendarMinuteJTextField, timeStampCalendarDateAndTimePanelConstraints);		timeStampCalendarDateAndTimePanelConstraints.gridx++;		timeStampCalendarDateAndTimePanelConstraints.weightx = 1;		timeStampCalendarDateAndTimePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		timeStampCalendarJPanel.add(timeStampCalendarAmPmJTextField, timeStampCalendarDateAndTimePanelConstraints);		return timeStampCalendarJPanel;	}	private int fontSize() {		int answer;		if (Access.isUserLoggedIn && ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(0)).elementAt(5).elementAt(2).equals("TRUE")) {			answer = ((int) ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(14))));		} else {			answer = ((int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(14))));		}		return answer;	}	public void createMasterUserIndex() {		JPanel userIndexJPanel = new JPanel(new GridBagLayout());		int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();		GridBagConstraints userIndexPanelConstraints = new GridBagConstraints();		int userIDOnPageInd = 1;		int userIDInd = 1;		int maxUsersOnEachPage = 32;		int userOnPageInd;		String nextUserID = null;		JPanel userIndexPanelPageJPanel;		JPanel userIndexWhitePaperWithMarginJPanel;		JPanel userIndicePanelPagePanelPusherJPanel;		JPanel userIndexHorizontalLineJPanel;		JLabel userNameJLabel;		JLabel userIDJLabel;		JLabel userPasswordJLabel;		JLabel userFacilityJLabel;		JLabel userIndexPageHeaderJLabel;		GridBagConstraints userIndexPanelPagePanelConstraints = new GridBagConstraints();		GridBagConstraints userIndexWhitePaperWithMarginPanelConstraints = new GridBagConstraints();		userIndexWhitePaperWithMarginPanelConstraints.insets = new Insets(15, 15, 15, 15);		userIndexWhitePaperWithMarginPanelConstraints.weighty = 1;		userIndexWhitePaperWithMarginPanelConstraints.weightx = 1;		userIndexWhitePaperWithMarginPanelConstraints.fill = GridBagConstraints.BOTH;		userIndexPanelPagePanelConstraints.gridy = 0;		userIndexJPanel.setOpaque(false);		userIndexPanelConstraints.weightx = 1;		userIndexPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		userIndexPanelConstraints.insets = new Insets(20, 15, 0, 15);		userIndexPanelConstraints.gridy = 0;		boolean firstIteration = true;		while (userIDInd < numUsers || firstIteration) {			userIndexWhitePaperWithMarginJPanel = new JPanel(new GridBagLayout());			userIndexPanelPageJPanel = new JPanel(new GridBagLayout());			userIndexPanelPageJPanel.setBackground(Color.WHITE);			userIndexWhitePaperWithMarginJPanel.setBackground(Color.WHITE);			userIndexWhitePaperWithMarginJPanel.setPreferredSize(paperSizeDimension);			userIndexWhitePaperWithMarginJPanel.setSize(paperSizeDimension);			userIndexWhitePaperWithMarginJPanel.setMinimumSize(paperSizeDimension);			userIndexWhitePaperWithMarginJPanel.setBorder(paperBorder);			userIndicePanelPagePanelPusherJPanel = new JPanel(new GridBagLayout());			userIndicePanelPagePanelPusherJPanel.setOpaque(false);			userIndexPageHeaderJLabel = new JLabel("Root Facility's " + "User Index: ");			userIndexPageHeaderJLabel.setFont(systemFont);			userNameJLabel = new JLabel("Name: ");			userIDJLabel = new JLabel("User ID: ");			userPasswordJLabel = new JLabel("Password: ");			userFacilityJLabel = new JLabel("Facility: ");			userIndexHorizontalLineJPanel = new JPanel();			userIndexHorizontalLineJPanel.setOpaque(false);			userNameJLabel.setFont(systemFont);			userIDJLabel.setFont(systemFont);			userPasswordJLabel.setFont(systemFont);			userFacilityJLabel.setFont(systemFont);			userIndexHorizontalLineJPanel.setBorder(new MatteBorder(0, 0, 2, 0, new Color(64, 64, 64)));			userIndexPanelPagePanelConstraints.gridy++;			userIndexPanelPagePanelConstraints.gridx = 0;			userIndexPanelPagePanelConstraints.weighty = 0;			userIndexPanelPagePanelConstraints.weightx = 0;			userIndexPanelPagePanelConstraints.fill = GridBagConstraints.HORIZONTAL;			userIndexPanelPagePanelConstraints.insets = new Insets(0, 0, 0, 0);			userIndexPanelPageJPanel.add(userIndexPageHeaderJLabel, userIndexPanelPagePanelConstraints);			userIndexPanelPagePanelConstraints.gridy++;			userIndexPanelPagePanelConstraints.gridx = 0;			userIndexPanelPagePanelConstraints.weightx = 1;			userIndexPanelPagePanelConstraints.insets = new Insets(0, 0, 0, 5);			userIndexPanelPageJPanel.add(userNameJLabel, userIndexPanelPagePanelConstraints);			userIndexPanelPagePanelConstraints.gridx = 1;			userIndexPanelPagePanelConstraints.fill = GridBagConstraints.NONE;			userIndexPanelPagePanelConstraints.anchor = GridBagConstraints.WEST;			userIndexPanelPagePanelConstraints.insets = new Insets(0, 5, 0, 5);			userIndexPanelPageJPanel.add(userFacilityJLabel, userIndexPanelPagePanelConstraints);			userIndexPanelPagePanelConstraints.gridx = 2;			userIndexPanelPageJPanel.add(userIDJLabel, userIndexPanelPagePanelConstraints);			userIndexPanelPagePanelConstraints.gridx = 3;			userIndexPanelPagePanelConstraints.insets = new Insets(0, 5, 0, 0);			userIndexPanelPageJPanel.add(userPasswordJLabel, userIndexPanelPagePanelConstraints);			userIndexPanelPagePanelConstraints.gridy++;			userIndexPanelPagePanelConstraints.gridx = 0;			userIndexPanelPagePanelConstraints.gridwidth = 4;			userIndexPanelPagePanelConstraints.fill = GridBagConstraints.HORIZONTAL;			userIndexPanelPagePanelConstraints.insets = new Insets(0, 0, 0, 0);			userIndexPanelPageJPanel.add(userIndexHorizontalLineJPanel, userIndexPanelPagePanelConstraints);			userIndexPanelPagePanelConstraints.fill = GridBagConstraints.NONE;			userIndexPanelPagePanelConstraints.gridy++;			userIndexPanelPagePanelConstraints.gridwidth = 1;			userOnPageInd = 1;			while (userIDInd < numUsers && userOnPageInd < maxUsersOnEachPage) {				nextUserID = ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userIDInd)).elementAt(0).elementAt(0);				userNameJLabel = new JLabel(Access.getUserName(nextUserID));				userIDJLabel = new JLabel(Access.shortUserID(nextUserID));				userPasswordJLabel = new JLabel(Access.getUser(nextUserID, "password"));				userFacilityJLabel = new JLabel(Access.getUser(nextUserID, "facility"));				userNameJLabel.setFont(systemFont);				userIDJLabel.addMouseListener(this);				userPasswordJLabel.addMouseListener(this);				userFacilityJLabel.addMouseListener(this);				userNameJLabel.addMouseListener(this);				userIDJLabel.setName("userIndexUserID|" + nextUserID);				userPasswordJLabel.setName("userIndexUserID|" + nextUserID);				userFacilityJLabel.setName("userIndexUserID|" + nextUserID);				userNameJLabel.setName("userIndexUserID|" + nextUserID);				userIDJLabel.setFont(systemFont);				userPasswordJLabel.setFont(systemFont);				userFacilityJLabel.setFont(systemFont);				userIndexPanelPagePanelConstraints.gridx = 0;				userIndexPanelPagePanelConstraints.insets = new Insets(0, 0, 0, 5);				userIndexPanelPageJPanel.add(userNameJLabel, userIndexPanelPagePanelConstraints);				userIndexPanelPagePanelConstraints.gridx = 1;				userIndexPanelPagePanelConstraints.insets = new Insets(0, 5, 0, 5);				userIndexPanelPageJPanel.add(userFacilityJLabel, userIndexPanelPagePanelConstraints);				userIndexPanelPagePanelConstraints.gridx = 2;				userIndexPanelPageJPanel.add(userIDJLabel, userIndexPanelPagePanelConstraints);				userIndexPanelPagePanelConstraints.gridx = 3;				userIndexPanelPageJPanel.add(userPasswordJLabel, userIndexPanelPagePanelConstraints);				userIndexPanelPagePanelConstraints.gridx = 4;				userIndexPanelPagePanelConstraints.insets = new Insets(0, 5, 0, 0);				userIndexPanelPagePanelConstraints.gridy++;				userIDInd++;				userOnPageInd++;			}			userIndexPanelPagePanelConstraints.gridx = 5;			userIndexPanelPagePanelConstraints.weighty = 1;			userIndexPanelPagePanelConstraints.weightx = 1;			userIndexPanelPagePanelConstraints.fill = GridBagConstraints.BOTH;			userIndexPanelPagePanelConstraints.insets = new Insets(0, 0, 0, 0);			userIndexPanelPageJPanel.add(userIndicePanelPagePanelPusherJPanel, userIndexPanelPagePanelConstraints);			userIndexPanelConstraints.gridx = 0;			userIndexPanelConstraints.gridy++;			userIndexPanelConstraints.insets = new Insets(20, 0, 20, 0);			userIndexPanelConstraints.weighty = 1;			userIndexPanelConstraints.weightx = 1;			userIndexPanelConstraints.fill = GridBagConstraints.BOTH;			userIndexWhitePaperWithMarginJPanel.add(userIndexPanelPageJPanel, userIndexWhitePaperWithMarginPanelConstraints);			userIndexJPanel.add(userIndexWhitePaperWithMarginJPanel, userIndexPanelConstraints);			firstIteration = false;		}		fullUserIndexJPanel.removeAll();		fullUserIndexJPanel.add(userIndexJPanel, fullUserIndexPanelConstraints);	}	public void createListedUserIndex() {		JPanel userIndexJPanel = (JPanel) (fullUserIndexJPanel.getComponent(0));		JPanel listedUserIndexPaperJPanel;		JPanel userIndexPanelPageJPanel;		JPanel listedUserIndexContentJPanel;		JPanel listedUserIndexJPanel = new JPanel(new GridBagLayout());		JLabel itemJLabel;		GridBagConstraints listedUserIndexPaperPanelConstraints = new GridBagConstraints();		GridBagConstraints listedUserIndexContentPanelConstraints = new GridBagConstraints();		int pageInd = 0;		int innerInd;		while (pageInd < userIndexJPanel.getComponentCount()) {			listedUserIndexPaperJPanel = new JPanel(new GridBagLayout());			listedUserIndexContentJPanel = new JPanel(new GridBagLayout());			listedUserIndexContentJPanel.setBackground(Color.WHITE);			listedUserIndexPaperJPanel.setBackground(Color.WHITE);			listedUserIndexPaperJPanel.setPreferredSize(paperSizeDimension);			listedUserIndexPaperJPanel.setSize(paperSizeDimension);			listedUserIndexPaperJPanel.setMinimumSize(paperSizeDimension);			listedUserIndexPaperJPanel.setBorder(paperBorder);			listedUserIndexContentPanelConstraints.gridy = 0;			listedUserIndexContentPanelConstraints.gridx = 0;			userIndexPanelPageJPanel = ((JPanel) (((JPanel) (userIndexJPanel.getComponent(pageInd))).getComponent(0)));			innerInd = 6;			while (innerInd < userIndexPanelPageJPanel.getComponentCount() - 1) {				JPanel userIndexHorizontalLineJPanel;				JLabel userNameJLabel;				JLabel userIDJLabel;				JLabel userPasswordJLabel;				JLabel userFacilityJLabel;				JLabel userIndexPageHeaderJLabel;				userIndexPageHeaderJLabel = new JLabel("Root Facility's " + "User Index: ");				userIndexPageHeaderJLabel.setFont(systemFont);				userNameJLabel = new JLabel("Name: ");				userIDJLabel = new JLabel("User ID: ");				userPasswordJLabel = new JLabel("Password: ");				userFacilityJLabel = new JLabel("Facility: ");				userIndexHorizontalLineJPanel = new JPanel();				userIndexHorizontalLineJPanel.setOpaque(false);				userNameJLabel.setFont(systemFont);				userIDJLabel.setFont(systemFont);				userPasswordJLabel.setFont(systemFont);				userFacilityJLabel.setFont(systemFont);				userIndexHorizontalLineJPanel.setBorder(new MatteBorder(0, 0, 2, 0, new Color(64, 64, 64)));				listedUserIndexContentPanelConstraints.gridy++;				listedUserIndexContentPanelConstraints.gridx = 0;				listedUserIndexContentPanelConstraints.weighty = 0;				listedUserIndexContentPanelConstraints.weightx = 0;				listedUserIndexContentPanelConstraints.fill = GridBagConstraints.HORIZONTAL;				listedUserIndexContentPanelConstraints.insets = new Insets(0, 0, 0, 0);				userIndexPanelPageJPanel.add(userIndexPageHeaderJLabel, listedUserIndexContentPanelConstraints);				listedUserIndexContentPanelConstraints.gridy++;				listedUserIndexContentPanelConstraints.gridx = 0;				listedUserIndexContentPanelConstraints.weightx = 1;				listedUserIndexContentPanelConstraints.insets = new Insets(0, 0, 0, 5);				userIndexPanelPageJPanel.add(userNameJLabel, listedUserIndexContentPanelConstraints);				listedUserIndexContentPanelConstraints.gridx = 1;				listedUserIndexContentPanelConstraints.fill = GridBagConstraints.NONE;				listedUserIndexContentPanelConstraints.anchor = GridBagConstraints.WEST;				listedUserIndexContentPanelConstraints.insets = new Insets(0, 5, 0, 5);				userIndexPanelPageJPanel.add(userFacilityJLabel, listedUserIndexContentPanelConstraints);				listedUserIndexContentPanelConstraints.gridx = 2;				userIndexPanelPageJPanel.add(userIDJLabel, listedUserIndexContentPanelConstraints);				listedUserIndexContentPanelConstraints.gridx = 3;				listedUserIndexContentPanelConstraints.insets = new Insets(0, 5, 0, 0);				userIndexPanelPageJPanel.add(userPasswordJLabel, listedUserIndexContentPanelConstraints);				listedUserIndexContentPanelConstraints.gridy++;				listedUserIndexContentPanelConstraints.gridx = 0;				listedUserIndexContentPanelConstraints.gridwidth = 4;				listedUserIndexContentPanelConstraints.fill = GridBagConstraints.HORIZONTAL;				listedUserIndexContentPanelConstraints.insets = new Insets(0, 0, 0, 0);				userIndexPanelPageJPanel.add(userIndexHorizontalLineJPanel, listedUserIndexContentPanelConstraints);				listedUserIndexContentPanelConstraints.fill = GridBagConstraints.NONE;				listedUserIndexContentPanelConstraints.gridy++;				listedUserIndexContentPanelConstraints.gridwidth = 1;				itemJLabel = new JLabel(((JLabel) (userIndexPanelPageJPanel.getComponent(innerInd))).getText());				listedUserIndexContentPanelConstraints.gridx = 0;				listedUserIndexContentJPanel.add(itemJLabel, listedUserIndexContentPanelConstraints);				itemJLabel = new JLabel(((JLabel) (userIndexPanelPageJPanel.getComponent(innerInd))).getText());				listedUserIndexContentPanelConstraints.gridx = 1;				listedUserIndexContentJPanel.add(itemJLabel, listedUserIndexContentPanelConstraints);				itemJLabel = new JLabel(((JLabel) (userIndexPanelPageJPanel.getComponent(innerInd))).getText());				listedUserIndexContentPanelConstraints.gridx = 2;				listedUserIndexContentJPanel.add(itemJLabel, listedUserIndexContentPanelConstraints);				itemJLabel = new JLabel(((JLabel) (userIndexPanelPageJPanel.getComponent(innerInd))).getText());				listedUserIndexContentPanelConstraints.gridx = 3;				listedUserIndexContentJPanel.add(itemJLabel, listedUserIndexContentPanelConstraints);				System.out.println("itemJLabel.getText(): " + itemJLabel.getText());				innerInd = innerInd + 4;			}			listedUserIndexPaperJPanel.add(listedUserIndexContentJPanel, listedUserIndexPaperPanelConstraints);			listedUserIndexJPanel.add(listedUserIndexPaperJPanel, listedUserIndexPanelConstraints);			pageInd++;		}		listedUserIndexBaseJPanel.removeAll();		listedUserIndexBaseJPanel.add(listedUserIndexJPanel, listedUserIndexPanelConstraints);	}	private boolean passwordsMatch(char[] password1, char[] password2) {		boolean missmatchNotFound = false;		if ((password1.length != 0) && password1.length == password2.length) {			int ind = 0;			do {				if (password1[ind] == password2[ind]) {					missmatchNotFound = true;				} else {					missmatchNotFound = false;				}				ind++;			} while (missmatchNotFound & ind < password1.length);		} else {			missmatchNotFound = false;		}		if (password1.length == 0) {			missmatchNotFound = true;		}		return missmatchNotFound;	}	public void processRequestForNewUser() {		String newUserID = addNewUserPanelEnterUserIDEntryJTextField.getText().trim() + "|" + System.currentTimeMillis() + "|" + Device.device.licenseNumber;		String addNewUserPanelEnterPasswordPasswordFieldText = String.valueOf(addNewUserPanelEnterPasswordEntryJPasswordField.getPassword());		String addNewUserPanelFacilityTextFieldText = addNewUserPanelFacilityEntryJTextField.getText();		String addNewUserPanelTitleTextFieldText = addNewUserPanelPrefixEntryJTextField.getText();		String addNewUserPanelFirstNameTextFieldText = addNewUserPanelFirstNameEntryJTextField.getText();		String addNewUserPanelMiddleNameTextFieldText = addNewUserPanelMiddleNameEntryJTextField.getText();		String addNewUserPanelLastNameTextFieldText = addNewUserPanelLastNameEntryJTextField.getText();		String addNewUserPanelSuffixTextFieldText = addNewUserPanelSuffixEntryJTextField.getText();		String addNewUserPanelDegreeTextFieldText = addNewUserPanelDegreeEntryJTextField.getText();		boolean userIDAlreadyExists = false;		if (null != userIDAlreadyExists(newUserID, "SHORT_USERIDS")) {			userIDAlreadyExists = true;		}		boolean userIDIsValide = userIDFormatIsValide(Access.shortUserID(newUserID));		String selectedNewUserPasswordIsValideString = userPasswordFormatIsValide(addNewUserPanelEnterPasswordEntryJPasswordField, addNewUserPanelReEnterPasswordEntryJPasswordField);		boolean selectedNewUserPasswordIsValideBool = false;		if (selectedNewUserPasswordIsValideString.equals("true")) {			selectedNewUserPasswordIsValideBool = true;		}		boolean requiredNewUserFieldsEmpty = (addNewUserPanelTitleTextFieldText.trim().equals("") || addNewUserPanelFirstNameTextFieldText.trim().equals("") || addNewUserPanelLastNameTextFieldText.trim().equals(""));		if (!userIDAlreadyExists & userIDIsValide & !requiredNewUserFieldsEmpty & selectedNewUserPasswordIsValideBool) {			UserData userData = new UserData();			newUserDataStruct = userData.createUserDataStruct();			userData = null;			boolean emptyMUIIndexFound = false;			int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();			int ind = 1;			((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).add(new Vector<Vector<String>>());			Vector<Vector<String>> individualUserIndex = ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).lastElement());			individualUserIndex.add(new Vector<String>());			individualUserIndex.elementAt(0).add(0, newUserID);			individualUserIndex.elementAt(0).add(1, addNewUserPanelEnterPasswordPasswordFieldText);			individualUserIndex.add(new Vector<String>());			individualUserIndex.elementAt(1).add(0, addNewUserPanelTitleTextFieldText);			individualUserIndex.elementAt(1).add(1, addNewUserPanelFirstNameTextFieldText);			individualUserIndex.elementAt(1).add(2, addNewUserPanelMiddleNameTextFieldText);			individualUserIndex.elementAt(1).add(3, addNewUserPanelLastNameTextFieldText);			individualUserIndex.elementAt(1).add(4, addNewUserPanelSuffixTextFieldText);			individualUserIndex.elementAt(1).add(5, addNewUserPanelDegreeTextFieldText);			individualUserIndex.add(new Vector<String>());			individualUserIndex.elementAt(2).add(0, "no access");			individualUserIndex.elementAt(2).add(1, "no access");			individualUserIndex.elementAt(2).add(2, "no access");			individualUserIndex.elementAt(2).add(3, "no access");			individualUserIndex.elementAt(2).add(4, "no access");			individualUserIndex.elementAt(2).add(5, "no access");			individualUserIndex.elementAt(2).add(6, "no access");			individualUserIndex.elementAt(2).add(7, "no access");			individualUserIndex.elementAt(2).add(8, "no access");			individualUserIndex.elementAt(2).add(9, "no access");			individualUserIndex.elementAt(2).add(10, "no access");			individualUserIndex.add(new Vector<String>());			individualUserIndex.elementAt(3).add(0, addNewUserPanelFacilityTextFieldText);			((Vector) (newUserDataStruct.elementAt(3))).setElementAt(individualUserIndex.clone(), 0);			AdministratorData.createAndAddIndividualuserDataToRoot(newUserID);			char[] foundPassword = null;			boolean found = false;			ind = 0;			while ((!found) && (ind < (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(4))))) {				if (newUserID.equals(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(0))) {					found = true;					foundPassword = ((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(1).toCharArray();				}				ind++;			}			try {				Io.out("usr", newUserDataStruct, Access.shortUserID(newUserID) + "_vitality.dat", makeRawFromPassword(foundPassword));				Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);			} catch (Exception ex) {				ex.printStackTrace();				SystemWindow.println("ERROR: new user's data tried to save but failed.");			}			if (2 < ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size()) {				addTalkbackText((Access.getUser(newUserID, "prefix") + " " + Access.getUser(newUserID, "firstName") + " " + Access.getUser(newUserID, "middleName") + " " + Access.getUser(newUserID, "lastName") + " " + Access.getUser(newUserID, "suffix") + ", " + Access.getUser(newUserID, "degree") + Access.lastDot(Access.getUser(newUserID, "degree")) + " was added to the user Index.").replace("  ", " "), ("There are now " + (((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size() - 1) + " users.").replace("  ", " "), false);			} else {				addTalkbackText((Access.getUser(newUserID, "prefix") + " " + Access.getUser(newUserID, "firstName") + " " + Access.getUser(newUserID, "middleName") + " " + Access.getUser(newUserID, "lastName") + " " + Access.getUser(newUserID, "suffix") + ", " + Access.getUser(newUserID, "degree") + Access.lastDot(Access.getUser(newUserID, "degree")) + " was added to the user Index.").replace("  ", " "), ("There is now " + (((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size() - 1) + " user.").replace("  ", " "), false);			}			addNewUserPanelEnterUserIDEntryJTextField.setText("");			addNewUserPanelEnterPasswordEntryJPasswordField.setText("");			addNewUserPanelReEnterPasswordEntryJPasswordField.setText("");			addNewUserPanelFacilityEntryJTextField.setText("");			addNewUserPanelPrefixEntryJTextField.setText("");			addNewUserPanelFirstNameEntryJTextField.setText("");			addNewUserPanelMiddleNameEntryJTextField.setText("");			addNewUserPanelLastNameEntryJTextField.setText("");			addNewUserPanelSuffixEntryJTextField.setText("");			addNewUserPanelDegreeEntryJTextField.setText("");			addNewUserPanelEnterUserIDEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);			addNewUserPanelReEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);			addNewUserPanelFacilityEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelPrefixEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelFirstNameEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelMiddleNameEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelLastNameEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelSuffixEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelDegreeEntryJTextField.setBackground(Color.WHITE);		} else {			if (requiredNewUserFieldsEmpty) {				if (addNewUserPanelTitleTextFieldText.trim().equals("")) {					addNewUserPanelPrefixEntryJTextField.setBackground(new Color(255, 192, 192));				}				if (addNewUserPanelFirstNameTextFieldText.trim().equals("")) {					addNewUserPanelFirstNameEntryJTextField.setBackground(new Color(255, 192, 192));				}				if (addNewUserPanelLastNameTextFieldText.trim().equals("")) {					addNewUserPanelLastNameEntryJTextField.setBackground(new Color(255, 192, 192));				}				addTalkbackText("The pink fields must have data.", null, true);			}			if (!selectedNewUserPasswordIsValideBool) {				addNewUserPanelEnterPasswordEntryJPasswordField.setBackground(new Color(255, 192, 192));				addNewUserPanelReEnterPasswordEntryJPasswordField.setBackground(new Color(255, 192, 192));				addTalkbackText(selectedNewUserPasswordIsValideString, null, true);			}			if (!userIDIsValide) {				addNewUserPanelEnterUserIDEntryJTextField.setBackground(new Color(255, 192, 192));				addTalkbackText("The new user ID must be composed of only ", "letters and numbers and be between 4 and 14 characters long.", true);			}			if (userIDAlreadyExists) {				addNewUserPanelEnterUserIDEntryJTextField.setBackground(new Color(255, 192, 192));				addTalkbackText("The new user ID: " + newUserID + " already exists, please choose a different user ID.", null, true);			}		}	}	public void processModificationForUser(String pUserID, String possiblyModifiedShortUserID) {		Vector<Vector<Vector<String>>> userIndex = ((Vector<Vector<Vector<String>>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))));		Vector<Vector<String>> rootPracticeAssistantUserGroups = (Vector<Vector<String>>) (((Vector) (Access.rootAdministrator.elementAt(5))).elementAt(0));		Vector<Vector<Vector<Vector<Object>>>> rootPracticeAssistantAppointments = (Vector<Vector<Vector<Vector<Object>>>>) (((Vector) (Access.rootAdministrator.elementAt(5))).elementAt(1));		Vector<Vector<String>> individualUserIndex = null;		Vector userStruct = null;		String modifyUserPanelFacilityTextFieldText = modifyUserPanelFacilityEntryJTextField.getText();		String modifyUserPanelTitleTextFieldText = modifyUserPanelPrefixEntryJTextField.getText();		String modifyUserPanelFirstNameTextFieldText = modifyUserPanelFirstNameEntryJTextField.getText();		String modifyUserPanelMiddleNameTextFieldText = modifyUserPanelMiddleNameEntryJTextField.getText();		String modifyUserPanelLastNameTextFieldText = modifyUserPanelLastNameEntryJTextField.getText();		String modifyUserPanelSuffixTextFieldText = modifyUserPanelSuffixEntryJTextField.getText();		String modifyUserPanelDegreeTextFieldText = modifyUserPanelDegreeEntryJTextField.getText();		String unmodifiedUserIDPassword = null;		String modifiedUserIDPassword = null;		String modifiedLongUserID = null;		char[] userPassword;		boolean userIDAlreadyExists = false;		int userIndexSize = userIndex.size();		boolean userIDIsValide;		int userInd = 1;		while (userInd < userIndex.size()) {			if (pUserID.equals(userIndex.elementAt(userInd).elementAt(0).elementAt(0))) {				individualUserIndex = userIndex.elementAt(userInd);			}			userInd++;		}		if (!possiblyModifiedShortUserID.equals(pUserID)) {			modifiedLongUserID = possiblyModifiedShortUserID + "|" + System.currentTimeMillis() + "|" + Device.device.licenseNumber;		} else {			modifiedLongUserID = pUserID;			userIDAlreadyExists = true;		}		userIDIsValide = userIDFormatIsValide(Access.shortUserID(modifiedLongUserID));		modifiedUserIDPassword = String.valueOf(modifyUserPanelEnterPasswordEntryJPasswordField.getPassword());		if (userIDIsValide) {			unmodifiedUserIDPassword = userIDAlreadyExists(pUserID, "LONG_USERIDS");			try {				System.out.println("pUserID: " + pUserID);				System.out.println("unmodifiedUserIDPassword: " + unmodifiedUserIDPassword);				System.out.println("Device.device.access.makeRawFromPassword(unmodifiedUserIDPassword.toCharArray()): " + Device.device.access.makeRawFromPassword(unmodifiedUserIDPassword.toCharArray()));				userStruct = Io.getUser(Access.shortUserID(pUserID), Device.device.access.makeRawFromPassword(unmodifiedUserIDPassword.toCharArray()));				SystemWindow.println("userStruct read in");			} catch (Exception ex) {				SystemWindow.println("Critical error reading user in systemFrame");				ex.printStackTrace();			}			if (!(possiblyModifiedShortUserID.equals(pUserID))) {				individualUserIndex.elementAt(0).setElementAt(modifiedLongUserID, 0);				individualUserIndex.elementAt(0).add(pUserID);			}			individualUserIndex.elementAt(0).setElementAt(modifiedUserIDPassword, 1);			userPassword = individualUserIndex.elementAt(0).elementAt(1).toCharArray();			individualUserIndex.elementAt(1).setElementAt(modifyUserPanelTitleTextFieldText, 0);			individualUserIndex.elementAt(1).setElementAt(modifyUserPanelFirstNameTextFieldText, 1);			individualUserIndex.elementAt(1).setElementAt(modifyUserPanelMiddleNameTextFieldText, 2);			individualUserIndex.elementAt(1).setElementAt(modifyUserPanelLastNameTextFieldText, 3);			individualUserIndex.elementAt(1).setElementAt(modifyUserPanelSuffixTextFieldText, 4);			individualUserIndex.elementAt(1).setElementAt(modifyUserPanelDegreeTextFieldText, 5);			individualUserIndex.elementAt(3).setElementAt(modifyUserPanelDegreeTextFieldText, 0);			((Vector) (userStruct.elementAt(3))).setElementAt(individualUserIndex.clone(), 0);			int appointmentGroupInd = 0;			int providerIDInd;			while (appointmentGroupInd < rootPracticeAssistantUserGroups.size()) {				providerIDInd = 0;				while (providerIDInd < rootPracticeAssistantUserGroups.elementAt(appointmentGroupInd).size()) {					if (pUserID.equals(rootPracticeAssistantUserGroups.elementAt(appointmentGroupInd).elementAt(providerIDInd))) {						rootPracticeAssistantUserGroups.elementAt(appointmentGroupInd).setElementAt(modifiedLongUserID, providerIDInd);					}					providerIDInd++;				}				appointmentGroupInd++;			}			int foundProvidorIDInd = -1;			int providorInd = 0;			while (foundProvidorIDInd == -1 && providorInd < rootPracticeAssistantAppointments.size()) {				if (pUserID.equals(rootPracticeAssistantAppointments.elementAt(providorInd).elementAt(0).elementAt(0).elementAt(0))) {					foundProvidorIDInd = providorInd;					rootPracticeAssistantAppointments.elementAt(providorInd).elementAt(0).elementAt(0).setElementAt(modifiedLongUserID, 0);					rootPracticeAssistantAppointments.elementAt(providorInd).elementAt(0).elementAt(0).setElementAt(individualUserIndex.elementAt(1), 1);					rootPracticeAssistantAppointments.elementAt(providorInd).elementAt(0).elementAt(0).setElementAt(individualUserIndex.elementAt(3), 2);				}				providorInd++;			}			if (foundProvidorIDInd == -1) {				System.out.println("");				System.out.println("Critical error in SystemFrame modifying rootPracticeAssistantAppointments's userID key.");				System.out.println("");			}			try {				Io.out("usr", userStruct, Access.shortUserID(modifiedLongUserID) + "_vitality.dat/", makeRawFromPassword(userPassword));				System.out.println("wrote out usr/" + Access.shortUserID(modifiedLongUserID) + "/vitality.dat/");				Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);				if (!userIDAlreadyExists) {					File fileToDelete = new File(Device.binDir + "usr/" + Access.shortUserID(pUserID) + "_vitality.dat/");					fileToDelete.setWritable(true);					fileToDelete.delete();					System.out.println("Deleted file: " + Device.binDir + "usr/" + pUserID);				}			} catch (Exception e) {				System.out.println("");				System.out.println("Critical error in SystemFrame writing new userStruct and deleting old userStruct.");				System.out.println("");			}			if (new File(Device.binDir + "usr/" + Access.shortUserID(modifiedLongUserID) + "_vitality.dat/").exists() && !(new File(Device.binDir + "usr/" + Access.shortUserID(pUserID) + "_vitality.dat/").exists())) {				System.out.println("File modified");			}			modifyUserPanelEnterUserIDEntryJTextField.setText("");			modifyUserPanelEnterPasswordEntryJPasswordField.setText("");			modifyUserPanelReEnterPasswordEntryJPasswordField.setText("");			modifyUserPanelFacilityEntryJTextField.setText("");			modifyUserPanelPrefixEntryJTextField.setText("");			modifyUserPanelFirstNameEntryJTextField.setText("");			modifyUserPanelMiddleNameEntryJTextField.setText("");			modifyUserPanelLastNameEntryJTextField.setText("");			modifyUserPanelSuffixEntryJTextField.setText("");			modifyUserPanelDegreeEntryJTextField.setText("");		} else {			if (!userIDIsValide) {				modifyUserPanelEnterUserIDEntryJTextField.setBackground(new Color(255, 192, 192));				addTalkbackText("The new user ID must be composed of only ", "letters and numbers and be between 4 and 14 characters long.", true);			}			if (userIDAlreadyExists) {				modifyUserPanelEnterUserIDEntryJTextField.setBackground(new Color(255, 192, 192));				addTalkbackText("The new user ID: " + possiblyModifiedShortUserID + " already exists, please choose a different user ID.", null, true);			}		}		System.out.println(": ");	}	private void clearTemplateInputBelow(String caller) {		if (caller.equals("template")) {			templateSectionJTextField.setText("");			templateSectionNumberEntry = -1;		}		templateItemNumberJTextField.setText("");		templatePageNumberJTextField.setText("");		templatePageNumberEntry = -1;		templateItemMarginsInPixelsLeftJTextField.setText("");		templateItemMarginsInPixelsRightJTextField.setText("");		templateItemMarginsInPixelsTopJTextField.setText("");		templateItemMarginsInPixelsBottomJTextField.setText("");		templateItemFontSizeJTextField.setText("");		includeItemNumbersJToggleButton.setSelected(true);		templateItemLeftToRightOrientationJRadioButton.setSelected(false);		templateItemTopToBottomOrientationJRadioButton.setSelected(false);		templatePromptToFillBeforeClosingChartYesJRadioButton.setSelected(false);		templatePromptToFillBeforeClosingChartNoJRadioButton.setSelected(false);		userReadableInternalDatatypeJTextField.setText("");		templateInputCharacterLengthJTextField.setText("");		templateVisibleFieldDescriptionJTextField.setText("");		templateMedicalCodeJTextField.setText("");		templateCodeSetNameJTextField.setText("");	}	private void processTemplatePanelInput(String itemAction) {		if (itemSpaceSelected) {			Rectangle processedBounds;			Vector itemAttributes;			if (null != (itemAttributes = validateTemplateItemInput())) {				String userReadableDatatype = ((String) (itemAttributes.elementAt(1)));				int expectedLineLengthIfStringData = ((Integer) (itemAttributes.elementAt(8)));				int itemNumber = templatePreviewPageJPanel.getComponentCount();				String visibleFieldDescription = ((String) (itemAttributes.elementAt(0)));				String givenElementDatatype = ((String) (itemAttributes.elementAt(2)));				givenElementDatatype = (givenElementDatatype.substring(givenElementDatatype.indexOf("|") + 1)).substring(0, (givenElementDatatype.substring(givenElementDatatype.indexOf("|") + 1)).indexOf("|") - 1);				System.out.println("givenElementDatatype: " + givenElementDatatype);				String givenAtomicIdentifier = ((String) (itemAttributes.elementAt(2)));				Vector templateDataCell = new Vector(10, 1);				int[] chartLocation = new int[3];				chartLocation[0] = templateSectionNumberEntry;				chartLocation[1] = templatePageNumberEntry;				chartLocation[2] = itemNumber;				templatePreviewJTabbedPane.setTitleAt(0, "Template: " + templateName + ",  section: " + sectionName(templateSectionNumberEntry) + ",  page " + templatePageNumberEntry + ".");				if ((processedBounds = processNewDataItemBounds(chartLocation, itemAttributes)) != null) {					itemAttributes.add(14, processedBounds);					templateDataCell.add(0, null);					templateDataCell.add(1, itemAttributes);					templateDataCell.add(2, null);					templateDataCell.add(3, new Vector(2, 1));					if (itemAction.equals("addingAnItem")) {						((Vector) (((Vector) (template.elementAt(templateSectionNumberEntry))).elementAt(templatePageNumberEntry))).add(templateDataCell.clone());					} else if (itemAction.equals("changingAnItem")) {						((Vector) (((Vector) (((Vector) (((Vector) (template.elementAt(0))).elementAt(14))).elementAt(templateSectionNumberEntry))).elementAt(templatePageNumberEntry))).setElementAt(processedBounds, itemNumber);						((Vector) (((Vector) (template.elementAt(templateSectionNumberEntry))).elementAt(templatePageNumberEntry))).setElementAt(templateDataCell.clone(), itemNumber);					}					((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).setElementAt(template.clone(), chartTemplateChoiceIndice);					try {						Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);					} catch (Exception e) {						System.out.println("Critical error writing rootStruct in in systemFrame's processTemplatePanelInput(...).");					}					templateItemNumberJTextField.setText(String.valueOf(templatePreviewPageJPanel.getComponentCount()));					addTalkbackText("Added item " + itemNumber + " on page " + templatePageNumberEntry + " to the " + sectionName(templateSectionNumberEntry) + " section.", null, false);				}			}			validate();			repaint();		} else {			addTalkbackText("Please select an area on the template page", null, true);		}	}	public Vector validateTemplateItemInput() {		Vector itemAttributes = new Vector();		String templateCodeSetNameJTextFieldText = templateCodeSetNameJTextField.getText();		String medicalCodeVersionIdentifier = null;		String hL7CodeVersionIdentifier = "HL7_2.3.1";		String rXNORMCodeVersionIdentifier = "RXNCONSO09072010";		String hCPCSLevel1CodeVersionIdentifier = "HCPCS_Level_1";		String hCPCSLevel2CodeVersionIdentifier = "HCPCS_Level_2";		String templatetemplateMedicalCodeTextFieldText = templateMedicalCodeJTextField.getText();		String templateItemFontSizeTextFieldText = templateItemFontSizeJTextField.getText();		String templateItemMarginsInPixelsBottomTextFieldText = templateItemMarginsInPixelsBottomJTextField.getText();		String templateItemNumberTextFieldText = templateItemNumberJTextField.getText();		String templateItemMarginsInPixelsRightTextFieldText = templateItemMarginsInPixelsRightJTextField.getText();		String templateItemMarginsInPixelsTopTextFieldText = templateItemMarginsInPixelsTopJTextField.getText();		String templateVisibleFieldDescriptionTextFieldText = templateVisibleFieldDescriptionJTextField.getText();		String templateItemMarginsInPixelsLeftTextFieldText = templateItemMarginsInPixelsLeftJTextField.getText();		String userReadableInternalDatatypeTextFieldText = userReadableInternalDatatypeJTextField.getText();		String templateInputCharacterLengthTextFieldText = templateInputCharacterLengthJTextField.getText();		String templateMedicalCodeTextFieldText = templateMedicalCodeJTextField.getText();		if (templateCodeSetNameJTextFieldText.equals("HL-7")) {			medicalCodeVersionIdentifier = hL7CodeVersionIdentifier;		} else if (templateCodeSetNameJTextFieldText.equals("HCPCS level 1")) {			medicalCodeVersionIdentifier = hCPCSLevel1CodeVersionIdentifier;		} else if (templateCodeSetNameJTextFieldText.equals("HCPCS level 2")) {			medicalCodeVersionIdentifier = hCPCSLevel2CodeVersionIdentifier;		} else if (templateCodeSetNameJTextFieldText.equals("RxNORM")) {			medicalCodeVersionIdentifier = rXNORMCodeVersionIdentifier;		}		if (!(templateVisibleFieldDescriptionTextFieldText.equals(""))) {			itemAttributes.add(0, templateVisibleFieldDescriptionTextFieldText);		} else {			System.out.println("XX 1");			addTalkbackText("Please choose a visible field description (can use \"field name\").", null, true);			return null;		}		if (!(userReadableInternalDatatypeTextFieldText.equals(""))) {			itemAttributes.add(1, userReadableInternalDatatypeTextFieldText);		} else {			System.out.println("XX 2");			addTalkbackText("Please choose a datatype.", null, true);			return null;		}		System.out.println("templateCodeSetNameJTextFieldText: " + templateCodeSetNameJTextFieldText);		System.out.println("    : " + templateCodeSetNameJTextFieldText + "|" + givenMedicalCodeElementIdentifier + "|" + elementDatatype + "|" + componentAndSubcomponentDatatypesAndPositions);		if (medicalCodeVersionIdentifier.equals("unencoded")) {			itemAttributes.add(2, medicalCodeVersionIdentifier);		} else if (medicalCodeVersionIdentifier.equals("HL7_2.3.1")) {			if (componentAndSubcomponentDatatypesAndPositions.equals("")) {				itemAttributes.add(2, medicalCodeVersionIdentifier + "|" + givenMedicalCodeElementIdentifier + "|" + elementDatatype);			} else {				itemAttributes.add(2, medicalCodeVersionIdentifier + "|" + givenMedicalCodeElementIdentifier + "|" + elementDatatype + "|" + componentAndSubcomponentDatatypesAndPositions);			}		} else {			System.out.println("XX 3");			addTalkbackText("Please choose a medical code.", null, true);			return null;		}		if (templatePromptToFillBeforeClosingChartYesJRadioButton.isSelected()) {			itemAttributes.add(3, true);		} else if (templatePromptToFillBeforeClosingChartNoJRadioButton.isSelected()) {			itemAttributes.add(3, false);		} else {			System.out.println("XX 4");			addTalkbackText("Please indicate if the field is required.", null, true);			return null;		}		if (templateItemTopToBottomOrientationJRadioButton.isSelected()) {			itemAttributes.add(4, "top to bottom");		} else if (templateItemLeftToRightOrientationJRadioButton.isSelected()) {			itemAttributes.add(4, "left to right");		} else {			System.out.println("XX 5");			addTalkbackText("Please select an orientation.", null, true);			return null;		}		if (templateItemArielFontTypeJRadioButton.isSelected()) {			itemAttributes.add(5, "Ariel");		} else if (templateItemSerifFontTypeJRadioButton.isSelected()) {			itemAttributes.add(5, "Serif");		} else if (templateItemElectronFontTypeJRadioButton.isSelected()) {			itemAttributes.add(5, "Electron");		} else {			System.out.println("XX 6");			addTalkbackText("Please select a valid font type.", null, true);			return null;		}		try {			if ((templateMinimumFontSize <= Integer.parseInt(templateItemFontSizeTextFieldText)) && (templateMaximumFontSize >= Integer.parseInt(templateItemFontSizeTextFieldText))) {				itemAttributes.add(6, Integer.parseInt(templateItemFontSizeTextFieldText));			}		} catch (Exception e) {			System.out.println("XX 7");			e.printStackTrace();			addTalkbackText("Please enter a valid font size between 10 and 22.", null, true);			return null;		}		if (templateItemBoxBorderYesJRadioButton.isSelected()) {			itemAttributes.add(7, true);		} else if (templateItemBoxBorderNoJRadioButton.isSelected()) {			itemAttributes.add(7, false);		} else {			System.out.println("XX 8");			addTalkbackText("Please choose if the item has a box border.", null, true);			return null;		}		if (!(templateInputCharacterLengthTextFieldText.equals(""))) {			itemAttributes.add(8, Integer.parseInt(templateInputCharacterLengthTextFieldText));		} else {			System.out.println("XX 9");			addTalkbackText("Please choose an expected length of field input.", null, true);			return null;		}		if (templateItemMarginsInPixelsLeftTextFieldText.equals("")) {			templateItemMarginsInPixelsLeftTextFieldText = "0";		}		try {			if (Integer.valueOf(templateItemMarginsInPixelsLeftTextFieldText) / 1 == Integer.valueOf(templateItemMarginsInPixelsLeftTextFieldText)) {				itemAttributes.add(9, Integer.valueOf(templateItemMarginsInPixelsLeftTextFieldText));			}		} catch (Exception e) {			System.out.println("XX 10");			addTalkbackText("Please enter a valid left margin.", null, true);			e.printStackTrace();			return null;		}		if (templateItemMarginsInPixelsRightTextFieldText.equals("")) {			templateItemMarginsInPixelsRightTextFieldText = "0";		}		try {			if (Integer.valueOf(templateItemMarginsInPixelsRightTextFieldText) / 1 == Integer.valueOf(templateItemMarginsInPixelsRightTextFieldText)) {				itemAttributes.add(10, Integer.valueOf(templateItemMarginsInPixelsRightTextFieldText));			}		} catch (Exception e) {			System.out.println("XX 11");			addTalkbackText("Please enter a valid right margin.", null, true);			e.printStackTrace();			return null;		}		if (templateItemMarginsInPixelsTopTextFieldText.equals("")) {			templateItemMarginsInPixelsTopTextFieldText = "0";		}		try {			if (Integer.valueOf(templateItemMarginsInPixelsTopTextFieldText) / 1 == Integer.valueOf(templateItemMarginsInPixelsTopTextFieldText)) {				itemAttributes.add(11, Integer.valueOf(templateItemMarginsInPixelsTopTextFieldText));			}		} catch (Exception e) {			System.out.println("XX 12");			addTalkbackText("Please enter a valid top margin.", null, true);			e.printStackTrace();			return null;		}		if (templateItemMarginsInPixelsBottomTextFieldText.equals("")) {			templateItemMarginsInPixelsBottomTextFieldText = "0";		}		try {			if (Integer.valueOf(templateItemMarginsInPixelsBottomTextFieldText) / 1 == Integer.valueOf(templateItemMarginsInPixelsBottomTextFieldText)) {				itemAttributes.add(12, Integer.valueOf(templateItemMarginsInPixelsBottomTextFieldText));			}		} catch (Exception e) {			System.out.println("XX 13");			addTalkbackText("Please enter a valid bottom margin.", null, true);			e.printStackTrace();			return null;		}		itemAttributes.add(13, "notMedicalOrderNotHeader");		return itemAttributes;	}	public void setUserAccountsField(Object field, String fieldName) {		if (field instanceof JPasswordField) {			((JPasswordField) field).addMouseListener(this);			((JPasswordField) field).setName(fieldName);			((JPasswordField) field).setBorder(new BevelBorder(BevelBorder.LOWERED));			((JPasswordField) field).setDisabledTextColor(Color.BLACK);			if (fieldName.equals("modifyUserFilledField")) {				((JPasswordField) field).setBackground(modifyFieldInactiveColor);			} else if (fieldName.equals("modifyUserEntryField")) {				((JPasswordField) field).setBackground(Color.WHITE);			}		} else {			((JTextField) field).addMouseListener(this);			((JTextField) field).setName(fieldName);			((JTextField) field).setBorder(new BevelBorder(BevelBorder.LOWERED));			((JTextField) field).setDisabledTextColor(Color.BLACK);			if (fieldName.equals("modifyUserFilledField")) {				((JTextField) field).setBackground(modifyFieldInactiveColor);			} else if (fieldName.equals("modifyUserEntryField")) {				((JTextField) field).setBackground(Color.WHITE);			}		}	}	private String[] returnChartIDVariables(String chartIDsText) {		String[] chartIDs = new String[4];		char[] chartIDsChar = new char[14];		chartIDsChar = chartIDsText.toCharArray();		char[] firstChartIDChar = new char[4];		char[] secondChartIDChar = new char[4];		boolean found = false;		int firstSpace = 0;		int secondSpace = 0;		int ind = 0;		int ind2;		try {			while ((!found) && (ind < 14)) {				if (chartIDsChar[ind] == " ".toCharArray()[0]) {					found = true;					firstSpace = ind;				}				ind++;			}			found = false;			ind = ind + 1;			while ((!found) && (ind < 14)) {				if (chartIDsChar[ind] == " ".toCharArray()[0]) {					found = true;					secondSpace = ind;				} else {					ind++;				}			}			ind = 0;			ind2 = (5 - firstSpace);			while (ind2 < 6) {				firstChartIDChar[ind] = chartIDsText.charAt(ind);				ind2++;			}			chartIDs[1] = firstChartIDChar.toString();			ind = 0;			ind2 = secondSpace;			while (ind2 < 14) {				secondChartIDChar[ind] = chartIDsText.charAt(ind);				ind++;				ind2++;			}			chartIDs[2] = secondChartIDChar.toString();		} catch (Exception e) {			chartIDs[3] = "error";			SystemWindow.println("Error in returnChartIDVariables() alg");		}		return chartIDs;	}	public String returnLongFormIfShortFormExists(String pSelectedUserIDFieldText) {		String longUserID = null;		boolean found = false;		int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();		System.out.println("");		int ind = 1;		while (!found & ind < numUsers) {			if (pSelectedUserIDFieldText.equals(Access.shortUserID(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(0)))) {				longUserID = ((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(0);				found = true;			}			ind++;		}		if (!found) {			addTalkbackText("UserID " + pSelectedUserIDFieldText + " was not found, please re-enter.", null, true);		}		return longUserID;	}	public boolean userIDFormatIsValide(String putativeUserID) {		boolean answer = true;		int ind = 0;		if ((putativeUserID.length() >= 4) && (putativeUserID.length() <= 14)) {			do {				if (isAlphanumeric(putativeUserID.charAt(ind))) {					ind++;				} else {					answer = false;				}			} while ((ind < putativeUserID.length()) & (answer == true));		} else {			answer = false;		}		return answer;	}	public String userIDAlreadyExists(String putativeUserID, String shortOrLongUserIDs) {		String userIDPassword = null;		int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();		int userInd = 1;		if (shortOrLongUserIDs.equals("SHORT_USERIDS")) {			while ((null == userIDPassword) & userInd < numUsers) {				if (putativeUserID.equals(Access.shortUserID(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userInd).elementAt(0).elementAt(0)))) {					userIDPassword = ((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userInd).elementAt(0).elementAt(1);				}				userInd++;			}		} else {			while ((null == userIDPassword) & userInd < numUsers) {				if (putativeUserID.equals(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userInd).elementAt(0).elementAt(0))) {					userIDPassword = ((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userInd).elementAt(0).elementAt(1);				}				userInd++;			}		}		return userIDPassword;	}	public void setMUIInformation(String pUserIDForAuthorizations, String name, String informationToSetInTheMUI) {		boolean found = false;		int category = -1;		int lineNumber = -1;		if (name.equals("systemUserAccountsAuthorization")) {			category = 2;			lineNumber = 1;		} else if (name.equals("systemAppearanceAuthorization")) {			category = 2;			lineNumber = 2;		} else if (name.equals("systemTemplatesAuthorization")) {			category = 2;			lineNumber = 3;		} else if (name.equals("decisionSupportAuthorization")) {			category = 2;			lineNumber = 4;		} else if (name.equals("messagingAuthorization")) {			category = 2;			lineNumber = 5;		} else if (name.equals("chartsDemographicsAuthorization")) {			category = 2;			lineNumber = 6;		} else if (name.equals("chartsActivitiesAuthorization")) {			category = 2;			lineNumber = 7;		} else if (name.equals("chartsHistoryAuthorization")) {			category = 2;			lineNumber = 8;		} else if (name.equals("chartsInsuranceAuthorization")) {			category = 2;			lineNumber = 9;		} else if (name.equals("practiceAssistantBillingAuthorization")) {			category = 2;			lineNumber = 10;		} else if (name.equals("userFamilyName")) {			category = 1;			lineNumber = 1;		} else if (name.equals("userLastNamePrefix")) {			category = 1;			lineNumber = 2;		} else if (name.equals("userGivenNamePrefix")) {			category = 1;			lineNumber = 3;		}		int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();		int ind = 0;		while (!found && ind < numUsers) {			if (pUserIDForAuthorizations.equals(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(0))) {				found = true;			} else {				ind++;			}		}		if (found) {			((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(category).setElementAt(informationToSetInTheMUI, lineNumber);		} else {			SystemWindow.println("Fail: setMUIInformation not set");		}	}	public static Object getElement(int sourceLocation, String variableName, String indiceString) {		Object answer = null;		int[] indice = new int[10];		int ind = 0;		if (indiceString != null && !indiceString.contains("_") && !indiceString.equals("size")) {			indice[0] = Integer.parseInt(indiceString);		} else if (indiceString != null && indiceString.contains("_")) {			while (indiceString.length() != 0) {				if (indiceString.indexOf("_") != -1) {					indice[ind] = Integer.parseInt(indiceString.substring(0, indiceString.indexOf("_")));					indiceString = indiceString.substring(indiceString.indexOf("_") + 1, indiceString.length());				} else {					indice[ind] = Integer.parseInt(indiceString);					indiceString = "";				}				System.out.println("indice[" + ind + "]: " + indice[ind]);				ind++;			}		}		if (variableName.equals("description")) {			answer = (String) (((Vector) ((Vector) ((Vector) ((Vector) ((Vector) ((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).elementAt(indice[0])).elementAt(indice[1])).elementAt(indice[2])).elementAt(indice[3])).elementAt(indice[4])).elementAt(indice[5]));		} else if (variableName.equals("templatePageContentPanelConstraints")) {			answer = (Integer) ((int[]) (((Vector) ((Vector) ((Vector) ((Vector) ((Vector) ((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).elementAt(indice[0])).elementAt(indice[1])).elementAt(indice[2])).elementAt(indice[3])).elementAt(indice[4])).elementAt(indice[5])))[indice[6]];		} else if (variableName.equals("numItemsOnPage")) {			answer = (Integer) (((Vector) ((Vector) ((Vector) ((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).elementAt(indice[0])).elementAt(indice[1])).elementAt(indice[2])).elementAt(indice[3]));		} else if (variableName.equals("defaultMaxUsers")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(4)));		} else if (variableName.equals("numUserInformationCategories")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(5)));		} else if (variableName.equals("numUserInformationLines")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(6)));		} else if (variableName.equals("templateName")) {			answer = (String) (((Vector) ((Vector) (((Vector) ((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).elementAt(indice[0]))).elementAt(0)).elementAt(0)).elementAt(13));		} else if (variableName.equals("numTemplates")) {			answer = (Integer) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(16))).size());		} else if (variableName.equals("template")) {			SystemWindow.println("   returned from: " + "(Vector) ((((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(16)))).elementAt(indice[0]))");			answer = (Vector) ((((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(16)))).elementAt(indice[0]));		} else if (variableName.equals("templatePageDatacellDisplayPanelEmptySlots")) {			SystemWindow.println("   returned from: " + "(Vector)(((Vector)(((Vector)(((Vector)(((Vector)(Access.rootAdministrator.elementAt(3))).elementAt(16))).elementAt(indice[0]))).elementAt(0))).elementAt(15))");			answer = (Vector) (((Vector) (((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(16))).elementAt(indice[0]))).elementAt(0))).elementAt(15));		} else if (variableName.equals("defaultMasterUserIndex")) {		} else if (variableName.equals("masterPatientIndex")) {		} else if (variableName.equals("defaultNumTotalUsers")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(3)));		} else if (variableName.equals("systemInformation")) {			answer = ((String[]) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(7)));		} else if (variableName.equals("loginReattemptTimeOut")) {			answer = ((Long) (((Vector) (Access.rootAdministrator.elementAt(0))).elementAt(0)));		} else if (variableName.equals("loginAttemptsAllowed")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(0))).elementAt(1)));		} else if (variableName.equals("defaultColor")) {			answer = ((Color) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(8)));		} else if (variableName.equals("defaultWallpaper")) {			answer = ((ImageIcon) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(11)));		} else if (variableName.equals("defaultWallpaperScaleType")) {			answer = ((String) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(12)));		} else if (variableName.equals("defaultFontChoice")) {			answer = ((String) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(13)));		} else if (variableName.equals("defaultFontSize")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(14)));		} else if (variableName.equals("defaultTranslucency")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(15)));		} else if (variableName.equals("defaultNumTotalCharts")) {			answer = ((Integer) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(1)));		} else if (variableName.equals("vitalityDirectory")) {			answer = ((String) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(17)));		} else if (variableName.equals("defaultWallpaperPermissionForUsers")) {			answer = ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(0)).elementAt(5).elementAt(5);		} else if (variableName.equals("patientMaxUsers")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(4)));		} else if (variableName.equals("patientNumUserInformationCategories")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(5)));		} else if (variableName.equals("patientNumUserInformationLines")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(6)));		} else if (variableName.equals("patientUserIndex")) {			answer = ((Vector) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(0)));		} else if (variableName.equals("patientInformation")) {			answer = ((String[]) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(7)));		} else if (variableName.equals("patientColor")) {			answer = ((Color) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(8)));		} else if (variableName.equals("patientTheme")) {			answer = ((String) (((Vector) (Access.patientDataStruct.elementAt(3))).elementAt(9)));		} else if (variableName.equals("loginReattemptTimeOut")) {			answer = ((Long) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(0)));		} else if (variableName.equals("loginAttemptsAllowed")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(1)));		} else if (variableName.equals("patientWallpaper")) {			answer = ((Image) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(11)));		} else if (variableName.equals("patientDefaultWallpaperScaleType")) {			answer = ((String) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(12)));		} else if (variableName.equals("patientFontChoice")) {			answer = ((String) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(13)));		} else if (variableName.equals("patientFontSize")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(14)));		} else if (variableName.equals("patientTranslucency")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(15)));		} else if (variableName.equals("patientWallpaperDirectory")) {			answer = ((String) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(1)));		} else if (variableName.equals("patientNumAuthorizationOptions")) {			answer = ((Integer) (((Vector) (Access.patientDataStruct.elementAt(0))).elementAt(2)));		} else if (variableName.equals("patientContacts")) {			answer = ((Vector) (((Vector) (Access.patientDataStruct.elementAt(4))).elementAt(0)));		} else if (variableName.equals("patientMessages")) {			answer = ((Vector) (((Vector) (Access.patientDataStruct.elementAt(4))).elementAt(1)));		} else if (variableName.equals("userChartsTreatments")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(1))).elementAt(2)));		} else if (variableName.equals("userChartsHistory")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(1))).elementAt(3)));		} else if (variableName.equals("userChartsInsurance")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(1))).elementAt(4)));		} else if (variableName.equals("numUserInformationCategories")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(5)));		} else if (variableName.equals("numUserInformationLines")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(6)));		} else if (variableName.equals("userPatientIndex")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(1))).elementAt(0)));		} else if (variableName.equals("userIndex")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(3))).elementAt(0)));		} else if (variableName.equals("userSystemInformation")) {			answer = ((String[]) (((Vector) (Access.user.elementAt(3))).elementAt(7)));		} else if (variableName.equals("userLoginReattemptTimeOut")) {			answer = ((Long) (((Vector) (Access.user.elementAt(0))).elementAt(0)));		} else if (variableName.equals("userLoginAttemptsAllowed")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(0))).elementAt(1)));		} else if (variableName.equals("userChartsDemographics")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(1))).elementAt(1)));		} else if (variableName.equals("userWallpaper")) {			answer = ((ImageIcon) (((Vector) (Access.user.elementAt(3))).elementAt(11)));		} else if (variableName.equals("userWallpaperScaleType")) {			answer = ((String) (((Vector) (Access.user.elementAt(3))).elementAt(12)));		} else if (variableName.equals("userNumAuthorizationOptions")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(2)));		} else if (variableName.equals("userColor")) {			answer = ((Color) (((Vector) (Access.user.elementAt(3))).elementAt(8)));		} else if (variableName.equals("userTheme")) {			answer = ((String) (((Vector) (Access.user.elementAt(3))).elementAt(9)));		} else if (variableName.equals("userFontChoice")) {			answer = ((String) (((Vector) (Access.user.elementAt(3))).elementAt(13)));		} else if (variableName.equals("userFontSize")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(14)));		} else if (variableName.equals("userTranslucency")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(15)));		} else if (variableName.equals("userNumTotalCharts")) {			answer = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(10)));		} else if (variableName.equals("userContacts")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(4))).elementAt(0)));		} else if (variableName.equals("userMessages")) {			answer = ((Vector) (((Vector) (Access.user.elementAt(4))).elementAt(1)));		} else {			SystemWindow.println("Eegads! A called variable wasn't set.");		}		if (answer instanceof Integer) {			answer = (Integer) (int) (Integer) answer;		} else if (answer instanceof Integer) {			answer = (Long) (long) (Long) answer;		} else if (answer instanceof Integer) {			answer = (Integer) (int) (Integer) answer;		} else if (answer instanceof Vector) {			answer = ((Vector) answer).clone();		}		return answer;	}	private void setElement(int sourceLocation, Object valueToGoIn, String variableName, int indice) {		if (valueToGoIn instanceof Integer) {			valueToGoIn = (Integer) (int) (Integer) valueToGoIn;		} else if (valueToGoIn instanceof Integer) {			valueToGoIn = (Long) (long) (Long) valueToGoIn;		} else if (valueToGoIn instanceof Integer) {			valueToGoIn = (Integer) (int) (Integer) valueToGoIn;		} else if (valueToGoIn instanceof Vector) {			valueToGoIn = ((Vector) valueToGoIn).clone();		}		if (variableName.equals("defaultMaxUsers")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 4);		} else if (variableName.equals("numUserInformationCategories")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 5);		} else if (variableName.equals("numUserInformationLines")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 6);		} else if (variableName.equals("templates")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 16);		} else if (variableName.equals("template")) {			(((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(16)))).setElementAt(valueToGoIn, indice);		} else if (variableName.equals("defaultMasterUserIndex")) {		} else if (variableName.equals("masterPatientIndex")) {		} else if (variableName.equals("defaultNumTotalUsers")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("systemInformation")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 7);		} else if (variableName.equals("loginReattemptTimeOut")) {			((Vector) (Access.rootAdministrator.elementAt(0))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("loginAttemptsAllowed")) {			((Vector) (Access.rootAdministrator.elementAt(0))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("defaultColor")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 8);		} else if (variableName.equals("defaultWallpaper")) {			System.out.println("root wallpaper being set");			System.out.println(" should be valueToGoIn text: " + valueToGoIn);			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 11);		} else if (variableName.equals("defaultWallpaperScaleType")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 12);		} else if (variableName.equals("defaultFontChoice")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 13);		} else if (variableName.equals("defaultFontSize")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 14);		} else if (variableName.equals("defaultTranslucency")) {			((Vector) (Access.rootAdministrator.elementAt(3))).setElementAt(valueToGoIn, 15);		} else if (variableName.equals("defaultNumTotalCharts")) {			((Vector) (Access.rootAdministrator.elementAt(1))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("patientMaxUsers")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 4);		} else if (variableName.equals("patientNumUserInformationCategories")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 5);		} else if (variableName.equals("patientNumUserInformationLines")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 6);		} else if (variableName.equals("patientUserIndex")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("patientInformation")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 7);		} else if (variableName.equals("patientColor")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 8);		} else if (variableName.equals("patientTheme")) {			((Vector) (Access.patientDataStruct.elementAt(3))).setElementAt(valueToGoIn, 9);		} else if (variableName.equals("loginReattemptTimeOut")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("loginAttemptsAllowed")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("patientWallpaper")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 11);		} else if (variableName.equals("patientDefaultWallpaperScaleType")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 12);		} else if (variableName.equals("patientFontChoice")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 13);		} else if (variableName.equals("patientFontSize")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 14);		} else if (variableName.equals("patientTranslucency")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 15);		} else if (variableName.equals("patientWallpaperDirectory")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("patientNumAuthorizationOptions")) {			((Vector) (Access.patientDataStruct.elementAt(0))).setElementAt(valueToGoIn, 2);		} else if (variableName.equals("patientContacts")) {			((Vector) (Access.patientDataStruct.elementAt(4))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("patientMessages")) {			((Vector) (Access.patientDataStruct.elementAt(4))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("userChartsTreatments")) {			((Vector) (Access.user.elementAt(1))).setElementAt(valueToGoIn, 2);		} else if (variableName.equals("userChartsHistory")) {			((Vector) (Access.user.elementAt(1))).setElementAt(valueToGoIn, 3);		} else if (variableName.equals("userChartsInsurance")) {			((Vector) (Access.user.elementAt(1))).setElementAt(valueToGoIn, 4);		} else if (variableName.equals("numUserInformationCategories")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 5);		} else if (variableName.equals("numUserInformationLines")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 6);		} else if (variableName.equals("userPatientIndex")) {			((Vector) (Access.user.elementAt(1))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("userIndex")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("userSystemInformation")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 7);		} else if (variableName.equals("userLoginReattemptTimeOut")) {			((Vector) (Access.user.elementAt(0))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("userLoginAttemptsAllowed")) {			((Vector) (Access.user.elementAt(0))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("userChartsDemographics")) {			((Vector) (Access.user.elementAt(1))).setElementAt(valueToGoIn, 1);		} else if (variableName.equals("userWallpaper")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 11);		} else if (variableName.equals("userWallpaperScaleType")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 12);		} else if (variableName.equals("userNumAuthorizationOptions")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 2);		} else if (variableName.equals("userColor")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 8);		} else if (variableName.equals("userTheme")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 9);		} else if (variableName.equals("userFontChoice")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 13);		} else if (variableName.equals("userFontSize")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 14);		} else if (variableName.equals("userTranslucency")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 15);		} else if (variableName.equals("userNumTotalCharts")) {			((Vector) (Access.user.elementAt(3))).setElementAt(valueToGoIn, 10);		} else if (variableName.equals("userContacts")) {			((Vector) (Access.user.elementAt(4))).setElementAt(valueToGoIn, 0);		} else if (variableName.equals("userMessages")) {			((Vector) (Access.user.elementAt(4))).setElementAt(valueToGoIn, 1);		}	}	private String sectionName(int qSectionNumber) {		String sectionName = null;		if (qSectionNumber == 0) {			sectionName = "Chart cover";		} else if (qSectionNumber == 1) {			sectionName = "Demographics";		} else if (qSectionNumber == 2) {			sectionName = "Activities";		} else if (qSectionNumber == 3) {			sectionName = "History";		} else if (qSectionNumber == 4) {			sectionName = "Insurance";		}		return sectionName;	}	public static String determineWallpaperDirectory() {		JFileChooser dummyFileChooser = new JFileChooser();		if (Access.isUserLoggedIn) {			if ((String) ((Vector) Access.user.elementAt(3)).elementAt(1) != null) {				return (String) ((Vector) Access.user.elementAt(3)).elementAt(1);			} else {				return dummyFileChooser.getFileSystemView().getDefaultDirectory().getPath();			}		}		return dummyFileChooser.getFileSystemView().getDefaultDirectory().getPath();	}	private String userPasswordFormatIsValide(JPasswordField passwordJTextField1, JPasswordField passwordJTextField2) {		char[] passwordField1 = (char[]) (passwordJTextField1.getPassword());		char[] passwordField2 = (char[]) (passwordJTextField2.getPassword());		String answer;		if (passwordsMatch(passwordField1, passwordField2)) {			answer = "true";			if ((passwordField1.length > 5) & (passwordField1.length < 17)) {				int ind = 0;				do {					if (isAlphanumeric(passwordField1[ind])) {						ind++;					} else {						answer = "Password must be composed of only letters and numbers.";					}				} while ((ind < passwordField1.length) & (answer.equals("true")));			} else {				answer = "Password must be between 6 and 16 characters long.";			}			return answer;		} else {			return "Passwords do not match, please re-enter them.";		}	}	private byte[] combineCharArraysAndReturnPasswordBytes(char[] pPassword, char[] selectedNewUserPasswordChars) {		char[] pSuperNewPasswordChars = new char[16];		byte[] pSuperNewPasswordBytes = new byte[16];		int ind = 0;		do {			pSuperNewPasswordChars[ind] = pPassword[ind];			ind++;		} while (ind < pPassword.length);		do {			pSuperNewPasswordChars[ind] = selectedNewUserPasswordChars[ind - pPassword.length];			ind++;		} while (ind < 16);		ind = 0;		do {			pSuperNewPasswordBytes[ind] = (byte) pSuperNewPasswordChars[ind];			ind++;		} while (ind < 16);		return pSuperNewPasswordBytes;	}	private boolean isFontSizeValid(String pFontSizeText) {		boolean bool = false;		if (pFontSizeText.equals("12")) {			bool = true;		}		if (pFontSizeText.equals("13")) {			bool = true;		}		if (pFontSizeText.equals("14")) {			bool = true;		}		if (pFontSizeText.equals("15")) {			bool = true;		}		if (pFontSizeText.equals("16")) {			bool = true;		}		if (pFontSizeText.equals("17")) {			bool = true;		}		if (pFontSizeText.equals("18")) {			bool = true;		}		if (pFontSizeText.equals("19")) {			bool = true;		}		if (pFontSizeText.equals("20")) {			bool = true;		}		if (pFontSizeText.equals("21")) {			bool = true;		}		if (pFontSizeText.equals("22")) {			bool = true;		}		return bool;	}	private boolean isAlphanumeric(char c) {		char[] alphanumeric = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };		int ind = 0;		boolean stop = false;		while (!stop && ind < alphanumeric.length) {			if (alphanumeric[ind] == c) {				stop = true;			} else {				ind++;			}		}		if (stop) {			return true;		} else {			return false;		}	}	static public void setFonts() {		String pFontChoice;		int pFontSize;		if (Access.isUserLoggedIn) {			if (Access.getUser(Access.loggedOnUserID, "systemAppearanceAuthorization").equals("manage")) {				pFontChoice = ((String) ((Vector) Access.user.elementAt(3)).elementAt(13));				pFontSize = ((Integer) ((Vector) Access.user.elementAt(3)).elementAt(14));			} else {				pFontChoice = ((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(13));				pFontSize = ((Integer) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(14));			}		} else {			pFontChoice = ((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(13));			pFontSize = ((Integer) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(14));		}		systemFont = new Font(pFontChoice, Font.BOLD, pFontSize);		NotePad.fontSizeJLabel.setFont(systemFont);		NotePad.fontSizeJTextField.setFont(systemFont);		NotePad.arielJButton.setFont(systemFont);		NotePad.serifJButton.setFont(systemFont);		NotePad.boldJToggleButton.setFont(systemFont);		NotePad.italicJToggleButton.setFont(systemFont);		NotePad.underlineJToggleButton.setFont(systemFont);		NotePad.saveNoteJButton.setFont(systemFont);		NotePad.newNoteJButton.setFont(systemFont);		NotePad.openFileFileChooserJButton.setFont(systemFont);		NotePad.saveCopyOfFileFileChooserJButton.setFont(systemFont);		NotePad.cancelOpenFileFileChooserJButton.setFont(systemFont);		NotePad.cancelSaveCopyOfFileFileChooserJButton.setFont(systemFont);		NotePad.saveAsJButton.setFont(systemFont);		NotePad.openNoteJButton.setFont(systemFont);		NotePad.attachToCurrentOrderJButton.setFont(systemFont);		NotePad.sendAsNoteJButton.setFont(systemFont);		NotePad.printJButton.setFont(systemFont);		NotePad.undoJButton.setFont(systemFont);		NotePad.redoJButton.setFont(systemFont);		NotePad.findJButton.setFont(systemFont);		NotePad.replaceJButton.setFont(systemFont);		NotePad.threeDHumanJMenu.setFont(systemFont);		NotePad.saveNoteAndCloseJButton.setFont(systemFont);		NotePad.closeWithoutSavingJButton.setFont(systemFont);		NotePad.newNoteNameJTextField.setFont(systemFont);		NotePad.newNoteNameJLabel.setFont(systemFont);		NotePad.closeNoteJButton.setFont(systemFont);		NotePad.newNoteNameOkJButton.setFont(systemFont);		resetFonts(Device.device.workspace.systemWindow, systemFont);		resetFonts(Device.device.workspace.chartingWindow, systemFont);		resetFonts(Device.device.workspace.messagingWindow, systemFont);		resetFonts(Device.device.workspace.decisionSupportWindow, systemFont);		resetFonts(Device.device.workspace.practiceAssistantWindow, systemFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio1JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio2JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio3JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalSubscriptItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio5JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio6JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalSubscriptItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio7JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio8JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalSubscriptItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio10JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalItalicsFont);		Device.device.workspace.decisionSupportWindow.decisionAnalysisIncrementalCostEffectivenessRatio11JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERNormalSubscriptItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsCostsOfTreatmentOptionsAAndBLegend1JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsCostsOfTreatmentOptionsAAndBLegend2JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallSubscriptItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsCostsOfTreatmentOptionsAAndBLegend3JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallPlainFont);		Device.device.workspace.decisionSupportWindow.statisticsCostsOfTreatmentOptionsAAndBLegend4JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsCostsOfTreatmentOptionsAAndBLegend5JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallPlainFont);		Device.device.workspace.decisionSupportWindow.statisticsCostsOfTreatmentOptionsAAndBLegend6JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend1JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend2JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallSubscriptItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend3JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallPlainFont);		Device.device.workspace.decisionSupportWindow.statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend4JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallItalicsFont);		Device.device.workspace.decisionSupportWindow.statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend5JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallPlainFont);		Device.device.workspace.decisionSupportWindow.statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend6JLabel.setFont(Device.device.workspace.decisionSupportWindow.iCERSmallItalicsFont);		Font specialFont = new Font(pFontChoice, Font.BOLD, 13);		PracticeWindow.rXNormCodeSetVersionButtonJLabel.setFont(specialFont);		PracticeWindow.hL7CodeSetVersionButtonJLabel.setFont(specialFont);		PracticeWindow.cPTCodeSetVersionButtonJLabel.setFont(specialFont);		PracticeWindow.iCDCodeSetVersionButtonJLabel.setFont(specialFont);		PracticeWindow.lOINCCodeSetVersionButtonJLabel.setFont(specialFont);		specialFont = new Font(pFontChoice, Font.BOLD, 16);		PracticeWindow.rXNormCodeSetAbbreviatedCodeButtonJLabel.setFont(specialFont);		PracticeWindow.hL7CodeSetAbbreviatedCodeButtonJLabel.setFont(specialFont);		PracticeWindow.cPTCodeSetAbbreviatedCodeButtonJLabel.setFont(specialFont);		PracticeWindow.iCDCodeSetAbbreviatedCodeButtonJLabel.setFont(specialFont);		PracticeWindow.lOINCCodeSetAbbreviatedCodeButtonJLabel.setFont(specialFont);		specialFont = new Font(pFontChoice, Font.BOLD, 14);		PracticeWindow.rXNormCodeSetCodeNameButtonJLabel.setFont(specialFont);		PracticeWindow.hL7CodeSetCodeNameButtonJLabel.setFont(specialFont);		PracticeWindow.cPTCodeSetCodeNameButtonJLabel.setFont(specialFont);		PracticeWindow.iCDCodeSetCodeNameButtonJLabel.setFont(specialFont);		PracticeWindow.lOINCCodeSetCodeNameButtonJLabel.setFont(specialFont);	}	static public void resetFonts(Container container, Font font) {		boolean isExcludedObject = false;		int ind = 0;		if (null != container.getName() && (container.getName().toLowerCase().contains("paper") || container.getName().equals("fontExamplesJPanel") || container.getName().equals("appearanceFontTypeJPanel"))) {			isExcludedObject = true;		}		while (ind < container.getComponentCount() && !isExcludedObject) {			if (container.getComponent(ind) instanceof JTextField) {				((JTextField) (container.getComponent(ind))).setFont(font);			} else if (container.getComponent(ind) instanceof JLabel) {				((JLabel) (container.getComponent(ind))).setFont(font);			} else if (container.getComponent(ind) instanceof JButton) {				if (null != ((JButton) (container.getComponent(ind))).getLayout()) {					resetFonts(((Container) (container.getComponent(ind))), font);				} else {					((JButton) (container.getComponent(ind))).setFont(font);				}			} else if (container.getComponent(ind) instanceof JToggleButton) {				((JToggleButton) (container.getComponent(ind))).setFont(font);			} else if (container.getComponent(ind) instanceof JTextArea) {				((JTextArea) (container.getComponent(ind))).setFont(font);			} else if (container.getComponent(ind) instanceof JPopupMenu) {				resetFonts(((JPopupMenu) (container.getComponent(ind))), font);			} else if (container.getComponent(ind) instanceof Container) {				resetFonts(((Container) (container.getComponent(ind))), font);			}			ind++;		}	}	private void setCursorInTemplatePage(Point clickPoint) {		int numItemsOnPage = templatePreviewPageJPanel.getComponentCount();		if (numItemsOnPage == 1) {			itemPositioningJPanel.setLocation(0, pageHeaderPanelHeight);			blinkingCaretJPanel.setLocation(0, pageHeaderPanelHeight);			itemSpaceSelected = true;			templatePageClickableCoverJPanel.add(itemPositioningJPanel);			templatePageClickableCoverJPanel.add(blinkingCaretJPanel);			relativeItemInd = 0;			relativeCaretLocation = "below";		} else {			String[][] itemDistances = new String[1000][3];			int itemDistanceInd = -1;			int distanceToPoint = -1;			String relativeItemLocation;			boolean intersectingItemFound = false;			int ind = 1;			while (ind < templatePreviewPageJPanel.getComponentCount()) {				relativeItemLocation = null;				if (!((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().intersects(new Rectangle(clickPoint.x, clickPoint.y, blinkingCaretJPanel.getWidth(), blinkingCaretJPanel.getHeight()))) {					if (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().height <= clickPoint.y && (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x <= clickPoint.x && ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width >= clickPoint.x)) {						relativeItemLocation = "below";						distanceToPoint = clickPoint.y - ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y - ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().height;					} else if (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y <= clickPoint.y && (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x <= clickPoint.x && ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width >= clickPoint.x)) {						relativeItemLocation = "above";						distanceToPoint = clickPoint.y - ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y;					} else if (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x <= clickPoint.x && (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y <= clickPoint.y && ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().height >= clickPoint.y)) {						relativeItemLocation = "right";						distanceToPoint = clickPoint.x - ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x - ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width;					} else if (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x >= clickPoint.x && (((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y <= clickPoint.y && ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().height >= clickPoint.y)) {						relativeItemLocation = "left";						distanceToPoint = ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x - clickPoint.x;					}					if (relativeItemLocation != null) {						SystemWindow.println("   4");						itemDistanceInd++;						itemDistances[itemDistanceInd][0] = relativeItemLocation;						itemDistances[itemDistanceInd][1] = String.valueOf(distanceToPoint);						itemDistances[itemDistanceInd][2] = String.valueOf(ind);					}				}				ind++;				templatePageClickableCoverJPanel.remove(dataCellItemHighlightJPanel);			}			int numItemsDistanced = itemDistanceInd + 1;			int smallestDistance = templatePageDimension.height;			if (itemDistanceInd != -1) {				while (itemDistanceInd != -1) {					if (smallestDistance > Integer.valueOf(itemDistances[itemDistanceInd][1])) {						relativeCaretLocation = itemDistances[itemDistanceInd][0];						smallestDistance = Integer.valueOf(itemDistances[itemDistanceInd][1]);						relativeItemInd = Integer.valueOf(itemDistances[itemDistanceInd][2]);					}					itemDistanceInd--;				}				templatePageClickableCoverJPanel.add(blinkingCaretJPanel);				templatePageClickableCoverJPanel.add(itemPositioningJPanel);				itemSpaceSelected = true;			} else {				itemSpaceSelected = false;				templatePageClickableCoverJPanel.remove(blinkingCaretJPanel);				templatePageClickableCoverJPanel.remove(itemPositioningJPanel);			}			if (relativeCaretLocation.equals("left")) {				blinkingCaretJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x - blinkingCaretJPanel.getWidth(), ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y);				itemPositioningJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x - blinkingCaretJPanel.getWidth(), ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y);			} else if (relativeCaretLocation.equals("right")) {				blinkingCaretJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().width, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y);				itemPositioningJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().width, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y);			} else if (relativeCaretLocation.equals("below")) {				blinkingCaretJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().height);				itemPositioningJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().height);				int mostRightEdgeXOfIntersectingComponent = -1;				int mRelativeItemInd = -1;				ind = 0;				while (ind < templatePreviewPageJPanel.getComponentCount()) {					if (new Rectangle(blinkingCaretJPanel.getBounds().x, blinkingCaretJPanel.getBounds().y, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().width, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().height).intersects(templatePreviewPageJPanel.getComponent(ind).getBounds())) {						if (mostRightEdgeXOfIntersectingComponent < ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width) {							mostRightEdgeXOfIntersectingComponent = ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width;							mRelativeItemInd = ind;						}					}					ind++;				}				if (mRelativeItemInd != -1) {					blinkingCaretJPanel.setLocation(mostRightEdgeXOfIntersectingComponent, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().height);					itemPositioningJPanel.setLocation(mostRightEdgeXOfIntersectingComponent, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y + ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().height);				}			} else if (relativeCaretLocation.equals("above")) {				blinkingCaretJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y - blinkingCaretJPanel.getHeight());				itemPositioningJPanel.setLocation(((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().x, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y - blinkingCaretJPanel.getHeight());				int mostRightEdgeXOfIntersectingComponent = -1;				int mRelativeItemInd = -1;				ind = 0;				while (ind < templatePreviewPageJPanel.getComponentCount()) {					if (new Rectangle(blinkingCaretJPanel.getBounds().x, blinkingCaretJPanel.getBounds().y, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().width, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().height).intersects(templatePreviewPageJPanel.getComponent(ind).getBounds())) {						if (mostRightEdgeXOfIntersectingComponent < ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width) {							mostRightEdgeXOfIntersectingComponent = ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().x + ((JPanel) (templatePreviewPageJPanel.getComponent(ind))).getBounds().width;							mRelativeItemInd = ind;						}					}					ind++;				}				if (mRelativeItemInd != -1) {					blinkingCaretJPanel.setLocation(mostRightEdgeXOfIntersectingComponent, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y - blinkingCaretJPanel.getHeight());					itemPositioningJPanel.setLocation(mostRightEdgeXOfIntersectingComponent, ((JPanel) (templatePreviewPageJPanel.getComponent(relativeItemInd))).getBounds().y - blinkingCaretJPanel.getHeight());				}			}		}		validate();		repaint();		blinkingCaretTimer.start();	}	@Override	public void actionPerformed(ActionEvent e) {		if (e.getActionCommand().equals("systemDevelopmentJToggleButton")) {			systemDevelopmentJToggleButton.setSelected(true);			setUpJToggleButton.setSelected(false);			systemAdministrationCardedPanelCardLayout.show(systemAdministrationCardedJPanel, "systemDevelopmentCardedPanelBaseJPanel");		} else if (e.getActionCommand().equals("setUpJToggleButton")) {			setUpJToggleButton.setSelected(true);			systemDevelopmentJToggleButton.setSelected(false);			remove(templatePreviewJTabbedPane);			systemAdministrationCardedPanelCardLayout.show(systemAdministrationCardedJPanel, "setUpPanelBaseJPanel");			addTalkbackText("System - Set-up", null, false);			reSize(true, "setUpPanelBaseJPanel");		} else if (e.getActionCommand().equals("zoomUMLDiagramJTextField")) {			if (uMLDiagramsPanelScrollPaneJPanel.getComponentCount() == 0) {				try {					float pZoom = Float.parseFloat(zoomUMLDiagramJTextField.getText());					if ((pZoom >= 0) && (pZoom <= 100)) {						float valuex0 = uMLDiagramsPanelHorizontalJScrollbar.getValue();						float valuey0 = uMLDiagramsPanelVerticalJScrollbar.getValue();						float panel0Height = uMLDiagramsPanelScrollPaneJPanel.getComponent(0).getHeight();						float panel0Width = uMLDiagramsPanelScrollPaneJPanel.getComponent(0).getWidth();					} else {						addTalkbackText("Please enter a valid zoom percentage from 1 to 100", null, true);					}				} catch (Exception er) {					addTalkbackText("Please enter a valid zoom percentage from 1 to 100", null, true);					er.printStackTrace();				}			} else {				addTalkbackText("Please enter a valid zoom percentage from 1 to 100", null, true);			}			repaint();		} else if (e.getActionCommand().equals("uMLDiagramJButton")) {			systemAdministrationPanelCardLayout.show(systemDevelopmentCardedJPanel, "uMLDiagramsJPanel");			double zoom = 0.0;			try {				zoom = Double.parseDouble(zoomUMLDiagramJTextField.getText());				if (zoom >= 1 && zoom <= 100) {					loadCrystal(uMLDiagramsPanelScrollPaneJPanel, zoom);				} else {					addTalkbackText("Please enter a valid zoom percentage from 1 to 100", null, true);				}			} catch (Exception er) {				addTalkbackText("Please enter a valid zoom percentage from 1 to 100", null, true);				er.printStackTrace();			}		} else if (e.getActionCommand().equals("placeImageOnDesktopJButton")) {			placeUMLImageOnDesktop();		} else if (e.getActionCommand().equals("placeFilesOnDesktopJButton")) {			placeUMLFilesOnDesktop();		} else if (e.getActionCommand().equals("fullUserIndexJToggleButton")) {			listedUserIndexJToggleButton.setSelected(false);			userIndexCardLayout.show(userIndexCardedJPanel, "fullUserIndexJPanel");		} else if (e.getActionCommand().equals("listedUserIndexJToggleButton")) {			fullUserIndexJToggleButton.setSelected(false);			createListedUserIndex();			userIndexCardLayout.show(userIndexCardedJPanel, "listedUserIndexJPanel");		} else if (e.getActionCommand().equals("authorizationInputAuthorizationsApplyToAllChartsJToggleButton")) {			authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton.setSelected(false);		} else if (e.getActionCommand().equals("authorizationInputAuthorizationsApplyToSpecifiedChartsOnlyJToggleButton")) {			authorizationInputAuthorizationsApplyToAllChartsJToggleButton.setSelected(false);		} else if (e.getActionCommand().equals("modifyUserPanelEnterEntryClearJButton")) {			foundUserIndexesVector = new Vector<Vector<Vector<String>>>();			foundUserIndexesSizeJLabel.setText("");			modifyUserPanelEnterUserIDEntryJTextField.setText("");			modifyUserPanelEnterPasswordEntryJPasswordField.setText("");			modifyUserPanelReEnterPasswordEntryJPasswordField.setText("");			modifyUserPanelFacilityEntryJTextField.setText("");			modifyUserPanelPrefixEntryJTextField.setText("");			modifyUserPanelFirstNameEntryJTextField.setText("");			modifyUserPanelMiddleNameEntryJTextField.setText("");			modifyUserPanelLastNameEntryJTextField.setText("");			modifyUserPanelSuffixEntryJTextField.setText("");			modifyUserPanelDegreeEntryJTextField.setText("");			modifyUserPanelEnterUserIDFilledJTextField.setText("");			modifyUserPanelEnterPasswordFilledJPasswordField.setText("");			modifyUserPanelReEnterPasswordFilledJPasswordField.setText("");			modifyUserPanelFacilityFilledJTextField.setText("");			modifyUserPanelPrefixFilledJTextField.setText("");			modifyUserPanelFirstNameFilledJTextField.setText("");			modifyUserPanelMiddleNameFilledJTextField.setText("");			modifyUserPanelLastNameFilledJTextField.setText("");			modifyUserPanelSuffixFilledJTextField.setText("");			modifyUserPanelDegreeFilledJTextField.setText("");		} else if (e.getActionCommand().equals("addNewUserPanelShowPasswordJToggleButton")) {			if (addNewUserPanelShowPasswordJToggleButton.isSelected()) {				addNewUserPanelEnterPasswordEntryJPasswordField.setEchoChar((char) 0);				addNewUserPanelEnterPasswordEntryJPasswordField.setBackground(Color.GRAY);				addNewUserPanelEnterPasswordEntryJPasswordField.setEnabled(false);				addNewUserPanelReEnterPasswordJLabel.setForeground(Color.GRAY);			} else {				addNewUserPanelEnterPasswordEntryJPasswordField.setEchoChar('*');				addNewUserPanelEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);				addNewUserPanelEnterPasswordEntryJPasswordField.setEnabled(true);				addNewUserPanelReEnterPasswordJLabel.setForeground(Color.BLACK);			}		} else if (e.getActionCommand().equals("nextFoundUserIndexesIndJButton")) {			String labelNum = foundUserIndexesSizeJLabel.getText().trim();			labelNum = labelNum.substring(0, labelNum.indexOf(" of "));			System.out.println("labelNum: " + labelNum);			int foundUserIndexInd = Integer.parseInt(labelNum);			if (foundUserIndexInd != foundUserIndexesVector.size()) {				foundUserIndexInd = foundUserIndexInd + 1;			}			foundUserIndexesSizeJLabel.setText(String.valueOf(foundUserIndexInd) + " of " + String.valueOf(foundUserIndexesVector.size()));			fillModifyUserPanelWithFoundUserIndexes(foundUserIndexInd);		} else if (e.getActionCommand().equals("backFoundUserIndexesIndJButton")) {			String labelNum = foundUserIndexesSizeJLabel.getText().trim();			labelNum = labelNum.substring(0, labelNum.indexOf(" of "));			int foundUserIndexInd = Integer.parseInt(labelNum);			if (foundUserIndexInd != 1) {				foundUserIndexInd = foundUserIndexInd - 1;			}			foundUserIndexesSizeJLabel.setText(String.valueOf(foundUserIndexInd) + " of " + String.valueOf(foundUserIndexesVector.size()));			fillModifyUserPanelWithFoundUserIndexes(foundUserIndexInd);		} else if (e.getActionCommand().equals("deleteUserPopupMenuYesJButton")) {			String userID = ((JButton) (e.getSource())).getName();			boolean found = false;			int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();			int userInd = 1;			while (!found && userInd < numUsers) {				if (userID.equals(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userInd).elementAt(0).elementAt(0))) {					found = true;					((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).removeElementAt(userInd);					try {						Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);					} catch (Exception e1) {						System.out.println("Critical error writing out rootStruct after deleting template in systemFrame.");						e1.printStackTrace();					}				}				userInd++;			}			if (!found) {				System.out.println("Critical error in SystemFrame userDeleteJButton action: button's name does not match any template");			}			deleteUserJPopupMenu.setVisible(false);		} else if (e.getActionCommand().equals("deleteUserPopupMenuNoJButton")) {			deleteUserJPopupMenu.setVisible(false);		} else if (e.getActionCommand().equals("templateAtomicMedicalCodeOkJButton")) {			System.out.println("templateAtomicMedicalCodeOkJButton");			System.out.println("codeSetIdentifier: " + codeSetIdentifier);			System.out.println("templateAtomicMedicalCodeJTextField.getText(): " + templateAtomicMedicalCodeJTextField.getText());			templateAtomicMedicalCodeChoicesJPanel.removeAll();			templateAtomicMedicalCodeChoicesJPanel.add(Device.device.workspace.practiceAssistantWindow.codeSetPanel("systemFrame", codeSetIdentifier, Device.device.workspace.practiceAssistantWindow.parseCodeSetQuery(templateAtomicMedicalCodeJTextField.getText()), 0), templateAtomicMedicalCodeChoicesPanelConstraints);			templateAtomicMedicalCodeFieldsJPopupMenu.show((Component) templateAtomicMedicalCodeJPanel, 0, templateMedicalCodeSetJPanel.getHeight());			actionForTemplateAtomicMedicalCodeJTextField();		} else if (e.getActionCommand().equals("authorizationsSelectedUserIDJTextField") || e.getActionCommand().equals("authorizationsOKJButton")) {			String authorizationsSelectedUserIDJTextFieldText = authorizationsSelectedUserIDJTextField.getText().trim();			String longUserID = null;			if (!authorizationsSelectedUserIDJTextFieldText.equals(null) && !authorizationsSelectedUserIDJTextFieldText.equals("")) {				if (null != (longUserID = returnLongFormIfShortFormExists(authorizationsSelectedUserIDJTextFieldText))) {					selectedUserIDForAuthorizations = longUserID;					fillAuthorizationInputContentPanel();				} else {					selectedUserIDForAuthorizations = null;				}			} else {				addTalkbackText("Please enter a valid user ID", null, true);			}		} else if (e.getActionCommand().equals("templateItemBoxBorderYesJRadioButton")) {			if (templateItemBoxBorderYesJRadioButton.isSelected()) {				templateItemBoxBorderNoJRadioButton.setSelected(false);			} else {				templateItemBoxBorderNoJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("templateItemBoxBorderNoJRadioButton")) {			if (templateItemBoxBorderNoJRadioButton.isSelected()) {				templateItemBoxBorderYesJRadioButton.setSelected(false);			} else {				templateItemBoxBorderYesJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("templateItemNumberJButton")) {			templateItemNumberJTextField.setBackground(Color.WHITE);			int itemNumber = -1;			try {				itemNumber = Integer.valueOf(templatePageNumberJTextField.getText());			} catch (Exception er) {				addTalkbackText("Please enter a valid item number", null, true);			}			if (templatePreviewPageJPanel.getComponentCount() < itemNumber) {				dataCellItemHighlightJPanel.setBounds(templatePreviewPageJPanel.getComponent(itemNumber).getBounds());				templatePageClickableCoverJPanel.add(dataCellItemHighlightJPanel);				validate();				repaint();			}		} else if (e.getActionCommand().equals("advanceToNextField")) {			advanceFocus((Component) (e.getSource()));		} else if (e.getActionCommand().equals("modifyUserPanelEnterEntryOkJButton")) {			if ((foundUserIndexesVector = findUserIndexesMatchingModifyUserPanelFields()).isEmpty()) {				addTalkbackText("User not found", null, true);			} else {				System.out.println("WWW User(s) found");			}		} else if (e.getActionCommand().equals("templateItemArielFontTypeJRadioButton")) {			templateItemSerifFontTypeJRadioButton.setSelected(false);			templateItemElectronFontTypeJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("templateItemSerifFontTypeJRadioButton")) {			templateItemArielFontTypeJRadioButton.setSelected(false);			templateItemElectronFontTypeJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("templateItemElectronFontTypeJRadioButton")) {			templateItemArielFontTypeJRadioButton.setSelected(false);			templateItemSerifFontTypeJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("templateDeleteDataItemJButton")) {			String templateItemNumberJTextFieldText = templateItemNumberJTextField.getText();			if (isValid("templateItemNumberJTextField", templateItemNumberJTextFieldText, null).equals("TRUE")) {				if (Integer.parseInt(templateItemNumberJTextFieldText) <= ((Vector) (((Vector) (template.elementAt(templateSectionNumberEntry))).elementAt(templatePageNumberEntry))).size() - 1) {					((Vector) (((Vector) (template.elementAt(templateSectionNumberEntry))).elementAt(templatePageNumberEntry))).remove(Integer.parseInt(templateItemNumberJTextFieldText));					templatePreviewPageJPanel.remove(Integer.parseInt(templateItemNumberJTextFieldText));					addTalkbackText("Deleted item " + Integer.parseInt(templateItemNumberJTextFieldText) + ".", null, false);					validate();					repaint();				}			} else {				addTalkbackText("Item " + Integer.parseInt(templateItemNumberJTextFieldText) + " does not exist on this page.", null, true);			}		} else if (e.getActionCommand().equals("templateDeleteDataTemplateJButton")) {			templateDeleteDataTemplateJLabel.setText("Are you sure you want to delete the template, \"" + templateName + "?\"");			templateDeleteDataTemplateJPopupMenu.show(templateJPanel, 100, 150);		} else if (e.getActionCommand().equals("templateDeleteDataTemplateNoJButton")) {			templateDeleteDataTemplateJPopupMenu.setVisible(false);		} else if (e.getActionCommand().equals("componentJButton")) {			promptForComponentOrSubComponentsPanelJPopupMenu.setVisible(false);			String buttonName = ((JButton) (e.getSource())).getName();			int firstDeliminator = buttonName.indexOf("|");			codeDetailsPanelSubComponentNumberAndDatatypeJLabel.setText(buttonName.substring(firstDeliminator + 1));			String componentOrSubComponentName = ((JButton) (e.getSource())).getText();			int secondDeliminator;			if ((secondDeliminator = buttonName.indexOf("|", 2)) != -1) {				templateMedicalCodeSubcomponentJLabel.setText(e.getActionCommand().substring(16));			}			codeDetailsPanelAtomicNameJLabel.setText(componentOrSubComponentName);			codeDetailsPanelElementNameJLabel.setText(componentOrSubComponentName);			SystemWindow.println("Filling descriptor with " + componentOrSubComponentName);			SystemWindow.println("    from e.getActionCommand().equals(\"componentJButton\")");			SystemWindow.println("    buttonName: " + buttonName);			codeDetailsPanelSubComponentNumberAndDatatypeJLabel.setText(buttonName.replace("|", ", "));			SystemWindow.println("    givenElementDatatype: " + elementDatatype);			templateVisibleFieldDescriptionJTextField.setText(componentOrSubComponentName);			componentAndSubcomponentDatatypesAndPositions = buttonName;			templateMedicalCodeElementNumberJLabel.setText((String) (((Vector) (codeSetRecordPlusHeaderVector.elementAt(1))).elementAt(0)));			templateMedicalCodeDescriptionJLabel.setText(" - ");			if (codeSetIdentifier.equals("HL7_2.3.1")) {				codeDetailsPanelReferenceJLabel.setText((String) (((Vector) (codeSetRecordPlusHeaderVector.elementAt(1))).elementAt(4)));			} else if (codeSetIdentifier.equals("CPT2009")) {				codeDetailsPanelElementDataTypeJLabel.setText(" - ");			}			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);		} else if (e.getActionCommand().equals("templateMedicalCodeDetailsPanelJToggleButton")) {			if (templateMedicalCodeDetailsPanelJToggleButton.isSelected()) {				codeDetailsPanelJPopupMenu.setPreferredSize(new Dimension(templateVisibleFieldDescriptionJPanel.getWidth(), templateItemFormatJPanel.getLocation().y - templateVisibleFieldDescriptionJPanel.getLocation().y + templateItemFormatJPanel.getHeight()));				codeDetailsPanelJPopupMenu.show(templateVisibleFieldDescriptionJPanel, 0, 0);			}		} else if (e.getActionCommand().equals("templateAtomicMedicalCodeFieldNamePanelPopupJButton")) {			templateAtomicMedicalCodeChoicesJPanel.removeAll();			templateAtomicMedicalCodeJTextField.setFont(systemFont);			templateAtomicMedicalCodeHeaderJLabel.setFont(systemFont);			templateAtomicMedicalCodeOkJButton.setFont(systemFont);			templateAtomicMedicalCodeOkJButton.setBackground(buttonColor);			templateAtomicMedicalCodeOkJButton.setBorder(buttonBorder);			if (!templateCodeSetNameJTextField.getText().equals("")) {				templateVisibleFieldDescriptionJTextField.setText("");				templateMedicalCodeElementNumberJLabel.setText("");				templateMedicalCodeDescriptionJLabel.setText(" - ");				templateMedicalCodeJTextField.setBackground(Color.WHITE);				templateAtomicMedicalCodeJTextField.setText("");				templateAtomicMedicalCodeFieldsJPopupMenu.show((Component) templateAtomicMedicalCodeJPanel, 0, templateMedicalCodeSetJPanel.getHeight());			} else {				addTalkbackText("Please select a code set.", null, false);			}		} else if (e.getActionCommand().equals("templateMedicalCodeJTextField")) {			actionForTemplateAtomicMedicalCodeJTextField();		} else if (e.getActionCommand().equals("listCodeSetsJButton")) {			hL7JButton.setBackground(SystemWindow.buttonColor);			hL7JButton.setBorder(SystemWindow.buttonBorder);			cPTJButton.setBackground(SystemWindow.buttonColor);			cPTJButton.setBorder(SystemWindow.buttonBorder);			iCDJButton.setBackground(SystemWindow.buttonColor);			iCDJButton.setBorder(SystemWindow.buttonBorder);			lOINCJButton.setBackground(SystemWindow.buttonColor);			lOINCJButton.setBorder(SystemWindow.buttonBorder);			hCPCSLevel1JButton.setBackground(SystemWindow.buttonColor);			hCPCSLevel1JButton.setBorder(SystemWindow.buttonBorder);			hCPCSLevel2JButton.setBackground(SystemWindow.buttonColor);			hCPCSLevel2JButton.setBorder(SystemWindow.buttonBorder);			uncodedItemJButton.setBackground(SystemWindow.buttonColor);			uncodedItemJButton.setBorder(SystemWindow.buttonBorder);			templateMedicalCodingSetJPopupMenu.show(templateMedicalCodeSetJPanel, 0, templateMedicalCodeSetJPanel.getHeight());		} else if (e.getActionCommand().equals("New page")) {			addNewTemplatePage();			setCursorInTemplatePage(new Point(200, 200));		} else if (e.getActionCommand().equals("templatePageNumberJButton")) {			templatePageNumberJTextField.setBackground(Color.WHITE);			if (pageNumberButtonTalkBack != null) {				JPanel pageNumberBypassJPanel = new JPanel(new GridBagLayout());				GridBagConstraints pageNumberBypassConstraints = new GridBagConstraints();				JPopupMenu pageNumberBypassJPopupMenu = new JPopupMenu();				pageNumberBypassJPopupMenu.add(pageNumberBypassJPanel);				pageNumberBypassConstraints.anchor = GridBagConstraints.WEST;				pageNumberBypassConstraints.gridy = 0;				if (pageNumberButtonTalkBack.equals("Chart cover")) {					pageNumberBypassJPanel.add(new JLabel("Chart covers have only 1 page"), pageNumberBypassConstraints);					pageNumberBypassConstraints.gridy = 1;					pageNumberBypassJPanel.add(new JLabel("(chart covers are page 1"), pageNumberBypassConstraints);				} else if (pageNumberButtonTalkBack.equals("Activities")) {					pageNumberBypassJPanel.add(new JLabel("Blah1"), pageNumberBypassConstraints);					pageNumberBypassConstraints.gridy = 1;					pageNumberBypassJPanel.add(new JLabel("Blah2"), pageNumberBypassConstraints);				}				pageNumberBypassJPopupMenu.show(templatePageNumberJButton, 0, 30);			} else {				JPanel templatePageNumberScrollPaneJPanel = new JPanel(new GridBagLayout());				GridBagConstraints templatePageNumberScrollPanePanelConstraints = new GridBagConstraints();				GridBagConstraints templatePageNumbersPanelConstraints = new GridBagConstraints();				templatePageNumberButtonJPopupMenu.removeAll();				templatePageNumbersJPanel = new JPanel(new GridBagLayout());				templatePageNumbersJPanel.setOpaque(false);				templatePageNumberScrollPaneJPanel.setBackground(popDownColor);				templatePageNumberJScrollPane = new JScrollPane(templatePageNumberScrollPaneJPanel);				templatePageNumberScrollPaneJPanel.setBorder(new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(Color.LIGHT_GRAY, 5)), new LineBorder(Color.GRAY)));				templatePageNumberScrollPanePanelConstraints.weighty = 1;				templatePageNumberScrollPanePanelConstraints.weightx = 1;				templatePageNumberScrollPanePanelConstraints.fill = GridBagConstraints.BOTH;				templatePageNumberScrollPaneJPanel.add(templatePageNumbersJPanel, templatePageNumberScrollPanePanelConstraints);				templatePageNumberJScrollPane.setBorder(null);				templatePageNumbersPanelConstraints.fill = GridBagConstraints.HORIZONTAL;				templatePageNumbersPanelConstraints.anchor = GridBagConstraints.NORTHWEST;				templatePageNumbersPanelConstraints.insets = new Insets(0, 0, 4, 0);				templatePageNumbersPanelConstraints.gridy = 0;				templatePageNumbersPanelConstraints.gridy = 1;				templatePageNumbersJPanel.add(new JButton(" New page "), templatePageNumbersPanelConstraints);				((JButton) (templatePageNumbersJPanel.getComponent(0))).setBorder(new LineBorder(new Color(92, 92, 92), 1));				((JButton) (templatePageNumbersJPanel.getComponent(0))).setBackground(buttonColor);				((JButton) (templatePageNumbersJPanel.getComponent(0))).addActionListener(this);				((JButton) (templatePageNumbersJPanel.getComponent(0))).setActionCommand("New page");				((JButton) (templatePageNumbersJPanel.getComponent(0))).setMnemonic('N');				((JButton) (templatePageNumbersJPanel.getComponent(0))).setFont(systemFont);				JPanel templatePageNumberHorizontalLineJPanel = new JPanel(new GridBagLayout());				templatePageNumberHorizontalLineJPanel.setBorder(new MatteBorder(0, 0, 2, 0, new Color(128, 128, 128, 128)));				templatePageNumbersPanelConstraints.gridy = 2;				templatePageNumbersPanelConstraints.weightx = 1;				templatePageNumbersJPanel.add(templatePageNumberHorizontalLineJPanel, templatePageNumbersPanelConstraints);				templatePageNumbersPanelConstraints.insets = new Insets(0, 0, 4, 0);				templatePageNumbersPanelConstraints.weightx = 0;				System.out.println("templateSectionNumberEntry: " + templateSectionNumberEntry);				int numSectionPages = ((Vector) (template.elementAt(templateSectionNumberEntry))).size() - 1;				System.out.println("numSectionPages shold always start with 0: " + numSectionPages);				if (numSectionPages == 0) {					templatePageNumbersPanelConstraints.gridy = 0;				} else {					int ind = 1;					while (ind <= numSectionPages) {						templatePageNumbersPanelConstraints.gridy = templatePageNumbersPanelConstraints.gridy + 1;						templatePageNumbersJPanel.add(new JButton(String.valueOf(ind)), templatePageNumbersPanelConstraints);						((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).setName(String.valueOf(ind));						((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).addActionListener(this);						((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).setActionCommand("existing page");						((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).setBorder(new LineBorder(new Color(92, 92, 92), 1));						((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).setBackground(buttonColor);						((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).setFont(systemFont);						if (ind < 10) {							((JButton) (templatePageNumbersJPanel.getComponent(ind + 1))).setMnemonic(String.valueOf(ind).toCharArray()[0]);						}						ind++;					}				}				templatePageNumberButtonJPopupMenu.add(templatePageNumberJScrollPane);				templatePageNumberButtonJPopupMenu.show((Component) templatePageNumberJButton, 0, templatePageNumberJButton.getHeight());				validate();				repaint();			}		} else if (e.getActionCommand().equals("existing page")) {			clearTemplateInputBelow("page");			templatePageNumberJTextField.setText(((JButton) (e.getSource())).getName());			templatePageNumberJTextField.setBackground(Color.WHITE);			addTalkbackText("Template: \"" + templateName + ";\" section: " + sectionName(templateSectionNumberEntry) + "; page " + ((JButton) (e.getSource())).getName() + ".", null, false);			templatePreviewJTabbedPane.setTitleAt(0, "Template: " + templateName + ",  section: " + sectionName(templateSectionNumberEntry) + ",  page " + templatePageNumberEntry + ".");			templatePageNumberButtonJPopupMenu.setVisible(false);			templatePageNumberEntry = Integer.valueOf(((JButton) (e.getSource())).getName());			SystemWindow.println("Requesting existing page " + ((JButton) (e.getSource())).getName());			JPanel[] templatePage = (JPanel[]) (getTemplatePage(templateSectionNumberEntry, Integer.parseInt(((JButton) (e.getSource())).getName())));			createTemplatePreviewPage(templatePage[0], templatePage[1]);		} else if (e.getActionCommand().equals("templateDemographicsSectionJButton")) {			chosenTemplateSection = "Demographics";			pageNumberButtonTalkBack = null;			templateSectionNumberEntry = 1;			templatePageNumberEntry = ((Vector) (template.elementAt(1))).size() - 1;			templateSectionNumberEntry = 1;			fillTemplateMedicalCodingSchemePopupMenu("Demographics");			if (((Vector) (template.elementAt(1))).size() > 1) {				JPanel[] templatePage = (JPanel[]) (getTemplatePage(1, 1));				createTemplatePreviewPage(templatePage[0], templatePage[1]);			} else {				createTemplatePreviewPage(null, null);			}			System.out.println("templateName: " + templateName);			System.out.println("templateSectionNumberEntry: " + templateSectionNumberEntry);			System.out.println("templatePageNumberEntry: " + templatePageNumberEntry);			previewSectionIsCover = false;			templatePreviewJTabbedPane.setTitleAt(0, "Template \"" + templateName + "\" - Demographics:");			clearTemplateInputBelow("section");			templateSectionJTextField.setText(chosenTemplateSection);			templateSectionJTextField.setBackground(Color.WHITE);			templateSectionButtonJPopupMenu.setVisible(false);			templatePreviewJTabbedPane.setTitleAt(0, ((JButton) (e.getSource())).getName() + ";  choose a page number or make a new page.");			addTalkbackText("Template \"" + templateName + ";\"  " + ((JButton) (e.getSource())).getName().toLowerCase() + " section.", null, false);			validate();			repaint();		} else if (e.getActionCommand().equals("templateInsuranceSectionJButton")) {			chosenTemplateSection = "Insurance";			pageNumberButtonTalkBack = null;			templatePageNumberJButton.setText(" - ");			templateSectionNumberEntry = 4;			fillTemplateMedicalCodingSchemePopupMenu("Insurance");			createTemplatePreviewPage(null, null);			previewSectionIsCover = false;			clearTemplateInputBelow("section");			templateSectionJTextField.setText(chosenTemplateSection);			templateSectionJTextField.setBackground(Color.WHITE);			templateSectionButtonJPopupMenu.setVisible(false);			templatePreviewJTabbedPane.setTitleAt(0, ((JButton) (e.getSource())).getName() + ";  choose a page number or make a new page.");			addTalkbackText("Template \"" + templateName + ";\"  " + ((JButton) (e.getSource())).getName().toLowerCase() + " section.", null, false);			validate();			repaint();		} else if (e.getActionCommand().equals("templateChartCoverSectionJButton")) {		} else if (e.getActionCommand().equals("templateSectionJButton")) {			templateChartCoverSectionJButton.setBackground(SystemWindow.buttonColor);			templateChartCoverSectionJButton.setBorder(SystemWindow.buttonBorder);			templateDemographicsSectionJButton.setBackground(SystemWindow.buttonColor);			templateDemographicsSectionJButton.setBorder(SystemWindow.buttonBorder);			templateInsuranceSectionJButton.setBackground(SystemWindow.buttonColor);			templateInsuranceSectionJButton.setBorder(SystemWindow.buttonBorder);			chosenTemplateSection = "";			templateSectionButtonJPopupMenu.show(templateSectionJPanel, 0, templateSectionJPanel.getHeight());		} else if (e.getActionCommand().equals("templateDatatypeTextJButton")) {			templateDatatypeMoreButtonJPopupMenu.setVisible(false);			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setText("text");		} else if (e.getActionCommand().equals("templateDatatypeImageJButton")) {			templateDatatypeMoreButtonJPopupMenu.setVisible(false);			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setText("image");		} else if (e.getActionCommand().equals("templateDatatypeAudioJButton")) {			templateDatatypeMoreButtonJPopupMenu.setVisible(false);			userReadableInternalDatatypeJTextField.setText("audio");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);		} else if (e.getActionCommand().equals("templateDatatypeVideoJButton")) {			templateDatatypeMoreButtonJPopupMenu.setVisible(false);			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setText("video");		} else if (e.getActionCommand().equals("templateDatatypePanelJButton")) {			templateDatatypeTextJButton.setBackground(SystemWindow.buttonColor);			templateDatatypeTextJButton.setBorder(SystemWindow.buttonBorder);			templateDatatypeImageJButton.setBackground(SystemWindow.buttonColor);			templateDatatypeImageJButton.setBorder(SystemWindow.buttonBorder);			templateDatatypeAudioJButton.setBackground(SystemWindow.buttonColor);			templateDatatypeAudioJButton.setBorder(SystemWindow.buttonBorder);			templateDatatypeVideoJButton.setBackground(SystemWindow.buttonColor);			templateDatatypeVideoJButton.setBorder(SystemWindow.buttonBorder);			templateDatatypeMoreButtonJPopupMenu.show(templateDatatypeJPanel, 0, templateDatatypeJPanel.getHeight());		} else if (e.getActionCommand().equals("toggleItemNumberVisibilityJToggleButton")) {			int ind = 0;			while (ind < numbersJPanels.size()) {				numbersJPanels.elementAt(ind).setVisible(includeItemNumbersJToggleButton.isSelected());				ind++;			}		} else if (e.getActionCommand().equals("templateDisplayedDataItemTopToBottomOrientationJRadioButton")) {			templateItemLeftToRightOrientationJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("templateDisplayedDataItemLeftToRightOrientationJRadioButton")) {			templateItemTopToBottomOrientationJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("anExistingTemplateButton")) {			clearTemplateInputBelow("template");			templateChooseTemplateJPopupMenu.setVisible(false);			chartTemplateChoiceIndice = Integer.parseInt(((JButton) e.getSource()).getName());			((JButton) (templateChooseExistingTemplateJPanel.getComponent(chartTemplateChoiceIndice - 1))).setEnabled(false);			((JButton) (templateChooseExistingTemplateJPanel.getComponent(chartTemplateChoiceIndice - 1))).setBackground(new Color(230, 255, 230));			template = ((Vector) ((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).elementAt(chartTemplateChoiceIndice));			templateName = (String) (((Vector) ((Vector) (((Vector) template).elementAt(0))).elementAt(0)).elementAt(13));			includeItemNumbersJToggleButton.setSelected(false);			JPanel[] templatePage = (JPanel[]) (getTemplatePage(0, 1));			createTemplatePreviewPage(templatePage[0], templatePage[1]);			templatePreviewPageJPanel.setBackground(manillaColor);			marginedPaperPanelPlusContents.setBackground(manillaColor);			marginedPaperPanelPlusContents.setBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(185, 185, 185, 0)), new MatteBorder(1, 1, 0, 0, new Color(244, 244, 244, 0))));			validate();			repaint();			precedingDataItemLineHeight = 0;			precedingDataItemWidth = 0;			precedingDataItemOriginX = 0;			minimumHeightInRow = 1;			templatePreviewJTabbedPane.setTitleAt(0, "Template: " + templateName + ",  section: chart cover:");			addTalkbackText("Template: " + templateName + ",  section: chart cover:", null, false);			templateChooseTemplateJTextField.setBackground(Color.WHITE);			templateChooseTemplateJTextField.setText(templateName);		} else if (e.getActionCommand().equals("templateChooseTemplateJButton")) {			fillAndShowTemplateChooseTemplatePopupMenu();		} else if (e.getActionCommand().equals("templateChooseNewTemplateOKJButton") || e.getActionCommand().equals("templateChooseNewTemplateJTextField")) {			templateName = templateChooseNewTemplateJTextField.getText().toString();			templateChooseTemplateJTextField.setText(templateName);			templateChooseTemplateJTextField.setBackground(Color.WHITE);			templateChooseTemplateJPopupMenu.setVisible(false);			String validTalkback = isValid("templateName", templateName, null);			if (validTalkback.equals("TRUE")) {				includeItemNumbersJToggleButton.setSelected(false);				template = new Vector(5);				templateChartCover = new Vector();				templateChartInformation = new Vector();				templateChartDemographics = new Vector();				templateChartActivities = new Vector();				templateChartHistory = new Vector();				templateChartInsurance = new Vector();				numChartSections = new Integer(4);				numChartCoverForms = new Integer(1);				numDemographicsForms = new Integer(0);				numActivitiesForms = new Integer(0);				numHistoryForms = new Integer(0);				numInsuranceForms = new Integer(0);				templatePageDataCellConstraintsVector = new Vector(5, 1);				templatePageDataCellConstraintsVector.add(new Vector(12, 2));				templatePageDataCellConstraintsVector.add(new Vector(12, 2));				templatePageDataCellConstraintsVector.add(new Vector(12, 2));				templatePageDataCellConstraintsVector.add(new Vector(12, 2));				templatePageDataCellConstraintsVector.add(new Vector(12, 2));				((Vector) (templatePageDataCellConstraintsVector.elementAt(0))).add(0, null);				((Vector) (templatePageDataCellConstraintsVector.elementAt(1))).add(0, null);				((Vector) (templatePageDataCellConstraintsVector.elementAt(2))).add(0, null);				((Vector) (templatePageDataCellConstraintsVector.elementAt(3))).add(0, null);				((Vector) (templatePageDataCellConstraintsVector.elementAt(4))).add(0, null);				individualPatientIndex = new Vector();				templateChartInformation.add(0, individualPatientIndex);				templateChartInformation.add(1, numChartCoverForms);				templateChartInformation.add(2, null);				templateChartInformation.add(3, numDemographicsForms);				templateChartInformation.add(4, null);				templateChartInformation.add(5, numActivitiesForms);				templateChartInformation.add(6, null);				templateChartInformation.add(7, numHistoryForms);				templateChartInformation.add(8, null);				templateChartInformation.add(9, numInsuranceForms);				templateChartInformation.add(10, null);				templateChartInformation.add(11, numChartSections);				templateChartInformation.add(12, "null chartID");				System.out.println("templateName saved: " + templateName);				templateChartInformation.add(13, templateName);				templateChartInformation.add(14, templatePageDataCellConstraintsVector);				templateChartInformation.add(15, null);				templateChartInformation.add(16, templatePageDimension);				templateChartInformation.add(17, tabLocation);				templateChartInformation.add(18, recentChartID);				templateChartCover.add(0, templateChartInformation);				templateChartDemographics.add(0, null);				templateChartActivities.add(0, null);				templateChartHistory.add(0, null);				templateChartInsurance.add(0, null);				template.add(0, templateChartCover);				template.add(1, templateChartDemographics);				template.add(2, templateChartActivities);				template.add(3, templateChartHistory);				template.add(4, templateChartInsurance);				((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).add(template.clone());				chartTemplateChoiceIndice = ((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).size() - 1;				createTemplatePreviewPage(null, null);				templatePreviewJTabbedPane.setTitleAt(0, "Template: " + templateName + ",  section: chart cover:");				addTalkbackText("New template: \"" + templateName + ",\" created.", null, false);				marginedPaperPanelPlusContents.setBackground(manillaColor);				marginedPaperPanelPlusContents.setBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(185, 185, 185, 0)), new MatteBorder(1, 1, 0, 0, new Color(244, 244, 244, 0))));				validate();				repaint();				precedingDataItemLineHeight = 0;				precedingDataItemWidth = 0;				precedingDataItemOriginX = 0;				minimumHeightInRow = 1;			} else {				addTalkbackText(validTalkback, null, true);			}			templateChooseTemplateJButton.validate();			templateChooseTemplateJButton.repaint();		} else if (e.getActionCommand().equals("templateAddDataItemJButton")) {			processTemplatePanelInput("addingAnItem");		} else if (e.getActionCommand().equals("templateRequiredFieldYesJRadioButton")) {			templatePromptToFillBeforeClosingChartNoJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("templateRequiredFieldNoJRadioButton")) {			templatePromptToFillBeforeClosingChartYesJRadioButton.setSelected(false);		} else if (e.getActionCommand().equals("customCodingDictionaryJButton")) {			codeSetIdentifier = "custom name blah";			templateCodeSetNameJTextField.setText("");			templateCodeSetNameJTextField.setEditable(true);			templateCodeSetNameJTextField.requestFocusInWindow();			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(true);		} else if (e.getActionCommand().equals("hL7JButton")) {			codeSetIdentifier = "HL7_2.3.1";			templateCodeSetNameJTextField.setText("HL-7");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("cPTJButton")) {			codeSetIdentifier = "CPT2009";			templateCodeSetNameJTextField.setText("CPT");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			templateDatatypePanelJButton.setEnabled(true);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("iCDJButton")) {			codeSetIdentifier = "ICD10";			templateCodeSetNameJTextField.setText("ICD-10");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			templateDatatypePanelJButton.setEnabled(true);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("lOINCJButton")) {			codeSetIdentifier = "LOINC2.32";			templateCodeSetNameJTextField.setText("LOINC");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			templateDatatypePanelJButton.setEnabled(true);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("hCPCSLevel1JButton")) {			codeSetIdentifier = "HCPCS1Blah";			templateCodeSetNameJTextField.setText("HCPCS level 1");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			templateDatatypePanelJButton.setEnabled(true);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("hCPCSLevel2JButton")) {			codeSetIdentifier = "HCPCS2Blah";			templateCodeSetNameJTextField.setText("HCPCS level 2");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			templateDatatypePanelJButton.setEnabled(true);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("unencodedItemJButton")) {			codeSetIdentifier = "unencoded";			templateCodeSetNameJTextField.setText("unencoded");			templateCodeSetNameJTextField.setEditable(false);			templateCodeSetNameJTextField.setBackground(Color.WHITE);			templateMedicalCodeJTextField.setEditable(true);			templateMedicalCodeJTextField.setBackground(Color.WHITE);			templateMedicalCodingSetJPopupMenu.setVisible(false);			templateDatatypePanelJButton.setEnabled(true);			userReadableInternalDatatypeJTextField.setEditable(true);			userReadableInternalDatatypeJTextField.setText("text");			userReadableInternalDatatypeJTextField.setBackground(Color.WHITE);			userReadableInternalDatatypeJTextField.setEditable(false);		} else if (e.getActionCommand().equals("templateDeleteDataTemplateYesJButton")) {			templateChooseTemplateJTextField.setText("");			((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16)).removeElementAt(chartTemplateChoiceIndice);			previewContentJPanel.removeAll();			validate();			repaint();		} else if (e.getActionCommand().equals("systemAdministrationJToggleButton")) {			systemAdministrationJToggleButton.setSelected(true);			userAccountsJToggleButton.setSelected(false);			templatesJToggleButton.setSelected(false);			systemAppearanceJToggleButton.setSelected(false);			templateItemBoxBorderYesJRadioButton.setSelected(false);			templateItemBoxBorderNoJRadioButton.setSelected(true);			systemCardLayout.show(cardedMainContentJPanel, "systemAdministrationBaseJPanel");			addTalkbackText("System - Templates", null, false);			setSize(new Dimension(800, 700));		} else if (e.getActionCommand().equals("userAccountsJToggleButton")) {			userAccountsJToggleButton.setSelected(true);			systemAdministrationJToggleButton.setSelected(false);			templatesJToggleButton.setSelected(false);			systemAppearanceJToggleButton.setSelected(false);			remove(templatePreviewJTabbedPane);			createMasterUserIndex();			addTalkbackText("System - User accounts", null, false);			if (!userIndexJToggleButton.isSelected() && !authorizationsJToggleButton.isSelected() && !addNewUserJToggleButton.isSelected() && !modifyUserJToggleButton.isSelected()) {				userIndexJToggleButton.doClick();			}			reSize(true, "userAccountsJPanel");		} else if (e.getActionCommand().equals("systemAppearanceJToggleButton")) {			systemAppearanceJToggleButton.setSelected(true);			systemAdministrationJToggleButton.setSelected(false);			userAccountsJToggleButton.setSelected(false);			templatesJToggleButton.setSelected(false);			remove(templatePreviewJTabbedPane);			if (Access.isUserLoggedIn && (getElement(11, "userWallpaper", null)) != null) {				if (((String) (getElement(12, "userWallpaperScaleType", null))).equals("zoom")) {					wallpaperZoomOptionJToggleButton.setEnabled(false);					wallpaperCenterOptionJToggleButton.setEnabled(true);					wallpaperStretchOptionJToggleButton.setEnabled(true);				} else if (((String) (getElement(12, "userWallpaperScaleType", null))).equals("center")) {					wallpaperZoomOptionJToggleButton.setEnabled(true);					wallpaperCenterOptionJToggleButton.setEnabled(false);					wallpaperStretchOptionJToggleButton.setEnabled(true);				} else if (((String) (getElement(12, "userWallpaperScaleType", null))).equals("stretch")) {					wallpaperZoomOptionJToggleButton.setEnabled(true);					wallpaperCenterOptionJToggleButton.setEnabled(true);					wallpaperStretchOptionJToggleButton.setEnabled(false);				}			} else if (Access.isRootAdministratorLoggedIn) {				if (((String) (getElement(12, "defaultWallpaperScaleType", null))).equals("zoom")) {					wallpaperZoomOptionJToggleButton.setEnabled(false);					wallpaperCenterOptionJToggleButton.setEnabled(true);					wallpaperStretchOptionJToggleButton.setEnabled(true);				} else if (((String) (getElement(12, "defaultWallpaperScaleType", null))).equals("center")) {					wallpaperZoomOptionJToggleButton.setEnabled(true);					wallpaperCenterOptionJToggleButton.setEnabled(false);					wallpaperStretchOptionJToggleButton.setEnabled(true);				} else if (((String) (getElement(12, "defaultWallpaperScaleType", null))).equals("stretch")) {					wallpaperZoomOptionJToggleButton.setEnabled(true);					wallpaperCenterOptionJToggleButton.setEnabled(true);					wallpaperStretchOptionJToggleButton.setEnabled(false);				}			}			addTalkbackText("Change font, font size, wallpaper, theme, and theme color", null, false);			if (!appearanceFrameColorAndTranslucencyJToggleButton.isSelected() && !appearanceWallpaperJToggleButton.isSelected() && !appearanceThemeJToggleButton.isSelected() && !appearanceFontingJToggleButton.isSelected()) {				appearanceFrameColorAndTranslucencyJToggleButton.setSelected(true);			}			systemCardLayout.show(cardedMainContentJPanel, "appearanceJPanel");			addTalkbackText("System - Appearance", null, false);			reSize(true, "appearanceJPanel");		} else if (e.getActionCommand().equals("templatesJToggleButton")) {			templatesJToggleButton.setSelected(true);			systemAppearanceJToggleButton.setSelected(false);			systemAdministrationJToggleButton.setSelected(false);			userAccountsJToggleButton.setSelected(false);			templateItemBoxBorderYesJRadioButton.setSelected(false);			templateItemBoxBorderNoJRadioButton.setSelected(true);			systemCardLayout.show(cardedMainContentJPanel, "templateJPanel");			addTalkbackText("System - Templates", null, false);			setVisible(true);			reSize(true, "templateJPanel");		} else if (e.getActionCommand().equals("authorizationsJButton")) {			userIndexJToggleButton.setSelected(false);			addNewUserJToggleButton.setSelected(false);			modifyUserJToggleButton.setSelected(false);			userAccountsCardLayout.show(userAccountsCardedJPanel, "authorizationsJPanel");			addTalkbackText("Authorizations", null, false);			reSize(true, "authorizationsJPanel");		} else if (e.getActionCommand().equals("modifyUserJToggleButton")) {			userIndexJToggleButton.setSelected(false);			addNewUserJToggleButton.setSelected(false);			authorizationsJToggleButton.setSelected(false);			userAccountsCardLayout.show(userAccountsCardedJPanel, "modifyUserPanelBaseJPanel");			addTalkbackText("Modify user information", null, false);			modifyUserPanelEnterUserIDEntryJTextField.requestFocusInWindow();			validate();			repaint();		} else if (e.getActionCommand().equals("addNewUserJToggleButton")) {			userIndexJToggleButton.setSelected(false);			authorizationsJToggleButton.setSelected(false);			modifyUserJToggleButton.setSelected(false);			userAccountsCardLayout.show(userAccountsCardedJPanel, "addNewUserPanelBaseJPanel");			addNewUserPanelUserIDJLabel.requestFocusInWindow();			addNewUserPanelUserIDJLabel.validate();			addNewUserPanelUserIDJLabel.repaint();			addTalkbackText("Add a new user", null, false);			setVisible(true);			addNewUserPanelEnterUserIDEntryJTextField.requestFocusInWindow();			validate();			repaint();		} else if (e.getActionCommand().equals("userIndexJToggleButton")) {			modifyUserJToggleButton.setSelected(false);			addNewUserJToggleButton.setSelected(false);			authorizationsJToggleButton.setSelected(false);			createMasterUserIndex();			userAccountsCardLayout.show(userAccountsCardedJPanel, "userIndexPanelBaseJPanel");			addTalkbackText("User index", null, false);		} else if (e.getActionCommand().equals("resetAuthorizationChangesButton")) {			String authorizationsSelectedUserIDJTextFieldText = authorizationsSelectedUserIDJTextField.getText().trim();			String longUserID;			if (!authorizationsSelectedUserIDJTextFieldText.equals(null) && !authorizationsSelectedUserIDJTextFieldText.equals("")) {				if (null != (longUserID = returnLongFormIfShortFormExists(authorizationsSelectedUserIDJTextFieldText))) {					selectedUserIDForAuthorizations = longUserID;					fillAuthorizationInputContentPanel();				} else {					selectedUserIDForAuthorizations = null;				}			} else {				addTalkbackText("Please enter a valid user ID", null, true);			}		} else if (e.getActionCommand().equals("saveAuthorizationsJButton")) {			String authorizationsSelectedUserIDJTextFieldText = authorizationsSelectedUserIDJTextField.getText().trim();			String longUserID;			if (!authorizationsSelectedUserIDJTextFieldText.equals(null) && !authorizationsSelectedUserIDJTextFieldText.equals("")) {				if (null != (longUserID = returnLongFormIfShortFormExists(authorizationsSelectedUserIDJTextFieldText))) {					selectedUserIDForAuthorizations = longUserID;					saveAuthorizations();				} else {					selectedUserIDForAuthorizations = null;				}				addTalkbackText("User authorizations set for " + authorizationsSelectedUserIDJTextFieldText, null, true);			} else {				addTalkbackText("Please enter a valid user ID", null, true);			}		} else if (e.getActionCommand().equals("addNewUserPanelSaveJButton")) {			processRequestForNewUser();		} else if (e.getActionCommand().equals("addNewUserPanelClearJButton")) {			addNewUserPanelEnterUserIDEntryJTextField.setText("");			addNewUserPanelEnterPasswordEntryJPasswordField.setText("");			addNewUserPanelReEnterPasswordEntryJPasswordField.setText("");			addNewUserPanelFacilityEntryJTextField.setText("");			addNewUserPanelPrefixEntryJTextField.setText("");			addNewUserPanelFirstNameEntryJTextField.setText("");			addNewUserPanelMiddleNameEntryJTextField.setText("");			addNewUserPanelLastNameEntryJTextField.setText("");			addNewUserPanelSuffixEntryJTextField.setText("");			addNewUserPanelDegreeEntryJTextField.setText("");			addNewUserPanelEnterUserIDEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);			addNewUserPanelReEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);			addNewUserPanelFacilityEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelPrefixEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelFirstNameEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelMiddleNameEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelLastNameEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelSuffixEntryJTextField.setBackground(Color.WHITE);			addNewUserPanelDegreeEntryJTextField.setBackground(Color.WHITE);			addTalkbackText("\"Make new user\" input fields cleared.", null, false);			validate();		} else if (e.getActionCommand().equals("modifyUserPanelSaveJButton")) {			String possiblyModifiedUserID = modifyUserPanelEnterUserIDEntryJTextField.getText().trim();			processModificationForUser(previousUnmodifiedShortUserID, possiblyModifiedUserID);		} else if (e.getActionCommand().equals("modifyUserPanelDeleteUserJButton")) {			deleteUser(modifyUserPanelEnterUserIDEntryJTextField.getText());		} else if (e.getActionCommand().equals("slickBorderThemeJToggleButton")) {			String themeType = null;			if (slickBorderThemeJToggleButton.isSelected()) {				themeType = "SLICK";				slateBorderThemeJToggleButton.setSelected(false);				roundedBorderThemeJToggleButton.setSelected(false);			} else if (slateBorderThemeJToggleButton.isSelected()) {				themeType = "SLATE";				slickBorderThemeJToggleButton.setSelected(false);				roundedBorderThemeJToggleButton.setSelected(false);			} else if (roundedBorderThemeJToggleButton.isSelected()) {				themeType = "ROUNDED";				slickBorderThemeJToggleButton.setSelected(false);				slateBorderThemeJToggleButton.setSelected(false);			}			try {				if (Access.isUserLoggedIn) {					((Vector) ((Vector) Access.user.elementAt(3))).setElementAt(themeType, 9);					Io.out("usr", newUserDataStruct, Access.shortUserID(Access.loggedOnUserID) + "_vitality.dat", makeRawFromPassword(Access.getUser(Access.loggedOnUserID, "password").toCharArray()));				} else if (Access.isRootAdministratorLoggedIn) {					((Vector) ((Vector) Access.rootAdministrator.elementAt(3))).setElementAt(themeType, 9);					Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);				} else {					System.out.println("Critical error in systemFrame setting themeType");				}			} catch (Exception er) {				System.out.println("Write failed in systemFrame setting theme.");				er.printStackTrace();			}			doBorderTheme("SLICK");			Device.device.validate();			Device.device.repaint();		} else if (e.getActionCommand().equals("slateBorderThemeJToggleButton")) {			if (Access.isUserLoggedIn) {				((Vector) ((Vector) Access.user.elementAt(3))).setElementAt("SLATE", 9);			} else if (Access.isRootAdministratorLoggedIn) {				((Vector) ((Vector) Access.rootAdministrator.elementAt(3))).setElementAt("SLATE", 9);			} else {			}			doBorderTheme("SLATE");			Device.device.validate();			Device.device.repaint();		} else if (e.getActionCommand().equals("roundedBorderThemeJToggleButton")) {			if (Access.isUserLoggedIn) {				((Vector) ((Vector) Access.user.elementAt(3))).setElementAt("ROUNDED", 9);			} else {				((Vector) ((Vector) Access.rootAdministrator.elementAt(3))).setElementAt("ROUNDED", 9);			}			doBorderTheme("ROUNDED");			Device.device.validate();			Device.device.repaint();		} else if (e.getActionCommand().equals("highContrastThemeJButton")) {			if (Access.isUserLoggedIn) {				((Vector) ((Vector) Access.user.elementAt(3))).setElementAt("HIGH_CONTRAST", 9);			} else {				((Vector) ((Vector) Access.rootAdministrator.elementAt(3))).setElementAt("HIGH_CONTRAST", 9);			}			doBorderTheme("HIGH_CONTRAST");			Device.device.validate();			Device.device.repaint();		} else if (e.getActionCommand().equals("appearanceColorAndTranslucencyJToggleButton")) {			appearanceCardLayout.show(appearanceCardedJPanel, "appearanceColorAndTranslucencyPanelBaseJPanel");			appearanceWallpaperJToggleButton.setSelected(false);			appearanceThemeJToggleButton.setSelected(false);			appearanceFontingJToggleButton.setSelected(false);			validate();			repaint();		} else if (e.getActionCommand().equals("appearanceFontingJToggleButton")) {			appearanceFrameColorAndTranslucencyJToggleButton.setSelected(false);			appearanceWallpaperJToggleButton.setSelected(false);			appearanceThemeJToggleButton.setSelected(false);			appearanceCardLayout.show(appearanceCardedJPanel, "appearanceFontingPanelBaseJPanel");			validate();			repaint();		} else if (e.getActionCommand().equals("appearanceBorderThemeJToggleButton")) {			appearanceCardLayout.show(appearanceCardedJPanel, "appearanceThemeJPanel");			appearanceFrameColorAndTranslucencyJToggleButton.setSelected(false);			appearanceWallpaperJToggleButton.setSelected(false);			appearanceFontingJToggleButton.setSelected(false);			validate();			repaint();		} else if (e.getActionCommand().equals("appearanceWallpaperJToggleButton")) {			appearanceFrameColorAndTranslucencyJToggleButton.setSelected(false);			appearanceThemeJToggleButton.setSelected(false);			appearanceFontingJToggleButton.setSelected(false);			appearanceCardLayout.show(appearanceCardedJPanel, "appearanceWallpaperFileChooserJPanel");			validate();			repaint();		} else if (e.getActionCommand().equals("colorAndTranslucencyOkJButton")) {			boolean appearanceChanged = false;			String translucencyTalkback = "";			String colorTalkback = "";			Color translucentColorTheme;			int translucency = 0;			Color color = null;			if (colorChooser.getColor().getRed() != 254) {				color = colorChooser.getColor();				colorTalkback = "color";				if (Access.isUserLoggedIn) {					((Vector) Access.user.elementAt(3)).setElementAt(colorChooser.getColor(), 8);				} else {					((Vector) Access.rootAdministrator.elementAt(3)).setElementAt(colorChooser.getColor(), 8);				}			} else if (Access.isUserLoggedIn) {				color = (Color) (((Vector) (Access.user.elementAt(3))).elementAt(8));			} else {				color = (Color) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(8));			}			if (Access.isUserLoggedIn && appearanceTranslucencyJSlider.getValue() != (int) (Integer) (((Vector) (Access.user.elementAt(3))).elementAt(15))) {				((Vector) Access.user.elementAt(3)).setElementAt(appearanceTranslucencyJSlider.getValue(), 15);				translucencyTalkback = "translucency";			} else if (appearanceTranslucencyJSlider.getValue() != (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(15)))) {				translucencyTalkback = "translucency";				((Vector) Access.rootAdministrator.elementAt(3)).setElementAt(appearanceTranslucencyJSlider.getValue(), 15);			}			translucency = appearanceTranslucencyJSlider.getValue();			if (colorTalkback.equals("color") | translucencyTalkback.equals("translucency")) {				appearanceChanged = true;				translucentColorTheme = new Color(color.getRed(), color.getGreen(), color.getBlue(), 255 - translucency);				Access.translucentColorTheme = translucentColorTheme;				Access.translucency = translucency;				int windowBorderWidth = 5 + 11 * translucency / 255;				Access.windowBorder = (new CompoundBorder(new MatteBorder(1, 1, 1, 1, new Color(160, 160, 180, 255 - translucency)), BorderFactory.createMatteBorder(0, windowBorderWidth, windowBorderWidth, windowBorderWidth, translucentColorTheme)));				Access.disabledWindowBorder = (new CompoundBorder(new MatteBorder(1, 1, 1, 1, new Color(160, 160, 180, 255 - translucency)), BorderFactory.createMatteBorder(0, windowBorderWidth, windowBorderWidth, windowBorderWidth, new Color(107, 107, 107, 128))));				getContentPane().setBackground(translucentColorTheme);				setBorder(Access.windowBorder);				titleBarBaseJPanel.setBackground(Access.translucentColorTheme);				Device.device.workspace.chartingWindow.getContentPane().setBackground(translucentColorTheme);				Device.device.workspace.chartingWindow.titleBarBaseJPanel.setBackground(translucentColorTheme);				Device.device.workspace.chartingWindow.titleBarBaseJPanel.validate();				Device.device.workspace.chartingWindow.titleBarBaseJPanel.repaint();				Device.device.workspace.chartingWindow.repaint();				Device.device.workspace.decisionSupportWindow.getContentPane().setBackground(translucentColorTheme);				Device.device.workspace.messagingWindow.getContentPane().setBackground(translucentColorTheme);				Device.device.workspace.practiceAssistantWindow.getContentPane().setBackground(translucentColorTheme);				menuBarColor = new Color((int) ((translucentColorTheme.getRed() + 510) / 3), (int) ((translucentColorTheme.getGreen() + 510) / 3), (int) ((translucentColorTheme.getBlue() + 510) / 3));				ChartingWindow.menuBar.setBackground(menuBarColor);			}			colorChooser.setColor(254, 255, 255);			String changedLegitamizationString = "";			if (colorTalkback.equals("color") && translucencyTalkback.equals("translucency")) {				changedLegitamizationString = "Changed ";				addTalkbackText(changedLegitamizationString + colorTalkback + " and " + translucencyTalkback + ".", null, true);			} else if (colorTalkback.equals("color")) {				changedLegitamizationString = "Changed ";				addTalkbackText(changedLegitamizationString + " " + colorTalkback, null, true);			} else if (translucencyTalkback.equals("translucency")) {				changedLegitamizationString = "Changed ";				addTalkbackText(changedLegitamizationString + translucencyTalkback, null, true);			}			validate();			Device.device.workspace.validate();			Device.device.workspace.repaint();			try {				Io.out("usr", newUserDataStruct, Access.shortUserID(Access.loggedOnUserID) + "_vitality.dat", makeRawFromPassword(Access.getUser(Access.loggedOnUserID, "password").toCharArray()));				Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);			} catch (Exception er) {				System.out.println("Write failed in systemFrame setting color and translucency");				er.printStackTrace();			}			reSize(true, "appearanceJPanel");		} else if (e.getActionCommand().equals("electronSystemFontJRadioButton")) {			arielSystemFontJRadioButton.setSelected(false);			serifSystemFontJRadioButton.setSelected(false);			changeFontType((JRadioButton) (e.getSource()));		} else if (e.getActionCommand().equals("arielSystemFontJRadioButton")) {			electronSystemFontJRadioButton.setSelected(false);			serifSystemFontJRadioButton.setSelected(false);			changeFontType((JRadioButton) (e.getSource()));		} else if (e.getActionCommand().equals("serifSystemFontJRadioButton")) {			arielSystemFontJRadioButton.setSelected(false);			electronSystemFontJRadioButton.setSelected(false);			changeFontType((JRadioButton) (e.getSource()));		} else if (e.getActionCommand().equals("fontSizeJTextField")) {			String fontSizeText = fontSizeJTextField.getText();			fontSizeJTextField.setText("");			if (isFontSizeValid(fontSizeText)) {				if (Access.isUserLoggedIn) {					((((Vector) (Access.user.elementAt(3))))).setElementAt(Integer.parseInt(fontSizeText), 14);				} else if (Integer.parseInt(fontSizeText) != ((Integer) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(14))) {					((((Vector) (Access.rootAdministrator.elementAt(3))))).setElementAt(Integer.parseInt(fontSizeText), 14);				}				try {					Io.out("usr", newUserDataStruct, Access.shortUserID(Access.loggedOnUserID) + "_vitality.dat", makeRawFromPassword(Access.getUser(Access.loggedOnUserID, "password").toCharArray()));					Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);				} catch (Exception er) {					System.out.println("Write failed in setting fontingOkJButton");					er.printStackTrace();				}				setFonts();				reSize(true, "appearanceJPanel");			} else {				addTalkbackText("Invalide font size. Please enter a number from 12 to 22.", null, true);			}		} else if (e.getActionCommand().equals("zoom")) {			wallpaperCenterOptionJToggleButton.setSelected(false);			wallpaperStretchOptionJToggleButton.setSelected(false);			wallpaperZoomOptionJToggleButton.setSelected(true);			wallpaperRemoveOptionJButton.setSelected(false);			setWallpaper("zoom");		} else if (e.getActionCommand().equals("stretch")) {			wallpaperCenterOptionJToggleButton.setSelected(false);			wallpaperStretchOptionJToggleButton.setSelected(true);			wallpaperZoomOptionJToggleButton.setSelected(false);			wallpaperRemoveOptionJButton.setSelected(false);			setWallpaper("stretch");		} else if (e.getActionCommand().equals("center") || e.getActionCommand().equals("ApproveSelection")) {			wallpaperCenterOptionJToggleButton.setSelected(true);			wallpaperStretchOptionJToggleButton.setSelected(false);			wallpaperZoomOptionJToggleButton.setSelected(false);			wallpaperRemoveOptionJButton.setSelected(false);			setWallpaper("center");		} else if (e.getActionCommand().equals("wallpaperRemoveOptionJButton")) {			try {				if (Access.isUserLoggedIn) {					((Vector) Access.user.elementAt(3)).setElementAt(null, 11);					((Vector) Access.user.elementAt(3)).setElementAt(null, 1);					((Vector) Access.user.elementAt(3)).setElementAt("zoom", 12);				} else if (Access.isRootAdministratorLoggedIn) {					((Vector) Access.rootAdministrator.elementAt(3)).setElementAt(null, 11);					((Vector) Access.rootAdministrator.elementAt(3)).setElementAt(null, 1);					((Vector) Access.rootAdministrator.elementAt(3)).setElementAt("zoom", 12);				}				Device.device.addWallpaper("stretch", "systemFrame");				Device.device.repaint();			} catch (Exception wall) {				SystemWindow.println("Wallpaper not removed properly.");			}			addTalkbackText("Wallpaper removed.", null, false);		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton")) {			if (authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUISystemAppearanceManageJRadioButton")) {			if (authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUISystemTemplatesManageJRadioButton")) {			if (authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton")) {			if (authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton")) {			if (authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsHistoryManageJRadioButton")) {			if (authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton")) {			if (authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIDecisionSupportManageJRadioButton")) {			if (authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIMessagingManageJRadioButton")) {			if (authorizationsAddNewUserMUIMessagingManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIMessagingViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton")) {			if (authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.isSelected()) {				authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.setSelected(true);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton")) {			if (!authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUISystemAppearanceViewJRadioButton")) {			if (!authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUISystemTemplatesViewJRadioButton")) {			if (!authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton")) {			if (!authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton")) {			if (!authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsHistoryViewJRadioButton")) {			if (!authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton")) {			if (!authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIDecisionSupportViewJRadioButton")) {			if (authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIMessagingViewJRadioButton")) {			if (authorizationsAddNewUserMUIMessagingViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIMessagingManageJRadioButton.setSelected(false);			}		} else if (e.getActionCommand().equals("authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton")) {			if (!authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.isSelected()) {				authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.setSelected(false);			}		}	}		public void placeUMLImageOnDesktop() {		int width = uMLDiagramsPanelScrollPaneJPanel.getComponent(0).getWidth();		int height = uMLDiagramsPanelScrollPaneJPanel.getComponent(0).getHeight();				try {			BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);			Graphics g = bufferedImage.createGraphics();						((Component) uMLDiagramsPanelScrollPaneJPanel.getComponent(0)).print(bufferedImage.createGraphics());			g.dispose();			ImageIO.write(bufferedImage, "PNG", new File(System.getProperty("user.home") + "/Desktop/" + "image.png/"));		} catch (IOException e) {			addTalkbackText("Error placing image on desktop. Image", "does not exist or is too large (try zooming).", true);			System.out.println("IOException writing UML image to desktop");			e.printStackTrace();		}				//check if file moved after making new template	}		public Vector<int[]> stateMachineSpindles(Vector<Component> activatedComponents, int distancefFromXStartOfContainer, int containerXStart, int distancefFromYStartOfContainer, int containerYStart) {				//objectXY search from matching names of methods activated to those in the user guide (found with the red attribute)				Vector<int[]> polylines  = null;		return polylines ;	}		public void loadCrystal(JPanel pUMLDiagramsJPanelScrollPaneJPanel, double zoom) {		GridBagConstraints pUMLDiagramsJPanelScrollPanePanelConstraints = new GridBagConstraints();		UMLDiagramPanel uMLDiagramPanel = new UMLDiagramPanel(zoom);		pUMLDiagramsJPanelScrollPaneJPanel.removeAll();		pUMLDiagramsJPanelScrollPaneJPanel.add(uMLDiagramPanel, pUMLDiagramsJPanelScrollPanePanelConstraints);		pUMLDiagramsJPanelScrollPaneJPanel.paint(uMLDiagramPanel.getGraphics());				repaint();	}	public static void placeDecommentedSourceFilesOnDesktop() {		int fileNamesInd = 0;		int ind = 0;		String lineString = null;		BufferedOutputStream bufferedOutputStream = null;		OutputStreamWriter outputStreamWriter = null;		BufferedReader bufferedReader = null;				try {			// for every source file			while (fileNamesInd < fileNames.length) {				bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(Device.binDir + "DecommentedClassFiles/" + fileNames[fileNamesInd]));				outputStreamWriter = new OutputStreamWriter(bufferedOutputStream);				bufferedReader = new BufferedReader(new FileReader(System.getProperty("user.home") + "/workspace/Oochis EHR/src/oochisCore/" + fileNames[fileNamesInd]));				// add copyright				outputStreamWriter.append("/*\r");				outputStreamWriter.append("* Copyright 2014 Donald Ray Crawford\r");				outputStreamWriter.append("* \r");				outputStreamWriter.append("* This file is part of Oochis EHR.\r");				outputStreamWriter.append("* \r");				outputStreamWriter.append("* Oochis EHR is free software: you can redistribute it and/or modify\r");				outputStreamWriter.append("* it under the terms of the GNU General Public License as published by\r");				outputStreamWriter.append("* the Free Software Foundation, either version 3 of the License, or\r");				outputStreamWriter.append("* (at your option) any later version.\r");				outputStreamWriter.append("* \r");				outputStreamWriter.append("* This program is distributed in the hope that it will be useful,\r");				outputStreamWriter.append("* but WITHOUT ANY WARRANTY; without even the implied warranty of\r");				outputStreamWriter.append("* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r");				outputStreamWriter.append("* GNU General Public License for more details.\r");				outputStreamWriter.append("* \r");				outputStreamWriter.append("* You should have received a copy of the GNU General Public License\r");				outputStreamWriter.append("* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.\r");				outputStreamWriter.append("*/\r");				outputStreamWriter.append("\r");				// read first line				lineString = bufferedReader.readLine().trim();				// while not EOF				while (!lineString.equals("// EOF")) {					// remove comments					lineString = decomment(lineString, bufferedReader);					// if line is not blank					if (!lineString.equals("")) {						outputStreamWriter.append(lineString + "\r");					}					if (!lineString.equals("// EOF")) {						lineString = bufferedReader.readLine().trim();					}				}				outputStreamWriter.append("// EOF");				outputStreamWriter.close();				fileNamesInd++;			}		} catch (Exception e) {			e.printStackTrace();		}	}	public static void placeUMLFilesOnDesktop() {		int fileNamesInd = 0;		int maxFieldLength = 0;		int ind = 0;		int barredMethodLinesInd = 0;		boolean startFields = false;		boolean endFields = false;		boolean endMethods = false;		boolean putativeMethod = false;		String lineString = null;		String fieldString = null;		BufferedOutputStream bufferedOutputStream = null;		OutputStreamWriter outputStreamWriter = null;		BufferedReader bufferedReader = null;		Vector<String> barredMethodLines = new Vector<String>();		barredMethodLines.add(" UndoAction(");		barredMethodLines.add(" RedoAction(");		barredMethodLines.add(" UndoManager(");		barredMethodLines.add(" SystemWindow(");		barredMethodLines.add("AnimatedIconButton(");		barredMethodLines.add("RoundedCornerJPanel(");		barredMethodLines.add(" BiomoietyNetworksRadarPanel(");		barredMethodLines.add("UMLDiagramPanel(");		barredMethodLines.add("if (");		barredMethodLines.add(" new ");		barredMethodLines.add("catch (");		barredMethodLines.add("while (");		try {			// for every source file			while (fileNamesInd < fileNames.length) {				startFields = false;				endFields = false;				maxFieldLength = 0;				bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(Device.binDir + "UMLClassFiles/" + fileNames[fileNamesInd].substring(0, fileNames[fileNamesInd].length() - 5)));				outputStreamWriter = new OutputStreamWriter(bufferedOutputStream);				bufferedReader = new BufferedReader(new FileReader(System.getProperty("user.home") + "/workspace/Oochis EHR/src/oochisCore/" + fileNames[fileNamesInd]));								// add underline, and a line-space				outputStreamWriter.append(fileNames[fileNamesInd].substring(0, fileNames[fileNamesInd].length() - 5) + "\r");				ind = 0;				while (ind < fileNames[fileNamesInd].length() - 5) {					outputStreamWriter.append("_");					ind++;				}				outputStreamWriter.append("\r");				outputStreamWriter.append("\r");				// read first line				lineString = bufferedReader.readLine().trim();				// while not EOF				while (!lineString.equals("// EOF")) {					// remove comments					lineString = decomment(lineString, bufferedReader);					// if line is not blank					if (!lineString.equals("")) {						if (startFields && !endFields && !lineString.endsWith(";")) {							endFields = true;							ind = 0;							while (ind < maxFieldLength) {								outputStreamWriter.append("_");								ind++;							}							outputStreamWriter.append("\r");							outputStreamWriter.append("\r");							// read through class body header line such as 'Access() {'							lineString = bufferedReader.readLine().trim();						}						if (startFields && !endFields && !lineString.equals("")) {							fieldString = parseField(lineString);							if (maxFieldLength < fieldString.length()) {								maxFieldLength = fieldString.length();							}							outputStreamWriter.append(fieldString);						} else if (endFields && !lineString.equals("")) {							putativeMethod = false;							if (lineString.endsWith(") {")) {								putativeMethod = true;								barredMethodLinesInd = 0;								while (barredMethodLinesInd < barredMethodLines.size()) {									if (lineString.contains(barredMethodLines.elementAt(barredMethodLinesInd))) {										putativeMethod = false;									}									barredMethodLinesInd++;								}								if (putativeMethod) {									outputStreamWriter.append(parseMethod(lineString) + "\r");								}							}						}						if (!startFields && lineString.contains("class " + fileNames[fileNamesInd].substring(0, fileNames[fileNamesInd].length() - 5) + " ")) {							startFields = true;						}					}					if (!lineString.equals("// EOF")) {						lineString = bufferedReader.readLine().trim();					}				}				outputStreamWriter.append("// EOF");				outputStreamWriter.close();				fileNamesInd++;			}		} catch (Exception e) {			e.printStackTrace();		}	}	public static String parseField(String lineString) {		String returnedUMLField = "";		String fieldDataType;		String fieldName;		String fieldInitialValue;		int fieldLengthInd = 0;		lineString = lineString.replace("public ", "");		lineString = lineString.replace("private ", "");		lineString = lineString.replace("protected ", "");		lineString = lineString.replace("static ", "");		if (lineString.contains(" = new ")) {			fieldDataType = lineString.substring(0, lineString.indexOf(" "));			lineString = lineString.substring(fieldDataType.length() + 1);			fieldName = lineString.substring(0, lineString.indexOf(" "));			lineString = lineString.substring(fieldName.length() + 1);			fieldInitialValue = lineString.substring(0, lineString.length() - 1);			if (fieldInitialValue.endsWith("()")) {				fieldInitialValue = lineString.substring(0, fieldInitialValue.length() - 2);			} else if (fieldInitialValue.endsWith("(new GridBagLayout())")) {				fieldInitialValue = fieldInitialValue.replace("(new GridBagLayout())", "(gb)");			}			// ignoring gridBagConstraints			if (!fieldDataType.equals("GridBagConstraints")) {				returnedUMLField = fieldName + " : " + fieldDataType + " " + fieldInitialValue + "\r";			}		} else if (lineString.contains(" = ")) {			fieldDataType = lineString.substring(0, lineString.indexOf(" "));			lineString = lineString.substring(fieldDataType.length() + 1);			fieldName = lineString.substring(0, lineString.indexOf(" "));			lineString = lineString.substring(fieldName.length() + 1);			fieldInitialValue = lineString.substring(0, lineString.length() - 1);			returnedUMLField = fieldName + " : " + fieldDataType + " " + fieldInitialValue + "\r";			// else lineString format is 'variableType variableName;'		} else if (lineString.endsWith(";")) {			fieldDataType = lineString.substring(0, lineString.indexOf(" "));			lineString = lineString.substring(fieldDataType.length() + 1).replace(";", "");			fieldName = lineString;			returnedUMLField = fieldName + " : " + fieldDataType + "\r";		} else {			System.out.println("Error in ParseAttributes.parseField!");		}		return returnedUMLField;	}	public static String parseMethod(String lineString) {		String returnedUMLMethod;		String methodArgumentDataType;		String methodArgumentName;		String methodReturnDataType;		String methodName;		lineString = lineString.replace("public ", "");		lineString = lineString.replace("private ", "");		lineString = lineString.replace("protected ", "");		lineString = lineString.replace("static ", "");		methodReturnDataType = lineString.substring(0, lineString.indexOf(" "));		System.out.println("methodReturnDataType: " + methodReturnDataType);		lineString = lineString.substring(lineString.indexOf(" ") + 1);		System.out.println("lineString: " + lineString);		methodName = lineString.substring(0, lineString.indexOf("("));		System.out.println("methodName: " + methodName);		lineString = lineString.substring(lineString.indexOf("(") + 1);		returnedUMLMethod = methodName + "(";		// if !=, then multiple parentheses on same line as in '(xx(yyy)zz) {' - restructure manually		if (lineString.indexOf(")") != lineString.lastIndexOf(")")) {			System.out.println("! ");			System.out.println("! lineString: " + lineString);			System.out.println("! MULTIPLE PARENTHESES ON SAME LINE !");			System.out.println("! ");			// else single set of parentheses: '(.....)' and/or '()'		} else {			// parsing all but last set of arguments (comma is dividing all but last set)			while (lineString.contains(",")) {				methodArgumentDataType = lineString.substring(0, lineString.indexOf(" "));				methodArgumentName = lineString.substring(lineString.indexOf(" ") + 1, lineString.indexOf(","));				// System.out.print(methodArgumentName + " : " + methodArgumentDataType + ", ");				returnedUMLMethod = returnedUMLMethod + methodArgumentName + " : " + methodArgumentDataType + ", ";				lineString = lineString.substring(methodArgumentDataType.length() + methodArgumentName.length() + 3);			}			// if arguments not empty as in 'thisMethod() {'			if (lineString.length() > 4) {				// parsing last argument set (variable and data type is a set)				methodArgumentDataType = lineString.substring(0, lineString.indexOf(" "));				methodArgumentName = lineString.substring(lineString.indexOf(" ") + 1, lineString.length() - 3);				// System.out.print(methodArgumentName + " : " + methodArgumentDataType);				returnedUMLMethod = returnedUMLMethod + methodArgumentName + " : " + methodArgumentDataType;			}			// end parentheses and return variable indicator data type			if (methodReturnDataType.equals("void")) {				// System.out.println(") : v");				returnedUMLMethod = returnedUMLMethod + ") : v";			} else {				// System.out.println(") : " + methodReturnDataType);				returnedUMLMethod = returnedUMLMethod + ") : " + methodReturnDataType;			}		}		// System.out.println(returnedUMLMethod);		return returnedUMLMethod;	}	public static String decomment(String lineString, BufferedReader bufferedReader) {		int commentStartIndice;		String firstString = "";		String lastString = "";		while (((commentStartIndice = lineString.indexOf("/*")) != -1)) {			if (commentStartIndice == 0) {				firstString = "";			} else {				firstString = lineString.substring(0, lineString.indexOf("/*"));			}			while (((commentStartIndice = lineString.indexOf("*/")) == -1)) {				try {					lineString = bufferedReader.readLine().trim();				} catch (IOException e) {					e.printStackTrace();				}			}			if (lineString.indexOf("*/") != lineString.lastIndexOf("*/")) {				lastString = "";			} else {				lastString = lineString.substring(lineString.indexOf("*/") + 2);			}			lineString = firstString + lastString;		}		if (((commentStartIndice = lineString.indexOf("//")) != -1)) {			if (!(commentStartIndice > 4 && lineString.substring(lineString.indexOf("//") - 5, commentStartIndice + 2).equals("http://")) && !(commentStartIndice > 5 && lineString.substring(lineString.indexOf("//") - 6, commentStartIndice + 2).equals("https://"))) {				if (commentStartIndice == 0) {					lineString = "";				} else {					lineString = lineString.substring(0, commentStartIndice);				}			}		}		return lineString;	}	private void changeFontType(JRadioButton jRadioButton) {		if (Access.isUserLoggedIn) {			if (!((String) ((Vector) Access.user.elementAt(3)).elementAt(13)).equals(jRadioButton.getName())) {				((Vector) Access.user.elementAt(3)).setElementAt(jRadioButton.getName(), 13);			}		} else {			if (!((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(13)).equals(jRadioButton.getName())) {				((Vector) Access.rootAdministrator.elementAt(3)).setElementAt(jRadioButton.getName(), 13);			}		}		try {			Io.out("usr", newUserDataStruct, Access.shortUserID(Access.loggedOnUserID) + "_vitality.dat", makeRawFromPassword(Access.getUser(Access.loggedOnUserID, "password").toCharArray()));			Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);			setFonts();			reSize(true, "appearanceJPanel");		} catch (Exception er) {			System.out.println("Write failed in setting fontingOkJButton");			er.printStackTrace();		}	}	private void setWallpaper(String actionCommand) {		if (wallpaperZoomOptionJToggleButton.isSelected()) {			wallpaperScaleType = "zoom";			wallpaperCenterOptionJToggleButton.setSelected(false);			wallpaperStretchOptionJToggleButton.setSelected(false);		} else if (wallpaperCenterOptionJToggleButton.isSelected()) {			wallpaperScaleType = "center";			wallpaperZoomOptionJToggleButton.setSelected(false);			wallpaperStretchOptionJToggleButton.setSelected(false);		} else if (wallpaperStretchOptionJToggleButton.isSelected()) {			wallpaperScaleType = "stretch";			wallpaperZoomOptionJToggleButton.setSelected(false);			wallpaperCenterOptionJToggleButton.setSelected(false);		}		if (wallpaperFileChooser.getSelectedFile() != null) {			try {				if (Access.isUserLoggedIn) {					((((Vector) (Access.user.elementAt(3))))).setElementAt(new ImageIcon(wallpaperFileChooser.getSelectedFile().getPath()), 11);					((((Vector) (Access.user.elementAt(3))))).setElementAt(wallpaperScaleType, 12);					Io.out("usr", newUserDataStruct, Access.shortUserID(Access.loggedOnUserID) + "_vitality.dat", makeRawFromPassword(Access.getUser(Access.loggedOnUserID, "password").toCharArray()));				} else {					System.out.println("Setting root wallpaper");					((((Vector) (Access.rootAdministrator.elementAt(3))))).setElementAt(new ImageIcon(wallpaperFileChooser.getSelectedFile().getPath()), 11);					((((Vector) (Access.rootAdministrator.elementAt(3))))).setElementAt(wallpaperScaleType, 12);					Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);				}				Device.device.addWallpaper(wallpaperScaleType, "systemFrame");				Device.device.repaint();			} catch (Exception we) {				SystemWindow.println("Error in systemWindow setting user-selected wallpaper");			}		}	}	private void advanceFocus(Component component) {		Container parentContainer = (Container) (component.getParent());		int componentInd = 0;		boolean started = false;		boolean stop = false;		while (!stop && componentInd < parentContainer.getComponentCount()) {			if (parentContainer.getComponent(componentInd).equals(component)) {				started = true;			}			componentInd++;			if (componentInd == parentContainer.getComponentCount()) {				componentInd = 0;			}			if (started) {				if (parentContainer.getComponent(componentInd) instanceof JTextField || parentContainer.getComponent(componentInd) instanceof JPasswordField) {					(parentContainer.getComponent(componentInd)).requestFocusInWindow();					stop = true;				}			}		}	}	private void addNewTemplatePage() {		clearTemplateInputBelow("page");		JPanel newPageJPanel = new JPanel();		templatePageNumberEntry = ((Vector) (template.elementAt(templateSectionNumberEntry))).size();		templateItemNumberJTextField.setText("1");		((Vector) (template.elementAt(templateSectionNumberEntry))).add(new Vector(31, 1));		String pageHeaderString = "Example clinic " + templateName;		String pageHeaderSpacerString = " ";		String pageHeaderSectionAndPageString = sectionName(templateSectionNumberEntry) + " page " + templatePageNumberEntry + ".";		JPanel pageHeaderJPanel = new JPanel(new GridBagLayout());		GridBagConstraints pageHeaderPanelConstraints = new GridBagConstraints();		JTextField pageHeaderJTextField = new JTextField(pageHeaderString);		JLabel pageHeaderSpacerJLabel = new JLabel(pageHeaderSpacerString);		JLabel pageHeaderSectionAndPageJLabel = new JLabel(pageHeaderSectionAndPageString);		newPageJPanel.setLayout(null);		newPageJPanel.setPreferredSize(templatePageDimension);		newPageJPanel.setSize(templatePageDimension);		newPageJPanel.setMaximumSize(templatePageDimension);		newPageJPanel.setMinimumSize(templatePageDimension);		pageHeaderJPanel.setBorder(new MatteBorder(5, 0, 30, 0, Color.WHITE));		pageHeaderSpacerJLabel.setFont(new Font("Serif", Font.BOLD, 14));		pageHeaderSectionAndPageJLabel.setFont(new Font("Serif", Font.BOLD, 14));		pageHeaderJTextField.setFont(new Font("Serif", Font.BOLD, 14));		pageHeaderJTextField.addFocusListener(this);		pageHeaderJTextField.addActionListener(this);		pageHeaderJTextField.setActionCommand("pageHeaderJTextField");		pageHeaderJTextField.setName("pageHeaderJTextField|" + templateSectionNumberEntry + "|" + templatePageNumberEntry);		pageHeaderJPanel.add(pageHeaderJTextField, pageHeaderPanelConstraints);		pageHeaderPanelConstraints.weightx = 1;		pageHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		pageHeaderJPanel.add(pageHeaderSpacerJLabel, pageHeaderPanelConstraints);		pageHeaderPanelConstraints.weightx = 0;		pageHeaderPanelConstraints.fill = GridBagConstraints.NONE;		pageHeaderJPanel.add(pageHeaderSectionAndPageJLabel, pageHeaderPanelConstraints);		pageHeaderJPanel.setBounds(0, 0, templatePageDimension.width, pageHeaderPanelHeight);		newPageJPanel.add(pageHeaderJPanel);		Vector headerDataCell = new Vector(10, 1);		Vector headerItemAttributes = new Vector(10, 1);		headerItemAttributes.add(0, pageHeaderString);		headerItemAttributes.add(1, "header");		headerItemAttributes.add(2, "unencoded");		headerItemAttributes.add(3, false);		headerItemAttributes.add(4, null);		if (templateItemArielFontTypeJRadioButton.isSelected()) {			headerItemAttributes.add(5, "Ariel");		} else if (templateItemSerifFontTypeJRadioButton.isSelected()) {			headerItemAttributes.add(5, "Serif");		} else {			headerItemAttributes.add(5, "Electron");		}		try {			String templateItemFontSizeTextFieldText;			if ((templateMinimumFontSize <= Integer.parseInt(templateItemFontSizeTextFieldText = templateItemFontSizeJTextField.getText())) && (templateMaximumFontSize >= Integer.parseInt(templateItemFontSizeTextFieldText))) {				headerItemAttributes.add(6, Integer.parseInt(templateItemFontSizeTextFieldText));			}		} catch (Exception e) {			headerItemAttributes.add(6, (Integer) (defaultHeaderFontSize));		}		headerItemAttributes.add(7, false);		headerItemAttributes.add(8, 12);		headerItemAttributes.add(9, 0);		headerItemAttributes.add(10, 0);		headerItemAttributes.add(11, 0);		headerItemAttributes.add(12, 0);		headerItemAttributes.add(13, "header");		headerItemAttributes.add(14, pageHeaderJPanel.getBounds());		headerDataCell.add(0, null);		headerDataCell.add(1, headerItemAttributes);		headerDataCell.add(2, null);		headerDataCell.add(3, new Vector());		((JPanel) (newPageJPanel.getComponent(0))).setBackground(Color.WHITE);		((Vector) (((Vector) (template.elementAt(templateSectionNumberEntry))).elementAt(templatePageNumberEntry))).add(headerDataCell.clone());		templatePageNumberButtonJPopupMenu.setVisible(false);		createTemplatePreviewPage(newPageJPanel, new JPanel());		templatePreviewJTabbedPane.setTitleAt(0, "Template: \"" + templateName + ";\"  " + sectionName(templateSectionNumberEntry) + " page " + templatePageNumberEntry + ".");		templatePageNumberJTextField.setText(String.valueOf(templatePageNumberEntry));		addTalkbackText("Template: \"" + templateName + ";\"  " + " page " + templatePageNumberEntry + " created.", null, false);		templatePreviewJTabbedPane.setTitleAt(0, "Template \"" + templateName + "\" - " + sectionName(templateSectionNumberEntry));	}	public void deleteUser(String userID) {		Vector<Vector<Vector<String>>> userIndex = ((Vector<Vector<Vector<String>>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))));		Vector<Vector<String>> individualUserIndex = null;		Vector userStruct = null;		String userPasswordString;		boolean userIDAlreadyExists = false;		int userIndexSize = userIndex.size();		boolean userIDIsValide;		String longUserID = null;		int userInd = 1;		while (userInd < userIndex.size()) {			if (userID.equals(Access.shortUserID(userIndex.elementAt(userInd).elementAt(0).elementAt(0)))) {				individualUserIndex = userIndex.elementAt(userInd);				longUserID = individualUserIndex.elementAt(0).elementAt(0);			}			userInd++;		}		userPasswordString = Access.getUser(longUserID, "userID");		try {			userStruct = Io.getUser(userID, Device.device.access.makeRawFromPassword(userPasswordString.toCharArray()));			SystemWindow.println("userStruct read in");		} catch (Exception ex) {			SystemWindow.println("Critical error reading user AA in systemFrame");			ex.printStackTrace();		}		individualUserIndex.elementAt(0).setElementAt("User " + Access.getUserName(longUserID) + "(" + userID + ") was deleted " + new Date().toString() + ", by " + Access.getUserName(Access.loggedOnUserID) + "(" + Access.loggedOnUserID + ")|VITALITYEHR_USER_DELETED_TOKEN", 0);		individualUserIndex.elementAt(0).add(longUserID);		try {			Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);			File fileToMoveTo_dltusr_dir = new File(Device.binDir + "usr/" + Access.shortUserID(userID) + "_vitality.dat/");			fileToMoveTo_dltusr_dir.setWritable(true);			fileToMoveTo_dltusr_dir.renameTo(new File(Device.binDir + "usr/dltuser/" + Access.shortUserID(userID) + "_vitality.dat_" + new Date().toString().replace(" ", "").replace(",", "") + "/"));			System.out.println("Moved deleted file: " + Device.binDir + "usr/" + Access.shortUserID(userID) + " to " + Device.binDir + "usr/dltuser/" + userID + "_vitality.dat_" + new Date().toString().replace(" ", "").replace(",", "") + "/");		} catch (Exception e) {			System.out.println("Critical error in SystemFrame writing root and deleting userStruct.");			e.printStackTrace();		}		if (new File(Device.binDir + "usr/" + Access.shortUserID(userID) + "_vitality.dat/").exists() && !(new File(Device.binDir + "usr/" + Access.shortUserID(userID) + "_vitality.dat/").exists())) {			addTalkbackText("User " + Access.shortUserID(userID) + " deleted.", null, true);		} else {			addTalkbackText("Error deleting user " + Access.shortUserID(userID) + ".", null, true);			System.out.println("Error deleting user " + Access.shortUserID(userID) + " in systemFrame userDelete(...).");		}		modifyUserPanelEnterUserIDEntryJTextField.setText("");		modifyUserPanelEnterPasswordEntryJPasswordField.setText("");		modifyUserPanelReEnterPasswordEntryJPasswordField.setText("");		modifyUserPanelFacilityEntryJTextField.setText("");		modifyUserPanelPrefixEntryJTextField.setText("");		modifyUserPanelFirstNameEntryJTextField.setText("");		modifyUserPanelMiddleNameEntryJTextField.setText("");		modifyUserPanelLastNameEntryJTextField.setText("");		modifyUserPanelSuffixEntryJTextField.setText("");		modifyUserPanelDegreeEntryJTextField.setText("");		modifyUserPanelEnterUserIDEntryJTextField.setBackground(Color.WHITE);		modifyUserPanelEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);		modifyUserPanelReEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);		modifyUserPanelFacilityEntryJTextField.setBackground(Color.WHITE);		modifyUserPanelPrefixEntryJTextField.setBackground(Color.WHITE);		modifyUserPanelFirstNameEntryJTextField.setBackground(Color.WHITE);	}	private void saveAuthorizations() {		if (authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "systemUserAccountsAuthorization", "manage");		} else if (authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "systemUserAccountsAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "systemUserAccountsAuthorization", "no access");		}		if (authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "systemAppearanceAuthorization", "manage");		} else if (authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "systemAppearanceAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "systemAppearanceAuthorization", "no access");		}		if (authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "systemTemplatesAuthorization", "manage");		} else if (authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "systemTemplatesAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "systemTemplatesAuthorization", "no access");		}		if (authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsDemographicsAuthorization", "manage");		} else if (authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsDemographicsAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "chartsDemographicsAuthorization", "no access");		}		if (authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsActivitiesAuthorization", "manage");		} else if (authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsActivitiesAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "chartsActivitiesAuthorization", "no access");		}		if (authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsHistoryAuthorization", "manage");		} else if (authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsHistoryAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "chartsHistoryAuthorization", "no access");		}		if (authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsInsuranceAuthorization", "manage");		} else if (authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "chartsInsuranceAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "chartsInsuranceAuthorization", "no access");		}		if (authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "decisionSupportAuthorization", "manage");		} else if (authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "decisionSupportAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "decisionSupportAuthorization", "no access");		}		if (authorizationsAddNewUserMUIMessagingManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "messagingAuthorization", "manage");		} else if (authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "messagingAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "messagingAuthorization", "no access");		}		if (authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "practiceAssistantBillingAuthorization", "manage");		} else if (authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.isSelected()) {			setMUIInformation(selectedUserIDForAuthorizations, "practiceAssistantBillingAuthorization", "view only");		} else {			setMUIInformation(selectedUserIDForAuthorizations, "practiceAssistantBillingAuthorization", "no access");		}		try {			Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);		} catch (Exception e) {			System.out.println("Write failed in saveAuthorizations() ");			e.printStackTrace();		}	}	private void fillAuthorizationInputContentPanel() {		if (Access.getUser(selectedUserIDForAuthorizations, "systemUserAccountsAuthorization").equals("manage")) {			authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "systemUserAccountsAuthorization").equals("view only")) {			authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUISystemUserAccountsViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUISystemUserAccountsManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "systemAppearanceAuthorization").equals("manage")) {			authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "systemAppearanceAuthorization").equals("view only")) {			authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUISystemAppearanceViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUISystemAppearanceManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "systemTemplatesAuthorization").equals("manage")) {			authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "systemTemplatesAuthorization").equals("view only")) {			authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUISystemTemplatesViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUISystemTemplatesManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "chartsDemographicsAuthorization").equals("manage")) {			authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "chartsDemographicsAuthorization").equals("view only")) {			authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIChartsDemographicsViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIChartsDemographicsManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "chartsActivitiesAuthorization").equals("manage")) {			authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "chartsActivitiesAuthorization").equals("view only")) {			authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIChartsActivitiesViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIChartsActivitiesManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "chartsHistoryAuthorization").equals("manage")) {			authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "chartsHistoryAuthorization").equals("view only")) {			authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIChartsHistoryViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIChartsHistoryManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "chartsInsuranceAuthorization").equals("manage")) {			authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "chartsInsuranceAuthorization").equals("view only")) {			authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIChartsInsuranceViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIChartsInsuranceManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "decisionSupportAuthorization").equals("manage")) {			authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "decisionSupportAuthorization").equals("view only")) {			authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIDecisionSupportViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIDecisionSupportManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "chartsInsuranceAuthorization").equals("manage")) {			authorizationsAddNewUserMUIMessagingViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIMessagingManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "messagingAuthorization").equals("view only")) {			authorizationsAddNewUserMUIMessagingViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIMessagingManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIMessagingViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIMessagingManageJRadioButton.setSelected(false);		}		if (Access.getUser(selectedUserIDForAuthorizations, "practiceAssistantBillingAuthorization").equals("manage")) {			authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.setSelected(true);		} else if (Access.getUser(selectedUserIDForAuthorizations, "practiceAssistantBillingAuthorization").equals("view only")) {			authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.setSelected(true);			authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.setSelected(false);		} else {			authorizationsAddNewUserMUIPracticeAssistantBillingViewJRadioButton.setSelected(false);			authorizationsAddNewUserMUIPracticeAssistantBillingManageJRadioButton.setSelected(false);		}		authorizationInputCardLayout.show(authorizationInputCardedJPanel, "authorizationInputContentPanel");	}	public Vector<Vector<Vector<String>>> findUserIndexesMatchingModifyUserPanelFields() {		foundUserIndexesVector = new Vector<Vector<Vector<String>>>();		Vector<Vector<Vector<String>>> index = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0)));		String userID = modifyUserPanelEnterUserIDEntryJTextField.getText().trim();		String password = String.valueOf(modifyUserPanelEnterPasswordEntryJPasswordField.getPassword());		// String g =		// String.valueOf(modifyUserPanelReEnterPasswordEntryJPasswordField.getPassword());		String facility = modifyUserPanelFacilityEntryJTextField.getText();		String title = modifyUserPanelPrefixEntryJTextField.getText();		String firstName = modifyUserPanelFirstNameEntryJTextField.getText();		String middleName = modifyUserPanelMiddleNameEntryJTextField.getText();		String lastName = modifyUserPanelLastNameEntryJTextField.getText();		String suffix = modifyUserPanelSuffixEntryJTextField.getText();		String degree = modifyUserPanelDegreeEntryJTextField.getText();		boolean indexReturned = false;		int userInd = 1;		// Check if the userID exists, if so, fill the rest of the fields in		// with what is associated with the userID.		System.out.println("   Checking if userID was entered and exists");		if (null != (userID = Access.getLongFormUserID(userID))) {			System.out.println("   UserID was entered");			// retrieving individualUserIndex from userID			while (userInd < index.size()) {				if (userID.equals(index.elementAt(userInd).elementAt(0).elementAt(0))) {					Vector<Vector<Vector<String>>> userIndex = new Vector<Vector<Vector<String>>>();					indexReturned = true;					System.out.println("   UserID exists");					userIndex.add(index.elementAt(userInd));					index = userIndex;				}				userInd++;			}			// else search for indexes from combinations of the rest of the			// fields		} else {			System.out.println("   UserID was not entered, searching for input combinations");			// Each if loop adds to the previous index only if there is			// something returned.			if (!password.equals("") && !(index = returnIndexesFor(password, "password", index)).isEmpty()) {				indexReturned = true;			}			if (!lastName.equals("") && !(index = returnIndexesFor(lastName, "lastName", index)).isEmpty()) {				indexReturned = true;			}			if (!firstName.equals("") && !(index = returnIndexesFor(firstName, "firstName", index)).isEmpty()) {				indexReturned = true;			}			if (!middleName.equals("") && !(index = returnIndexesFor(middleName, "middleName", index)).isEmpty()) {				indexReturned = true;			}			if (!suffix.equals("") && !(index = returnIndexesFor(suffix, "suffix", index)).isEmpty()) {				indexReturned = true;			}			if (!facility.equals("") && !(index = returnIndexesFor(facility, "facility", index)).isEmpty()) {				indexReturned = true;			}			if (!degree.equals("") && !(index = returnIndexesFor(degree, "degree", index)).isEmpty()) {				indexReturned = true;			}			if (!title.equals("") && !(index = returnIndexesFor(title, "title", index)).isEmpty()) {				indexReturned = true;			}		}		// if no indexes were returned, index remains the original full		// userIndex		// so only if an index was returned do we set foundUserIndexesVector		if (indexReturned) {			foundUserIndexesVector = index;			foundUserIndexesSizeJLabel.setText("1 of " + String.valueOf(foundUserIndexesVector.size()));		} else {			foundUserIndexesSizeJLabel.setText("0");		}		return index;	}	private void fillModifyUserPanelWithFoundUserIndexes(int indexInd) {		if (!foundUserIndexesVector.isEmpty()) {			String userID = foundUserIndexesVector.elementAt(indexInd).elementAt(0).elementAt(0);			modifyUserPanelEnterUserIDEntryJTextField.setText(Access.shortUserID(userID));			modifyUserPanelEnterPasswordEntryJPasswordField.setText(Access.getUser(userID, "password").toString());			modifyUserPanelReEnterPasswordEntryJPasswordField.setText(Access.getUser(userID, "password").toString());			modifyUserPanelFacilityEntryJTextField.setText(Access.getUser(userID, "facility"));			modifyUserPanelPrefixEntryJTextField.setText(Access.getUser(userID, "prefix"));			modifyUserPanelFirstNameEntryJTextField.setText(Access.getUser(userID, "firstName"));			modifyUserPanelMiddleNameEntryJTextField.setText(Access.getUser(userID, "middleName"));			modifyUserPanelLastNameEntryJTextField.setText(Access.getUser(userID, "lastName"));			modifyUserPanelSuffixEntryJTextField.setText(Access.getUser(userID, "suffix"));			modifyUserPanelDegreeEntryJTextField.setText(Access.getUser(userID, "degree"));		}	}	public Vector<Vector<Vector<String>>> returnIndexesFor(String query, String searchFor, Vector<Vector<Vector<String>>> index) {		// spot: check if superfluous and remove if statement		if (null == searchFor) {			System.out.println("searchFor is null, probably from passwordField");		}		System.out.println("   query: " + query);		System.out.println("   searchFor: " + searchFor);		Vector<Vector<Vector<String>>> returnVector = new Vector<Vector<Vector<String>>>();		int firstIndice = -1;		int secondIndice = -1;		System.out.println("       searching for " + searchFor);		if (searchFor.equals("password")) {// modifyUserPanelEnterPasswordEntryJPasswordField.getPassword()			firstIndice = 0;			secondIndice = 1;		} else if (searchFor.equals("title")) {// modifyUserPanelPrefixEntryJTextField.getText()			firstIndice = 1;			secondIndice = 0;		} else if (searchFor.equals("firstName")) {// modifyUserPanelFirstNameEntryJTextField.getText()			firstIndice = 1;			secondIndice = 1;		} else if (searchFor.equals("lastName")) {// modifyUserPanelLastNameEntryJTextField.getText()			firstIndice = 1;			secondIndice = 2;		} else if (searchFor.equals("middleName")) {// modifyUserPanelMiddleNameEntryJTextField.getText()			firstIndice = 1;			secondIndice = 3;		} else if (searchFor.equals("suffix")) {// modifyUserPanelSuffixEntryJTextField.getText()			firstIndice = 1;			secondIndice = 4;		} else if (searchFor.equals("degree")) {// modifyUserPanelDegreeEntryJTextField.getText()			firstIndice = 1;			secondIndice = 5;		} else if (searchFor.equals("facility")) {// modifyUserPanelFacilityEntryJTextField.getText()			firstIndice = 2;			secondIndice = 0;		}		int userInd = 1;		while (userInd < index.size()) {			if (query.equals(((Vector<Vector<String>>) ((Vector) (index.elementAt(userInd)))).elementAt(firstIndice).elementAt(secondIndice))) {				System.out.println("       " + searchFor + " found");				returnVector.add(((Vector) (index.elementAt(userInd))));			}			userInd++;		}		System.out.println("       returnVector.size(): " + returnVector.size());		return returnVector;	}	// this is used to thwart unauthorized decryption by malicious decrypters	// that have stolen passwords	public byte[] makeRawFromPassword(char[] pSelectedNewUserPassword) {		char[] cPassword1 = "z5T3zIi93F".toCharArray();		char[] cPassword2 = "S8n952odk".toCharArray();		char[] cPassword3 = "0lkqv63p".toCharArray();		char[] cPassword4 = "Jbn4cW7".toCharArray();		char[] cPassword5 = "tK807p".toCharArray();		byte[] superPasswordBytes = new byte[16];		if (pSelectedNewUserPassword.length == 6) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(cPassword1, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 7) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(cPassword2, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 8) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(cPassword3, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 9) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(cPassword4, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 10) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(cPassword5, pSelectedNewUserPassword);		}		return superPasswordBytes;	}	public void reSize(boolean isInsideCall, String showPanel) {		// setSize((Device.device.screenSize);		systemCardLayout.show(cardedMainContentJPanel, showPanel);		if (isInsideCall && templatePreviewJTabbedPane.isShowing()) {			setPreferredSize(new Dimension(Workspace.systemFrameSizeDimension.width + templatePageDimension.width + 75, Workspace.systemFrameSizeDimension.height));		} else {			setPreferredSize(Workspace.systemFrameSizeDimension);		}		pack();		validate();		repaint();		if (!isInsideCall) {			// if called to resize from workspace initializing, setting max size			// of userIndexBaseJPanel that contains the scrollPane for the			// userIndexJPanel			// removing the object that packs the window larger than desired			userAccountsCardedJPanel.remove(userIndexPanelBaseJPanel);			validate();			repaint();			// and resizing the offending-large panel			userAccountsCardedJPanel.setPreferredSize(userAccountsCardedJPanel.getSize());			userAccountsCardedJPanel.setMaximumSize(userAccountsCardedJPanel.getSize());			validate();			repaint();			userAccountsCardedJPanel.add(userIndexPanelBaseJPanel, "userIndexPanelBaseJPanel");			this.setVisible(false);		}	}	// sets up a JTabbedPane area that looks similar to a manilla chart for	// template page previewing	public void createTemplatePreviewPage(JPanel pageJPanel, JPanel numbersJPanel) {		templatePageClickableCoverJPanel = new JPanel();		// layout must be set to a bounds-compatible layout (null is fine)		templatePageClickableCoverJPanel.setLayout(null);		templatePageClickableCoverJPanel.addMouseListener(this);		templatePageClickableCoverJPanel.setName("templatePageClickableCoverJPanel");		templatePageClickableCoverJPanel.setOpaque(false);		JPanel templatePreviewPaperFormBaseJPanel = new JPanel(new GridBagLayout());		GridBagConstraints marginedPaperPanelPlusContentsConstraints = new GridBagConstraints();		GridBagConstraints previewContentPanelConstraints = new GridBagConstraints();		remove(templatePreviewJTabbedPane);		templatePreviewCardedPaperFormJPanel = new JPanel(templatePreviewPaperFormCardLayout);		templatePreviewJPanel = new JPanel(new GridBagLayout());		marginedPaperPanelPlusContents = new JPanel(new GridBagLayout());		// templatePreviewJPanel.setOpaque(false);		templatePreviewJPanel.setBackground(manillaColor);		marginedPaperPanelPlusContentsConstraints.insets = new Insets(10, 22, 22, 22);		previewContentJPanel = new JPanel(new GridBagLayout());		marginedPaperPanelPlusContents.setBackground(Color.WHITE);		marginedPaperPanelPlusContents.setBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(185, 185, 185)), new MatteBorder(1, 1, 0, 0, new Color(244, 244, 244))));		GridBagConstraints templatePreviewPaperFormBasePanelConstraints = new GridBagConstraints();		templatePreviewPaperFormBasePanelConstraints.gridy = 0;		templatePreviewPaperFormBasePanelConstraints.gridx = 0;		templatePreviewPaperFormBasePanelConstraints.weighty = 1;		templatePreviewPaperFormBasePanelConstraints.weightx = 1;		templatePreviewPaperFormBasePanelConstraints.fill = GridBagConstraints.BOTH;		templatePreviewPaperFormBaseJPanel.setBorder(new LineBorder(new Color(200, 200, 200), 1));		templatePreviewPaperFormBaseJPanel.setOpaque(true);		templatePreviewJPanel.setPreferredSize(templatePageDimension);		templatePreviewJPanel.setSize(templatePageDimension);		templatePreviewJPanel.setMaximumSize(templatePageDimension);		templatePreviewJPanel.setMinimumSize(templatePageDimension);		if (null != pageJPanel) {			// setting class var templatePreviewPageJPanel to the page for use			// in adding dataCells			templatePreviewPageJPanel = pageJPanel;			templatePreviewPageNumbersJPanel = numbersJPanel;			templatePreviewPageNumbersJPanel.setOpaque(false);			templatePreviewPageNumbersJPanel.setLayout(null);			System.out.println("pageJPanel.getComponentCount(): " + pageJPanel.getComponentCount());			System.out.println("templatePreviewPageJPanel.getComponentCount(): " + templatePreviewPageJPanel.getComponentCount());			templatePreviewPaperFormBaseJPanel.setPreferredSize(templatePageDimension);			templatePreviewPaperFormBaseJPanel.setSize(templatePageDimension);			templatePreviewPaperFormBaseJPanel.setMaximumSize(templatePageDimension);			templatePreviewPaperFormBaseJPanel.setMinimumSize(templatePageDimension);			templatePreviewPaperFormBaseJPanel.add(templatePageClickableCoverJPanel, templatePreviewPaperFormBasePanelConstraints);			templatePreviewPaperFormBaseJPanel.add(templatePreviewPageNumbersJPanel, templatePreviewPaperFormBasePanelConstraints);			templatePreviewPaperFormBaseJPanel.add(templatePreviewPageJPanel, templatePreviewPaperFormBasePanelConstraints);			templatePreviewPageJPanel.setBackground(Color.WHITE);			// templatePageClickableCoverJPanel.setOpaque(true);			// templatePreviewPageNumbersJPanel.setBackground(Color.GREEN);			// templatePageClickableCoverJPanel.setBackground(Color.RED);			previewContentPanelConstraints.gridy = 0;			previewContentPanelConstraints.gridx = 0;			previewContentPanelConstraints.weighty = 1;			previewContentPanelConstraints.weightx = 1;			previewContentPanelConstraints.fill = GridBagConstraints.BOTH;			previewContentJPanel.add(templatePreviewPaperFormBaseJPanel, previewContentPanelConstraints);			templatePreviewCardedPaperFormJPanel.add(previewContentJPanel, "templatePreviewPanelJLayeredPane");			templatePreviewCardedPaperFormJPanel.add(templateGetDataItemPanelSizeJPanel, "templateGetDataItemPanelSizeJPanel");			marginedPaperPanelPlusContents.add(templatePreviewCardedPaperFormJPanel, marginedPaperPanelPlusContentsConstraints);			templatePreviewPanelConstraints.insets = new Insets(10, 10, 10, 10);			templatePreviewPanelConstraints.gridy = 1;			templatePreviewPanelConstraints.gridx = 1;			templatePreviewPanelConstraints.fill = GridBagConstraints.BOTH;			templatePreviewPanelConstraints.insets = new Insets(10, 10, 10, 10);			templatePreviewJPanel.add(marginedPaperPanelPlusContents, templatePreviewPanelConstraints);		}		// creating templatePreviewJTabbedPane		templatePreviewJTabbedPane = new JTabbedPane();		templatePreviewJTabbedPane.addTab("Template " + templateName + ": ", null, templatePreviewJPanel, null);		templatePreviewJTabbedPane.setBackgroundAt(0, manillaColor);		UIManager.put("TabbedPane.contentAreaColor", new ColorUIResource(manillaColor));		templatePreviewJTabbedPane.setOpaque(false);		contentPaneConstraints.gridy = 0;		contentPaneConstraints.gridx = 1;		contentPaneConstraints.gridheight = 2;		contentPaneConstraints.weighty = 1;		contentPaneConstraints.weightx = 1;		contentPaneConstraints.fill = GridBagConstraints.BOTH;		contentPaneConstraints.insets = new Insets(0, 6, 0, 0);		rootConstraints.gridy = 0;		rootConstraints.gridx = 1;		rootConstraints.weighty = 1.0;		rootConstraints.weightx = 1.0;		add(templatePreviewJTabbedPane, rootConstraints);		templatePreviewJTabbedPane.setBackground(manillaColor);		reSize(true, "templatePreviewJTabbedPane");	}	@Override	public void focusGained(FocusEvent e) {	}	@Override	public void focusLost(FocusEvent e) {		if (e.getComponent().getName().equals("templateMedicalCodeJTextField")) {			actionForTemplateAtomicMedicalCodeJTextField();		} else if (e.getComponent().getName().startsWith("pageHeaderJTextField")) {			String newPageHeaderText = ((JTextField) (e.getComponent())).getText();			int sectionNumber = Integer.parseInt(e.getComponent().getName().substring(20, 21));			int templatePageNumberEntry = Integer.parseInt(e.getComponent().getName().substring(22));			Vector dataCell = (Vector) (((Vector) (((Vector) (template.elementAt(sectionNumber))).elementAt(templatePageNumberEntry))).elementAt(0));			// clone entire dataCell into changeVector ( = dataCell.elementAt(3)			// )			// this allows user information to be recorded for changes			dataCell.setElementAt(dataCell, 3);			dataCell.setElementAt(newPageHeaderText, 0);		}	}	private void actionForTemplateAtomicMedicalCodeJTextField() {		if (null != codeSetIdentifier && !codeSetIdentifier.equals("") && !templateMedicalCodeJTextField.getText().equals("")) {			componentAndSubcomponentDatatypesAndPositions = "";			codeDetailsPanelSubComponentNumberAndDatatypeJLabel.setText(" - ");			templateMedicalCodeSubcomponentJLabel.setText(" - ");			givenMedicalCodeElementIdentifier = templateMedicalCodeJTextField.getText();			if (codeSetIdentifier.equals("HL7_2.3.1")) {				// HL-7 codes are stored with leading zeroes to complete a				// length of 5, so				// below changes the format of givenMedicalCodeElementIdentifier				// to five digits by including leading zeroes (for example: 7 to				// 00007 and 303 to 00303)				while (givenMedicalCodeElementIdentifier.length() < 5) {					givenMedicalCodeElementIdentifier = "0" + givenMedicalCodeElementIdentifier;				}				templateMedicalCodeJTextField.setText(givenMedicalCodeElementIdentifier);			} else if (codeSetIdentifier.equals("CPT2009")) {			} else if (codeSetIdentifier.equals("ICD10")) {			} else if (codeSetIdentifier.equals("LOINC2.32")) {			}			Vector<Vector<String>> exactMedicalCode = new Vector<Vector<String>>();			exactMedicalCode.add(new Vector<String>());			exactMedicalCode.lastElement().add(givenMedicalCodeElementIdentifier);			// exactMedicalCode.lastElement().add(templateMedicalCodeJTextField.getText());			codeSetRecordPlusHeaderVector = PracticeWindow.tokenizeDatabase(Io.databaseRecords("exact medical code", codeSetIdentifier, exactMedicalCode), codeSetIdentifier);			if (codeSetRecordPlusHeaderVector != null) {				elementDatatype = (String) (((Vector) (codeSetRecordPlusHeaderVector.elementAt(1))).elementAt(1));				String medicalCodeElementName = (String) (((Vector) (codeSetRecordPlusHeaderVector.elementAt(1))).elementAt(2));				// SystemWindow.println("givenElementDatatype: " +				// elementDatatype);				// SystemWindow.println("givenMedicalCodeElementIdentifier: " +				// givenMedicalCodeElementIdentifier);				// spot:				// this call to a popup that displays choices for subcomponents				// and results in a string creation of				// a unique atomic identifier specifying the subcomponets and				// possible sub-subcomponents of the medical code				// if it is not poped up, then the unique atomic identifier is				// ...stored where?				//				JPanel promptJPanel = promptForComponentOrSubComponents("this", elementDatatype);				if (null != promptJPanel) {					promptForComponentOrSubComponentsPanelJPopupMenu.removeAll();					promptForComponentOrSubComponentsPanelJPopupMenu.setVisible(false);					promptForComponentOrSubComponentsPanelJPopupMenu.add(promptJPanel);					promptForComponentOrSubComponentsPanelJPopupMenu.show(templateMedicalCodeJTextField, -6, templateMedicalCodeJTextField.getHeight());				} else {					// codeDetailsPanelAtomicNameJLabel.setText(medicalCodeElementName);					templateVisibleFieldDescriptionJTextField.setText(medicalCodeElementName + ": ");					templateMedicalCodeElementNumberJLabel.setText((String) (((Vector) (codeSetRecordPlusHeaderVector.elementAt(1))).elementAt(0)));					templateMedicalCodeDescriptionJLabel.setText(" - ");					if (codeSetIdentifier.equals("HL7_2.3.1")) {						codeDetailsPanelElementDataTypeJLabel.setText(elementDatatype);						codeDetailsPanelReferenceJLabel.setText((String) (((Vector) (codeSetRecordPlusHeaderVector.elementAt(1))).elementAt(4)));					} else if (codeSetIdentifier.equals("CPT2009")) {						codeDetailsPanelElementDataTypeJLabel.setText(" - ");					}				}			} else {				addTalkbackText(codeSetIdentifier + " " + givenMedicalCodeElementIdentifier + " was not found.", null, true);			}		}	}	// fills a popup panel (promptForComponentOrSubComponentsPanelJPopupMenu)	// with component and subcomponent (if any)	// choices when the selected (in templateMedicalCodeJTextField) medical code	// represents a compound data type	public JPanel promptForComponentOrSubComponents(String callingWindow, String pDatatype) {		JPanel promptForComponentOrSubComponentsJPanel = new JPanel(new GridBagLayout());		promptForComponentOrSubComponentsJPanel.setBackground(quintessentialThemeColor);		Border compoundCodeBorder = new LineBorder(Color.DARK_GRAY, 1);		codeDetailsPanelReferenceJLabel.setText(" - ");		JLabel elementNameJLabel = new JLabel();		JLabel componentOrSubComponentNameJLabel = new JLabel();		JLabel subComponentHeaderJLabel1 = new JLabel();		JLabel subComponentHeaderJLabel2 = new JLabel();		subComponentHeaderJLabel1.setFont(systemFont);		subComponentHeaderJLabel2.setFont(systemFont);		elementNameJLabel.setFont(systemFont);		componentOrSubComponentNameJLabel.setFont(systemFont);		JButton componentJButton1;		JButton componentJButton2;		JButton componentJButton3;		JButton componentJButton4;		JButton componentJButton5;		JButton componentJButton6;		JButton componentJButton7;		JButton componentJButton8;		JButton componentJButton9;		JButton componentJButton10;		JButton componentJButton11;		JButton componentJButton12;		JButton componentJButton13;		JButton componentJButton14;		JButton componentJButton15;		JButton componentJButton16;		JButton componentJButton17;		JButton componentJButton18;		JButton componentJButton19;		JButton componentJButton20;		promptForComponentOrSubComponentsPanelConstraints.insets = new Insets(6, 6, 6, 6);		promptForComponentOrSubComponentsPanelConstraints.gridy = 0;		promptForComponentOrSubComponentsPanelConstraints.weighty = 1;		promptForComponentOrSubComponentsPanelConstraints.gridy = 0;		promptForComponentOrSubComponentsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		promptForComponentOrSubComponentsJPanel.removeAll();		promptForComponentOrSubComponentsJPanel.add(elementNameJLabel, promptForComponentOrSubComponentsPanelConstraints);		promptForComponentOrSubComponentsPanelConstraints.gridy = 1;		promptForComponentOrSubComponentsPanelConstraints.anchor = GridBagConstraints.WEST;		if (pDatatype.equals("HD")) {			componentOrSubComponentNameJLabel.setText("Hierarchic designator");			componentJButton1 = componentJButton(callingWindow, "Namespace ID: ", "1|IS");			componentJButton2 = componentJButton(callingWindow, "Universal ID: ", "2|ST");			componentJButton3 = componentJButton(callingWindow, "Entity identifier: ", "3|ID");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);		} else if (pDatatype.equals("EI")) {			// name of data type and first component for EI is the same			// ("Entity identifier")			componentOrSubComponentNameJLabel.setText("Entity identifier");			componentJButton1 = componentJButton(callingWindow, "Entity identifier: ", "1|ST");			componentJButton2 = componentJButton(callingWindow, "Namespace ID: ", "2|IS");			componentJButton3 = componentJButton(callingWindow, "Universal ID: ", "3|ST");			componentJButton4 = componentJButton(callingWindow, "Universal ID type: ", "4|ID");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 5;			promptForComponentOrSubComponentsJPanel.add(componentJButton4, promptForComponentOrSubComponentsPanelConstraints);		} else if (pDatatype.equals("PT")) {			componentOrSubComponentNameJLabel.setText("Processing type");			componentJButton1 = componentJButton(callingWindow, "Processing ID: ", "1|ID");			componentJButton2 = componentJButton(callingWindow, "Processing mode: ", "2|ID");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);		} else if (pDatatype.equals("CE")) {			componentOrSubComponentNameJLabel.setText("Coded element");			componentJButton1 = componentJButton(callingWindow, "Identifier: ", "1|ST");			componentJButton2 = componentJButton(callingWindow, "Text: ", "2|ST");			componentJButton3 = componentJButton(callingWindow, "Name of coding systemFrame2: ", "3|ST");			componentJButton4 = componentJButton(callingWindow, "Alternate identifier: ", "4|ST");			componentJButton5 = componentJButton(callingWindow, "Alternate text: ", "5|ST");			componentJButton6 = componentJButton(callingWindow, "Name of alternate coding systemFrame2: ", "6|ST");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 5;			promptForComponentOrSubComponentsJPanel.add(componentJButton4, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 6;			promptForComponentOrSubComponentsJPanel.add(componentJButton5, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 7;			promptForComponentOrSubComponentsJPanel.add(componentJButton6, promptForComponentOrSubComponentsPanelConstraints);		} else if (pDatatype.equals("CX")) {			componentOrSubComponentNameJLabel.setText("Extended composite ID with check digit");			componentJButton1 = componentJButton(callingWindow, "ID: ", "1|ST");			componentJButton2 = componentJButton(callingWindow, "Check digit: ", "2|ST");			componentJButton3 = componentJButton(callingWindow, "Code identifying the check digit scheme employed: ", "3|ID");			subComponentHeaderJLabel1.setText("Assigning authority:");// (HD)			componentJButton4 = componentJButton(callingWindow, "Namespace ID: ", "4|HD|1|IS");			componentJButton5 = componentJButton(callingWindow, "Universal ID: ", "4|HD|2|IS");			componentJButton6 = componentJButton(callingWindow, "Universal ID type: ", "4|HD|3|ID");			componentJButton7 = componentJButton(callingWindow, "Identifier type code: ", "5|IS");			subComponentHeaderJLabel2.setText("Assigning facility:");// (HD)			componentJButton8 = componentJButton(callingWindow, "Namespace ID: ", "6|HD|1|IS");			componentJButton9 = componentJButton(callingWindow, "Universal ID: ", "6|HD|2|ST");			componentJButton10 = componentJButton(callingWindow, "Universal ID type: ", "6|HD|3|ID");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 5;			promptForComponentOrSubComponentsJPanel.add(subComponentHeaderJLabel1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 6;			promptForComponentOrSubComponentsJPanel.add(componentJButton4, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 7;			promptForComponentOrSubComponentsJPanel.add(componentJButton5, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 8;			promptForComponentOrSubComponentsJPanel.add(componentJButton6, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 9;			promptForComponentOrSubComponentsJPanel.add(componentJButton7, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 10;			promptForComponentOrSubComponentsJPanel.add(subComponentHeaderJLabel2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 11;			promptForComponentOrSubComponentsJPanel.add(componentJButton8, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 12;			promptForComponentOrSubComponentsJPanel.add(componentJButton9, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 13;			promptForComponentOrSubComponentsJPanel.add(componentJButton10, promptForComponentOrSubComponentsPanelConstraints);		} else if (pDatatype.equals("XCN")) {			componentOrSubComponentNameJLabel.setText("Extended composite ID number and name");			componentJButton1 = componentJButton(callingWindow, "ID number: ", "1|ST");			componentJButton2 = componentJButton(callingWindow, "Family name: ", "2|ST");			componentJButton3 = componentJButton(callingWindow, "Last name prefix: ", "3|ST");			componentJButton4 = componentJButton(callingWindow, "Given name: ", "4|ST");			componentJButton5 = componentJButton(callingWindow, "Middle initial or name: ", "5|ST");			componentJButton6 = componentJButton(callingWindow, "Suffix (e.g., JR or III): ", "6|ST");			componentJButton7 = componentJButton(callingWindow, "Prefix (e.g., DR): ", "7|ST");			componentJButton8 = componentJButton(callingWindow, "Degree (e.g., MD): ", "8|IS");			componentJButton9 = componentJButton(callingWindow, "Source table: ", "9|IS");			subComponentHeaderJLabel1.setText("Assigning authority:");// (HD)			componentJButton10 = componentJButton(callingWindow, "namespace ID: ", "10|HD|1|IS");			componentJButton11 = componentJButton(callingWindow, "Universal ID: ", "10|HD|2|ST");			componentJButton12 = componentJButton(callingWindow, "Universal ID type: ", "10|HD|3|ID");			componentJButton13 = componentJButton(callingWindow, "Name type code: ", "11|ID");			componentJButton14 = componentJButton(callingWindow, "Identifier check digit: ", "12|ST");			componentJButton15 = componentJButton(callingWindow, "Code identifying the check digit scheme employed: ", "13|ID");			componentJButton16 = componentJButton(callingWindow, "Identifier type code: ", "14|IS");			subComponentHeaderJLabel2.setText("Assigning facility:");// (HD)			componentJButton17 = componentJButton(callingWindow, "Namespace ID: ", "15|HD|1|IS");			componentJButton18 = componentJButton(callingWindow, "Universal ID: ", "15|HD|2|ST");			componentJButton19 = componentJButton(callingWindow, "Universal ID type: ", "15|HD|3|ID");			componentJButton20 = componentJButton(callingWindow, "Name representation code: ", "16|ID");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 5;			promptForComponentOrSubComponentsJPanel.add(componentJButton4, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 6;			promptForComponentOrSubComponentsJPanel.add(componentJButton5, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 7;			promptForComponentOrSubComponentsJPanel.add(componentJButton6, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 8;			promptForComponentOrSubComponentsJPanel.add(componentJButton7, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 9;			promptForComponentOrSubComponentsJPanel.add(componentJButton8, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 10;			promptForComponentOrSubComponentsJPanel.add(componentJButton9, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 11;			promptForComponentOrSubComponentsJPanel.add(subComponentHeaderJLabel1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 12;			promptForComponentOrSubComponentsJPanel.add(componentJButton10, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 13;			promptForComponentOrSubComponentsJPanel.add(componentJButton11, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 14;			promptForComponentOrSubComponentsJPanel.add(componentJButton12, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 15;			promptForComponentOrSubComponentsJPanel.add(componentJButton13, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 16;			promptForComponentOrSubComponentsJPanel.add(componentJButton14, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 17;			promptForComponentOrSubComponentsJPanel.add(componentJButton15, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 18;			promptForComponentOrSubComponentsJPanel.add(componentJButton16, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 19;			promptForComponentOrSubComponentsJPanel.add(subComponentHeaderJLabel2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 20;			promptForComponentOrSubComponentsJPanel.add(componentJButton17, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 21;			promptForComponentOrSubComponentsJPanel.add(componentJButton18, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 22;			promptForComponentOrSubComponentsJPanel.add(componentJButton19, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 23;			promptForComponentOrSubComponentsJPanel.add(componentJButton20, promptForComponentOrSubComponentsPanelConstraints);		} else if (pDatatype.equals("XPN")) {			componentOrSubComponentNameJLabel.setText("Extended person name");			componentJButton1 = componentJButton(callingWindow, "Family name: ", "1|ST");			componentJButton2 = componentJButton(callingWindow, "Last name prefix: ", "2|ST");			componentJButton3 = componentJButton(callingWindow, "Given name: ", "3|ST");			componentJButton4 = componentJButton(callingWindow, "Middle initial or name: ", "4|ST");			componentJButton5 = componentJButton(callingWindow, "Suffix (e.g., JR or III): ", "5|ST");			componentJButton6 = componentJButton(callingWindow, "Prefix (e.g., DR): ", "6|ST");			componentJButton7 = componentJButton(callingWindow, "Degree (e.g., MD): ", "7|IS");			componentJButton8 = componentJButton(callingWindow, "Name type code: ", "8|ID");			componentJButton9 = componentJButton(callingWindow, "Name representation code: ", "9|ID");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 5;			promptForComponentOrSubComponentsJPanel.add(componentJButton4, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 6;			promptForComponentOrSubComponentsJPanel.add(componentJButton5, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 7;			promptForComponentOrSubComponentsJPanel.add(componentJButton6, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 8;			promptForComponentOrSubComponentsJPanel.add(componentJButton7, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 9;			promptForComponentOrSubComponentsJPanel.add(componentJButton8, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 10;			promptForComponentOrSubComponentsJPanel.add(componentJButton9, promptForComponentOrSubComponentsPanelConstraints);			// Patient name		} else if (pDatatype.equals("XAD")) {			componentOrSubComponentNameJLabel.setText("Extended address");			subComponentHeaderJLabel1.setText("Street address:");// (SAD)			componentJButton1 = componentJButton(callingWindow, "Street or mailing address:", "1|SAD|1|ST");			componentJButton2 = componentJButton(callingWindow, "Street name:", "1|SAD|2|ST");			componentJButton3 = componentJButton(callingWindow, "Dwelling number:", "1|SAD|3|ST");			componentJButton4 = componentJButton(callingWindow, "Other designation:", "2|ST");			componentJButton5 = componentJButton(callingWindow, "City:", "3|ST");			componentJButton6 = componentJButton(callingWindow, "State or province:", "4|ST");			componentJButton7 = componentJButton(callingWindow, "Zip or postal code:", "5|ST");			componentJButton8 = componentJButton(callingWindow, "Country:", "6|ID");			componentJButton9 = componentJButton(callingWindow, "Address type:", "7|ID");			componentJButton10 = componentJButton(callingWindow, "Other geographic designation:", "8|ST");			componentJButton11 = componentJButton(callingWindow, "County/parish code:", "9|IS");			componentJButton12 = componentJButton(callingWindow, "Census tract:", "10|IS");			componentJButton13 = componentJButton(callingWindow, "Address representation code:", "11|ID");			subComponentHeaderJLabel2.setText("Address validity range:");// (DR)			componentJButton14 = componentJButton(callingWindow, "Range start date/time:", "12|DR|1|TS");			componentJButton15 = componentJButton(callingWindow, "Range end date/time:", "12|DR|2|TS");			componentJButton16 = componentJButton(callingWindow, "Effective date:", "13|TS");			componentJButton17 = componentJButton(callingWindow, "Expiration date:", "14|TS");			promptForComponentOrSubComponentsJPanel.add(componentOrSubComponentNameJLabel, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 2;			promptForComponentOrSubComponentsJPanel.add(subComponentHeaderJLabel1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 3;			promptForComponentOrSubComponentsPanelConstraints.insets = new Insets(0, 30, 0, 0);			promptForComponentOrSubComponentsJPanel.add(componentJButton1, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 4;			promptForComponentOrSubComponentsJPanel.add(componentJButton2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 5;			promptForComponentOrSubComponentsJPanel.add(componentJButton3, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 6;			promptForComponentOrSubComponentsPanelConstraints.insets = new Insets(0, 0, 0, 0);			promptForComponentOrSubComponentsJPanel.add(componentJButton4, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 6;			promptForComponentOrSubComponentsJPanel.add(componentJButton5, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 7;			promptForComponentOrSubComponentsJPanel.add(componentJButton6, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 8;			promptForComponentOrSubComponentsJPanel.add(componentJButton7, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 9;			promptForComponentOrSubComponentsJPanel.add(componentJButton8, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 10;			promptForComponentOrSubComponentsJPanel.add(componentJButton9, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 11;			promptForComponentOrSubComponentsJPanel.add(componentJButton10, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 12;			promptForComponentOrSubComponentsJPanel.add(componentJButton11, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 13;			promptForComponentOrSubComponentsJPanel.add(componentJButton12, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 14;			promptForComponentOrSubComponentsJPanel.add(componentJButton13, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 15;			promptForComponentOrSubComponentsJPanel.add(subComponentHeaderJLabel2, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 16;			promptForComponentOrSubComponentsPanelConstraints.insets = new Insets(0, 30, 0, 0);			promptForComponentOrSubComponentsJPanel.add(componentJButton14, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 17;			promptForComponentOrSubComponentsJPanel.add(componentJButton15, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 18;			promptForComponentOrSubComponentsPanelConstraints.insets = new Insets(0, 0, 0, 0);			promptForComponentOrSubComponentsJPanel.add(componentJButton16, promptForComponentOrSubComponentsPanelConstraints);			promptForComponentOrSubComponentsPanelConstraints.gridy = 19;			promptForComponentOrSubComponentsJPanel.add(componentJButton17, promptForComponentOrSubComponentsPanelConstraints);		}		if (promptForComponentOrSubComponentsJPanel.getComponentCount() > 1) {			return promptForComponentOrSubComponentsJPanel;		} else {			return null;		}	}	public JButton componentJButton(String callingWindow, String dataTypeName, String dataTypeCode) {		JButton componentJButton = new JButton(dataTypeName);		if (callingWindow.equals("DecisionSupport")) {			componentJButton.addActionListener(Device.device.workspace.decisionSupportWindow);			// else callingWindow = this		} else {			componentJButton.addActionListener(this);		}		componentJButton.setActionCommand("componentJButton");		componentJButton.setBackground(buttonColor);		componentJButton.setBorder(new LineBorder(Color.DARK_GRAY, 1));		componentJButton.setFont(systemFont);		componentJButton.setName(dataTypeCode);		return componentJButton;	}	public class UMLDiagramPanel extends JPanel {		String lineString = "";		BufferedReader bufferedReader;		Vector<Rectangle> classRectangles = new Vector<Rectangle>();		Vector<Rectangle> objectRectangles = new Vector<Rectangle>();		int maxLineStringLength = 320;		int topMargin = 20500;		int sideMargin = 5000;		int width = 1700;		int lengthBetweenStackedClasses = width / 6;		int y;		int x;		int lineInd = 0;		int fileInd = 0;		int lineHeight = 13;		int distx = width + lengthBetweenStackedClasses;		int disty = Math.round((float) (distx / (1.5*Math.sqrt(3))));		int node1x;		int node1y;		int node2x;		int node2y;		int node3x;		int node3y;		boolean hasRan = false;				double pZoom = 0.0;				Vector<JEditorPane> userGuideTextPanes = new Vector<JEditorPane>();		Vector<Point> branch1AndNode = new Vector<Point>();		Vector<Point> branch2AndNode = new Vector<Point>();		Vector<Point> branch3AndNode = new Vector<Point>();				Vector<Point> systemNodes = new Vector<Point>();		Vector<Point> chartingNodes = new Vector<Point>();		Vector<Point> messagingNodes = new Vector<Point>();		Vector<Point> decisionSupportNodes = new Vector<Point>();		Vector<Point> practiceNodes = new Vector<Point>();				public UMLDiagramPanel(double zoom) {			pZoom = zoom / 100;			setLayout(null);			setBackground(Color.WHITE);			setOpaque(true);						// Main: only x, y, and width are set			x = sideMargin + 3 * (width + lengthBetweenStackedClasses);			y = topMargin;			classRectangles.add(new Rectangle(x, y, width, 0));			// Device: only x and width are set; x to Main's x			classRectangles.add(new Rectangle(x, 0, width, 0));			// Workspace: only x and width are set; x to Main's x			classRectangles.add(new Rectangle(x, 0, width, 0));			// The six main windows fall in a horizontal line with a space for DecisionSupportWindow helper classes			// Access: only x and width are set: x to sideMargin			x = sideMargin;			classRectangles.add(new Rectangle(x, 0, width, 0));			// SystemWindow: only x and width are set; x to right of Access			x = x + width + lengthBetweenStackedClasses;			classRectangles.add(new Rectangle(x, 0, width, 0));			// ChartingWindow: only x and width are set; x to right of SystemWindow			x = x + width + lengthBetweenStackedClasses;			classRectangles.add(new Rectangle(x, 0, width, 0));			// MessagingWindow: only x and width are set; x to right of ChartingWindow			x = x + width + lengthBetweenStackedClasses;			classRectangles.add(new Rectangle(x, 0, width, 0));			// DecisionSupportWindow: only x and width are set; x to two places to right of MessagingWindow to fit translational medicine classes			x = x + 2 * width + 2 * lengthBetweenStackedClasses;			classRectangles.add(new Rectangle(x, 0, width, 0));			// PracticeWindow: only x and width are set; x to right of DecisionSupportWindow			x = x + width + lengthBetweenStackedClasses;			classRectangles.add(new Rectangle(x, 0, width, 0));			// DecisionSuport helper classes fall in a column between MessagingWindow and DecisionSupportWindow			// CostAnalysisGraph: only x and width are set; x to right of MessagingWindow			x = x - 2 * width - 2 * lengthBetweenStackedClasses;			classRectangles.add(new Rectangle(x, 0, width, 0));			// EffectCurveGraphPanel: only x and width are set; x to right of MessagingWindow			classRectangles.add(new Rectangle(x, 0, width, 0));			// LifeExpectancy1Panels: only x and width are set; x to right of MessagingWindow			classRectangles.add(new Rectangle(x, 0, width, 0));			// LifeExpectancy2Panels: only x and width are set; x to right of MessagingWindow			classRectangles.add(new Rectangle(x, 0, width, 0));			// MolecularNetworksPanel: only x and width are set; x to right of MessagingWindow			classRectangles.add(new Rectangle(x, 0, width, 0));			// MolecularAssembler: only x and width are set; x to right of MessagingWindow			classRectangles.add(new Rectangle(x, 0, width, 0));			// Io x same as MessagingWindow			classRectangles.add(new Rectangle(classRectangles.elementAt(6).x, 0, width, 0));			// NotePad x same as ChartingWindow + width + lengthBetweenStackedClasses / 2			classRectangles.add(new Rectangle(classRectangles.elementAt(5).x + width / 2 + lengthBetweenStackedClasses / 2, 0, width, 0));			// Window x same as Access			classRectangles.add(new Rectangle(classRectangles.elementAt(3).x, 0, width, 0));			// AdministratorData x same as Access			classRectangles.add(new Rectangle(classRectangles.elementAt(3).x, 0, width, 0));			// UserData x same as Access			classRectangles.add(new Rectangle(classRectangles.elementAt(3).x, 0, width, 0));			// PatientData x same as Access			classRectangles.add(new Rectangle(classRectangles.elementAt(3).x, 0, width, 0));						// home page			objectRectangles.add(new Rectangle(classRectangles.elementAt(0).x - width - lengthBetweenStackedClasses, classRectangles.elementAt(0).y - classRectangles.elementAt(0).height - disty, width, classRectangles.elementAt(0).height));			objectRectangles.add(new Rectangle(classRectangles.elementAt(0).x + width + lengthBetweenStackedClasses + 2, classRectangles.elementAt(0).y - classRectangles.elementAt(0).height - disty, width, classRectangles.elementAt(0).height));						node1x = objectRectangles.elementAt(1).x + width / 2 - 4 * distx;			node1y = objectRectangles.elementAt(1).y - 4 * disty;						node2x = ((objectRectangles.elementAt(0).x + width / 2) + (objectRectangles.elementAt(1).x + width / 2)) / 2;						node2y = 9500;						node3x = objectRectangles.elementAt(0).x + width / 2 + 5 * distx;			node3y = objectRectangles.elementAt(0).y - 5 * disty;						//Based on ellipse x^2/a^2 + y^2/b^2 = 1,			//x = (a^2 - a^2*y^2/b^2)^(1/2)			//y = (b^2 - b^2*x^2/a^2)^(1/2)			//and			//a = (num pages on left side of ellipse) * (distance between pages) = 3600			int a1 = 3300;			//middle branch is twice as long...			int a2 = 7200;			//the ellipse is three times shorter than it is wide, so:			int b1 = 1100;			//local (relative to center) x coordinates for left main tree branch			double aX1 = - a1;			double aX2 = - (5*a1/6);			double aX3 = - (3*a1/6);			double aX4 = - (1*a1/6);			double aX5 = + (1*a1/6);			double aX6 = + (3*a1/6);			double aX7 = + (5*a1/6);			double aX8 = + a1;			double aX9 = + (1*a1/6);			double aX10 = - (1*a1/6);			double aX11 = - (3*a1/6);			double aX12 = - (5*a1/6);			//local (relative to focus) y coordinates for left main tree branch						double aY1 = 0;			double aY2 = Math.sqrt((b1*b1*(1 - (aX2*aX2/(a1*a1)))));			double aY3 = Math.sqrt((b1*b1*(1 - (aX3*aX3/(a1*a1)))));			double aY4 = Math.sqrt((b1*b1*(1 - (aX4*aX4/(a1*a1)))));			double aY5 = Math.sqrt((b1*b1*(1 - (aX5*aX5/(a1*a1)))));			double aY6 = Math.sqrt((b1*b1*(1 - (aX6*aX6/(a1*a1)))));			double aY7 = Math.sqrt((b1*b1*(1 - (aX7*aX7/(a1*a1)))));			double aY8 = 0;			double aY9 = -Math.sqrt((b1*b1*(1 - (aX9*aX9/(a1*a1)))));			double aY10 = -Math.sqrt((b1*b1*(1 - (aX10*aX10/(a1*a1)))));			double aY11 = -Math.sqrt((b1*b1*(1 - (aX11*aX11/(a1*a1)))));			double aY12 = -Math.sqrt((b1*b1*(1 - (aX12*aX12/(a1*a1)))));						branch1AndNode.add(new Point(node1x + (int)aX1, node1y - (int)aY1));			branch1AndNode.add(new Point(node1x + (int)aX2, node1y - (int)aY2));			branch1AndNode.add(new Point(node1x + (int)aX3, node1y - (int)aY3));			branch1AndNode.add(new Point(node1x + (int)aX4, node1y - (int)aY4));			branch1AndNode.add(new Point(node1x + (int)aX5, node1y - (int)aY5));			branch1AndNode.add(new Point(node1x + (int)aX6, node1y - (int)aY6));			branch1AndNode.add(new Point(node1x + (int)aX7, node1y - (int)aY7));			branch1AndNode.add(new Point(node1x + (int)aX8, node1y - (int)aY8));			branch1AndNode.add(new Point(node1x + (int)aX9, node1y - (int)aY9));			branch1AndNode.add(new Point(node1x + (int)aX10, node1y - (int)aY10));			branch1AndNode.add(new Point(node1x + (int)aX11, node1y - (int)aY11));			branch1AndNode.add(new Point(node1x + (int)aX12, node1y - (int)aY12));						//local (relative to center) x coordinates for center main tree branch			double bX1 = - a2;			double bX2 = - (4*a2/6);			double bX3 = - (2*a2/6);			double bX4 = + 0;			double bX5 = + (2*a2/6);			double bX6 = + (4*a2/6);			double bX7 = + a2;			double bX8 = + (2*a2/6);			double bX9 = - (2*a2/6);						//local (relative to focus) y coordinates for center main tree branch						double bY1 = 0;			double bY2 = Math.sqrt((b1*b1*(1 - (bX2*bX2/(a2*a2)))));			double bY3 = Math.sqrt((b1*b1*(1 - (bX3*bX3/(a2*a2)))));			double bY4 = Math.sqrt((b1*b1*(1 - (bX4*bX4/(a2*a2)))));			double bY5 = Math.sqrt((b1*b1*(1 - (bX5*bX5/(a2*a2)))));			double bY6 = Math.sqrt((b1*b1*(1 - (bX6*bX6/(a2*a2)))));			double bY7 = 0;			double bY8 = -Math.sqrt((b1*b1*(1 - (bX8*bX8/(a2*a2)))));			double bY9 = -Math.sqrt((b1*b1*(1 - (bX9*bX9/(a2*a2)))));						branch2AndNode.add(new Point(node2x + (int)bX1, node2y - (int)bY1));			branch2AndNode.add(new Point(node2x + (int)bX2, node2y - (int)bY2));			branch2AndNode.add(new Point(node2x + (int)bX3, node2y - (int)bY3));			branch2AndNode.add(new Point(node2x + (int)bX4, node2y - (int)bY4));			branch2AndNode.add(new Point(node2x + (int)bX5, node2y - (int)bY5));			branch2AndNode.add(new Point(node2x + (int)bX6, node2y - (int)bY6));			branch2AndNode.add(new Point(node2x + (int)bX7, node2y - (int)bY7));			branch2AndNode.add(new Point(node2x + (int)bX8, node2y - (int)bY8));			branch2AndNode.add(new Point(node2x + (int)bX9, node2y - (int)bY9));						double c1 = 3600;			//local (relative to focus) x coordinates for right main tree branch			double cX1 = - (1*c1/3);			double cX2 = 0;			double cX3 = + (1*c1/3);			double cX4 = + (1*c1/3);			double cX5 = 0;			//local (relative to center) y coordinates for right main tree branch						double cY1 = Math.sqrt((b1*b1*(1 - (cX1*cX1/(c1*c1)))));			double cY2 = Math.sqrt((b1*b1*(1 - (cX2*cX2/(c1*c1)))));			double cY3 = Math.sqrt((b1*b1*(1 - (cX3*cX3/(c1*c1)))));			double cY4 = -Math.sqrt((b1*b1*(1 - (cX4*cX4/(c1*c1)))));			double cY5 = -Math.sqrt((b1*b1*(1 - (cX5*cX5/(c1*c1)))));						branch3AndNode.add(new Point(node3x + (int)cX1, node3y - (int)cY1));			branch3AndNode.add(new Point(node3x + (int)cX2, node3y - (int)cY2));			branch3AndNode.add(new Point(node3x + (int)cX3, node3y - (int)cY3));			branch3AndNode.add(new Point(node3x + (int)cX4, node3y - (int)cY4));			branch3AndNode.add(new Point(node3x + (int)cX5, node3y - (int)cY5));						try {				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.1 Title.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.2 Foreword.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.3 Definitions and conventions.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.4 OOCHIS crystal diagram.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.5 Contents.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.6 Background.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.7 Introduction.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.8 Preparing for an EHR implementation.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.9 ONC certification criteria.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.10 Standards used.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.11 Installing Oochis EHR.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/1.12 Starting and logging in.htm"));								//12				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.1 Workspace.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.2 Keyboard shortcuts.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.3 Windows.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.4 Access.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.5 System.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.6 Charting.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.7 Messaging.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8 Decision support.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.9 Practice.htm"));								//21				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.5.1 System administration.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.5.2 User accounts.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.5.3 System Appearance.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.5.4 System Templates.htm"));                //25				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.6.1 Menu bar.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.6.2 Patient chart.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.7.1 Messaging In-box.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.7.2 Messaging Alerts and messages.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.7.3 Messaging Attachments.htm"));								userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.7.4 Messaging Out-box.htm"));				//31				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8.1 Decision support Internet browser.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8.2 Decision support Query.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8.3 Decision support Statistics.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8.4 Decision support Treatment analysis.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8.5 Decision support Rules.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.8.6 Decision support Translational medicine.htm"));				//37				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.9.1 Practice Patient lists.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.9.2 Practice Network files.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.9.3 Practice Reports.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/2.9.4 Practice View medical codes.htm"));								//right side				//41								userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/3.1 Networking.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/3.2 Security, confidentiality, and data integrity.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/3.3 Customizing.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/3.4 Medical business object processing guideline.htm"));				userGuideTextPanes.add(new JEditorPane("File://" + Device.binDir + "user guide htm's/3.5 Last word The modern health information system.htm"));			} catch (IOException e) {				System.out.println("Not found");				e.printStackTrace();			}						//HTMLEditorKit kit = null;			//javax.swing.text.html.StyleSheet styleSheet;			//File cssfile;						int ind = 0;						while (ind < userGuideTextPanes.size()) {				//kit = new HTMLEditorKit();				//styleSheet = kit.getStyleSheet();								userGuideTextPanes.elementAt(ind).setEditable(false);				userGuideTextPanes.elementAt(ind).setContentType("text/html");				userGuideTextPanes.elementAt(ind).setBorder(new LineBorder(Color.BLACK, 1));				userGuideTextPanes.elementAt(ind).setOpaque(false);				setComponentZOrder(userGuideTextPanes.elementAt(ind), 0);/*				userGuideTextPanes.elementAt(ind).setEditorKit(kit);				try {					styleSheet.importStyleSheet(new URL("File://" + System.getProperty("user.home") + "/Desktop/user guide htm's/oochis manual.css"));				} catch (MalformedURLException e1) {					e1.printStackTrace();				}												//StyleSheet styleSheet.setText("<html><head></head><body><pre></pre></body></html>");*/				ind++;			}						int pageWidth = 1250;						//left branch:			userGuideTextPanes.elementAt(0).setBounds(branch1AndNode.elementAt(0).x - pageWidth, branch1AndNode.elementAt(0).y -375, 1150, 750);			userGuideTextPanes.elementAt(1).setBounds(branch1AndNode.elementAt(1).x - pageWidth/2, branch1AndNode.elementAt(1).y - 1650, 1150, 1650);			userGuideTextPanes.elementAt(2).setBounds(branch1AndNode.elementAt(2).x - pageWidth/2, branch1AndNode.elementAt(2).y - 2200, 1150, 2200);			userGuideTextPanes.elementAt(3).setBounds(branch1AndNode.elementAt(3).x - pageWidth/2, branch1AndNode.elementAt(3).y - 1600, 1150, 1600);			userGuideTextPanes.elementAt(4).setBounds(branch1AndNode.elementAt(4).x - pageWidth/2, branch1AndNode.elementAt(4).y - 3150, 1150, 3150);			userGuideTextPanes.elementAt(5).setBounds(branch1AndNode.elementAt(5).x - pageWidth/2, branch1AndNode.elementAt(5).y - 1600, 1150, 1600);			userGuideTextPanes.elementAt(6).setBounds(branch1AndNode.elementAt(6).x - pageWidth/2, branch1AndNode.elementAt(6).y - 2700, 1150, 2700);			userGuideTextPanes.elementAt(7).setBounds(branch1AndNode.elementAt(7).x, branch1AndNode.elementAt(7).y - 700, 1150, 1400);			userGuideTextPanes.elementAt(8).setBounds(branch1AndNode.elementAt(8).x - pageWidth/2, branch1AndNode.elementAt(8).y, 1150, 1700);			userGuideTextPanes.elementAt(9).setBounds(branch1AndNode.elementAt(9).x - pageWidth/2, branch1AndNode.elementAt(9).y, 1150, 500);			userGuideTextPanes.elementAt(10).setBounds(branch1AndNode.elementAt(10).x - pageWidth/2, branch1AndNode.elementAt(10).y, 1150, 1200);			userGuideTextPanes.elementAt(11).setBounds(branch1AndNode.elementAt(11).x - pageWidth/2, branch1AndNode.elementAt(11).y, 1150, 650);						//center branch:			userGuideTextPanes.elementAt(12).setBounds(branch2AndNode.elementAt(0).x - pageWidth, branch2AndNode.elementAt(0).y - 400, 1150, 800);			userGuideTextPanes.elementAt(13).setBounds(branch2AndNode.elementAt(1).x - pageWidth/2, branch2AndNode.elementAt(1).y - 1260, 1150, 1260);			userGuideTextPanes.elementAt(14).setBounds(branch2AndNode.elementAt(2).x - pageWidth/2, branch2AndNode.elementAt(2).y - 4375, 1150, 4375);			userGuideTextPanes.elementAt(15).setBounds(branch2AndNode.elementAt(3).x - pageWidth/2, branch2AndNode.elementAt(3).y - 725, 1150, 725);						//for objects that continue as nodes: up half object height, left half object width			userGuideTextPanes.elementAt(16).setBounds(branch2AndNode.elementAt(4).x - pageWidth/2, branch2AndNode.elementAt(4).y - 125, 1150, 250);			userGuideTextPanes.elementAt(17).setBounds(branch2AndNode.elementAt(5).x - pageWidth/2, branch2AndNode.elementAt(5).y - 575, 1150, 1150);			userGuideTextPanes.elementAt(18).setBounds(branch2AndNode.elementAt(6).x - pageWidth/2, branch2AndNode.elementAt(6).y - 225, 1150, 550);			userGuideTextPanes.elementAt(19).setBounds(branch2AndNode.elementAt(7).x - pageWidth/2, branch2AndNode.elementAt(7).y - 230, 1150, 460);			userGuideTextPanes.elementAt(20).setBounds(branch2AndNode.elementAt(8).x - pageWidth/2, branch2AndNode.elementAt(8).y - 125, 1150, 250);						//right branch:			userGuideTextPanes.elementAt(41).setBounds(branch3AndNode.elementAt(0).x - pageWidth, branch3AndNode.elementAt(0).y - 900, 1150, 1800);			userGuideTextPanes.elementAt(42).setBounds(branch3AndNode.elementAt(1).x - b1/2, branch3AndNode.elementAt(1).y - 800, 1150, 800);			userGuideTextPanes.elementAt(43).setBounds(branch3AndNode.elementAt(2).x, branch3AndNode.elementAt(2).y - 1350, 1150, 2700);			userGuideTextPanes.elementAt(44).setBounds(branch3AndNode.elementAt(3).x, branch3AndNode.elementAt(3).y - 450, 1150, 900);			userGuideTextPanes.elementAt(45).setBounds(branch3AndNode.elementAt(4).x - b1/2, branch3AndNode.elementAt(4).y, 1150, 825);						//the best formula that seems to work:			//divide an ellipse into equadistant vertical columns,			//the x-coordinates are also equadistant,			//with y-values given below to find the y coordinates on an ellipse of a and b axis lengths:			//system node coordinates:			int sa = 7200;			int sb = 2400;						double sX1 = - 3*sa/9;			double sX2 = - 1*sa/9;			double sX3 = + 1*sa/9;			double sX4 = + 3*sa/9;			//"if node is below x-axis (where x=0), make y-value negative (put '-' sign in front of Math.sqrt(...)"			double sY1 = Math.sqrt((sb*sb*(1 - (sX1*sX1/(sa*sa)))));			double sY2 = Math.sqrt((sb*sb*(1 - (sX2*sX2/(sa*sa)))));			double sY3 = Math.sqrt((sb*sb*(1 - (sX3*sX3/(sa*sa)))));			double sY4 = Math.sqrt((sb*sb*(1 - (sX4*sX4/(sa*sa)))));						int ca = a1;			int cb = b1;						double chartingX1 = 5*ca/12;			double chartingX2 = 9*ca/12;						double chartingY1 = Math.sqrt((cb*cb*(1 - (chartingX1*chartingX1/(ca*ca)))));			double chartingY2 = Math.sqrt((cb*cb*(1 - (chartingX2*chartingX2/(ca*ca)))));						int ma = sa/2;			int mb = sb/2;						double mX1 = + 6*ma/12;			double mX2 = + 11*ma/12;			double mX3 = + 11*ma/12;			double mX4 = + 6*ma/12;						double mY1 = Math.sqrt((mb*mb*(1 - (mX1*mX1/(ma*ma)))));			double mY2 = Math.sqrt((mb*mb*(1 - (mX2*mX2/(ma*ma)))));			double mY3 = -Math.sqrt((mb*mb*(1 - (mX3*mX3/(ma*ma)))));			double mY4 = -Math.sqrt((mb*mb*(1 - (mX3*mX4/(ma*ma)))));						int decisionSupportEllipseLength = 11*sa/16;			int decisionSupportEllipseHeight = 11*sb/16;						double decisionSupportX1 = + 8*decisionSupportEllipseLength/8;			double decisionSupportX2 = + 6*decisionSupportEllipseLength/8;			double decisionSupportX3 = + 4*decisionSupportEllipseLength/8;			double decisionSupportX4 = + 2*decisionSupportEllipseLength/8;			double decisionSupportX5 = 0;			double decisionSupportX6 = - 2*decisionSupportEllipseLength/8;						double decisionSupportY1 = 0;			double decisionSupportY2 = -Math.sqrt((decisionSupportEllipseHeight*decisionSupportEllipseHeight*(1 - (decisionSupportX2*decisionSupportX2/(decisionSupportEllipseLength*decisionSupportEllipseLength)))));			double decisionSupportY3 = -Math.sqrt((decisionSupportEllipseHeight*decisionSupportEllipseHeight*(1 - (decisionSupportX3*decisionSupportX3/(decisionSupportEllipseLength*decisionSupportEllipseLength)))));			double decisionSupportY4 = -Math.sqrt((decisionSupportEllipseHeight*decisionSupportEllipseHeight*(1 - (decisionSupportX4*decisionSupportX4/(decisionSupportEllipseLength*decisionSupportEllipseLength)))));			double decisionSupportY5 = -Math.sqrt((decisionSupportEllipseHeight*decisionSupportEllipseHeight*(1 - (decisionSupportX5*decisionSupportX5/(decisionSupportEllipseLength*decisionSupportEllipseLength)))));			double decisionSupportY6 = -Math.sqrt((decisionSupportEllipseHeight*decisionSupportEllipseHeight*(1 - (decisionSupportX6*decisionSupportX6/(decisionSupportEllipseLength*decisionSupportEllipseLength)))));						int practiceA = sa/2;			int practiceB = sb/2;						double practiceX1 = - practiceA;			double practiceX2 = - 1*practiceA/2;			double practiceX3 = 0;			double practiceX4 = + 1*practiceA/2;						double practiceY1 = -Math.sqrt((practiceB*practiceB*(1 - (practiceX1*practiceX1/(practiceA*practiceA)))));			double practiceY2 = -Math.sqrt((practiceB*practiceB*(1 - (practiceX2*practiceX2/(practiceA*practiceA)))));			double practiceY3 = -Math.sqrt((practiceB*practiceB*(1 - (practiceX3*practiceX3/(practiceA*practiceA)))));			double practiceY4 = -Math.sqrt((practiceB*practiceB*(1 - (practiceX4*practiceX4/(practiceA*practiceA)))));						systemNodes.add(new Point(branch2AndNode.elementAt(4).x + (int)sX1, branch2AndNode.elementAt(4).y - (int)sY1));			systemNodes.add(new Point(branch2AndNode.elementAt(4).x + (int)sX2, branch2AndNode.elementAt(4).y - (int)sY2));			systemNodes.add(new Point(branch2AndNode.elementAt(4).x + (int)sX3, branch2AndNode.elementAt(4).y - (int)sY3));			systemNodes.add(new Point(branch2AndNode.elementAt(4).x + (int)sX4, branch2AndNode.elementAt(4).y - (int)sY4));						chartingNodes.add(new Point(branch2AndNode.elementAt(5).x + (int)chartingX1, branch2AndNode.elementAt(5).y - (int)chartingY1));			chartingNodes.add(new Point(branch2AndNode.elementAt(5).x + (int)chartingX2, branch2AndNode.elementAt(5).y - (int)chartingY2));						messagingNodes.add(new Point(branch2AndNode.elementAt(6).x + (int)mX1, branch2AndNode.elementAt(6).y - (int)mY1));			messagingNodes.add(new Point(branch2AndNode.elementAt(6).x + (int)mX2, branch2AndNode.elementAt(6).y - (int)mY2));			messagingNodes.add(new Point(branch2AndNode.elementAt(6).x + (int)mX3, branch2AndNode.elementAt(6).y - (int)mY3));			messagingNodes.add(new Point(branch2AndNode.elementAt(6).x + (int)mX4, branch2AndNode.elementAt(6).y - (int)mY4));						decisionSupportNodes.add(new Point(branch2AndNode.elementAt(7).x + (int)decisionSupportX1, branch2AndNode.elementAt(7).y - (int)decisionSupportY1));			decisionSupportNodes.add(new Point(branch2AndNode.elementAt(7).x + (int)decisionSupportX2, branch2AndNode.elementAt(7).y - (int)decisionSupportY2));			decisionSupportNodes.add(new Point(branch2AndNode.elementAt(7).x + (int)decisionSupportX3, branch2AndNode.elementAt(7).y - (int)decisionSupportY3));			decisionSupportNodes.add(new Point(branch2AndNode.elementAt(7).x + (int)decisionSupportX4, branch2AndNode.elementAt(7).y - (int)decisionSupportY4));			decisionSupportNodes.add(new Point(branch2AndNode.elementAt(7).x + (int)decisionSupportX5, branch2AndNode.elementAt(7).y - (int)decisionSupportY5));			decisionSupportNodes.add(new Point(branch2AndNode.elementAt(7).x + (int)decisionSupportX6, branch2AndNode.elementAt(7).y - (int)decisionSupportY6));						practiceNodes.add(new Point(branch2AndNode.elementAt(8).x + (int)practiceX1, branch2AndNode.elementAt(8).y - (int)practiceY1));			practiceNodes.add(new Point(branch2AndNode.elementAt(8).x + (int)practiceX2, branch2AndNode.elementAt(8).y - (int)practiceY2));			practiceNodes.add(new Point(branch2AndNode.elementAt(8).x + (int)practiceX3, branch2AndNode.elementAt(8).y - (int)practiceY3));			practiceNodes.add(new Point(branch2AndNode.elementAt(8).x + (int)practiceX4, branch2AndNode.elementAt(8).y - (int)practiceY4));						userGuideTextPanes.elementAt(21).setBounds(systemNodes.elementAt(0).x - pageWidth/2, systemNodes.elementAt(0).y - 2100, 1150, 2100);			userGuideTextPanes.elementAt(22).setBounds(systemNodes.elementAt(1).x - pageWidth/2, systemNodes.elementAt(1).y - 5175, 1150, 5175);			userGuideTextPanes.elementAt(23).setBounds(systemNodes.elementAt(2).x - pageWidth/2, systemNodes.elementAt(2).y - 2100, 1150, 2100);			userGuideTextPanes.elementAt(24).setBounds(systemNodes.elementAt(3).x - pageWidth/2, systemNodes.elementAt(3).y - 5125, 1150, 5125);						userGuideTextPanes.elementAt(25).setBounds(chartingNodes.elementAt(0).x - pageWidth/2, chartingNodes.elementAt(0).y - 2800, 1150, 2800);			userGuideTextPanes.elementAt(26).setBounds(chartingNodes.elementAt(1).x - pageWidth/2, chartingNodes.elementAt(1).y - 2700, 1150, 2700);						userGuideTextPanes.elementAt(27).setBounds(messagingNodes.elementAt(0).x - pageWidth/2, messagingNodes.elementAt(0).y - 850, 1150, 850);			userGuideTextPanes.elementAt(28).setBounds(messagingNodes.elementAt(1).x - pageWidth/2, messagingNodes.elementAt(1).y - 1400, 1150, 1400);			userGuideTextPanes.elementAt(29).setBounds(messagingNodes.elementAt(2).x - pageWidth/2, messagingNodes.elementAt(2).y, 1150, 250);			userGuideTextPanes.elementAt(30).setBounds(messagingNodes.elementAt(3).x - pageWidth/2, messagingNodes.elementAt(3).y, 1150, 250);						userGuideTextPanes.elementAt(31).setBounds(decisionSupportNodes.elementAt(0).x - pageWidth/2, decisionSupportNodes.elementAt(0).y, 1150, 600);			userGuideTextPanes.elementAt(32).setBounds(decisionSupportNodes.elementAt(1).x - pageWidth/2, decisionSupportNodes.elementAt(1).y, 1150, 300);			userGuideTextPanes.elementAt(33).setBounds(decisionSupportNodes.elementAt(2).x - pageWidth/2, decisionSupportNodes.elementAt(2).y, 1150, 5150);			userGuideTextPanes.elementAt(34).setBounds(decisionSupportNodes.elementAt(3).x - pageWidth/2, decisionSupportNodes.elementAt(3).y, 1150, 5300);			userGuideTextPanes.elementAt(35).setBounds(decisionSupportNodes.elementAt(4).x - pageWidth/2, decisionSupportNodes.elementAt(4).y, 1150, 500);			userGuideTextPanes.elementAt(36).setBounds(decisionSupportNodes.elementAt(5).x - pageWidth/2, decisionSupportNodes.elementAt(5).y, 1150, 2100);						userGuideTextPanes.elementAt(37).setBounds(practiceNodes.elementAt(0).x - pageWidth/2, practiceNodes.elementAt(0).y, 1150, 400);			userGuideTextPanes.elementAt(38).setBounds(practiceNodes.elementAt(1).x - pageWidth/2, practiceNodes.elementAt(1).y, 1150, 1700);			userGuideTextPanes.elementAt(39).setBounds(practiceNodes.elementAt(2).x - pageWidth/2, practiceNodes.elementAt(2).y, 1150, 475);			userGuideTextPanes.elementAt(40).setBounds(practiceNodes.elementAt(3).x - pageWidth/2, practiceNodes.elementAt(3).y, 1150, 450);						ind = 0;						while (ind < userGuideTextPanes.size()) {								add(userGuideTextPanes.elementAt(ind));								ind++;			}						try {				Device.device.workspace.chartingJButton.doClick();								if (!ChartingWindow.chartIsOpen) {					Device.device.workspace.chartingWindow.newChartJButton.doClick();					Device.device.workspace.chartingWindow.makeNewChart(1);				} else {					Device.device.workspace.chartingWindow.fillOpenChartViaRecentlyOpenedPanel();					Device.device.workspace.chartingWindow.openChart("00001");				}				Device.device.workspace.chartingWindow.setMaximum(true);				Device.device.workspace.chartingWindow.demographicsTabJButton.doClick();				Device.device.workspace.chartingWindow.paintImmediately(0, 0, Device.device.workspace.chartingWindow.getWidth(), Device.device.workspace.chartingWindow.getHeight());				JLabel leftImageJLabel = new JLabel();				ImageIcon leftImageIcon = null;								BufferedImage chartingWindowImage = new BufferedImage(Device.device.workspace.chartingWindow.getWidth(), Device.device.workspace.chartingWindow.getHeight(), BufferedImage.TYPE_INT_RGB);				Graphics2D chartingWindowGraphics2D = chartingWindowImage.createGraphics();								int chartingX = objectRectangles.elementAt(0).x + objectRectangles.elementAt(1).width;				int modifiedWindowWidth = 7*Device.device.workspace.chartingWindow.getWidth()/2;				int modifiedWindowHeight = 7*Device.device.workspace.chartingWindow.getHeight()/2;								Device.device.workspace.chartingWindow.paint(chartingWindowGraphics2D.create(0, 0, modifiedWindowWidth, modifiedWindowHeight));				leftImageIcon = new ImageIcon(chartingWindowImage.getScaledInstance(modifiedWindowWidth, modifiedWindowHeight, Image.SCALE_SMOOTH));				leftImageJLabel.setIcon(leftImageIcon);								leftImageJLabel.setBounds(objectRectangles.elementAt(0).x - modifiedWindowWidth, objectRectangles.elementAt(0).y, modifiedWindowWidth, modifiedWindowHeight);								add(leftImageJLabel);								Device.device.workspace.decisionSupportJButton.doClick();				Device.device.workspace.decisionSupportWindow.treatmentAnalysisJButton.doClick();				Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyJToggleButton.doClick();				Device.device.workspace.decisionSupportWindow.lifeExpectancyJToggleButton.doClick();				Device.device.workspace.decisionSupportWindow.includeAverageIncreasePerYearJToggleButton.doClick();				Device.device.workspace.decisionSupportWindow.setMaximum(true);								((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(6)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(7)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(9)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(10)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(12)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(13)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(15)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(16)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(18)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(19)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(21)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(22)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(24)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(25)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(27)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(28)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(30)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(31)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(33)).setText(".9");				((JTextField)Device.device.workspace.decisionSupportWindow.optimizedLifeExpectancyTextFieldsJPanel.getComponent(34)).setText(".9");								Device.device.workspace.decisionSupportWindow.factorReductionOfMortalitiesWithTalkback();								Device.device.workspace.decisionSupportWindow.paintImmediately(0, 0, Device.device.workspace.decisionSupportWindow.getWidth(), Device.device.workspace.decisionSupportWindow.getHeight());								JLabel rightImageJLabel = new JLabel();				ImageIcon rightImageIcon = null;								BufferedImage decisionSupportWindowImage = new BufferedImage(Device.device.workspace.decisionSupportWindow.getWidth(), Device.device.workspace.decisionSupportWindow.getHeight(), BufferedImage.TYPE_INT_RGB);				Graphics2D decisionSupportWindowGraphics2D = decisionSupportWindowImage.createGraphics();								Device.device.workspace.decisionSupportWindow.paint(decisionSupportWindowGraphics2D.create(0, 0, Device.device.workspace.decisionSupportWindow.getWidth(), Device.device.workspace.decisionSupportWindow.getHeight()));				rightImageIcon = new ImageIcon(decisionSupportWindowImage.getScaledInstance(modifiedWindowWidth, 7*Device.device.workspace.decisionSupportWindow.getHeight()/2, Image.SCALE_SMOOTH));				rightImageJLabel.setIcon(rightImageIcon);								modifiedWindowWidth = 7*Device.device.workspace.decisionSupportWindow.getWidth()/2;				modifiedWindowHeight = 7*Device.device.workspace.decisionSupportWindow.getHeight()/2;								rightImageJLabel.setBounds(objectRectangles.elementAt(1).x + objectRectangles.elementAt(1).width, objectRectangles.elementAt(1).y, modifiedWindowWidth, modifiedWindowHeight);								add(rightImageJLabel);								Device.device.workspace.systemJButton.doClick();			} catch (Exception e1) {				e1.printStackTrace();			}						setPreferredSize(new Dimension((int) (pZoom * 23500), (int) (pZoom * 36766)));			setSize(new Dimension((int) (pZoom * 23500), (int) (pZoom * 36766)));		}		public void paintComponent(Graphics can) {			super.paintComponent(can);			((Graphics2D) can).scale(pZoom, pZoom);			fileInd = 0;			while (fileInd < fileNames.length) {				try {					bufferedReader = new BufferedReader(new FileReader(Device.binDir + "UMLClassFiles/" + fileNames[fileInd].substring(0, fileNames[fileInd].length() - 5)));					lineString = bufferedReader.readLine();										lineInd = 0;										while (null == lineString || !lineString.equals("// EOF")) {						if (lineInd < 2) {							can.setFont(new Font(Font.MONOSPACED, Font.BOLD, 128));							// constant 2 pushes lines 2px to right of border, constant 128 is to fit the header font of 128							can.drawString(lineString, classRectangles.elementAt(fileInd).x + 2, classRectangles.elementAt(fileInd).y + (lineInd * lineHeight) + 128);						} else {							can.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));							// constant 2 pushes lines 2px to right of border, constant 152 fits the header font of 128 plus it's underline							if (lineString.length() > maxLineStringLength) {								can.drawString(lineString.substring(0, maxLineStringLength), classRectangles.elementAt(fileInd).x + 2, classRectangles.elementAt(fileInd).y + (lineInd * lineHeight) + 152);							} else {								can.drawString(lineString, classRectangles.elementAt(fileInd).x + 2, classRectangles.elementAt(fileInd).y + (lineInd * lineHeight) + 152);							}						}						lineString = bufferedReader.readLine();						lineInd++;					}										// rectangle heights: line's y + drawString's height + 4 for cliffs (such as 'p', 'q', 'g', and 'J'):					classRectangles.elementAt(fileInd).height = (((lineInd - 1) * lineHeight) + 152 + 4);					// setting rectangles' y values; fileNamesInd == 0 (Main) is only class's y initially meaningfully set					// Device.java, Workspace.java					if (fileInd == 1 || fileInd == 2) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(fileInd - 1).y + classRectangles.elementAt(fileInd - 1).height + lengthBetweenStackedClasses;						// Access.java					} else if (fileInd == 3) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(fileInd - 1).y + classRectangles.elementAt(fileInd - 1).height + 3 * lengthBetweenStackedClasses;						// SystemWindow.java, ChartingWindow.java, MessagingWindow.java, DecisionSupportWindow.java, practiceWindow.java					} else if (fileInd != 0 && fileInd < 9) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(fileInd - 1).y;						// CostAnalysisGraph.java					} else if (fileInd == 9) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(fileInd - 1).y + lengthBetweenStackedClasses;						// EffectCurveGraphPanel.java, LifeExpectancy1Panels.java, LifeExpectancy2Panels.java, MolecularNetworksPanel.java, MolecularAssembler.java					} else if (fileInd > 9 && fileInd < 15) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(fileInd - 1).y + classRectangles.elementAt(fileInd - 1).height + lengthBetweenStackedClasses;						// Io.java					} else if (fileInd == 15) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(7).y + classRectangles.elementAt(7).height + 2 * lengthBetweenStackedClasses;						// NotePad.java					} else if (fileInd == 16) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(5).y + classRectangles.elementAt(5).height + lengthBetweenStackedClasses;						// AdministratorData.java					} else if (fileInd == 17) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(15).y - classRectangles.elementAt(17).height - lengthBetweenStackedClasses + 100;						// PatientData.java					} else if (fileInd == 18) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(17).y - classRectangles.elementAt(fileInd).height - lengthBetweenStackedClasses / 2;						// Userdata.java					} else if (fileInd == 19) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(18).y - classRectangles.elementAt(fileInd).height - lengthBetweenStackedClasses / 2;						// Window.java					} else if (fileInd == 20) {						classRectangles.elementAt(fileInd).y = classRectangles.elementAt(19).y - classRectangles.elementAt(fileInd).height - 2 * lengthBetweenStackedClasses;					}					can.drawRect(classRectangles.elementAt(fileInd).x, classRectangles.elementAt(fileInd).y, classRectangles.elementAt(fileInd).width, classRectangles.elementAt(fileInd).height);					bufferedReader.close();				} catch (Exception e) {					e.printStackTrace();				}				fileInd++;			}			// line from Main to home page			can.drawLine(classRectangles.elementAt(0).x + width / 2, classRectangles.elementAt(0).y, objectRectangles.elementAt(0).x + width / 2, classRectangles.elementAt(0).y - disty);			// line from Main to repository			can.drawLine(classRectangles.elementAt(0).x + width / 2, classRectangles.elementAt(0).y, objectRectangles.elementAt(1).x + width / 2, classRectangles.elementAt(0).y - disty);						//line from repository to user guide node 1			can.drawLine(objectRectangles.elementAt(1).x + width / 2, objectRectangles.elementAt(1).y, objectRectangles.elementAt(1).x + width / 2 - 4 * distx, objectRectangles.elementAt(1).y - 4 * disty);			// line from vertice to user guide node 2			can.drawLine(node2x, objectRectangles.elementAt(0).y - objectRectangles.elementAt(0).height - disty, node2x, node2y);			// line from home page to user guide node 3			can.drawLine(objectRectangles.elementAt(0).x + width / 2, objectRectangles.elementAt(0).y, objectRectangles.elementAt(0).x + width / 2 + 5 * distx, objectRectangles.elementAt(0).y - 5 * disty);						//left branch			can.drawLine(node1x, node1y, branch1AndNode.elementAt(0).x, branch1AndNode.elementAt(0).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(1).x, branch1AndNode.elementAt(1).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(2).x, branch1AndNode.elementAt(2).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(3).x, branch1AndNode.elementAt(3).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(4).x, branch1AndNode.elementAt(4).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(5).x, branch1AndNode.elementAt(5).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(6).x, branch1AndNode.elementAt(6).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(7).x, branch1AndNode.elementAt(7).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(8).x, branch1AndNode.elementAt(8).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(9).x, branch1AndNode.elementAt(9).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(10).x, branch1AndNode.elementAt(10).y);			can.drawLine(node1x, node1y, branch1AndNode.elementAt(11).x, branch1AndNode.elementAt(11).y);						//center branch			can.drawLine(node2x, node2y, branch2AndNode.elementAt(0).x, branch2AndNode.elementAt(0).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(1).x, branch2AndNode.elementAt(1).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(2).x, branch2AndNode.elementAt(2).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(3).x, branch2AndNode.elementAt(3).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(4).x, branch2AndNode.elementAt(4).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(5).x, branch2AndNode.elementAt(5).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(6).x, branch2AndNode.elementAt(6).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y);			can.drawLine(node2x, node2y, branch2AndNode.elementAt(8).x, branch2AndNode.elementAt(8).y);						//system branches			can.drawLine(branch2AndNode.elementAt(4).x, branch2AndNode.elementAt(4).y, systemNodes.elementAt(0).x, systemNodes.elementAt(0).y);			can.drawLine(branch2AndNode.elementAt(4).x, branch2AndNode.elementAt(4).y, systemNodes.elementAt(1).x, systemNodes.elementAt(1).y);			can.drawLine(branch2AndNode.elementAt(4).x, branch2AndNode.elementAt(4).y, systemNodes.elementAt(2).x, systemNodes.elementAt(2).y);			can.drawLine(branch2AndNode.elementAt(4).x, branch2AndNode.elementAt(4).y, systemNodes.elementAt(3).x, systemNodes.elementAt(3).y);					  	//charting branches			can.drawLine(branch2AndNode.elementAt(5).x, branch2AndNode.elementAt(5).y, chartingNodes.elementAt(0).x, chartingNodes.elementAt(0).y);            can.drawLine(branch2AndNode.elementAt(5).x, branch2AndNode.elementAt(5).y, chartingNodes.elementAt(1).x, chartingNodes.elementAt(1).y);						//messaging branches	  		can.drawLine(branch2AndNode.elementAt(6).x, branch2AndNode.elementAt(6).y, messagingNodes.elementAt(0).x, messagingNodes.elementAt(0).y);            can.drawLine(branch2AndNode.elementAt(6).x, branch2AndNode.elementAt(6).y, messagingNodes.elementAt(1).x, messagingNodes.elementAt(1).y);			can.drawLine(branch2AndNode.elementAt(6).x, branch2AndNode.elementAt(6).y, messagingNodes.elementAt(2).x, messagingNodes.elementAt(2).y);			can.drawLine(branch2AndNode.elementAt(6).x, branch2AndNode.elementAt(6).y, messagingNodes.elementAt(3).x, messagingNodes.elementAt(3).y);					  	//decision support branches	  		can.drawLine(branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y, decisionSupportNodes.elementAt(0).x, decisionSupportNodes.elementAt(0).y);            can.drawLine(branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y, decisionSupportNodes.elementAt(1).x, decisionSupportNodes.elementAt(1).y);			can.drawLine(branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y, decisionSupportNodes.elementAt(2).x, decisionSupportNodes.elementAt(2).y);			can.drawLine(branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y, decisionSupportNodes.elementAt(3).x, decisionSupportNodes.elementAt(3).y);			can.drawLine(branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y, decisionSupportNodes.elementAt(4).x, decisionSupportNodes.elementAt(4).y);			can.drawLine(branch2AndNode.elementAt(7).x, branch2AndNode.elementAt(7).y, decisionSupportNodes.elementAt(5).x, decisionSupportNodes.elementAt(5).y);					  	//practice branches	  		can.drawLine(branch2AndNode.elementAt(8).x, branch2AndNode.elementAt(8).y, practiceNodes.elementAt(0).x, practiceNodes.elementAt(0).y);            can.drawLine(branch2AndNode.elementAt(8).x, branch2AndNode.elementAt(8).y, practiceNodes.elementAt(1).x, practiceNodes.elementAt(1).y);			can.drawLine(branch2AndNode.elementAt(8).x, branch2AndNode.elementAt(8).y, practiceNodes.elementAt(2).x, practiceNodes.elementAt(2).y);			can.drawLine(branch2AndNode.elementAt(8).x, branch2AndNode.elementAt(8).y, practiceNodes.elementAt(3).x, practiceNodes.elementAt(3).y);						//left branch			can.drawLine(node3x, node3y, branch3AndNode.elementAt(0).x, branch3AndNode.elementAt(0).y);			can.drawLine(node3x, node3y, branch3AndNode.elementAt(1).x, branch3AndNode.elementAt(1).y);			can.drawLine(node3x, node3y, branch3AndNode.elementAt(2).x, branch3AndNode.elementAt(2).y);			can.drawLine(node3x, node3y, branch3AndNode.elementAt(3).x, branch3AndNode.elementAt(3).y);			can.drawLine(node3x, node3y, branch3AndNode.elementAt(4).x, branch3AndNode.elementAt(4).y);						// line from home page to user guide			// can.drawLine(objectRectangles.elementAt(0).x + width / 2, objectRectangles.elementAt(0).y, objectRectangles.elementAt(2).x + width / 2, objectRectangles.elementAt(2).y + objectRectangles.elementAt(2).height);			// line from repository to user guide			// can.drawLine(objectRectangles.elementAt(1).x + width / 2, objectRectangles.elementAt(1).y, objectRectangles.elementAt(2).x + width / 2, objectRectangles.elementAt(2).y + objectRectangles.elementAt(2).height);			// line from Workspace to Device			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y, classRectangles.elementAt(1).x + width / 2, classRectangles.elementAt(1).y + classRectangles.elementAt(1).height);			// line from Device to Main			can.drawLine(classRectangles.elementAt(1).x + width / 2, classRectangles.elementAt(1).y, classRectangles.elementAt(0).x + width / 2, classRectangles.elementAt(0).y + classRectangles.elementAt(0).height);			// line from Workspace to Access			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y + classRectangles.elementAt(2).height, classRectangles.elementAt(3).x + width / 2, classRectangles.elementAt(3).y);			// line from Workspace to SystemWindow			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y + classRectangles.elementAt(2).height, classRectangles.elementAt(4).x + width / 2, classRectangles.elementAt(4).y);			// line from Workspace to ChartingWindow			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y + classRectangles.elementAt(2).height, classRectangles.elementAt(5).x + width / 2, classRectangles.elementAt(5).y);			// line from Workspace to MessagingWindow			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y + classRectangles.elementAt(2).height, classRectangles.elementAt(6).x + width / 2, classRectangles.elementAt(6).y);			// line from Workspace to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y + classRectangles.elementAt(2).height, classRectangles.elementAt(7).x + width / 2, classRectangles.elementAt(7).y);			// line from Workspace to PracticeWindow			can.drawLine(classRectangles.elementAt(2).x + width / 2, classRectangles.elementAt(2).y + classRectangles.elementAt(2).height, classRectangles.elementAt(8).x + width / 2, classRectangles.elementAt(8).y);			// line from CostAnalysisGraph to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(9).x + width, classRectangles.elementAt(9).y + classRectangles.elementAt(9).height / 2, classRectangles.elementAt(9).x + width + lengthBetweenStackedClasses, classRectangles.elementAt(9).y + classRectangles.elementAt(9).height / 2);			// line from EffectCurveGraphPanel to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(10).x + width, classRectangles.elementAt(10).y + classRectangles.elementAt(10).height / 2, classRectangles.elementAt(10).x + width + lengthBetweenStackedClasses, classRectangles.elementAt(10).y + classRectangles.elementAt(10).height / 2);			// line from LifeExpectancy1Panels to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(11).x + width, classRectangles.elementAt(11).y + classRectangles.elementAt(11).height / 2, classRectangles.elementAt(11).x + width + lengthBetweenStackedClasses, classRectangles.elementAt(11).y + classRectangles.elementAt(11).height / 2);			// line from LifeExpectancy2Panels to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(12).x + width, classRectangles.elementAt(12).y + classRectangles.elementAt(12).height / 2, classRectangles.elementAt(12).x + width + lengthBetweenStackedClasses, classRectangles.elementAt(12).y + classRectangles.elementAt(12).height / 2);			// line from MolecularNetworksPanel to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(13).x + width, classRectangles.elementAt(13).y + classRectangles.elementAt(13).height / 2, classRectangles.elementAt(13).x + width + lengthBetweenStackedClasses, classRectangles.elementAt(13).y + classRectangles.elementAt(13).height / 2);			// line from MolecularAssembler to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(14).x + width, classRectangles.elementAt(14).y + classRectangles.elementAt(14).height / 2, classRectangles.elementAt(14).x + width + lengthBetweenStackedClasses, classRectangles.elementAt(14).y + classRectangles.elementAt(14).height / 2);			// line from NotePad to ChartingWindow			can.drawLine(classRectangles.elementAt(16).x + width / 4, classRectangles.elementAt(16).y, classRectangles.elementAt(16).x + width / 4, classRectangles.elementAt(16).y - lengthBetweenStackedClasses);			// polyline from Io to SystemWindow			// x - 200, y + 100			can.drawLine(classRectangles.elementAt(15).x + width / 2 - 200, classRectangles.elementAt(15).y, classRectangles.elementAt(15).x + width / 2 - 200, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100);			can.drawLine(classRectangles.elementAt(15).x + width / 2 - 200, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100, classRectangles.elementAt(4).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100);			can.drawLine(classRectangles.elementAt(4).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100, classRectangles.elementAt(4).x + width / 2, classRectangles.elementAt(4).y + classRectangles.elementAt(4).height);			// polyline from Io to ChartingWindow			can.drawLine(classRectangles.elementAt(15).x + width / 2 - 100, classRectangles.elementAt(15).y, classRectangles.elementAt(15).x + width / 2 - 100, classRectangles.elementAt(15).y - lengthBetweenStackedClasses);			can.drawLine(classRectangles.elementAt(15).x + width / 2 - 100, classRectangles.elementAt(15).y - lengthBetweenStackedClasses, classRectangles.elementAt(5).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses);			can.drawLine(classRectangles.elementAt(5).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses, classRectangles.elementAt(5).x + width / 2, classRectangles.elementAt(5).y + classRectangles.elementAt(5).height);			// polyline from Io to MessagingWindow			can.drawLine(classRectangles.elementAt(15).x + width / 2, classRectangles.elementAt(15).y, classRectangles.elementAt(15).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses);			can.drawLine(classRectangles.elementAt(15).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses, classRectangles.elementAt(6).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses);			can.drawLine(classRectangles.elementAt(6).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses, classRectangles.elementAt(6).x + width / 2, classRectangles.elementAt(6).y + classRectangles.elementAt(6).height);			// polyline from Io to DecisionSupportWindow			can.drawLine(classRectangles.elementAt(15).x + width / 2 + 100, classRectangles.elementAt(15).y, classRectangles.elementAt(15).x + width / 2 + 100, classRectangles.elementAt(15).y - lengthBetweenStackedClasses);			can.drawLine(classRectangles.elementAt(15).x + width / 2 + 100, classRectangles.elementAt(15).y - lengthBetweenStackedClasses, classRectangles.elementAt(7).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses);			can.drawLine(classRectangles.elementAt(7).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses, classRectangles.elementAt(7).x + width / 2, classRectangles.elementAt(7).y + classRectangles.elementAt(7).height);			// polyline from Io to PracticeWindow			can.drawLine(classRectangles.elementAt(15).x + width / 2 + 200, classRectangles.elementAt(15).y, classRectangles.elementAt(15).x + width / 2 + 200, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100);			can.drawLine(classRectangles.elementAt(15).x + width / 2 + 200, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100, classRectangles.elementAt(8).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100);			can.drawLine(classRectangles.elementAt(8).x + width / 2, classRectangles.elementAt(15).y - lengthBetweenStackedClasses + 100, classRectangles.elementAt(8).x + width / 2, classRectangles.elementAt(8).y + classRectangles.elementAt(8).height);			can.setFont(new Font(Font.MONOSPACED, Font.BOLD, 128));			// home page			// contains application user support for			can.drawRect(objectRectangles.elementAt(0).x, objectRectangles.elementAt(0).y, objectRectangles.elementAt(0).width, objectRectangles.elementAt(0).height);			can.drawString("oochis.org", objectRectangles.elementAt(0).x + 500, objectRectangles.elementAt(0).y + 130);			// repository			// contains community project support for			can.drawRect(objectRectangles.elementAt(1).x, objectRectangles.elementAt(1).y, objectRectangles.elementAt(1).width, objectRectangles.elementAt(1).height);			can.drawString("Repository", objectRectangles.elementAt(1).x + 460, objectRectangles.elementAt(1).y + 130);			// user guide			// contains user guide for			// can.drawRect(objectRectangles.elementAt(2).x, objectRectangles.elementAt(2).y, objectRectangles.elementAt(2).width, objectRectangles.elementAt(2).height);			// can.drawString("User guide", objectRectangles.elementAt(2).x + 460, objectRectangles.elementAt(2).y + 130);			// OOCHIS crystal:			can.setFont(new Font(Font.MONOSPACED, Font.BOLD, 24));			can.drawString("           Object", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 - 144);			can.drawString("           |P", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 - 96);			can.drawString("           Oriented", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 - 48);			can.drawString("          oCommunity", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 - 0);			can.drawString("Electronic Health Record (EHR) and Personal Health Record (PHR) programs.", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 + 48);			can.drawString("           Information", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 + 96);			can.drawString("           System", classRectangles.elementAt(0).x + 150, classRectangles.elementAt(0).y - 800 + classRectangles.elementAt(0).height / 2 + 144);		}			}	public static void println(String s) {		System.out.println(s);	}	@Override	public void mousePressed(MouseEvent m) {		super.mousePressed(m);	}	@Override	public void mouseReleased(MouseEvent m) {		super.mouseReleased(m);	}	@Override	public void mouseEntered(MouseEvent m) {	}	@Override	public void mouseExited(MouseEvent m) {	}	public void mouseClicked(MouseEvent m) {		if (((Component) (m.getSource())).getName().equals("modifyUserEntryField")) {			// If modifyEntryFields are set to inactive color,			if (modifyUserPanelEnterUserIDEntryJTextField.getBackground().equals(modifyFieldInactiveColor)) {				foundUserIndexesVector = new Vector<Vector<Vector<String>>>();				foundUserIndexesSizeJLabel.setText("");				modifyUserPanelEnterUserIDEntryJTextField.setText("");				modifyUserPanelEnterPasswordEntryJPasswordField.setText("");				modifyUserPanelReEnterPasswordEntryJPasswordField.setText("");				modifyUserPanelFacilityEntryJTextField.setText("");				modifyUserPanelPrefixEntryJTextField.setText("");				modifyUserPanelFirstNameEntryJTextField.setText("");				modifyUserPanelMiddleNameEntryJTextField.setText("");				modifyUserPanelLastNameEntryJTextField.setText("");				modifyUserPanelSuffixEntryJTextField.setText("");				modifyUserPanelDegreeEntryJTextField.setText("");				modifyUserPanelEnterUserIDEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);				modifyUserPanelReEnterPasswordEntryJPasswordField.setBackground(Color.WHITE);				modifyUserPanelFacilityEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelPrefixEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelFirstNameEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelMiddleNameEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelLastNameEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelSuffixEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelDegreeEntryJTextField.setBackground(Color.WHITE);				modifyUserPanelEnterUserIDFilledJTextField.setText("");				modifyUserPanelEnterPasswordFilledJPasswordField.setText("");				modifyUserPanelReEnterPasswordFilledJPasswordField.setText("");				modifyUserPanelFacilityFilledJTextField.setText("");				modifyUserPanelPrefixFilledJTextField.setText("");				modifyUserPanelFirstNameFilledJTextField.setText("");				modifyUserPanelMiddleNameFilledJTextField.setText("");				modifyUserPanelLastNameFilledJTextField.setText("");				modifyUserPanelSuffixFilledJTextField.setText("");				modifyUserPanelDegreeFilledJTextField.setText("");				modifyUserPanelEnterUserIDFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelEnterPasswordFilledJPasswordField.setBackground(modifyFieldInactiveColor);				modifyUserPanelReEnterPasswordFilledJPasswordField.setBackground(modifyFieldInactiveColor);				modifyUserPanelFacilityFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelPrefixFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelFirstNameFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelMiddleNameFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelLastNameFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelSuffixFilledJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelDegreeFilledJTextField.setBackground(modifyFieldInactiveColor);			}		} else if (((Component) (m.getSource())).getName().equals("modifyUserFilledField")) {			// If modifyFilledFields are set to inactive color,			if (modifyUserPanelEnterUserIDFilledJTextField.getBackground().equals(modifyFieldInactiveColor) && !foundUserIndexesVector.isEmpty()) {				modifyUserPanelEnterUserIDEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelEnterPasswordEntryJPasswordField.setBackground(modifyFieldInactiveColor);				modifyUserPanelReEnterPasswordEntryJPasswordField.setBackground(modifyFieldInactiveColor);				modifyUserPanelFacilityEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelPrefixEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelFirstNameEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelMiddleNameEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelLastNameEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelSuffixEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelDegreeEntryJTextField.setBackground(modifyFieldInactiveColor);				modifyUserPanelEnterUserIDFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelEnterPasswordFilledJPasswordField.setBackground(Color.WHITE);				modifyUserPanelReEnterPasswordFilledJPasswordField.setBackground(Color.WHITE);				modifyUserPanelFacilityFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelPrefixFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelFirstNameFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelMiddleNameFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelLastNameFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelSuffixFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelDegreeFilledJTextField.setBackground(Color.WHITE);				modifyUserPanelEnterUserIDFilledJTextField.setText(modifyUserPanelEnterUserIDEntryJTextField.getText());				modifyUserPanelEnterPasswordFilledJPasswordField.setText(modifyUserPanelEnterPasswordEntryJPasswordField.getPassword().toString());				modifyUserPanelReEnterPasswordFilledJPasswordField.setText(modifyUserPanelReEnterPasswordEntryJPasswordField.getPassword().toString());				modifyUserPanelFacilityFilledJTextField.setText(modifyUserPanelFacilityEntryJTextField.getText());				modifyUserPanelPrefixFilledJTextField.setText(modifyUserPanelPrefixEntryJTextField.getText());				modifyUserPanelFirstNameFilledJTextField.setText(modifyUserPanelFirstNameEntryJTextField.getText());				modifyUserPanelMiddleNameFilledJTextField.setText(modifyUserPanelMiddleNameEntryJTextField.getText());				modifyUserPanelLastNameFilledJTextField.setText(modifyUserPanelLastNameEntryJTextField.getText());				modifyUserPanelSuffixFilledJTextField.setText(modifyUserPanelSuffixEntryJTextField.getText());				modifyUserPanelDegreeFilledJTextField.setText(modifyUserPanelDegreeEntryJTextField.getText());			}		} else if (((Component) (m.getSource())).getName().startsWith("userIndexUserID|")) {			// if mouse is right-clicked			if (m.getButton() == 1) {				deleteUserPopupMenuJLabel.setText("Are you sure you want to delete the user, \"" + ((Component) (m.getSource())).getName().substring(17) + "?\"");				deleteUserJPopupMenu.show(((Component) (m.getSource())), 0, ((Component) (m.getSource())).getHeight());			}		}		if (((Component) (m.getSource())).getName().startsWith("codeElementIdentifierJLabel")) {			templateMedicalCodeJTextField.setText(m.getComponent().getName().substring(28));			templateAtomicMedicalCodeFieldsJPopupMenu.setVisible(false);			actionForTemplateAtomicMedicalCodeJTextField();		} else if (m.getComponent().getName().equals("templatePageClickableCoverJPanel")) {			setCursorInTemplatePage(new Point(m.getX(), m.getY()));		}		super.mouseClicked(m);	}}// EOF