/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.Color;import java.io.File;import java.util.Date;import java.util.Vector;import javax.swing.ImageIcon;import org.w3c.dom.Document;public class UserData implements Cloneable {	Vector<Object[]> userAppointments = new Vector<Object[]>();	int t = 0;	Object[] appointmentData = new Object[6];	Vector userDataStruct = new Vector(10);	Vector userChartsTreatments = new Vector<Vector>(20, 20);	Vector userChartsHistory = new Vector(20, 20);	Vector userChartsInsurance = new Vector(20, 20);	Vector userPatientIndex = new Vector(20, 20);	Vector<String> recentChartID = new Vector<String>();	Vector<Vector<String>> userIndex = new Vector<Vector<String>>();	String[] userSystemInformation = new String[21];	Vector userLogoff = new Vector(20, 20);	long userLoginReattemptTimeOut = 1000;	int userLoginAttemptsAllowed = 12;	Vector userCharts = new Vector(20, 20);	Vector userChartsDemographics = new Vector(20, 20);	Vector userChartsDemographicsPageInfo = new Vector(20, 10);	Vector userDecisionSupport = new Vector(20, 20);	Vector userDecisionSupportBrowser = new Vector(20, 20);	Vector userDecisionSupportDataQuery = new Vector(20, 20);	Vector userDecisionSupportStatistics = new Vector(20, 20);	Vector userDecisionSupportRules = new Vector(20, 20);	Vector userDecisionSupportTram = new Vector(20, 20);	Vector userSystem = new Vector(20, 20);	ImageIcon userWallpaper = null;	String userWallpaperDirectory = null;	String userWallpaperScaleType = "zoom";	int userNumAuthorizationOptions = 11;	Color userColor = new Color(128, 128, 128);	String userTheme = "SLATE";	String userFontChoice = "Electron";	int userFontSize = 17;	int userTransparency = 128;	int userNumTotalCharts = 0;	Vector userMessaging = new Vector(20, 20);	Vector userPracticeAssistant = new Vector(20, 20);	Vector userPracticeAssistantAppointments = new Vector<Object[]>();	Vector userMessages = new Vector(400, 50);	Vector userMessageVector = new Vector(3);	Date userTimeStamp = new Date();	String[] userMessageStringArray = new String[10];	File[] userAttachments = new File[200];	Vector userContacts = new Vector(100, 20);	Vector<Document> userNoteDocument = new Vector<Document>();	int numAllTimeContactsAdded = 0;	boolean addContactAnswer = true;	boolean addMessageAnswer = true;	Vector userContactVector = new Vector(2);	String[] userContactInformation = new String[20];	UserData() {	}	public Vector createUserDataStruct() {		userLogoff.add(0, userLoginReattemptTimeOut);		userLogoff.add(1, userLoginAttemptsAllowed);		userSystem.add(0, userIndex);		userSystem.add(1, userWallpaperDirectory);		userSystem.add(2, userNumAuthorizationOptions);		userSystem.add(3, null);		userSystem.add(4, null);		userSystem.add(5, null);		userSystem.add(6, null);		userSystem.add(7, userSystemInformation);		userSystem.add(8, userColor);		userSystem.add(9, userTheme);		userSystem.add(10, userNumTotalCharts);		userSystem.add(11, userWallpaper);		userSystem.add(12, userWallpaperScaleType);		userSystem.add(13, userFontChoice);		userSystem.add(14, userFontSize);		userSystem.add(15, userTransparency);		userMessaging.add(0, userContacts);		userMessaging.add(1, userMessages);		userPatientIndex.add("nulled");		userCharts.add(0, userPatientIndex);		userCharts.add(1, userChartsDemographics);		userCharts.add(2, userChartsTreatments);		userCharts.add(3, userChartsHistory);		userCharts.add(4, userChartsInsurance);		userCharts.add(5, recentChartID);		userDecisionSupport.add(0, userDecisionSupportBrowser);		userDecisionSupport.add(1, userDecisionSupportDataQuery);		userDecisionSupport.add(2, userDecisionSupportStatistics);		userDecisionSupport.add(3, null);		userDecisionSupport.add(4, userDecisionSupportTram);		userPracticeAssistant.add(0, userPracticeAssistantAppointments);		userDataStruct.add(0, userLogoff);		userDataStruct.add(1, userCharts);		userDataStruct.add(2, userDecisionSupport);		userDataStruct.add(3, userSystem);		userDataStruct.add(4, userMessaging);		userDataStruct.add(5, userPracticeAssistant);		userDataStruct.add(6, userNoteDocument);		fillDefaultUserDataAndExampleMessagesAndContacts();		return userDataStruct;	}	public void fillDefaultUserDataAndExampleMessagesAndContacts() {		userContactVector.add(3);		userContactVector.add(userContactInformation);		userContacts.add(0, (Vector) userContactVector.clone());		userContactVector.clear();		userContactInformation[0] = null;		userContactInformation[1] = "Dr.";		userContactInformation[2] = "Crawford";		userContactInformation[3] = "Willie";		userContactInformation[4] = "C";		userContactInformation[5] = null;		userContactInformation[6] = "williemail@poobahdoo.net";		userContactInformation[7] = "0123456789";		userContactInformation[8] = "puppydog";		userContactInformation[9] = "321 654 9877";		userContactInformation[10] = "cell";		userContactInformation[11] = "012 923 9401";		userContactInformation[12] = "doghouse phone";		userContactInformation[13] = null;		userContactInformation[14] = null;		userContactInformation[15] = "work email at the doghouse clinic";		userContactInformation[16] = "doofydog@dogDoofy.org";		userContactInformation[17] = null;		userContactInformation[18] = "Blah";		userContactVector.add(0);		userContactVector.add(userContactInformation);		userContacts.add(1, (Vector) userContactVector.clone());		userContactVector.clear();		nullifyStringArray(userContactInformation);		userContactInformation[0] = null;		userContactInformation[1] = "Ms.";		userContactInformation[2] = "Fruitcake";		userContactInformation[3] = "Samantha";		userContactInformation[4] = null;		userContactInformation[5] = null;		userContactInformation[6] = "fruit@cake.com";		userContactInformation[7] = "444 555 6666";		userContactInformation[8] = "Obstetrician";		userContactInformation[9] = "999 888 7777";		userContactInformation[10] = "work";		userContactInformation[11] = "546 667 4444";		userContactInformation[12] = "peanut phone";		userContactInformation[13] = null;		userContactInformation[14] = null;		userContactInformation[15] = null;		userContactInformation[16] = null;		userContactInformation[17] = null;		userContactInformation[18] = "Blah-bloo-blough";		userContactVector.add(0);		userContactVector.add(userContactInformation);		userContacts.add(2, (Vector) userContactVector.clone());		userContactVector.clear();		userContactInformation[2] = "Fred3";		nullifyStringArray(userContactInformation);		userContactVector.add(0);		userContactVector.add(userContactInformation);		userContacts.add(3, (Vector) userContactVector.clone());		userContactVector.clear();		nullifyStringArray(userContactInformation);		userMessageVector.add(userTimeStamp);		userMessageVector.add(userMessageStringArray);		userMessageVector.add(userAttachments);		userMessages.add(0, (Vector) userMessageVector.clone());		userMessageVector.clear();		userMessageStringArray[0] = "RECIEVED";		userMessageStringArray[1] = "sally138902@yahoo.com";		userMessageStringArray[2] = "marvin138902@yahoo.com";		userMessageStringArray[3] = "regarding pt. Blowfish";		userMessageStringArray[4] = "message body blah blah blah";		userMessageStringArray[5] = "MIME stuff or whole message package";		userMessageStringArray[6] = "dunno";		userAttachments[0] = null;		userMessageVector.add(userTimeStamp);		userMessageVector.add(userMessageStringArray);		userMessageVector.add(userAttachments);		userMessages.add(1, (Vector) userMessageVector.clone());		userMessageVector.clear();		nullifyFileArray(userAttachments);		userMessageStringArray[0] = "SENT";		userMessageStringArray[1] = "hamtoastasdf02@yahoo.com";		userMessageStringArray[2] = "monkey902@yahoo.com";		userMessageStringArray[3] = "eat me";		userMessageStringArray[4] = "foo foo";		userMessageStringArray[5] = "MIME stuff or whole message package";		userMessageStringArray[6] = "dunno";		userMessageVector.add(0, userTimeStamp);		userMessageVector.add(1, userMessageStringArray);		userMessageVector.add(2, userAttachments);		userMessages.add(2, (Vector) userMessageVector.clone());		userMessageVector.clear();	}	private void nullifyFileArray(File[] array) {		int ind = 0;		do {			array[ind] = null;			ind++;		} while (ind < array.length);	}	private void nullifyStringArray(String[] array) {		int ind = 0;		do {			array[ind] = null;			ind++;		} while (ind < array.length);	}	public boolean addContact(String[] pContactInformation) {		int newContactKey = numAllTimeContactsAdded + 1;		try {			userContactVector.add(newContactKey);			userContactVector.add(pContactInformation);			((Vector) (userContacts.elementAt(0))).add(userContactVector.clone());			userContactVector.clear();		} catch (Exception e) {			addContactAnswer = false;		}		if (addContactAnswer) {			numAllTimeContactsAdded++;		}		return addContactAnswer;	}	public boolean addMessage(String[] pMessageStringArray, File[] pAttachments) {		int messagesIndexToAdd = userMessages.size();		try {			userMessageVector.add(userTimeStamp);			userMessageVector.add(pMessageStringArray);			userMessageVector.add(pAttachments);			((Vector) (userMessages.elementAt(messagesIndexToAdd))).add(userMessageVector.clone());			userMessageVector.clear();		} catch (Exception e) {			addMessageAnswer = false;		}		return addMessageAnswer;	}}// EOF