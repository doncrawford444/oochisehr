/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.Color;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Image;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.File;import java.util.Date;import java.util.Vector;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JPasswordField;import javax.swing.JTextField;import javax.swing.border.Border;import javax.swing.border.CompoundBorder;import javax.swing.border.LineBorder;import javax.swing.border.MatteBorder;public class Access extends JPanel implements ActionListener, MouseListener {int accessWindowFontSize = 20;static String processedLoginAnswer;static Color disabledBorderColor = new Color(107, 107, 107, 128);public static int translucency;public static Color translucentColorTheme;public static int windowBorderWidth;public static Border disabledWindowBorder;public static Border windowBorder;static boolean exitOk = false;JLabel enterPasswordJLabel;JLabel enterUserIDJLabel;protected String licenseID = "vitality|";protected String licensePassword = "default";static String loggedOnUserID;public static boolean isRootAdministratorLoggedIn = false;public Vector<String> eventListener;public static boolean isUserLoggedIn = false;public static Vector patientDataStruct;public static Vector rootAdministrator = new Vector();public static Vector user;public static Vector individualUserData;public Vector contacts = new Vector(100, 20);public int contactKey;public String[] contactInformation = new String[20];public Vector messages = new Vector(400, 50);public long millis;public Date timeStamp = new Date();public String[] messageStringArray = new String[10];public File[] attachments = new File[100];public Vector userChartsData = new Vector(20, 20);public Image[] userPhoto;public Image userWallpaper = null;public Color userColor;public JPanel enterUserIDJTextFieldBorderJPanel = new JPanel(new GridBagLayout());public String userLastWallpaperDirectory = "nulled";public Vector contactVector = new Vector(2);public Vector messageVector = new Vector(3);public int loginAttemptsCount;public boolean loggedIn;public JTextField enterUserIDJTextField;public JPasswordField enterPasswordJPasswordField;public JPanel enterPasswordJPasswordFieldBorderJPanel = new JPanel(new GridBagLayout());public JPanel enterLogonButtonBorderJPanel = new JPanel(new GridBagLayout());public JPanel exitButtonBorderJPanel = new JPanel(new GridBagLayout());public JPanel logoffContentPanel = new JPanel(new GridBagLayout());JPanel oochisDecalJPanel = new JPanel(new GridBagLayout());JLabel oochisDecalICharacterJLabel = new JLabel("OochisÂ®");JLabel oochisDecalDirectCharactersJLabel = new JLabel("");JLabel oochisDecalEHRCharactersJLabel = new JLabel("EHR");JLabel frontSpacerTextJLabel = new JLabel("    ");JLabel copyrightJLabel = new JLabel("     ");JPanel enterUserIDJLabelJPanel = new JPanel(new GridBagLayout());JPanel enterPasswordJLabelJPanel = new JPanel(new GridBagLayout());JButton enterLogonJButton = new JButton("E n t e r");JButton exitJButton = new JButton("E x i t");GridBagConstraints logoffContentPanelConstraints = new GridBagConstraints();GridBagConstraints enterPasswordJPasswordFieldBorderJPanelConstraints = new GridBagConstraints();GridBagConstraints enterUserIDConstraints = new GridBagConstraints();GridBagConstraints enterLogonButtonBorderJPanelConstraints = new GridBagConstraints();GridBagConstraints exitButtonBorderJPanelConstraints = new GridBagConstraints();Access() {setLayout(new GridBagLayout());setSize(Device.screenSize);setOpaque(false);logoffContentPanel.setBackground(new Color(128, 128, 128, 128));logoffContentPanel.setPreferredSize(Device.screenSize);oochisDecalICharacterJLabel.setFont(new Font("Electron", Font.ITALIC + Font.BOLD, accessWindowFontSize));oochisDecalDirectCharactersJLabel.setFont(new Font("Electron", Font.ITALIC + Font.BOLD, accessWindowFontSize));oochisDecalEHRCharactersJLabel.setFont(new Font("Electron", Font.ITALIC + Font.BOLD, accessWindowFontSize));frontSpacerTextJLabel.setFont(new Font("Electron", Font.BOLD, accessWindowFontSize));copyrightJLabel.setFont(new Font("Electron", Font.BOLD, accessWindowFontSize));oochisDecalICharacterJLabel.setForeground(new Color(224, 224, 224));oochisDecalDirectCharactersJLabel.setForeground(new Color(64, 64, 64));oochisDecalEHRCharactersJLabel.setForeground(new Color(224, 224, 224));copyrightJLabel.setForeground(new Color(64, 64, 64));oochisDecalJPanel.add(frontSpacerTextJLabel);oochisDecalJPanel.add(oochisDecalICharacterJLabel);oochisDecalJPanel.add(oochisDecalDirectCharactersJLabel);oochisDecalJPanel.add(oochisDecalEHRCharactersJLabel);oochisDecalJPanel.add(copyrightJLabel);oochisDecalJPanel.setBorder(new MatteBorder(0, 0, 4, 0, new Color(64, 64, 64)));oochisDecalJPanel.setOpaque(false);logoffContentPanelConstraints.insets = new Insets(6, 0, 6, 0);enterUserIDJLabel = new JLabel("User name:");enterUserIDJLabel.setForeground(new Color(92, 92, 92));enterUserIDJLabel.setFont(new Font("Electron", Font.BOLD, 19));enterUserIDJLabel.setOpaque(false);enterUserIDJTextField = new JTextField(16);enterUserIDJTextField.setFont(new Font("Electron", Font.BOLD, 19));enterUserIDJTextField.setBorder(new LineBorder(new Color(192, 192, 192), 2));enterUserIDJTextField.addActionListener(this);enterUserIDJTextField.setActionCommand("enterUserIDJTextField");enterUserIDJTextFieldBorderJPanel.setBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 16)), new LineBorder(new Color(255, 255, 255, 32))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 48)), new LineBorder(new Color(255, 255, 255, 64)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 80)), new LineBorder(new Color(255, 255, 255, 96))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 112)), new LineBorder(new Color(255, 255, 255, 128))))), new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 144)), new LineBorder(new Color(255, 255, 255, 160))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 176)), new LineBorder(new Color(255, 255, 255, 192)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 208)), new LineBorder(new Color(255, 255, 255, 224))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 240)), new LineBorder(new Color(255, 255, 255, 255)))))));enterUserIDJTextFieldBorderJPanel.setOpaque(false);enterUserIDJLabelJPanel.setBackground(Color.WHITE);enterUserIDJLabelJPanel.setOpaque(true);enterUserIDJLabelJPanel.add(enterUserIDJLabel);enterUserIDConstraints.fill = GridBagConstraints.HORIZONTAL;enterUserIDConstraints.weightx = 1;enterUserIDJTextFieldBorderJPanel.add(enterUserIDJLabelJPanel, enterUserIDConstraints);enterUserIDConstraints.gridy = 1;enterUserIDJTextFieldBorderJPanel.add(enterUserIDJTextField, enterUserIDConstraints);logoffContentPanelConstraints.gridy = 0;logoffContentPanelConstraints.fill = GridBagConstraints.HORIZONTAL;logoffContentPanelConstraints.anchor = GridBagConstraints.CENTER;logoffContentPanel.add(enterUserIDJTextFieldBorderJPanel, logoffContentPanelConstraints);enterPasswordJLabel = new JLabel("Password:");enterPasswordJLabel.setForeground(new Color(92, 92, 92));enterPasswordJLabel.setFont(new Font("Electron", Font.BOLD, 19));enterPasswordJLabel.setOpaque(false);enterPasswordJPasswordField = new JPasswordField(16);enterPasswordJPasswordField.setFont(new Font("Electron", Font.BOLD, 19));enterPasswordJPasswordField.setBorder(new LineBorder(new Color(192, 192, 192), 2));enterPasswordJPasswordField.addActionListener(this);enterPasswordJPasswordField.setActionCommand("enterPasswordJPasswordField");enterPasswordJPasswordFieldBorderJPanel.setBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 16)), new LineBorder(new Color(255, 255, 255, 32))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 48)), new LineBorder(new Color(255, 255, 255, 64)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 80)), new LineBorder(new Color(255, 255, 255, 96))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 112)), new LineBorder(new Color(255, 255, 255, 128))))), new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 144)), new LineBorder(new Color(255, 255, 255, 160))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 176)), new LineBorder(new Color(255, 255, 255, 192)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 255, 255, 208)), new LineBorder(new Color(255, 255, 255, 224))), new CompoundBorder(new LineBorder(new Color(255, 255, 255, 240)), new LineBorder(new Color(255, 255, 255, 255)))))));enterPasswordJPasswordFieldBorderJPanel.setOpaque(false);enterPasswordJLabelJPanel.setBackground(Color.WHITE);enterPasswordJLabelJPanel.setOpaque(true);enterPasswordJLabelJPanel.add(enterPasswordJLabel);enterPasswordJPasswordFieldBorderJPanelConstraints.weightx = 1;enterPasswordJPasswordFieldBorderJPanelConstraints.fill = GridBagConstraints.HORIZONTAL;enterPasswordJPasswordFieldBorderJPanel.add(enterPasswordJLabelJPanel, enterPasswordJPasswordFieldBorderJPanelConstraints);enterPasswordJPasswordFieldBorderJPanelConstraints.gridy = 1;enterPasswordJPasswordFieldBorderJPanel.add(enterPasswordJPasswordField, enterPasswordJPasswordFieldBorderJPanelConstraints);logoffContentPanelConstraints.gridy = 1;logoffContentPanel.add(enterPasswordJPasswordFieldBorderJPanel, logoffContentPanelConstraints);logoffContentPanelConstraints.insets = new Insets(6, 0, 6, 0);enterLogonJButton.setMnemonic(KeyEvent.VK_ENTER);enterLogonJButton.setActionCommand("enterLogonJButton");enterLogonJButton.addActionListener(this);enterLogonJButton.setForeground(new Color(112, 112, 112));enterLogonJButton.setFont(new Font("Electron", Font.BOLD, 19));enterLogonJButton.setBorder(null);enterLogonJButton.setBackground(new Color(192, 255, 192));enterLogonButtonBorderJPanel.setBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(192, 255, 192, 32)), new LineBorder(new Color(192, 255, 192, 64))), new CompoundBorder(new LineBorder(new Color(192, 255, 192, 96)), new LineBorder(new Color(192, 255, 192, 128)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(192, 255, 192, 160)), new LineBorder(new Color(192, 255, 192, 192))), new CompoundBorder(new LineBorder(new Color(192, 255, 192, 224)), new LineBorder(new Color(192, 255, 192, 255))))));enterLogonButtonBorderJPanel.setBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(192, 255, 192, 32)), new LineBorder(new Color(192, 255, 192, 64))), new CompoundBorder(new LineBorder(new Color(192, 255, 192, 96)), new LineBorder(new Color(192, 255, 192, 128)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(192, 255, 192, 160)), new LineBorder(new Color(192, 255, 192, 192))), new CompoundBorder(new LineBorder(new Color(192, 255, 192, 224)), new LineBorder(new Color(192, 255, 192, 255))))));enterLogonButtonBorderJPanel.setName("enterLogonButtonBorderJPanel");enterLogonButtonBorderJPanel.addMouseListener(this);enterLogonButtonBorderJPanel.setOpaque(false);enterLogonButtonBorderJPanelConstraints.anchor = GridBagConstraints.CENTER;enterLogonButtonBorderJPanelConstraints.fill = GridBagConstraints.HORIZONTAL;enterLogonButtonBorderJPanelConstraints.weightx = 1;enterLogonButtonBorderJPanel.add(enterLogonJButton, enterLogonButtonBorderJPanelConstraints);logoffContentPanelConstraints.gridy = 2;logoffContentPanelConstraints.insets = new Insets(4, 0, 30, 0);logoffContentPanel.add(enterLogonButtonBorderJPanel, logoffContentPanelConstraints);logoffContentPanelConstraints.insets = new Insets(4, 0, 4, 0);exitJButton.setMnemonic(KeyEvent.VK_ESCAPE);exitJButton.setActionCommand("exitJButton");exitJButton.addActionListener(this);exitJButton.setForeground(new Color(112, 112, 112));exitJButton.setFont(new Font("Electron", Font.BOLD, 19));exitJButton.setOpaque(true);exitJButton.setBorder(null);exitJButton.setBackground(new Color(255, 192, 192));exitButtonBorderJPanel.setBorder(new CompoundBorder(new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 192, 192, 32)), new LineBorder(new Color(255, 192, 192, 64))), new CompoundBorder(new LineBorder(new Color(255, 192, 192, 96)), new LineBorder(new Color(255, 192, 192, 128)))), new CompoundBorder(new CompoundBorder(new LineBorder(new Color(255, 192, 192, 160)), new LineBorder(new Color(255, 192, 192, 192))), new CompoundBorder(new LineBorder(new Color(255, 192, 192, 224)), new LineBorder(new Color(255, 192, 192, 255))))));exitButtonBorderJPanel.setOpaque(false);exitButtonBorderJPanel.addMouseListener(this);exitButtonBorderJPanel.setName("exitButtonBorderJPanel");exitButtonBorderJPanelConstraints.anchor = GridBagConstraints.CENTER;exitButtonBorderJPanelConstraints.fill = GridBagConstraints.HORIZONTAL;exitButtonBorderJPanelConstraints.weightx = 1;exitButtonBorderJPanel.add(exitJButton, exitButtonBorderJPanelConstraints);logoffContentPanelConstraints.gridy = 3;exitButtonBorderJPanelConstraints.weightx = 0;logoffContentPanel.add(oochisDecalJPanel, logoffContentPanelConstraints);logoffContentPanelConstraints.gridy = 4;logoffContentPanel.add(exitButtonBorderJPanel, logoffContentPanelConstraints);logoffContentPanelConstraints.insets = new Insets(4, 0, 6, 0);logoffContentPanelConstraints.gridy = 5;if (loginAttemptsCount > 2) {System.out.println("loginAttemptsCount > 2");}add(logoffContentPanel);doLayout();setVisible(false);enterUserIDJTextField.setText("vitality");enterPasswordJPasswordField.setText("default");enterUserIDJTextField.validate();enterUserIDJTextField.repaint();}@Overridepublic void actionPerformed(ActionEvent e) {if (e.getActionCommand().equals("exitJButton") || e.getActionCommand().equals("exitButtonBorderJPanel")) {exit();} else if (e.getActionCommand().equals("enterLogonJButton") || e.getActionCommand().equals("enterLogonButtonBorderJPanel") || e.getActionCommand().equals("enterPasswordJPasswordField") || e.getActionCommand().equals("enterUserIDJTextField")) {login();}}private void exit() {SystemWindow.println("exitOk thread is " + exitOk);System.exit(0);}private void login() {char[] pendingLogonPassword = null;if (enterUserIDJTextField.getText() == null || enterUserIDJTextField.getText().equals("")) {enterUserIDJTextField.validate();enterUserIDJTextField.repaint();} else if (enterPasswordJPasswordField.getPassword() == null) {enterPasswordJPasswordField.validate();enterPasswordJPasswordField.repaint();} else {pendingLogonPassword = enterPasswordJPasswordField.getPassword();enterPasswordJPasswordField.setText("");validate();repaint();String pendingLogonUserID = enterUserIDJTextField.getText();processedLoginAnswer = processLogin(pendingLogonUserID, pendingLogonPassword);SystemWindow.println("processedLoginAnswer: " + processedLoginAnswer);if (processedLoginAnswer.equals("ADMINISTRATOR_LOGGED_IN")) {loggedOnUserID = getLongFormUserID(pendingLogonUserID);individualUserData = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(6))).elementAt(0)));System.out.println("pendingLogonUserID: " + pendingLogonUserID);System.out.println("getLongFormUserID(pendingLogonUserID): " + getLongFormUserID(pendingLogonUserID));Device.device.workspace.setVisible(true);isRootAdministratorLoggedIn = true;resetSessionState();setVisible(false);} else if (processedLoginAnswer.equals("USER_LOGGED_IN")) {loggedOnUserID = getLongFormUserID(pendingLogonUserID);SystemWindow.println("pendingLogonUserID: " + pendingLogonUserID);try {Io.in("usr", pendingLogonUserID, makeRawFromPassword(pendingLogonPassword));isUserLoggedIn = true;} catch (Exception ex) {SystemWindow.println("Critical error reading user in access");ex.printStackTrace();}if (isUserLoggedIn) {ChartingWindow.medicalOutputFile = new Vector<Vector>();loggedIn = true;Device.device.workspace.setVisible(true);Device.device.validate();resetSessionState();int ind = 0;while (ind < pendingLogonPassword.length) {pendingLogonPassword[ind] = '0';ind++;}enterPasswordJPasswordField.setText("0000000000000000");enterPasswordJPasswordField.setText("");pendingLogonUserID = "0000000000000000";setVisible(false);int userInd = 0;while (userInd < ((Vector) (Access.rootAdministrator.elementAt(6))).size()) {if (((String) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(6))).elementAt(userInd))).elementAt(0))).equals(Access.loggedOnUserID)) {individualUserData = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(6))).elementAt(userInd)));}userInd++;}}}if (processedLoginAnswer.equals("false")) {loginShield();} else {System.out.println("loggedOnUserID: " + loggedOnUserID);try {Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);} catch (Exception ex) {ex.printStackTrace();SystemWindow.println("ERROR: rootAdministrator tried to save but failed in Access.");}}}}public static String getLongFormUserID(String pendingShortUserID) {String userID = null;Vector<Vector<Vector<String>>> userIndex = ((Vector<Vector<Vector<String>>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))));Vector<Vector<String>> individualUserIndex;int userInd = 0;while (userInd < userIndex.size()) {if (pendingShortUserID.equals(shortUserID(userIndex.elementAt(userInd).elementAt(0).elementAt(0)))) {individualUserIndex = ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(userInd));userID = individualUserIndex.elementAt(0).elementAt(0);}userInd++;}return userID;}public String processLogin(String pPendingLogonUserID, char[] pPendingLogonPassword) {char[] foundPassword = null;boolean found = false;int ind = 0;int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();while (!found && ind < numUsers) {if (pPendingLogonUserID.equals(shortUserID(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(0)))) {found = true;foundPassword = ((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(1).toCharArray();}ind++;}if (foundPassword == null) {SystemWindow.println("foundPassword is null");return "false";} else if (pPendingLogonPassword.length != foundPassword.length) {SystemWindow.println("password lengths aren't equal: " + pPendingLogonPassword.length + "   " + foundPassword.length);return "false";} else {int ind2 = 0;do {if (pPendingLogonPassword[ind2] != foundPassword[ind2]) {SystemWindow.println("pPendingJPasswordField[ind2] != foundPassword[ind2]");return "false";}ind2++;} while (ind2 < pPendingLogonPassword.length);}if (pPendingLogonUserID.equals(shortUserID(licenseID)) && String.copyValueOf(pPendingLogonPassword).equals(licensePassword)) {return "ADMINISTRATOR_LOGGED_IN";} else {return "USER_LOGGED_IN";}}private void loginShield() {loginAttemptsCount++;if (loginAttemptsCount > ((Integer) (((Vector) (rootAdministrator.elementAt(0))).elementAt(1)))) {System.exit(0);}}public void resetSessionState() {Color colorTheme = null;ImageIcon wallpaper = null;String wallpaperScaleType = null;if (isUserLoggedIn) {if (getUser(loggedOnUserID, "systemUserAccountsAuthorization").equals("manage")) {Device.device.workspace.systemWindow.userAccountsJToggleButton.setVisible(true);} else if (getUser(loggedOnUserID, "systemUserAccountsAuthorization").equals("view only")) {Device.device.workspace.systemWindow.userAccountsJToggleButton.setVisible(true);} else {Device.device.workspace.systemWindow.userAccountsJToggleButton.setVisible(false);}if (getUser(loggedOnUserID, "systemAppearanceAuthorization").equals("manage")) {Device.device.workspace.systemWindow.systemAppearanceJToggleButton.setVisible(true);Device.device.workspace.systemWindow.wallpaperFileChooser.setEnabled(true);Device.device.workspace.systemWindow.slickBorderThemeJToggleButton.setEnabled(true);Device.device.workspace.systemWindow.slateBorderThemeJToggleButton.setEnabled(true);Device.device.workspace.systemWindow.highContrastBorderThemeJToggleButton.setEnabled(true);Device.device.workspace.systemWindow.arielSystemFontJRadioButton.setEnabled(true);Device.device.workspace.systemWindow.serifSystemFontJRadioButton.setEnabled(true);Device.device.workspace.systemWindow.electronSystemFontJRadioButton.setEnabled(true);Device.device.workspace.systemWindow.fontSizeJTextField.setEnabled(true);if (((String) ((Vector) Access.user.elementAt(3)).elementAt(9)) != null) {Device.device.workspace.systemWindow.doBorderTheme(((String) ((Vector) Access.user.elementAt(3)).elementAt(9)));System.out.println(" 1 Access doBorderTheme()");} else {Device.device.workspace.systemWindow.doBorderTheme(((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(9)));System.out.println(" 2 Access doBorderTheme()");}if ((Color) ((Vector) user.elementAt(3)).elementAt(8) != null) {colorTheme = (Color) ((Vector) user.elementAt(3)).elementAt(8);} else {colorTheme = (Color) ((Vector) rootAdministrator.elementAt(3)).elementAt(8);}if (((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(15))) != null) {translucency = ((Integer) (((Vector) (Access.user.elementAt(3))).elementAt(15)));} else {translucency = (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(15)));}} else if (getUser(loggedOnUserID, "systemAppearanceAuthorization").equals("view only")) {Device.device.workspace.systemWindow.systemAppearanceJToggleButton.setVisible(true);Device.device.workspace.systemWindow.wallpaperFileChooser.setEnabled(false);Device.device.workspace.systemWindow.slickBorderThemeJToggleButton.setEnabled(false);Device.device.workspace.systemWindow.slateBorderThemeJToggleButton.setEnabled(false);Device.device.workspace.systemWindow.highContrastBorderThemeJToggleButton.setEnabled(false);Device.device.workspace.systemWindow.arielSystemFontJRadioButton.setEnabled(false);Device.device.workspace.systemWindow.serifSystemFontJRadioButton.setEnabled(false);Device.device.workspace.systemWindow.electronSystemFontJRadioButton.setEnabled(false);Device.device.workspace.systemWindow.fontSizeJTextField.setEnabled(false);Device.device.workspace.systemWindow.doBorderTheme(((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(9)));System.out.println(" 3 Access doBorderTheme()");colorTheme = (Color) ((Vector) rootAdministrator.elementAt(3)).elementAt(8);translucency = (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(15)));wallpaper = (ImageIcon) SystemWindow.getElement(11, "defaultWallpaper", null);wallpaperScaleType = (String) SystemWindow.getElement(12, "defaultWallpaperScaleType", null);} else {Device.device.workspace.systemWindow.systemAppearanceJToggleButton.setVisible(false);Device.device.workspace.systemWindow.doBorderTheme(((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(9)));System.out.println(" 4 Access doBorderTheme()");colorTheme = (Color) ((Vector) rootAdministrator.elementAt(3)).elementAt(8);translucency = (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(15)));wallpaper = (ImageIcon) SystemWindow.getElement(11, "defaultWallpaper", null);wallpaperScaleType = (String) SystemWindow.getElement(12, "defaultWallpaperScaleType", null);}if (getUser(loggedOnUserID, "systemTemplatesAuthorization").equals("manage")) {Device.device.workspace.systemWindow.templatesJToggleButton.setVisible(true);Device.device.workspace.systemWindow.templateChooseNewTemplateJTextField.setVisible(true);Device.device.workspace.systemWindow.templateChooseNewTemplateOKJButton.setVisible(true);Device.device.workspace.systemWindow.templateMedicalCodeSetJPanel.setVisible(true);Device.device.workspace.systemWindow.templateDatatypeJPanel.setVisible(true);Device.device.workspace.systemWindow.templateAtomicMedicalCodeJPanel.setVisible(true);Device.device.workspace.systemWindow.templateMedicalCodeDetailsPanelJToggleButton.setVisible(true);Device.device.workspace.systemWindow.templateVisibleFieldDescriptionJPanel.setVisible(true);Device.device.workspace.systemWindow.templateItemFormatJPanel.setVisible(true);Device.device.workspace.systemWindow.templateVisibilityToggleButtonsJPanel.setVisible(true);Device.device.workspace.systemWindow.templatePanelButtonsJPanel.setVisible(true);} else if (getUser(loggedOnUserID, "systemTemplatesAuthorization").equals("view only")) {Device.device.workspace.systemWindow.templatesJToggleButton.setVisible(true);Device.device.workspace.systemWindow.templateChooseNewTemplateJTextField.setVisible(false);Device.device.workspace.systemWindow.templateChooseNewTemplateOKJButton.setVisible(false);Device.device.workspace.systemWindow.templateMedicalCodeSetJPanel.setVisible(false);Device.device.workspace.systemWindow.templateDatatypeJPanel.setVisible(false);Device.device.workspace.systemWindow.templateAtomicMedicalCodeJPanel.setVisible(false);Device.device.workspace.systemWindow.templateMedicalCodeDetailsPanelJToggleButton.setVisible(false);Device.device.workspace.systemWindow.templateVisibleFieldDescriptionJPanel.setVisible(false);Device.device.workspace.systemWindow.templateItemFormatJPanel.setVisible(false);Device.device.workspace.systemWindow.templateVisibilityToggleButtonsJPanel.setVisible(false);Device.device.workspace.systemWindow.templatePanelButtonsJPanel.setVisible(false);} else {Device.device.workspace.systemWindow.templatesJToggleButton.setVisible(false);}Device.device.workspace.chartingWindow.recentChartID = ((Vector<String>) (((Vector) (Access.user.elementAt(1))).elementAt(5)));if (getUser(loggedOnUserID, "decisionSupportAuthorization").equals("manage")) {Device.device.workspace.decisionSupportJButton.setVisible(true);} else if (getUser(loggedOnUserID, "decisionSupportAuthorization").equals("view only")) {Device.device.workspace.decisionSupportJButton.setVisible(false);} else {Device.device.workspace.decisionSupportJButton.setVisible(false);}if (getUser(loggedOnUserID, "messagingAuthorization").equals("manage")) {Device.device.workspace.messagingJButton.setVisible(true);} else if (getUser(loggedOnUserID, "messagingAuthorization").equals("view only")) {Device.device.workspace.messagingJButton.setVisible(false);} else {Device.device.workspace.messagingJButton.setVisible(false);}if (getUser(loggedOnUserID, "practiceAssistantBillingAuthorization").equals("manage")) {Device.device.workspace.practiceAssistantWindow.billingJButton.setVisible(true);} else if (getUser(loggedOnUserID, "practiceAssistantBillingAuthorization").equals("view only")) {Device.device.workspace.practiceAssistantWindow.billingJButton.setVisible(false);} else {Device.device.workspace.practiceAssistantWindow.billingJButton.setVisible(false);}} else {Device.device.workspace.chartingWindow.recentChartID = ((Vector<String>) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(5)));colorTheme = (Color) ((Vector) rootAdministrator.elementAt(3)).elementAt(8);translucency = (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(15)));Device.device.workspace.systemWindow.doBorderTheme(((String) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(9)));wallpaper = (ImageIcon) SystemWindow.getElement(11, "defaultWallpaper", null);wallpaperScaleType = (String) SystemWindow.getElement(12, "defaultWallpaperScaleType", null);}try {Device.device.addWallpaper("stretch", "access");Device.device.repaint();} catch (Exception we) {SystemWindow.println("User wallpaper try error in Access.resetWindows()");we.printStackTrace();}Device.device.workspace.systemWindow.setFonts();translucentColorTheme = (new Color(colorTheme.getRed(), colorTheme.getGreen(), colorTheme.getBlue(), 255 - translucency));Device.device.workspace.chartingWindow.getContentPane().setBackground(translucentColorTheme);Device.device.workspace.chartingWindow.titleBarBaseJPanel.setBackground(translucentColorTheme);Device.device.workspace.decisionSupportWindow.getContentPane().setBackground(translucentColorTheme);Device.device.workspace.decisionSupportWindow.titleBarBaseJPanel.setBackground(translucentColorTheme);Device.device.workspace.systemWindow.getContentPane().setBackground(translucentColorTheme);Device.device.workspace.systemWindow.titleBarBaseJPanel.setBackground(translucentColorTheme);Device.device.workspace.messagingWindow.getContentPane().setBackground(translucentColorTheme);Device.device.workspace.messagingWindow.titleBarBaseJPanel.setBackground(translucentColorTheme);Device.device.workspace.practiceAssistantWindow.getContentPane().setBackground(translucentColorTheme);Device.device.workspace.practiceAssistantWindow.titleBarBaseJPanel.setBackground(translucentColorTheme);windowBorderWidth = 5 + 11 * translucency / 255;windowBorder = (new CompoundBorder(new MatteBorder(1, 1, 1, 1, new Color(160, 160, 180, 255 - translucency)), BorderFactory.createMatteBorder(0, windowBorderWidth, windowBorderWidth, windowBorderWidth, translucentColorTheme)));disabledWindowBorder = (new CompoundBorder(new MatteBorder(1, 1, 1, 1, new Color(160, 160, 180, 255 - translucency)), BorderFactory.createMatteBorder(0, windowBorderWidth, windowBorderWidth, windowBorderWidth, disabledBorderColor)));Device.device.workspace.chartingWindow.setBorder(windowBorder);Device.device.workspace.decisionSupportWindow.setBorder(windowBorder);Device.device.workspace.systemWindow.setBorder(windowBorder);Device.device.workspace.messagingWindow.setBorder(windowBorder);Device.device.workspace.practiceAssistantWindow.setBorder(windowBorder);Device.device.workspace.resetWorkspace();}public byte[] makeRawFromPassword(char[] pSelectedNewUserPassword) {char[] pPassword1 = "z5T3zIi93F".toCharArray();char[] pPassword2 = "S8n952odk".toCharArray();char[] pPassword3 = "0lkqv63p".toCharArray();char[] pPassword4 = "Jbn4cW7".toCharArray();char[] pPassword5 = "tK807p".toCharArray();byte[] superPasswordBytes = new byte[16];if (pSelectedNewUserPassword.length == 6) {superPasswordBytes = combineCharArraysAndReturnPasswordBytes(pPassword1, pSelectedNewUserPassword);}if (pSelectedNewUserPassword.length == 7) {superPasswordBytes = combineCharArraysAndReturnPasswordBytes(pPassword2, pSelectedNewUserPassword);}if (pSelectedNewUserPassword.length == 8) {superPasswordBytes = combineCharArraysAndReturnPasswordBytes(pPassword3, pSelectedNewUserPassword);}if (pSelectedNewUserPassword.length == 9) {superPasswordBytes = combineCharArraysAndReturnPasswordBytes(pPassword4, pSelectedNewUserPassword);}if (pSelectedNewUserPassword.length == 10) {superPasswordBytes = combineCharArraysAndReturnPasswordBytes(pPassword5, pSelectedNewUserPassword);}return superPasswordBytes;}private byte[] combineCharArraysAndReturnPasswordBytes(char[] pPassword, char[] selectedNewUserPasswordChars) {char[] pSuperNewPasswordChars = new char[16];byte[] pSuperNewPasswordBytes = new byte[16];int ind = 0;do {pSuperNewPasswordChars[ind] = pPassword[ind];ind++;} while (ind < pPassword.length);do {pSuperNewPasswordChars[ind] = selectedNewUserPasswordChars[ind - pPassword.length];ind++;} while (ind < 16);ind = 0;do {pSuperNewPasswordBytes[ind] = (byte) pSuperNewPasswordChars[ind];ind++;} while (ind < 16);return pSuperNewPasswordBytes;}public static String getUser(String pUserID, String name) {int firstArrayDimensionNumber = -1;int secondArrayDimensionNumber = -1;int indexOfPUserID;String answer;boolean found = false;int numUsers = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).size();int ind = 1;while (!found && ind < numUsers) {if (pUserID.equals(((Vector<Vector<Vector<String>>>) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind).elementAt(0).elementAt(0))) {found = true;} else {ind++;}}indexOfPUserID = ind;if (found) {if (name.equals("facility")) {firstArrayDimensionNumber = 3;secondArrayDimensionNumber = 0;} else if (name.equals("userID")) {firstArrayDimensionNumber = 0;secondArrayDimensionNumber = 0;} else if (name.equals("password")) {firstArrayDimensionNumber = 0;secondArrayDimensionNumber = 1;} else if (name.equals("prefix")) {firstArrayDimensionNumber = 1;secondArrayDimensionNumber = 0;} else if (name.equals("firstName")) {firstArrayDimensionNumber = 1;secondArrayDimensionNumber = 1;} else if (name.equals("middleName")) {firstArrayDimensionNumber = 1;secondArrayDimensionNumber = 2;} else if (name.equals("lastName")) {firstArrayDimensionNumber = 1;secondArrayDimensionNumber = 3;} else if (name.equals("suffix")) {firstArrayDimensionNumber = 1;secondArrayDimensionNumber = 4;} else if (name.equals("degree")) {firstArrayDimensionNumber = 1;secondArrayDimensionNumber = 5;} else if (name.equals("systemUserAccountsAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 1;} else if (name.equals("systemAppearanceAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 2;} else if (name.equals("systemTemplatesAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 3;} else if (name.equals("decisionSupportAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 4;} else if (name.equals("messagingAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 5;} else if (name.equals("chartsDemographicsAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 6;} else if (name.equals("chartsActivitiesAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 7;} else if (name.equals("chartsHistoryAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 8;} else if (name.equals("chartsInsuranceAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 9;} else if (name.equals("practiceAssistantBillingAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 10;} else if (name.equals("practiceAssistantSchedulingAuthorization")) {firstArrayDimensionNumber = 2;secondArrayDimensionNumber = 11;}answer = ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(indexOfPUserID)).elementAt(firstArrayDimensionNumber).elementAt(secondArrayDimensionNumber);} else {answer = " - ";}return answer;}public static String getUserName(String nextUserID) {String wholeName;String title = getUser(nextUserID, "prefix");String firstName = getUser(nextUserID, "firstName");String middleName = getUser(nextUserID, "middleName");String lastName = getUser(nextUserID, "lastName");String suffix = getUser(nextUserID, "suffix");String degree = getUser(nextUserID, "degree");String dot = lastDot(getUser(nextUserID, "degree"));if (!middleName.equals(null) && !middleName.equals("")) {middleName = " " + middleName + " ";} else {firstName = firstName + " ";}if (!suffix.equals(null) && !suffix.equals("")) {suffix = " " + suffix;}if (!degree.equals(null) && !degree.equals("")) {degree = ", " + degree;}wholeName = firstName + middleName + lastName + suffix + degree;wholeName = wholeName.replace("  ", " ");return wholeName;}public static String lastDot(String string) {if (string != null && !string.equals("") && !string.equals(".")) {if (string.charAt(string.length() - 1) == '.') {return "";} else {return ".";}} else {return "";}}static public String shortUserID(String longUserID) {return longUserID.substring(0, longUserID.indexOf("|"));}@Overridepublic void mouseClicked(MouseEvent m) {login();}@Overridepublic void mouseEntered(MouseEvent m) {}@Overridepublic void mouseExited(MouseEvent m) {}@Overridepublic void mousePressed(MouseEvent m) {}@Overridepublic void mouseReleased(MouseEvent m) {}}// EOF