/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.CardLayout;import java.awt.Color;import java.awt.Component;import java.awt.Cursor;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Image;import java.awt.Insets;import java.awt.Point;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.KeyEvent;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.image.BufferedImage;import java.awt.image.ImageObserver;import java.util.Calendar;import java.util.Vector;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JEditorPane;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JRadioButton;import javax.swing.JScrollBar;import javax.swing.JScrollPane;import javax.swing.JSplitPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.JToggleButton;import javax.swing.ScrollPaneConstants;import javax.swing.SwingConstants;import javax.swing.border.BevelBorder;import javax.swing.border.Border;import javax.swing.border.CompoundBorder;import javax.swing.border.LineBorder;import javax.swing.border.MatteBorder;import javax.swing.border.TitledBorder;import javax.swing.plaf.basic.BasicSplitPaneDivider;import javax.swing.plaf.basic.BasicSplitPaneUI;public class DecisionSupportWindow extends Window implements MouseListener, ActionListener, FocusListener {String raceAndSexLifeTableName;int paperMargin = 36;Font iCERNormalPlainFont = new Font("serif", Font.PLAIN, 10);Vector<Vector<String>> codeSetRecordPlusHeaderVector = null;Vector<Integer> treatmentEffectAnalysisTreatmentPointsX = new Vector<Integer>();Vector<Integer> treatmentEffectAnalysisTreatmentPointsY = new Vector<Integer>();Vector<Integer> treatmentEffectAnalysisControlPointsX = new Vector<Integer>();Vector<Integer> treatmentEffectAnalysisControlPointsY = new Vector<Integer>();JPanel costAnalysisGraphHeaderJPanel = new JPanel(new GridBagLayout());JLabel costAnalysisNameHeaderJLabel = new JLabel("");JPanel costAnalysisNameJPanel = new JPanel(new GridBagLayout());JLabel costAnalysisNameJLabel = new JLabel("");JLabel costAnalysisDateCreatedJLabel = new JLabel("");JLabel costAnalysisGraphHeaderDateGraphLastModifiedJLabel = new JLabel("");JLabel costAnalysisGraphHeaderUserIDJLabel = new JLabel();Dimension decisionSupportLocation = new Dimension(40, 40);JPopupMenu promptForComponentOrSubComponentsPanelJPopupMenu = new JPopupMenu();Calendar statisticsFromCalendar;Calendar statisticsToCalendar;Color invalidePinkFieldColor = new Color(255, 192, 192);Color veryLightGrayColor = new Color(236, 236, 236);String[] dayOfWeek = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };String[] month = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };String[] aMPM = { "AM", "PM" };String codeSetIdentifier;Dimension decisionSupportMainButtonsDimension = new Dimension(171, 72);String pMolecularAssemblerQueryJTextAreaText = null;int translucentPanelDividerSize = 5;boolean includeTertiaryNetworksNotLoopingBackOntoPrimaryNetworks = true;boolean tertiaryNetworksMustContainATrial = true;String parsedQuery;boolean browserIsOn = true;JLabel browserExpandingJLabel = new JLabel(" ");JPanel decisionSupportBrowserBorderJPanel = new JPanel(new GridBagLayout());JPanel decisionSupportBrowserJPanel = new JPanel(new GridBagLayout());JPanel addressBarJPanel = new JPanel(new GridBagLayout());JLabel addressBarURLPromptJLabel = new JLabel();JPanel internetBrowserJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartEntryHeaderJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeEntryHeaderJPanel = new JPanel(new GridBagLayout());JPanel statisticsMedicalCodeEntryHeaderJPanel = new JPanel(new GridBagLayout());JPanel statisticsMedicalCodeEntryBaseJPanel = new JPanel(new GridBagLayout());JPanel statisticsMedicalCodeBaseJPanel = new JPanel(new GridBagLayout());JPanel statisticsMedicalCodeBasePusherJPanel = new JPanel(new GridBagLayout());JPanel statisticsMedicalCodeBaseBaseJPanel = new JPanel(new GridBagLayout());JScrollPane statisticsMedicalCodeBasePanelJScrollPane = new JScrollPane(statisticsMedicalCodeBaseBaseJPanel);JPanel statisticsPatientChartEntryBaseJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartBaseJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartBasePusherJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartBaseBaseJPanel = new JPanel(new GridBagLayout());JScrollPane statisticsPatientChartBasePanelJScrollPane = new JScrollPane(statisticsPatientChartBaseBaseJPanel);JPanel statisticsTimeRangeEntryBaseJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeBaseJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeBasePusherJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeBaseBaseJPanel = new JPanel(new GridBagLayout());JScrollPane statisticsTimeRangeBasePanelJScrollPane = new JScrollPane(statisticsTimeRangeBaseBaseJPanel);JPanel statisticsMedicalCodeValueGroupsEntryJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartGroupsEntryJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeGroupsEntryJPanel = new JPanel(new GridBagLayout());JPanel statisticsPanelBaseJPanel = new JPanel(new GridBagLayout());JLabel lifeCurveJLabel = new JLabel("Life Curve: ");CardLayout statisticsPanelCardLayout = new CardLayout();JPanel statisticsPanelContentCardedJPanel = new JPanel(statisticsPanelCardLayout);JTextField iCDCodesOfDiseasesAffectingCause1InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause2InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause3InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause4InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause5InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause6InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause7InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause8InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause9InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JTextField iCDCodesOfDiseasesAffectingCause10InSexAndRaceAndAgeGroupJTextField = new JTextField(5);JLabel lifeExtendingTreatmentHeaderLeftJLabel = new JLabel("Life-extending treatments:");JPanel lifeExtendingFactorsLeftJPanel = new JPanel(new GridBagLayout());JLabel lifeExtendingFactorsLeft1JLabel = new JLabel("Factors:");JLabel lifeExtendingFactorsLeft2JLabel = new JLabel("(complete = 1, no affect = 0):");JLabel lifeExtendingInfallibilityFactorHeaderFactorLeftJLabel = new JLabel("Infallibility:");JLabel lifeExtendingTreatmentProceduralCompletenessHeaderFactor1LeftJLabel = new JLabel("Procedural");JLabel lifeExtendingTreatmentProceduralCompletenessHeaderFactor2LeftJLabel = new JLabel("completeness:");JLabel lifeExtendingTreatmentHeaderRightJLabel = new JLabel("Life-extending treatments:");JPanel lifeExtendingFactorsRightJPanel = new JPanel(new GridBagLayout());JLabel lifeExtendingFactorsRight1JLabel = new JLabel("Factors:");JLabel lifeExtendingFactorsRight2JLabel = new JLabel("(complete = 1, no affect = 0):");JLabel lifeExtendingInfallibilityFactorHeaderFactorRightJLabel = new JLabel("Infallibility:");JLabel lifeExtendingTreatmentProceduralCompletenessHeaderFactor1RightJLabel = new JLabel("Procedural");JLabel lifeExtendingTreatmentProceduralCompletenessHeaderFactor2RightJLabel = new JLabel("completeness:");JPanel toErrIsHumanMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel toErrIsHumanMortalityRateModification1JLabel = new JLabel("Reduced human errors over paper-based recording");JLabel toErrIsHumanMortalityRateModification2JLabel = new JLabel();JLabel toErrIsHumanMortalityRateModification3JLabel = new JLabel("due to reduction in errors and computerization.");JPanel decisionAnalysisJPanel = new JPanel(new GridBagLayout());CardLayout decisionAnalysisPanelCardedPanelCardLayout = new CardLayout();JPanel decisionAnalysisPanelCardedJPanel = new JPanel(decisionAnalysisPanelCardedPanelCardLayout);JPanel decisionAnalysisPanelCardedPanelCoverJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisTopButtonsJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisBaseButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton costAnalysisJToggleButton = new JToggleButton(" Cost analysis ");JToggleButton treatmentEffectJToggleButton = new JToggleButton(" Treatment effect ");JToggleButton decisionModelsJToggleButton = new JToggleButton(" Decision models ");JPanel decisionAnalysisBaseButtonsPanelPusher1JPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisBaseButtonsPanelPusher2JPanel = new JPanel(new GridBagLayout());JLabel qualityAdjustedLifeYearsPromptJLabel = new JLabel("Are effectiveness values quality-adjusted (\"QALYs\")? ");JPopupMenu saveAsTreatmentAnalysisJPopupMenu = new JPopupMenu();JPanel menuJPanel = new JPanel(new GridBagLayout());JPopupMenu decisionModelOutcomesJPopupMenu = new JPopupMenu();JToggleButton decisionModelOutcomesJToggleButton = new JToggleButton(" Decision model outcomes ");JLabel projectedLifeExpectancyCurve1JLabel = new JLabel("Projected considers the affect of the predictable average increase in lifespan over");JLabel projectedLifeExpectancyCurve2JLabel = new JLabel("the last 40 years for the CDC's actuarial life tables for a specified sex, and race.");JToggleButton lifeExpectancyJToggleButton = new JToggleButton(" Life expectancy ");JButton lifeExpectancyPerYearJButton = new JButton(" Life expectancy, ages 0 to 100, 2011 ");JButton lifeExpectancyAtBirthOverLastFortyYearsJButton = new JButton(" Average lifespan, 1969 to 2008 ");JToggleButton includeAverageIncreasePerYearJToggleButton = new JToggleButton(" Include yearly increase in life expectancy ");JToggleButton optimizedLifeExpectancyJToggleButton = new JToggleButton(" Optimized life expectancy ");JToggleButton actuarialLifeExpectancyJToggleButton = new JToggleButton(" Actuarial life expectancy ");JRadioButton showLifeExpectancyCurveJRadioButton = new JRadioButton(" Show life expectancy ");JRadioButton showMortalityCurveJRadioButton = new JRadioButton(" Show mortality curve");JPopupMenu showMortalityAndOrLifeExpectancyJPopupMenu = new JPopupMenu();Dimension lifeExpectancyGraphPanelAndMortalityGraphPanelDimension = new Dimension(500, 400);JPanel tenLeadingCausesOfDeathByAgeGroupJPanel = new JPanel(new GridBagLayout());LifeExpectancy2Panels lifeExpectancyGraphPanel = new LifeExpectancy2Panels(null, "Life expectancy", "Year", 0);LifeExpectancy2Panels mortalityGraphPanel = new LifeExpectancy2Panels(null, "Probability of surviving another year", "Year", 0);JPanel optimizedLifeExpectancyTextFieldsJPanel = new JPanel(new GridBagLayout());JLabel infa1JLabel = new JLabel("Infa.");JLabel comp1JLabel = new JLabel("Comp.");JLabel infa2JLabel = new JLabel("Infa.");JLabel comp2JLabel = new JLabel("Comp.");JPanel optimizedLifeExpectancyPaperBaseJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyButtonsJPanel = new JPanel(new GridBagLayout());JButton optimizedLifeExpectancyPanelClearJButton = new JButton(" Clear ");JPanel optimizedLifeExpectancyPaperJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyPaperHeaderJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyGraphHeaderJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyGraphNameJPanel = new JPanel(new GridBagLayout());JLabel lifeExpectancyGraphNameJLabel = new JLabel();JLabel lifeExpectancyGraphNameHeaderJLabel = new JLabel("Life expectancy:");JLabel lifeExpectancyGraphHeaderDateGraphCreatedJLabel = new JLabel("");JLabel lifeExpectancyGraphHeaderUserIDJLabel = new JLabel("");JPanel lifeExpectancyGraphHeaderPatientBirthdateJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyGraphHeaderPatientRaceJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyGraphHeaderPatientSexJPanel = new JPanel(new GridBagLayout());JLabel lifeExpectancyGraphPatientBirthdateHeaderJLabel = new JLabel("Patient age: ");JLabel lifeExpectancyGraphHeaderPatientRaceHeaderJLabel = new JLabel("Patient race: ");JLabel lifeExpectancyGraphHeaderPatientSexHeaderJLabel = new JLabel("Patient sex: ");JLabel lifeExpectancyGraphPatientBirthdateContentJLabel = new JLabel();JLabel lifeExpectancyGraphHeaderPatientRaceJLabel = new JLabel();JLabel lifeExpectancyGraphHeaderPatientSexJLabel = new JLabel();Dimension landscapePaperSizeDimension = new Dimension(1000, 600);JPanel optimizedLifeExpectancyGraphHeaderJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyGraphHeaderPatientBirthdateJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyGraphHeaderPatientSexJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyGraphHeaderPatientRaceJPanel = new JPanel(new GridBagLayout());JLabel optimizedLifeExpectancyGraphPatientBirthdateHeaderJLabel = new JLabel("Patient age: ");JLabel optimizedLifeExpectancyGraphHeaderPatientRaceHeaderJLabel = new JLabel("Patient race: ");JLabel optimizedLifeExpectancyGraphHeaderPatientSexHeaderJLabel = new JLabel("Patient sex: ");JLabel optimizedLifeExpectancyGraphHeaderPatientSexJLabel = new JLabel();JLabel optimizedLifeExpectancyGraphPatientBirthdateContentJLabel = new JLabel();JLabel optimizedLifeExpectancyGraphHeaderPatientRaceJLabel = new JLabel();JPanel optimizedLifeExpectancyGraphNameJPanel = new JPanel(new GridBagLayout());JLabel optimizedLifeExpectancyGraphNameJLabel = new JLabel();JLabel optimizedLifeExpectancyGraphNameHeaderJLabel = new JLabel("Optimized life expectancy");JLabel optimizedLifeExpectancyGraphHeaderDateGraphCreatedJLabel = new JLabel();JLabel optimizedLifeExpectancyGraphHeaderUserIDJLabel = new JLabel();LifeExpectancy2Panels optimizedLifeExpectancyGraphJPanel = new LifeExpectancy2Panels(null, "Life expectancy", "Year", 0);CardLayout optimizedLifeExpectancyGraphPanelHeaderCardLayout = new CardLayout();JPanel optimizedLifeExpectancyGraphPanelHeaderCardedJPanel = new JPanel(optimizedLifeExpectancyGraphPanelHeaderCardLayout);Dimension optimizedLifeExpectancyGraphJPanelDimension = new Dimension(950, 600);JPanel optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel = new JPanel(new GridBagLayout());JLabel optimalLifeExpectancyHeaderActuarialCurveInActuarialOnlyPanelJLabel = new JLabel("The curve is actuarial life expectancy (averaged from death certificates from 2008) based on age, sex, and race.");JLabel optimalLifeExpectancyHeaderActuarialPlusAverageIncreaseInNonOptimizedPanelTop1JLabel = new JLabel("The top curve are actuarial life expectancies that consider");JLabel optimalLifeExpectancyHeaderActuarialPlusAverageIncreaseInNonOptimizedPanelTop2JLabel = new JLabel("the average increase in life expectancy per year. The bottom");JLabel optimalLifeExpectancyHeaderActuarialBottomInNonOptimizedPanelJLabel = new JLabel("curve are actuarial life expectancies based on age, sex, and race.");JLabel optimalLifeExpectancyHeaderOptimizedCurveWithAverageIncreaseInOptimizedPanel1JLabel = new JLabel("The top curve are optimized life expectancies derived from MODIFIED actuarial mortality rates. Modified by treatments affecting specified");JLabel optimalLifeExpectancyHeaderOptimizedCurveWithAverageIncreaseInOptimizedPanel2JLabel = new JLabel("leading causes of disease that also considers the average increase in life expectancy per year (see average increase ...popup).");JLabel optimalLifeExpectancyHeaderOptimizedCurveInOptimizedPanelJLabel = new JLabel("The middle curve are optimized life expectancies based on actuarial mortality rates modified by treatments affecting specified leading causes of disease.");JLabel optimalLifeExpectancyHeaderActuarialBottomInOptimizedPanelJLabel = new JLabel("The bottom curve are actuarial life expectancies (averaged from death certificates from 2008) based on age, sex, and race.");JPanel diseasesWithModifiedMortalitiesLegendPanel = new JPanel(new GridBagLayout());JPanel optimizedLifeExpectancyMortalityRatesPanelPusherJPanel = new JPanel(new GridBagLayout());JPanel considerationInLifeExpectancyOfAges1To4JPanel = new JPanel(new GridBagLayout());JPanel considerationInLifeExpectancyOfAges5To14JPanel = new JPanel(new GridBagLayout());JPanel considerationInLifeExpectancyOfAges15To24JPanel = new JPanel(new GridBagLayout());Font smallFont = new Font("Electron", Font.PLAIN, 10);Font mediumSmallFont = new Font("Electron", Font.PLAIN, 12);JPanel humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification1JLabel = new JLabel("Reduced death rates for human immunodeficiency virus (HIV) disease (B20-B24)");JLabel humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification2JLabel = new JLabel();JLabel humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification3JLabel = new JLabel("due to ");JPanel diseasesOfHeartMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel diseasesOfHeartMortalityRateModification1JLabel = new JLabel("Reduced death rates for diseases of the heart (ICD-10 I00 to I09, I13, I-20 to I51)");JLabel diseasesOfHeartMortalityRateModification2JLabel = new JLabel();JLabel diseasesOfHeartMortalityRateModification3JLabel = new JLabel("due to ");JPanel malignantNeoplasmsMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel malignantNeoplasmsMortalityRateModification1JLabel = new JLabel("Reduced death rates for malignant neoplasms (ICD-10 C00 to C97)");JLabel malignantNeoplasmsMortalityRateModification2JLabel = new JLabel();JLabel malignantNeoplasmsMortalityRateModification3JLabel = new JLabel("due to modern targeted cancer therapy.");JPanel chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel chronicLowerRespiratoryDiseaseMortalityRateModification1JLabel = new JLabel("Reduced death rates for chronic lower respiratory disease (J40 to J47)");JLabel chronicLowerRespiratoryDiseaseMortalityRateModification2JLabel = new JLabel();JLabel chronicLowerRespiratoryDiseaseMortalityRateModification3JLabel = new JLabel("due to fully implantable replaceable lung(s).");JPanel cerebrovascularDiseaseMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel cerebrovascularDiseaseMortalityRateModification1JLabel = new JLabel("Reduced death rates for cerebrovascular disease (ICD-10 I60 to I69)");JLabel cerebrovascularDiseaseMortalityRateModification2JLabel = new JLabel();JLabel cerebrovascularDiseaseMortalityRateModification3JLabel = new JLabel("due to replaceable blood vessels and implantable thrombus filtering device(s).");JPanel alzheimersDiseaseMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel alzheimersDiseaseMortalityRateModification1JLabel = new JLabel("Reduced death rates for Alzheimer's disease (ICD-10 G30)");JLabel alzheimersDiseaseMortalityRateModification2JLabel = new JLabel();JLabel alzheimersDiseaseMortalityRateModification3JLabel = new JLabel("due to de-entanglement therapy.");JPanel diabetesMellitusMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel diabetesMellitusMortalityRateModification1JLabel = new JLabel("Reduced death rates for diabetes mellitus (ICD-10 E10 to E14)");JLabel diabetesMellitusMortalityRateModification2JLabel = new JLabel();JLabel diabetesMellitusMortalityRateModification3JLabel = new JLabel("due to pancreatic islet cell repopulation treatment.");JPanel nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel nephritisNephroticSyndromeAndNephrosisMortalityRateModification1JLabel = new JLabel("Reduced death rates for nephritis, nephrotic syndrome and nephrosis disease (N00 to N07, N17 to N19, N25 to N27)");JLabel nephritisNephroticSyndromeAndNephrosisMortalityRateModification2JLabel = new JLabel();JLabel nephritisNephroticSyndromeAndNephrosisMortalityRateModification3JLabel = new JLabel("due to fully implantable replaceable kidneys.");JPanel septicemiaMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel septicemiaMortalityRateModification1JLabel = new JLabel("Modified death rates for septicemia (A40-A41)");JLabel septicemiaMortalityRateModification2JLabel = new JLabel();JLabel septicemiaMortalityRateModification3JLabel = new JLabel("due to inpatient septicemia rate x risk panel");JPanel allOtherCausesMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel allOtherCausesMortalityRate1JLabel = new JLabel("All other causes of death");JLabel allOtherCausesMortalityRate2JLabel = new JLabel("");JPanel accidentsUnintentionalInjuriesMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel accidentsUnintentionalInjuriesMortalityRateModification1JLabel = new JLabel("Modified death rates for accidents (unintentional injuries) (V01-X59,Y85-Y86)");JLabel accidentsUnintentionalInjuriesMortalityRateModification2JLabel = new JLabel();JLabel accidentsUnintentionalInjuriesMortalityRateModification3JLabel = new JLabel("due to occupation, age, and location");JPanel accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel accidentsUnintentionalInjuriesForInfantsMortalityRateModification1JLabel = new JLabel("Modified death rates for accidents (unintentional injuries) (V01-X59)");JLabel accidentsUnintentionalInjuriesForInfantsMortalityRateModification2JLabel = new JLabel();JLabel accidentsUnintentionalInjuriesForInfantsMortalityRateModification3JLabel = new JLabel("due to ");JPanel influenzaAndPneumoniaMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel influenzaAndPneumoniaMortalityRateModification1JLabel = new JLabel("Reduced death rates for influenza and pnuemonia (J09-J18)");JLabel influenzaAndPneumoniaMortalityRateModification2JLabel = new JLabel();JLabel influenzaAndPneumoniaMortalityRateModification3JLabel = new JLabel("due to vaccination, age, climate, and location dependant");JPanel intentionalSelfHarmSuicideMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel intentionalSelfHarmSuicideMortalityRateModification1JLabel = new JLabel("Modified death rate for intentional self harm (suicide) (U03,X60-X84,Y87.0)");JLabel intentionalSelfHarmSuicideMortalityRateModification2JLabel = new JLabel();JLabel intentionalSelfHarmSuicideMortalityRateModification3JLabel = new JLabel("due to suicude risk assesment panel");JPanel disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate1JLabel = new JLabel("Modified death rate for disorders related to short gestation and low birth weight not elsewhere classified (P07)");JLabel disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate2JLabel = new JLabel();JLabel disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate3JLabel = new JLabel("classified by ____% due to suicude risk assesment panel");JPanel suddenInfantDeathSyndromeMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel suddenInfantDeathSyndromeMortalityRate1JLabel = new JLabel("Modified death rate for sudden infant death syndrome (SIDS) (R95)");JLabel suddenInfantDeathSyndromeMortalityRate2JLabel = new JLabel();JLabel suddenInfantDeathSyndromeMortalityRate3JLabel = new JLabel("due to SIDS panel");JPanel newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate1JLabel = new JLabel("Modified death rate for newborn affected by maternal complications of pregnancy (P01)");JLabel newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate2JLabel = new JLabel();JLabel newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate3JLabel = new JLabel("due to complication checklist/risk assesment panel");JPanel newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate1JLabel = new JLabel("Modified death rate for newborn affected by complications of placenta cord and membranes (P02)");JLabel newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate2JLabel = new JLabel();JLabel newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate3JLabel = new JLabel("due to birthing procedural check list");JPanel bacterialSepsisOfNewbornMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel bacterialSepsisOfNewbornMortalityRate1JLabel = new JLabel("Modified death rate for bacterial sepsis of newborn");JLabel bacterialSepsisOfNewbornMortalityRate2JLabel = new JLabel();JLabel bacterialSepsisOfNewbornMortalityRate3JLabel = new JLabel("birthing procedural check list");JPanel respiratoryDistressOfNewbornMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel respiratoryDistressOfNewbornMortalityRate1JLabel = new JLabel("Modified death rate for respiratory distress of newborn (P22)");JLabel respiratoryDistressOfNewbornMortalityRate2JLabel = new JLabel();JLabel respiratoryDistressOfNewbornMortalityRate3JLabel = new JLabel("due to birthing procedural check list");JPanel diseasesOfTheCirculatorySystemMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel diseasesOfTheCirculatorySystemMortalityRate1JLabel = new JLabel("Modified death rate for diseases of the circulatory system (I00-I99)");JLabel diseasesOfTheCirculatorySystemMortalityRate2JLabel = new JLabel();JLabel diseasesOfTheCirculatorySystemMortalityRate3JLabel = new JLabel("due to in-utero risk-screening complications and risk assessment");JPanel neonatalHemorrhageMortalityRateJPanel = new JPanel(new GridBagLayout());JLabel neonatalHemorrhageMortalityRate1JLabel = new JLabel("Modified death rate for neonatal hemorrhage (P50-P52, P54)");JLabel neonatalHemorrhageMortalityRate2JLabel = new JLabel();JLabel neonatalHemorrhageMortalityRate3JLabel = new JLabel("due to in-utero risk assesment panel and birthing procedural check list");JPanel congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification1JLabel = new JLabel("Modified death rate for congenital malformations, deformations and chromosomal (Q00-Q99)");JLabel congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification2JLabel = new JLabel();JLabel congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification3JLabel = new JLabel("due to risk assesment panel");JPanel assaultHomocideMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel assaultHomocideMortalityRateModification1JLabel = new JLabel("Modified death rate for assault/homicide");JLabel assaultHomocideMortalityRateModification2JLabel = new JLabel();JLabel assaultHomocideMortalityRateModification3JLabel = new JLabel("due to assault/homicide risk assesment");JPanel inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification1JLabel = new JLabel("Modified death rate for in situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)");JLabel inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification2JLabel = new JLabel();JLabel inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification3JLabel = new JLabel("due to cancer screening and targeted treatment");JPanel pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel pregnancyChildBirthAndThePuerperiumMortalityRateModification1JLabel = new JLabel("Modified death rate associated to pregnancy, child birth, and the puerperium");JLabel pregnancyChildBirthAndThePuerperiumMortalityRateModification2JLabel = new JLabel();JLabel pregnancyChildBirthAndThePuerperiumMortalityRateModification3JLabel = new JLabel("due to pre-term birthing care");JPanel chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel = new JPanel(new GridBagLayout());JLabel chronicLiverDiseaseAndCirrhosisMortalityRateModification1JLabel = new JLabel("Reduced death rate for chronic liver disease and cirrhosis");JLabel chronicLiverDiseaseAndCirrhosisMortalityRateModification2JLabel = new JLabel();JLabel chronicLiverDiseaseAndCirrhosisMortalityRateModification3JLabel = new JLabel("due to regenerative/replacement liver therapy/treatment.");JPanel lifeExtensionButtonsHeaderHorizontalLineJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyAtBirthOverLastFortyYearsBaseJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyPerYearJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyPerYearBaseJPanel = new JPanel(new GridBagLayout());CardLayout lifeExpectancyContentCardedPanelCardLayout = new CardLayout();JPanel lifeExpectancyContentCardedJPanel = new JPanel(lifeExpectancyContentCardedPanelCardLayout);JPanel lifeExpectancyBaseJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyPaperBaseButtonsJPanel = new JPanel(new GridBagLayout());JScrollPane lifeExpectancyPaperBasePanelJScrollPane = new JScrollPane(lifeExpectancyBaseJPanel);JPanel lifeExpectancyPaperBasePanelScrollPaneBaseJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJPanel = new JPanel(new GridBagLayout());JLabel lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJLabel = new JLabel("Average life expectancy at birth from 1969 to 2008:");JPanel lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1JPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyPerYearButtonsInner1JPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyPerYearButtonsInner2JPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyPerYearButtonsInner3JPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyAtBirthOverLastFortyYearsJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton = new JToggleButton(" Both sexes - all races ");JToggleButton lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton = new JToggleButton(" Females - all races ");JToggleButton lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton = new JToggleButton(" Males - all races ");JToggleButton lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton = new JToggleButton(" Black females ");JToggleButton lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton = new JToggleButton(" Black males ");JToggleButton lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton = new JToggleButton(" White females ");JToggleButton lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton = new JToggleButton(" White males ");JPanel lifeExpectancyPerYearButtonsPanelHeaderJPanel = new JPanel(new GridBagLayout());JLabel lifeExpectancyPerYearButtonsPanelHeaderJLabel = new JLabel("2011 life expectancy per year from 1 to 100:");JToggleButton lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton = new JToggleButton(" Non Hispanic black females ");JToggleButton lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton = new JToggleButton(" Non Hispanic black males ");JToggleButton lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton = new JToggleButton(" Non Hispanic white females ");JToggleButton lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton = new JToggleButton(" Non Hispanic black males ");JToggleButton lifeExpectancyPerYearHispanicFemalesJToggleButton = new JToggleButton(" Hispanic females ");JToggleButton lifeExpectancyPerYearHispanicMalesJToggleButton = new JToggleButton(" Hispanic males ");JToggleButton lifeExpectancyPerYearBlackFemalesJToggleButton = new JToggleButton(" Black females ");JToggleButton lifeExpectancyPerYearBlackMalesJToggleButton = new JToggleButton(" Black males ");JToggleButton lifeExpectancyPerYearWhiteFemalesJToggleButton = new JToggleButton(" White females ");JToggleButton lifeExpectancyPerYearWhiteMalesJToggleButton = new JToggleButton(" White males ");JPanel lifeExpectancyPerYearButtonsJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyBasePusherJPanel = new JPanel(new GridBagLayout());JPanel lifeExpectancyContentJPanel = new JPanel(new GridBagLayout());JLabel aChartMustBeOpenToCalculateLifeExpectancyJLabel = new JLabel("A chart must be open to calculate life expectancy");JPanel actuarialLifeExpectancyPaperJPanel = new JPanel(new GridBagLayout());JPanel actuarialLifeExpectancyPaperBaseJPanel = new JPanel(new GridBagLayout());int lifeExtensionGraphMargin = 12;JButton newTreatmentAnalysisJButton = new JButton(" New ");JButton openTreatmentAnalysisJButton = new JButton(" Open ");JButton closeTreatmentAnalysisJButton = new JButton(" Close ");JButton saveTreatmentAnalysisJButton = new JButton(" Save ");JButton saveAsTreatmentAnalysisJButton = new JButton(" Save as ");JButton sendTreatmentAnalysisJButton = new JButton(" Send ");JButton deleteTreatmentAnalysisJButton = new JButton(" Delete ");JButton addNoteTreatmentAnalysisJButton = new JButton(" Add note ");JButton printTreatmentAnalysisJButton = new JButton(" Print ");boolean isCostAnalysisUnsaved = false;boolean isTreatmentEffectUnsaved = false;boolean isDecisionModelUnsaved = false;JPopupMenu lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu = new JPopupMenu();JPopupMenu lifeExpectancyPerYearPanelJPopupMenu = new JPopupMenu();JPopupMenu promptToSaveTreatmentAnalysisJPopupMenu = new JPopupMenu();JLabel promptToSaveTreatmentAnalysisHeader1JLabel = new JLabel("Save changes to");JLabel promptToSaveTreatmentAnalysisHeader2JLabel = new JLabel("");JLabel promptToSaveTreatmentAnalysisHeader3JLabel = new JLabel("before closing?");JButton promptToSaveTreatmentAnalysisYesJButton = new JButton("Yes");JButton promptToSaveTreatmentAnalysisNoJButton = new JButton("No");JPopupMenu openTreatmentAnalysisJPopupMenu = new JPopupMenu();JPanel openTreatmentAnalysisChoicesBaseJPanel = new JPanel(new GridBagLayout());JScrollPane openTreatmentAnalysisJScrollPane = new JScrollPane(openTreatmentAnalysisChoicesBaseJPanel);JPanel openTreatmentAnalysisChoicesPusherJPanel = new JPanel(new GridBagLayout());JPanel openTreatmentAnalysisChoicesJPanel = new JPanel(new GridBagLayout());Dimension popupMenusScrollPaneSizeDimension = new Dimension(300, 300);JPopupMenu newTreatmentAnalysisJPopupMenu = new JPopupMenu();boolean keepNewTreatmentAnalysisPopupMenuOpenForCostAnalysis = false;boolean keepNewTreatmentAnalysisPopupMenuOpenForTreatmentEffect = false;MatteBorder menuPanelPopupMenuBorder = new MatteBorder(0, 1, 2, 2, Color.GRAY);JLabel newTreatmentAnalysisHorizontalLineJLabel = new JLabel();JLabel newTreatmentAnalysisNamePromptJLabel = new JLabel("Name: ");JPanel newTreatmentAnalysisHeaderJPanel = new JPanel(new GridBagLayout());JLabel newTreatmentAnalysisHeaderJLabel = new JLabel();JTextField newTreatmentAnalysisNameJTextField = new JTextField();JButton newTreatmentAnalysisOkJButton = new JButton(" Ok ");JPanel saveAsTreatmentAnalysisHeaderJPanel = new JPanel(new GridBagLayout());JLabel saveAsTreatmentAnalysisHeaderJLabel = new JLabel("Save analysis");JPanel openTreatmentAnalysisHeaderJPanel = new JPanel(new GridBagLayout());JLabel openTreatmentAnalysisHeaderJLabel = new JLabel();JLabel saveAsTreatmentAnalysisNamePromptJLabel = new JLabel("Name: ");JLabel saveAsTreatmentAnalysisHorizontalLineJLabel = new JLabel();JLabel openTreatmentAnalysisHorizontalLineJLabel = new JLabel();JTextField saveAsTreatmentAnalysisNameJTextField = new JTextField();Dimension yesAndNoButtonSizeDimension = new Dimension(40, 20);JToggleButton qualityAdjustedLifeYearsYesJToggleButton = new JToggleButton();JToggleButton qualityAdjustedLifeYearsNoJToggleButton = new JToggleButton();JToggleButton qualityAdjustedLifeYearsAutoRankJToggleButton = new JToggleButton(" Rank points ");JLabel qualityAdjustedLifeYearsYesToggleButtonJLabel = new JLabel(" Yes ");JLabel qualityAdjustedLifeYearsNoYesToggleButtonJLabel = new JLabel(" Yes ");JLabel qualityAdjustedLifeYearsNoToggleButtonJLabel = new JLabel(" No ");JButton saveAsTreatmentAnalysisOkJButton = new JButton(" Save ");JLabel openTreatmentAnalysisNamePromptJLabel = new JLabel("Name: ");JTextField openTreatmentAnalysisJTextField = new JTextField();JButton openTreatmentAnalysisOkJButton = new JButton(" Ok ");JPanel treatmentEffectAnalysisButtonsJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisScrollPaneBaseJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisScrollPaneJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisBaseJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisBasePusherJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisPaperContentsJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisPaperJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisPaperPanelHeaderJPanel = new JPanel(new GridBagLayout());JLabel treatmentEffectAnalysisHeaderPanelNameJLabel = new JLabel("");JLabel treatmentEffectAnalysisHeaderPanelDateCreatedJLabel = new JLabel("");JLabel treatmentEffectAnalysisHeaderPanelUserIDJLabel = new JLabel("");JScrollPane treatmentEffectCurveBaseJScrollPane = new JScrollPane(treatmentEffectAnalysisBaseJPanel);int effectCurveGraphMargin = 12;JPanel decisionModelsGraphHeaderJPanel = new JPanel(new GridBagLayout());JLabel decisionModelsNameJPanel = new JLabel("");JLabel decisionModelsNameJLabel = new JLabel("");JLabel decisionModelsNameHeaderJLabel = new JLabel("");JLabel decisionModelsGraphHeaderDateGraphCreatedJLabel = new JLabel("");JLabel decisionModelsGraphHeaderUserIDJLabel = new JLabel("");JPanel decisionModelsBaseJPanel = new JPanel(new GridBagLayout());JPanel decisionModelsButtonsJPanel = new JPanel(new GridBagLayout());JPanel decisionModelsJPanel = new JPanel(new GridBagLayout());JPanel decisionModelsScrollPaneJPanel = new JPanel(new GridBagLayout());JScrollPane decisionModelsJScrollPane = new JScrollPane(decisionModelsScrollPaneJPanel);JPanel costAnalysisScrollPaneBaseJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisScrollPaneJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisBaseJPanel = new JPanel(new GridBagLayout());JScrollPane costAnalysisBaseJScrollPane = new JScrollPane(costAnalysisBaseJPanel);JPanel costAnalysisBasePusherJPanel = new JPanel(new GridBagLayout());JPanel effectCurveGraphPanel = new EffectCurveGraphPanel(null, null, null, null);JLabel effectCurvePaperFirstPageNumberJLabel = new JLabel("1");JPanel treatmentEffectAnalysisTreatmentPointEntryJPanel = new JPanel(new GridBagLayout());JPanel effectCurveTreatmentPointsDisplayScrollPaneJPanel = new JPanel(new GridBagLayout());JPanel effectCurveTreatmentPointsDisplayJPanel = new JPanel(new GridBagLayout());JPanel effectCurveTreatmentPointsDisplayPusherJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisTreatmentPointsJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlPointEntryJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlPointsContentJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlPointsDisplayJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlPointsDisplayPusherJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlPointHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlNameHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlEffectValueHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlTimeHeaderJPanel = new JPanel(new GridBagLayout());JLabel treatmentEffectAnalysisControlNameHeaderJLabel = new JLabel(" Control name ");JLabel treatmentEffectAnalysisControlEffectValueHeaderJLabel = new JLabel("Control effect");JLabel treatmentEffectAnalysisControlTimeHeaderJLabel = new JLabel(" Time (unit) ");JPanel treatmentEffectAnalysisTreatmentPointHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisTreatmentNameHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisTreatmentTimeHeaderJPanel = new JPanel(new GridBagLayout());JLabel treatmentEffectAnalysisTreatmentNameHeaderJLabel = new JLabel(" Treatment name ");JLabel treatmentEffectAnalysisTreatmentEffectValueHeaderJLabel = new JLabel(" Treatment effect ");JLabel treatmentEffectAnalysisTreatmentTimeHeaderJLabel = new JLabel(" Time (unit) ");JPanel effectCurveTreatmentTimePointHeaderJPanel = new JPanel(new GridBagLayout());JLabel effectCurveTreatmentTimePointHeaderJLabel = new JLabel("Add treatment time-point: ");JLabel treatmentEffectAnalysisTreatmentEffectValueJLabel = new JLabel(" Treatment effect: ");JLabel treatmentEffectAnalysisTreatmentTimeValueJLabel = new JLabel(" Time: ");JButton treatmentEffectAnalysisTreatmentTimeUnitJButton = new JButton(" Unit of time: ");JTextField treatmentEffectAnalysisTreatmentTimeUnitJTextField = new JTextField(5);JLabel treatmentEffectAnalysisTreatmentNameJLabel = new JLabel("Treatment name: ");JTextField treatmentEffectAnalysisTreatmentNameJTextField = new JTextField(12);JButton treatmentEffectAnalysisTreatmentAddTimePointOkJButton = new JButton(" Ok ");JTextField treatmentEffectAnalysisTreatmentEffectValueJTextField = new JTextField(5);JTextField treatmentEffectAnalysisTreatmentTimeValueJTextField = new JTextField(5);JPanel treatmentEffectAnalysisTreatmentPointsContentJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisTreatmentPointsDisplayJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisTreatmentPointsDisplayPusherJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlPointsJPanel = new JPanel(new GridBagLayout());JPanel treatmentEffectAnalysisControlTimePointPromptJPanel = new JPanel(new GridBagLayout());JLabel treatmentEffectAnalysisControlTimePointPromptJLabel = new JLabel(" Add control time-point: ");JLabel treatmentEffectAnalysisControlEffectValueJLabel = new JLabel(" Control effect: ");JLabel treatmentEffectAnalysisControlNamePromptJLabel = new JLabel("Control name: ");JButton treatmentEffectAnalysisControlTimeUnitJButton = new JButton(" Unit of time: ");JPopupMenu treatmentEffectAnalysisTreatmentTimeUnitButtonJPopupMenu = createTreatmentEffectAnalysisTimeUnitPopupMenu("Treatment");JPopupMenu treatmentEffectAnalysisControlTimeUnitButtonJPopupMenu = createTreatmentEffectAnalysisTimeUnitPopupMenu("Control");JButton treatmentEffectAnalysisControlAddTimePointOkJButton = new JButton(" Ok ");JLabel treatmentEffectAnalysisControlTimeValueJLabel = new JLabel(" Time: ");JTextField treatmentEffectAnalysisControlEffectValueJTextField = new JTextField(5);JTextField treatmentEffectAnalysisControlTimeValueJTextField = new JTextField(5);JTextField treatmentEffectAnalysisControlTimeUnitJTextField = new JTextField(5);JTextField treatmentEffectAnalysisControlNameJTextField = new JTextField(12);JPanel costAnalysisICERValuesJPanel = new JPanel(new GridBagLayout());JLabel costAnalysisPaperFirstPageNumberJLabel = new JLabel("1");CostAnalysisGraph costAnalysisGraphPanel = new CostAnalysisGraph("Effectiveness", null, null, null);JPanel costAnalysisPaperJPanel = new JPanel(new GridBagLayout());JPanel iCERValuesPanelPusherJPanel = new JPanel(new GridBagLayout());JPanel iCERValuesBaseJPanel = new JPanel(new GridBagLayout());JPanel firstPageCostAnalysisICERValuesJPanel = new JPanel(new GridBagLayout());Dimension costPointsCellPanelDimension = new Dimension(80, 20);Dimension iCERCellDimension = new Dimension(30, 20);Dimension treatmentEffectCellPanelDimension = new Dimension(140, 20);Dimension treatmentTimeCellPanelDimension = new Dimension(100, 20);JTextField costAnalysisTreatmentCostJTextField = new JTextField(4);JTextField costAnalysisTreatmentEffectivenessJTextField = new JTextField(4);JButton costAnalysisOkJButton = new JButton(" Ok ");JPanel qualityAdjustedSaveTreatmentCostPointJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisButtonsJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisButtonsSpacerJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisButtonsBaseJPanel = new JPanel(new GridBagLayout());JLabel costAnalysisSaveTreatmentCostPointHeaderJLabel = new JLabel("Add cost-effectiveness point:");JPanel decisionAnalysisICERLegendJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisIncrementalCostEffectivenessRatioJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisSaveTreatmentCostPointJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisCostAnalysisButtonsPusherJPanel = new JPanel(new GridBagLayout());JPanel qualityAdjustedSaveTreatmentCostPointPusherJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointTreatmentNameHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointCostHeaderJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointEffectivenessHeaderJPanel = new JPanel(new GridBagLayout());JLabel treatmentCostPointTreatmentNameHeaderJLabel = new JLabel(" Treatment ");JLabel treatmentCostPointCostHeaderJLabel = new JLabel(" Cost ");JLabel treatmentCostPointEffectivenessHeaderJLabel = new JLabel(" Effectiveness ");JPanel costPointsHeaderJPanel = new JPanel(new GridBagLayout());JPanel costPointsDisplayJPanel = new JPanel(new GridBagLayout());JPanel costPointsDisplayPanelPusherJPanel = new JPanel(new GridBagLayout());JPanel costPointsJPanel = new JPanel(new GridBagLayout());JPanel costAnalysisSaveTreatmentCostPointsDisplayPusherJPanel = new JPanel(new GridBagLayout());JPanel costPointsDisplayBaseJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel = new JPanel(new GridBagLayout());JPanel decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel = new JPanel(new GridBagLayout());JPanel statisticsCostsOfTreatmentOptionsAAndBLegendJPanel = new JPanel(new GridBagLayout());JLabel decisionAnalysisIncrementalCostEffectivenessRatio1JLabel = new JLabel("ICER = ");JLabel costAnalysisTreatmentCostPromptJLabel = new JLabel("Cost: ");JLabel costAnalysisTreatmentEffectivenessPromptJLabel = new JLabel("Effectiveness: ");JLabel costAnalysisTreatmentNameJLabel = new JLabel("Treatment name: ");JTextField costAnalysisTreatmentNameJTextField = new JTextField(10);Font treatmentAnalysisDataFont = new Font("serif", Font.PLAIN, 12);Font iCERNormalItalicsFont = new Font("serif", Font.ITALIC, 10);Font iCERNormalSubscriptItalicsFont = new Font("serif", Font.ITALIC, 8);Font iCERSmallPlainFont = new Font("serif", Font.PLAIN, 10);Font iCERSmallItalicsFont = new Font("serif", Font.ITALIC, 10);Font iCERSmallSubscriptItalicsFont = new Font("serif", Font.ITALIC, 8);JLabel decisionAnalysisIncrementalCostEffectivenessRatio2JLabel = new JLabel("C");JLabel decisionAnalysisIncrementalCostEffectivenessRatio3JLabel = new JLabel("B");JLabel decisionAnalysisIncrementalCostEffectivenessRatio5JLabel = new JLabel(" - C");JLabel decisionAnalysisIncrementalCostEffectivenessRatio6JLabel = new JLabel("A ");JLabel decisionAnalysisIncrementalCostEffectivenessRatio7JLabel = new JLabel("E");JLabel decisionAnalysisIncrementalCostEffectivenessRatio8JLabel = new JLabel("B");JLabel decisionAnalysisIncrementalCostEffectivenessRatio10JLabel = new JLabel(" - E");JLabel decisionAnalysisIncrementalCostEffectivenessRatio11JLabel = new JLabel("A ");JLabel statisticsCostsOfTreatmentOptionsAAndBLegend1JLabel = new JLabel("C");JLabel statisticsCostsOfTreatmentOptionsAAndBLegend2JLabel = new JLabel("A, B ");JLabel statisticsCostsOfTreatmentOptionsAAndBLegend3JLabel = new JLabel(" = cost of treatments ");JLabel statisticsCostsOfTreatmentOptionsAAndBLegend4JLabel = new JLabel("A");JLabel statisticsCostsOfTreatmentOptionsAAndBLegend5JLabel = new JLabel(" and ");JLabel statisticsCostsOfTreatmentOptionsAAndBLegend6JLabel = new JLabel("B ");JLabel statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend1JLabel = new JLabel("E");JLabel statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend2JLabel = new JLabel("A, B ");JLabel statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend3JLabel = new JLabel(" = effectiveness of treatments ");JLabel statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend4JLabel = new JLabel("A");JLabel statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend5JLabel = new JLabel(" and ");JLabel statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend6JLabel = new JLabel("B ");JPanel statisticsDataEntryJPanel = new JPanel(new GridBagLayout());JToggleButton statisticsJToggleButton = new JToggleButton("Chart statistics");JButton statisticsDataEntryJButton = new JButton("Enter data");JLabel statisticsDataEntryPatientChartTypeHeaderJLabel = new JLabel("Chart ID or first + last name: ");JLabel statisticsDataEntryMedicalCodeTypeHeaderJLabel = new JLabel("Select code set: ");JPanel statisticsDataEntryMedicalCodeSetButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton = new JToggleButton("HL-7 2.3.1");JToggleButton statisticsDataEntryCPT2009CodeTypeJToggleButton = new JToggleButton("CPT2009");JToggleButton statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton = new JToggleButton("RxNorm");JToggleButton statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton = new JToggleButton("ICD-10");JToggleButton statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton = new JToggleButton("HCPCS1");JToggleButton statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton = new JToggleButton("HCPCS2");JToggleButton statisticsDataEntryLOINCMedicalCodeTypeJToggleButton = new JToggleButton("LOINC");JPanel statisticsAddMedicalCodeJPanel = new JPanel(new GridBagLayout());JLabel statisticsMedicalCodeGroupJLabel = new JLabel("Enter medical code: ");JLabel statisticsTimeRangeGroupJLabel = new JLabel("Time-range name: ");JLabel statisticsPatientChartGroupJLabel = new JLabel("Patient chart: ");JTextField statisticsMedicalCodeJTextField = new JTextField(12);JButton statisticsCreateMedicalCodeEntryOkJButton = new JButton(" Add medical code ");JButton statisticsCreateTimeRangeEntryOkJButton = new JButton(" Add time range ");JButton statisticsCreatePatientChartEntryOkJButton = new JButton(" Add patient chart ");JPanel statisticsAddSaveMedicalCodeGroupOkJPanel = new JPanel(new GridBagLayout());JPanel statisticsAddSaveTimeRangeGroupOkJPanel = new JPanel(new GridBagLayout());JPanel statisticsAddSavePatientChartGroupOkJPanel = new JPanel(new GridBagLayout());JLabel statisticsAddMedicalCodeGroupOkJLabel = new JLabel(" Medical code groups ");JLabel statisticsAddTimeRangeGroupOkJLabel = new JLabel(" Time range groups ");JLabel statisticsAddPatientChartGroupOkJLabel = new JLabel(" Chart groups ");JLabel statisticsAddMedicalCodeGroupNameJLabel = new JLabel("Medical code group name: ");JLabel statisticsAddTimeRangeGroupNameJLabel = new JLabel("Time range group name: ");JLabel statisticsAddPatientChartGroupNameJLabel = new JLabel("Chart group group name: ");JButton statisticsAddMedicalCodeGroupSaveJButton = new JButton(" Save group ");JButton statisticsAddTimeRangeGroupSaveJButton = new JButton(" Save group ");JButton statisticsAddPatientChartGroupSaveJButton = new JButton(" Save group ");JTextField statisticsAddMedicalCodeGroupOkJTextField = new JTextField();JTextField statisticsAddTimeRangeGroupOkJTextField = new JTextField();JTextField statisticsAddPatientChartGroupNameJTextField = new JTextField();JPanel statisticsDataEntryPatientChartIdOrNameTextFieldJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeFromPatientTimeJPanel = new JPanel(new GridBagLayout());JLabel statisticsTimeRangeFromPatientTimeJLabel = new JLabel("Time: ");JPanel statisticsTimeRangeFromPatientDateJPanel = new JPanel(new GridBagLayout());JLabel statisticsTimeRangeFromPatientDateJLabel = new JLabel("Date: ");JPanel statisticsTimeRangeToPatientTimeJPanel = new JPanel(new GridBagLayout());JLabel statisticsTimeRangeToPatientTimeJLabel = new JLabel("Time: ");JPanel statisticsTimeRangeToPatientDateJPanel = new JPanel(new GridBagLayout());JLabel statisticsTimeRangeToPatientDateJLabel = new JLabel("Date: ");Border userInputLineBorder = new MatteBorder(0, 0, 1, 0, Color.BLACK);JTextField statisticsTimeRangeFromDayOfWeekJTextField = new JTextField(6);JLabel statisticsTimeRangeFromComma1AndSpaceJLabel = new JLabel(", ");JTextField statisticsTimeRangeFromMonthJTextField = new JTextField(7);JTextField statisticsTimeRangeFromDayOfMonthJTextField = new JTextField(2);JLabel statisticsTimeRangeFromComma2JLabel = new JLabel(",");JTextField statisticsTimeRangeFromYearJTextField = new JTextField(3);JTextField statisticsTimeRangeFromHourJTextField = new JTextField(2);JLabel statisticsTimeRangeFromColonJLabel = new JLabel(":");JTextField statisticsTimeRangeFromMinuteJTextField = new JTextField(2);JTextField statisticsTimeRangeFromAmPmJTextField = new JTextField(2);JTextField statisticsTimeRangeToDayOfWeekJTextField = new JTextField(6);JLabel statisticsTimeRangeToComma1AndSpaceJLabel = new JLabel(", ");JTextField statisticsTimeRangeToMonthJTextField = new JTextField(7);JTextField statisticsTimeRangeToDayOfMonthJTextField = new JTextField(2);JLabel statisticsTimeRangeToComma2JLabel = new JLabel(",");JTextField statisticsTimeRangeToYearJTextField = new JTextField(3);JTextField statisticsTimeRangeToHourJTextField = new JTextField(2);JLabel statisticsTimeRangeToColonJLabel = new JLabel(":");JTextField statisticsTimeRangeToMinuteJTextField = new JTextField(2);JTextField statisticsTimeRangeToAmPmJTextField = new JTextField(2);JPanel statisticsDataEntryTimeRangeFromJPanel = new JPanel(new GridBagLayout());JPanel statisticsDataEntryTimeRangeToJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartIDAndNamePrefixJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientNameGivenNameJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientNameMiddleInitialOrNameJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientNameLastNamePrefixJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientNameFamilyNameJPanel = new JPanel(new GridBagLayout());JLabel statisticsPatientChartIDJLabel = new JLabel("Chart ID: ");JLabel statisticsPatientNamePrefixJLabel = new JLabel("Prefix: ");JLabel statisticsPatientNameGivenNameJLabel = new JLabel("Given name: ");JLabel statisticsPatientNameMiddleInitialOrNameJLabel = new JLabel("Middle initial or name: ");JLabel statisticsPatientNameLastNamePrefixJLabel = new JLabel("Last name prefix: ");JLabel statisticsPatientNameFamilyNameJLabel = new JLabel("Family name: ");JTextField statisticsPatientChartIDJTextField = new JTextField(6);JTextField statisticsPatientNamePrefixJTextField = new JTextField(5);JTextField statisticsPatientNameGivenNameJTextField = new JTextField(12);JTextField statisticsPatientNameMiddleInitialOrNameJTextField = new JTextField(5);JTextField statisticsPatientNameLastNamePrefixJTextField = new JTextField(5);JTextField statisticsPatientNameFamilyNameJTextField = new JTextField(12);JPanel statisticsMedicalCodeGroupsJPanel = new JPanel(new GridBagLayout());JPanel statisticsTimeRangeGroupsJPanel = new JPanel(new GridBagLayout());JPanel statisticsPatientChartGroupsJPanel = new JPanel(new GridBagLayout());JScrollPane statisticsMedicalCodeGroupsJScrollPane = new JScrollPane(statisticsMedicalCodeGroupsJPanel);JScrollPane statisticsTimeRangeGroupsJScrollPane = new JScrollPane(statisticsTimeRangeGroupsJPanel);JScrollPane statisticsPatientChartGroupsJScrollPane = new JScrollPane(statisticsPatientChartGroupsJPanel);JLabel statisticsEncodedEntriesEntryHeaderJLabel = new JLabel("Encoded entries: ");JLabel statisticsTimeRangeEntryHeaderJLabel = new JLabel("Time ranges: ");JLabel statisticsPatientChartEntryHeaderJLabel = new JLabel("Patient charts: ");JPanel statisticsDataEntryAndOutputAndDistributionsJPanel = new JPanel(new GridBagLayout());JPanel statisticsDataDisplayJPanel = new JPanel(new GridBagLayout());JPanel statisticsOutputAndDistributionsJPanel = new JPanel(new GridBagLayout());CardLayout statisticsOutputPanelCardLayout = new CardLayout();JPanel statisticsOutputCardedJPanel = new JPanel(statisticsOutputPanelCardLayout);CardLayout statisticsAveragePanelCardLayout = new CardLayout();JPanel statisticsAverageJPanel = new JPanel(statisticsAveragePanelCardLayout);JButton statisticsMeanAverageJButton = new JButton("Mean average");JButton statisticsMedianAverageJButton = new JButton("Mean average");JPanel statisticsMeanAverageJPanel = new JPanel(new GridBagLayout());JLabel statisticsMeanAverageJLabel = new JLabel("Mean average");JTextField statisticsMeanAverageJTextField = new JTextField();JPanel statisticsMedianAverageJPanel = new JPanel(new GridBagLayout());JLabel statisticsMedianAverageJLabel = new JLabel("Mean average: ");JTextField statisticsMedianAverageJTextField = new JTextField();JPanel statisticsPanelButtonsJPanel = new JPanel();JPanel statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel = new JPanel(new GridBagLayout());JLabel horizontalLineJLabel = new JLabel("");JPanel dataQueryJPanel = new JPanel(new GridBagLayout());CardLayout dataQueryInputCardedSubButtonsCardLayout = new CardLayout();JPanel dataQueryInputCardedSubButtonsJPanel = new JPanel(dataQueryInputCardedSubButtonsCardLayout);JPanel dataQueryInputCardedSubButtonsCoverJPanel = new JPanel();JPanel dataQueryInputJPanel = new JPanel(new GridBagLayout());JPanel dataQueryOutputJPanel = new JPanel(new GridBagLayout());JLabel dataQueryInputHeaderPanelJLabel = new JLabel("Query recorded data:");JTextField internalQueryTermJTextField = new JTextField();JLabel internalQueryTermPromptQueryJLabel = new JLabel("Enter search query: ");JLabel internalQueryTermResponseJLabel = new JLabel("Narrow search results to specific criteria:");JButton internalQueryTermOkJButton = new JButton(" Ok ");JToggleButton queryEverythingJToggleButton = new JToggleButton(" Everything ");JToggleButton queryChartsWindowJToggleButton = new JToggleButton(" Patient information (Charts) ");JPanel dataQueryChartsSubButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton queryChartsValuesJToggleButton = new JToggleButton("Values (entered data)");JToggleButton queryChartsMedicalCodeDescriptionTypeJToggleButton = new JToggleButton("Code descriptions");JToggleButton queryChartsMedicalCodeJToggleButton = new JToggleButton("Medical codes");JToggleButton queryChartsDataCellComponentsJToggleButton = new JToggleButton("Data item components");JToggleButton queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton = new JToggleButton("HL-7 2.3.1");JToggleButton queryChartsEntryCPT2009CodeTypeJToggleButton = new JToggleButton("CPT2009");JToggleButton queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton = new JToggleButton("RxNorm");JToggleButton queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton = new JToggleButton("ICD-10");JToggleButton queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton = new JToggleButton("HCPCS1");JToggleButton queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton = new JToggleButton("HCPCS2");JToggleButton queryChartsEntryLOINCMedicalCodeTypeJToggleButton = new JToggleButton("LOINC");JToggleButton querySystemWindowJToggleButton = new JToggleButton(" System data ");JPanel dataQuerySystemSubButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton queryMessagingWindowJToggleButton = new JToggleButton(" Messaging data ");JPanel dataQueryMessagingSubButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton queryDecisionSupportWindowJToggleButton = new JToggleButton(" Decision Support data ");JPanel dataQueryDecisionSupportSubButtonsJPanel = new JPanel(new GridBagLayout());JToggleButton queryPracticeAssistantWindowJToggleButton = new JToggleButton(" Practice Assistant data ");JPanel dataQueryPracticeAssistantSubButtonsJPanel = new JPanel(new GridBagLayout());JPanel MolecularAssemblerJPanel = new JPanel(new GridBagLayout());CardLayout fileChooserOnMolecularAssemblerPanelCardLayout = new CardLayout();JPanel fileChooserOnMolecularAssemblerPanel = new JPanel(fileChooserOnMolecularAssemblerPanelCardLayout);JPanel molecularNetworkChooserScrollPaneJPanel = new JPanel(new GridBagLayout());JScrollPane molecularNetworkChooserJScrollPane = new JScrollPane(molecularNetworkChooserScrollPaneJPanel);JPanel rulesJPanel = new JPanel(new GridBagLayout());JLabel rulesHeaderJLabel0 = new JLabel("Rules; if a set of conditions are met then do something.");JLabel rulesHeaderJButton = new JLabel("Such as: ");JOptionPane rulesHeaderJOptionPane = new JOptionPane(" rulesHeaderJOptionPane ");JLabel ifTheEntryForMedicalCodeJLabel = new JLabel("If the entry for ");JLabel medicalCodeSetNameJLabel = new JLabel(" (name of code set i.e., \"HL-7...\") ");JLabel medicalCodeJTextField = new JLabel(" medical code ");JLabel patientsJLabel = new JLabel("patient's (health record data per se)");JLabel rulesMedicalCodeValueJLabel = new JLabel("For the medical code value of: < 3");JLabel rulesMedicalCodeTestCodeJLabel = new JLabel("LOINC/RxNORM codes:");JLabel rulesMedicalCodeTestValueJLabel = new JLabel("doesExist and was completed");JLabel rulesAlertJLabel = new JLabel("Then alert (chart-authorized) users to: ");JLabel rulesToWhatProcedureOrNarrativeJLabel = new JLabel("order this medical code or narrative: ");JTextField rulesMedicalCodeJTextField = new JTextField();JTextField rulesMedicalCodeValueJTextField = new JTextField();JTextField rulesAlertJTextField = new JTextField();JTextField rulesToWhatProcedureOrNarrativeJTextField = new JTextField();JPanel dSCoverJPanel = new JPanel(new GridBagLayout());JButton browserBackJButton = new JButton(new ImageIcon((byte[]) Device.imagesVector.elementAt(2)));JButton browserForwardJButton = new JButton(new ImageIcon((byte[]) Device.imagesVector.elementAt(3)));JButton browserRefreshJButton = new JButton(new ImageIcon((byte[]) Device.imagesVector.elementAt(5)));JButton browserHomeJButton = new JButton(new ImageIcon((byte[]) Device.imagesVector.elementAt(4)));JButton browserStopJButton = new JButton(new ImageIcon((byte[]) Device.imagesVector.elementAt(6)));JButton browserGoJButton = new JButton(" Go ");JEditorPane browserJPanel;JTextField uRLJTextField = new JTextField(24);JPanel MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel = new JPanel(new GridBagLayout());String cycleTherapeuticTargetsParameterString = "NONE";JLabel MolecularAssemblerInputPanelTopHorizontalLineJLabel = new JLabel();JLabel MolecularAssemblerInputPanelBottomHorizontalLineJLabel = new JLabel();JLabel MolecularAssemblerHeaderJLabel = new JLabel(" Molecular networks: ");JLabel MolecularAssemblerPossibleInterventionStrategiesButtonsPanelHeaderJLabel = new JLabel("0 trials");JLabel MolecularAssemblerNetworkNumberPromptJLabel = new JLabel(" Network: ");JTextField MolecularAssemblerNetworkNumberJTextField = new JTextField(3);JPanel MolecularAssemblerNetworkJPanel = new JPanel(new GridBagLayout());JToggleButton cycleClinicalTrialsShowAllJToggleButton = new JToggleButton("  Show all  ");JButton MolecularAssemblerSaveJButton = new JButton("    Save    ");JButton MolecularAssemblerOpenJButton = new JButton("    Open    ");JButton MolecularAssemblerDeleteJButton = new JButton("   Delete   ");JButton MolecularAssemblerZoomInJButton = new JButton("  Zoom in   ");JButton MolecularAssemblerZoomOutJButton = new JButton("  Zoom out  ");JButton MolecularAssemblerZoomResetJButton = new JButton(" Reset zoom ");JButton cycleClinicalTrialsUpJButton = new JButton(" Cycle 1 up ");JButton cycleClinicalTrialsDownJButton = new JButton("Cycle 1 down");JPanel inputJPanel = new JPanel(new GridBagLayout());JTextArea MolecularAssemblerQueryJTextArea = new JTextArea();TitledBorder MolecularAssemblerQueryTextAreaTitledBorder = new TitledBorder("Query:");JToggleButton findQueryAssociatedMolecularNetworksJToggleButton = new JToggleButton(" Find ");JToggleButton includeMolecularAbbreviationsJToggleButton = new JToggleButton(" Include molecular abbreviations ");JToggleButton saveMolecularAssemblerSessionJButton = new JToggleButton(" Save ");JPanel mainButtonsJPanel = new JPanel(new GridBagLayout());JPanel biomoietyNetworksPanelBaseJPanel = new JPanel(new GridBagLayout());MolecularNetworksPanel molecularNetworksPanel = new MolecularNetworksPanel();BiomoietyNetworksRadarPanel biomoietyNetworksRadarPanel;JPanel biomoietyNetworksPanelViewRadarPanel = new JPanel(new GridBagLayout());JPanel MolecularAssemblerResultsMainBiomoietyNetworksJPanel = new JPanel(new GridBagLayout());JScrollPane biomoietyNetworksJScrollPane = new JScrollPane(biomoietyNetworksPanelBaseJPanel);Dimension abstractReferencePanelScrollPaneDimension = new Dimension(600, 200);JPanel abstractReferenceJPanel = new JPanel(new GridBagLayout());JScrollPane abstractReferencePanelJScrollPane = new JScrollPane(abstractReferenceJPanel);JSplitPane MolecularAssemblerResultsJSplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, MolecularAssemblerResultsMainBiomoietyNetworksJPanel, abstractReferencePanelJScrollPane);JScrollBar clinicalTrialsPanelHorizontalJScrollbar = new JScrollBar(JScrollBar.HORIZONTAL, 0, 40, 0, 100);JScrollBar clinicalTrialsPanelVerticalJScrollbar = new JScrollBar(JScrollBar.VERTICAL, 0, 40, 0, 100);JTextArea referenceDatePublishedJTextArea = new JTextArea();JTextArea referenceTitleJTextArea = new JTextArea();JTextArea referenceAuthorsJTextArea = new JTextArea();JTextArea referenceAbstractJTextArea = new JTextArea();JTextArea referenceFacilityJTextArea = new JTextArea();JTextArea referenceCitationJTextArea = new JTextArea();JRadioButton jRadioButton = new JRadioButton();JButton internetBrowserJButton = new JButton();JLabel internetBrowserButton1JLabel = new JLabel("Internet");JLabel internetBrowserButton2JLabel = new JLabel("browser");JButton dataQueryJButton = new JButton(" Query ");JButton statisticsJButton = new JButton(" Statistics ");JButton treatmentAnalysisJButton = new JButton();JLabel decisionAnalysisButton1JLabel = new JLabel("Treatment");JLabel decisionAnalysisButton2JLabel = new JLabel("analysis");JButton queryJButton = new JButton(" Query ");JButton rulesJButton = new JButton(" Rules ");JButton MolecularAssemblerJButton = new JButton();JButton statisticsPanelTTestJButton = new JButton(" t-test ");JButton statisticsPanelOneWayANOVAJButton = new JButton(" One-way ANOVA ");JButton statisticsPanelSignedOnlyJButton = new JButton(" Signed only ");JButton statisticsPanelWilcoxonSignedRankJButton = new JButton(" Wilcoxon signed rank ");JButton statisticsPanelWilcoxonRankSumJButton = new JButton(" Wilcoxon rank sum ");JButton statisticsPanelConfidenceIntervalsJButton = new JButton(" Confidence intervals ");JButton statisticsPanelPairedTTestJButton = new JButton(" Paired t-test ");JButton statisticsPanelIndependentJButton = new JButton(" Independent ");JToggleButton frequencyDistributionJToggleButton = new JToggleButton("Frequency Distribution");JToggleButton relativeFrequencyDistributionJToggleButton = new JToggleButton("Frequency Distribution");JToggleButton barChartJToggleButton = new JToggleButton("Bar chart");JToggleButton histogramJToggleButton = new JToggleButton("Histogram");JToggleButton relativeFrequencyPolygonJToggleButton = new JToggleButton("Relative frequency distribution");JToggleButton absoluteFrequencyPolygonJToggleButton = new JToggleButton("Absolute frequency distribution");JToggleButton lineChartJToggleButton = new JToggleButton("Frequency polygonal");JLabel MolecularAssemblerButton1JLabel = new JLabel("Translational");JLabel MolecularAssemblerButton2JLabel = new JLabel("medicine");JPanel mainButtonsPanelBottomLineAndPusherJPanel = new JPanel();JPanel mainButtonsPaneBottomLineJPanel = new JPanel();JLabel biomoietyNameJLabel = new JLabel();JLabel datePublishedJLabel = new JLabel();JLabel authorsJLabel = new JLabel();JLabel abstractJLabel = new JLabel();JLabel journalJLabel = new JLabel();JLabel citationJLabel = new JLabel();JPanel biomoietyNameJPanel = new JPanel(new GridBagLayout());JPanel datePublishedJPanel = new JPanel(new GridBagLayout());JPanel titleJPanel = new JPanel(new GridBagLayout());JPanel authorsJPanel = new JPanel(new GridBagLayout());JPanel abstractTextJPanel = new JPanel(new GridBagLayout());JPanel journalJPanel = new JPanel(new GridBagLayout());JPanel citationJPanel = new JPanel(new GridBagLayout());boolean borderPressed = false;CardLayout decisionSupportMainPanelCardLayout = new CardLayout();JPanel decisionSupportMainJPanel = new JPanel(decisionSupportMainPanelCardLayout);Color abstractReferencePanelColor = new Color(238, 238, 238);Color referenceAbstractLabelsColor = new Color(43, 43, 43);GridBagConstraints optimizedLifeExpectancyGraphHeaderPatientBirthdatePanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphHeaderPatientSexPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphHeaderPatientRacePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPaperBaseButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisNamePanelConstraints = new GridBagConstraints();GridBagConstraints costPointsPanelConstraints = new GridBagConstraints();GridBagConstraints decisionModelsGraphHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisPaperPanelHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyGraphHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyGraphHeaderPatientBirthdatePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyGraphHeaderPatientRacePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyGraphHeaderPatientSexPanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisGraphHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints popupMenuConstraints = new GridBagConstraints();GridBagConstraints dataQueryChartsSubButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints dataQuerySystemSubButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints dataQueryMessagingSubButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints dataQueryDecisionSupportSubButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints dataQueryPracticeAssistantSubButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyPaperBasePanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyGraphNamePanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyPaperPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyPaperHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints septicemiaPanelConstraints = new GridBagConstraints();GridBagConstraints mortalityRatePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearButtonsPanelHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyAtBirthOverLastFortyYearsPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyAtBirthOverLastFortyYearsBasePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearBasePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExtendingFactorsLeftPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExtendingFactorsRightPanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyContentPanelConstraints = new GridBagConstraints();GridBagConstraints actuarialLifeExpectancyPaperPanelConstraints = new GridBagConstraints();GridBagConstraints actuarialLifeExpectancyPaperBasePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyBasePanelConstraints = new GridBagConstraints();GridBagConstraints increaseInExpectedLifespanDueToTransformativeMedicinePanelConstraints = new GridBagConstraints();GridBagConstraints effectCurveControlTimePointPanelConstraints = new GridBagConstraints();GridBagConstraints effectCurveTreatmentTimePointHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints qualityAdjustedLifeYearsToggleButtonConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectCurveScrollPaneBasePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectCurveScrollPanePanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisScrollPaneBasePanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisScrollPanePanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectCurveButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisButtonsBasePanelConstraints = new GridBagConstraints();GridBagConstraints qualityAdjustedSaveTreatmentCostPointPanelConstraints = new GridBagConstraints();GridBagConstraints openTreatmentCostsAnalysisChoicesPanelConstraints = new GridBagConstraints();GridBagConstraints effectCurveTreatmentPointsDisplayBasePanelConstraints = new GridBagConstraints();GridBagConstraints effectCurveTreatmentPointsDisplayPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentPointsContentPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlPointsContentPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentPointsDisplayPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlPointsDisplayPanelConstraints = new GridBagConstraints();GridBagConstraints menuPanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentAnalysisPopupMenuConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointTreatmentNameHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointCostHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointEffectivenessHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentAnalysisHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints saveAsTreatmentAnalysisHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints openTreatmentCostsAnalysisHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisICERLegendPanelConstraints = new GridBagConstraints();GridBagConstraints costPointsDisplayBasePanelConstraints = new GridBagConstraints();GridBagConstraints costPointsDisplayPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostsAnalysisTreatmentBTreatmentAHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisPaperPanelConstraints = new GridBagConstraints();GridBagConstraints saveAsTreatmentAnalysisPopupMenuConstraints = new GridBagConstraints();GridBagConstraints promptToSaveTreatmentAnalysisPopupMenuConstraints = new GridBagConstraints();GridBagConstraints openTreatmentAnalysisPopupMenuConstraints = new GridBagConstraints();GridBagConstraints costAnalysisBasePanelConstraints = new GridBagConstraints();GridBagConstraints iCERRatioPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsCostOfTreatmentBPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsCostOfTreatmentAPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsEffectivenessOfTreatmentBPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsEffectivenessOfTreatmentAPanelConstraints = new GridBagConstraints();GridBagConstraints iCERValuesBasePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentPointEntryPanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisICERValuesPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints = new GridBagConstraints();GridBagConstraints costAnalysisSaveTreatmentCostPointPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentPointsPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlPointEntryPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisBasePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisPaperContentsPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisPaperPanelConstraints = new GridBagConstraints();GridBagConstraints decisionModelsBasePanelConstraints = new GridBagConstraints();GridBagConstraints decisionModelsButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints decisionModelsPanelConstraints = new GridBagConstraints();GridBagConstraints decisionModelsScrollPaneBasePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlPointsPanelConstraints = new GridBagConstraints();GridBagConstraints effectCurveControlPointsEntryPointsBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsControlCurveDueToTreatmentPanelBasePanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisButtonConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisTopButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisBaseButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints decisionAnalysisPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsLifeExpectanyDueToTreatmentPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMeanAveragePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMedianAveragePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsAddMedicalCodeGroupOkPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsAddPatientChartGroupOkPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsAddTimeRangeGroupOkPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMedicalCodeBaseJPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeFromPatientDatePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeFromPatientTimePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeToPatientDatePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeToPatientTimePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientChartIDAndNamePrefixPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientNameGivenNamePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientNameMiddleInitialOrNamePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientNameLastNamePrefixPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientNameFamilyNamePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientChartBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientChartBaseBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataEntryPatientChartInformationPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientChartEntryHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientChartEntryBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPatientChartGroupsPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeBaseBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataEntryTimeRangeInformationPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeEntryHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeEntryBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsTimeRangeGroupsPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMedicalCodeGroupsPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMedicalCodeBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsAddMedicalCodePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataEntryMedicalCodeTypePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMedicalCodeEntryHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsMedicalCodeEntryBasePanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataDisplayPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataFormulasPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataEntryPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsDataEntryAndOutputAndDistributionsPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsOutputAndDistributionsPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsEntryAndOutputButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints molecularNetworkChooserScrollPanePanelConstraints = new GridBagConstraints();GridBagConstraints biomoietyNetworksPanelBasePanelConstraints = new GridBagConstraints();GridBagConstraints internetBrowserButtonConstraints = new GridBagConstraints();GridBagConstraints MolecularAssemblerButtonConstraints = new GridBagConstraints();GridBagConstraints rulesPanelConstraints = new GridBagConstraints();GridBagConstraints dataQueryPanelConstraints = new GridBagConstraints();GridBagConstraints dataQueryOutputPanelConstraints = new GridBagConstraints();GridBagConstraints dataQueryInptPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPanelButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints statisticsPanelBasePanelConstraints = new GridBagConstraints();GridBagConstraints contentPanelConstraints = new GridBagConstraints();GridBagConstraints mainButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints decisionSupportMainPanelConstraints = new GridBagConstraints();GridBagConstraints inputPanelConstraints = new GridBagConstraints();GridBagConstraints molecularPanelConstraints = new GridBagConstraints();GridBagConstraints MolecularAssemblerPanelConstraints = new GridBagConstraints();GridBagConstraints MolecularAssemblerNetworkPanelConstraints = new GridBagConstraints();GridBagConstraints browseInternetPanelConstraints = new GridBagConstraints();GridBagConstraints patientHandoutsPanelConstraints = new GridBagConstraints();GridBagConstraints clinicalPathwaysPanelConstraints = new GridBagConstraints();GridBagConstraints sOAPsPanelConstraints = new GridBagConstraints();GridBagConstraints addressBarPanelConstraints = new GridBagConstraints();GridBagConstraints MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints = new GridBagConstraints();GridBagConstraints MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints = new GridBagConstraints();GridBagConstraints abstractReferencePanelConstraints = new GridBagConstraints();GridBagConstraints decisionSupportBrowserPanelConstraints = new GridBagConstraints();GridBagConstraints decisionModelsNamePanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearButtonsInner1PanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearButtonsInner2PanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyPerYearButtonsInner3PanelConstraints = new GridBagConstraints();GridBagConstraints lifeExpectancyGraphNamePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentNameHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentEffectValueHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisTreatmentTimeHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlPointHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlNameHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlEffectValueHeaderPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentEffectAnalysisControlTimeHeaderPanelConstraints = new GridBagConstraints();DecisionSupportWindow() {setLocation(decisionSupportLocation.width, decisionSupportLocation.height);setSize(new Dimension(700, 900));titleBarJLabel.setText("Oochis EHR Decision Support");addTalkbackText("Oochis EHR Decision Support", null, false);decisionSupportMainJPanel.setOpaque(false);biomoietyNameJLabel.setForeground(new Color(249, 255, 206));biomoietyNameJLabel.setFont(new Font("serif", Font.BOLD, 14));datePublishedJLabel.setForeground(referenceAbstractLabelsColor);datePublishedJLabel.setFont(new Font("serif", Font.PLAIN, 14));authorsJLabel.setForeground(referenceAbstractLabelsColor);authorsJLabel.setFont(new Font("serif", Font.BOLD, 14));journalJLabel.setForeground(referenceAbstractLabelsColor);journalJLabel.setFont(new Font("serif", Font.BOLD, 14));citationJLabel.setForeground(referenceAbstractLabelsColor);citationJLabel.setFont(new Font("serif", Font.PLAIN, 14));datePublishedJPanel.add(datePublishedJLabel);authorsJPanel.add(authorsJLabel);journalJPanel.add(journalJLabel);citationJPanel.add(citationJLabel);datePublishedJPanel.setOpaque(false);titleJPanel.setOpaque(false);authorsJPanel.setOpaque(false);journalJPanel.setOpaque(false);citationJPanel.setOpaque(false);datePublishedJLabel.setOpaque(false);authorsJLabel.setOpaque(false);abstractJLabel.setOpaque(false);journalJLabel.setOpaque(false);citationJLabel.setOpaque(false);abstractReferencePanelConstraints.gridy = 0;abstractReferencePanelConstraints.anchor = GridBagConstraints.WEST;abstractReferencePanelConstraints.fill = GridBagConstraints.HORIZONTAL;abstractReferencePanelConstraints.weightx = 1;abstractReferencePanelConstraints.insets = new Insets(0, 8, 0, 8);abstractReferenceJPanel.add(datePublishedJPanel, abstractReferencePanelConstraints);abstractReferencePanelConstraints.gridy = 1;abstractReferenceJPanel.add(titleJPanel, abstractReferencePanelConstraints);abstractReferencePanelConstraints.gridy = 2;abstractReferenceJPanel.add(authorsJPanel, abstractReferencePanelConstraints);abstractReferencePanelConstraints.gridy = 3;abstractReferencePanelConstraints.weighty = 1;abstractTextJPanel.setOpaque(false);abstractReferenceJPanel.add(abstractTextJPanel, abstractReferencePanelConstraints);abstractReferencePanelConstraints.gridy = 4;abstractReferencePanelConstraints.weighty = 0;abstractReferenceJPanel.add(journalJPanel, abstractReferencePanelConstraints);abstractReferencePanelConstraints.gridy = 5;abstractReferenceJPanel.add(citationJPanel, abstractReferencePanelConstraints);abstractReferencePanelConstraints.gridy = 6;dSCoverJPanel.add(new JLabel("DS Cover"));browserBackJButton.addActionListener(this);browserBackJButton.setActionCommand("browserBackJButton");browserForwardJButton.addActionListener(this);browserForwardJButton.setActionCommand("browserForwardJButton");browserRefreshJButton.addActionListener(this);browserRefreshJButton.setActionCommand("browserRefreshJButton");browserHomeJButton.setActionCommand("browserHomeJButton");browserHomeJButton.addActionListener(this);browserStopJButton.setActionCommand("browserStopJButton");browserStopJButton.addActionListener(this);browserGoJButton.addActionListener(this);browserGoJButton.setActionCommand("browserGoJButton");uRLJTextField.addActionListener(this);uRLJTextField.setActionCommand("browserGoJButton");browseInternetPanelConstraints.gridy = 0;browseInternetPanelConstraints.gridx = 0;browseInternetPanelConstraints.fill = GridBagConstraints.BOTH;addressBarJPanel.setOpaque(false);addressBarPanelConstraints.fill = GridBagConstraints.NONE;addressBarPanelConstraints.gridx = 0;addressBarPanelConstraints.insets = new Insets(0, 8, 0, 8);addressBarJPanel.add(browserBackJButton, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 1;addressBarPanelConstraints.insets = new Insets(0, 0, 0, 8);addressBarJPanel.add(browserForwardJButton, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 2;addressBarJPanel.add(browserRefreshJButton, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 3;addressBarJPanel.add(browserHomeJButton, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 4;addressBarJPanel.add(browserStopJButton, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 5;addressBarJPanel.add(addressBarURLPromptJLabel, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 6;addressBarPanelConstraints.weightx = 1;addressBarPanelConstraints.fill = GridBagConstraints.HORIZONTAL;addressBarJPanel.add(uRLJTextField, addressBarPanelConstraints);addressBarPanelConstraints.gridx = 7;addressBarPanelConstraints.weightx = 0;addressBarPanelConstraints.fill = GridBagConstraints.NONE;addressBarJPanel.add(new JLabel("  "), addressBarPanelConstraints);addressBarPanelConstraints.gridx = 8;addressBarPanelConstraints.insets = new Insets(6, 2, 6, 6);addressBarJPanel.add(browserGoJButton, addressBarPanelConstraints);browseInternetPanelConstraints.insets = new Insets(6, 6, 6, 6);internetBrowserJPanel.add(addressBarJPanel, browseInternetPanelConstraints);browseInternetPanelConstraints.gridy = 1;browseInternetPanelConstraints.weighty = 1;browseInternetPanelConstraints.weightx = 1;decisionSupportBrowserJPanel.setBackground(Color.WHITE);decisionSupportBrowserPanelConstraints.weightx = 1;decisionSupportBrowserPanelConstraints.weighty = 1;decisionSupportBrowserPanelConstraints.fill = GridBagConstraints.BOTH;browserExpandingJLabel.setBorder(null);browserExpandingJLabel.setBackground(Color.WHITE);decisionSupportBrowserJPanel.add(browserExpandingJLabel, decisionSupportBrowserPanelConstraints);decisionSupportBrowserBorderJPanel.add(decisionSupportBrowserJPanel, decisionSupportBrowserPanelConstraints);internetBrowserJPanel.add(decisionSupportBrowserBorderJPanel, browseInternetPanelConstraints);internalQueryTermJTextField.addActionListener(this);internalQueryTermJTextField.setActionCommand("internalQueryTermJTextField");queryEverythingJToggleButton.addActionListener(this);queryEverythingJToggleButton.setActionCommand("queryEverythingJToggleButton");querySystemWindowJToggleButton.addActionListener(this);querySystemWindowJToggleButton.setActionCommand("querySystemWindowJToggleButton");queryChartsWindowJToggleButton.addActionListener(this);queryChartsWindowJToggleButton.setActionCommand("queryChartsWindowJToggleButton");queryMessagingWindowJToggleButton.addActionListener(this);queryMessagingWindowJToggleButton.setActionCommand("queryMessagingWindowJToggleButton");queryDecisionSupportWindowJToggleButton.addActionListener(this);queryDecisionSupportWindowJToggleButton.setActionCommand("queryDecisionSupportWindowJToggleButton");queryPracticeAssistantWindowJToggleButton.addActionListener(this);queryPracticeAssistantWindowJToggleButton.setActionCommand("queryPracticeAssistantWindowJToggleButton");queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.addActionListener(this);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setActionCommand("queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton");queryChartsEntryCPT2009CodeTypeJToggleButton.addActionListener(this);queryChartsEntryCPT2009CodeTypeJToggleButton.setActionCommand("queryChartsEntryCPT2009CodeTypeJToggleButton");queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.addActionListener(this);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setActionCommand("queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton");queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.addActionListener(this);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setActionCommand("queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton");queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.addActionListener(this);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setActionCommand("queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton");queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.addActionListener(this);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setActionCommand("queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton");queryChartsEntryLOINCMedicalCodeTypeJToggleButton.addActionListener(this);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setActionCommand("queryChartsEntryLOINCMedicalCodeTypeJToggleButton");queryChartsValuesJToggleButton.addActionListener(this);queryChartsValuesJToggleButton.setActionCommand("queryChartsValuesJToggleButton");queryChartsMedicalCodeDescriptionTypeJToggleButton.addActionListener(this);queryChartsMedicalCodeDescriptionTypeJToggleButton.setActionCommand("queryChartsMedicalCodeDescriptionTypeJToggleButton");queryChartsMedicalCodeJToggleButton.addActionListener(this);queryChartsMedicalCodeJToggleButton.setActionCommand("queryChartsMedicalCodeJToggleButton");queryChartsDataCellComponentsJToggleButton.addActionListener(this);queryChartsDataCellComponentsJToggleButton.setActionCommand("queryChartsDataCellComponentsJToggleButton");dataQueryChartsSubButtonsJPanel.setOpaque(false);dataQueryChartsSubButtonsJPanel.add(queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 1;dataQueryChartsSubButtonsJPanel.add(queryChartsEntryCPT2009CodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 2;dataQueryChartsSubButtonsJPanel.add(queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 3;dataQueryChartsSubButtonsJPanel.add(queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 0;dataQueryChartsSubButtonsPanelConstraints.gridx = 1;dataQueryChartsSubButtonsJPanel.add(queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 1;dataQueryChartsSubButtonsJPanel.add(queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 2;dataQueryChartsSubButtonsJPanel.add(queryChartsEntryLOINCMedicalCodeTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 0;dataQueryChartsSubButtonsPanelConstraints.gridx = 2;dataQueryChartsSubButtonsJPanel.add(queryChartsValuesJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 1;dataQueryChartsSubButtonsJPanel.add(queryChartsMedicalCodeDescriptionTypeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 2;dataQueryChartsSubButtonsJPanel.add(queryChartsMedicalCodeJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryChartsSubButtonsPanelConstraints.gridy = 3;dataQueryChartsSubButtonsJPanel.add(queryChartsDataCellComponentsJToggleButton, dataQueryChartsSubButtonsPanelConstraints);dataQueryInputCardedSubButtonsJPanel.add(dataQueryInputCardedSubButtonsCoverJPanel, "dataQueryInputCardedSubButtonsCoverJPanel");dataQueryInputCardedSubButtonsJPanel.add(dataQueryChartsSubButtonsJPanel, "dataQueryChartsSubButtonsJPanel");dataQueryInputCardedSubButtonsJPanel.add(dataQuerySystemSubButtonsJPanel, "dataQuerySystemSubButtonsJPanel");dataQueryInputCardedSubButtonsJPanel.add(dataQueryMessagingSubButtonsJPanel, "dataQueryMessagingSubButtonsJPanel");dataQueryInputCardedSubButtonsJPanel.add(dataQueryDecisionSupportSubButtonsJPanel, "dataQueryDecisionSupportSubButtonsJPanel");dataQueryInputCardedSubButtonsJPanel.add(dataQueryPracticeAssistantSubButtonsJPanel, "dataQueryPracticeAssistantSubButtonsJPanel");dataQueryInputJPanel.setOpaque(false);dataQueryInptPanelConstraints.weightx = 0;dataQueryInputJPanel.add(dataQueryInputHeaderPanelJLabel, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 1;dataQueryInputJPanel.add(internalQueryTermPromptQueryJLabel, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridx = 1;dataQueryInptPanelConstraints.weightx = 1;dataQueryInptPanelConstraints.fill = GridBagConstraints.HORIZONTAL;dataQueryInputJPanel.add(internalQueryTermJTextField, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridx = 2;dataQueryInptPanelConstraints.fill = GridBagConstraints.NONE;dataQueryInptPanelConstraints.weightx = 0;dataQueryInputJPanel.add(internalQueryTermOkJButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 2;dataQueryInptPanelConstraints.gridx = 0;dataQueryInptPanelConstraints.gridwidth = 3;dataQueryInputJPanel.add(internalQueryTermResponseJLabel, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 3;dataQueryInptPanelConstraints.gridwidth = 1;dataQueryInputJPanel.add(queryEverythingJToggleButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 4;dataQueryInputJPanel.add(queryChartsWindowJToggleButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 5;dataQueryInputJPanel.add(querySystemWindowJToggleButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 6;dataQueryInputJPanel.add(queryMessagingWindowJToggleButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 7;dataQueryInputJPanel.add(queryDecisionSupportWindowJToggleButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridy = 8;dataQueryInputJPanel.add(queryPracticeAssistantWindowJToggleButton, dataQueryInptPanelConstraints);dataQueryInptPanelConstraints.gridx = 0;dataQueryInptPanelConstraints.gridy = 3;dataQueryInptPanelConstraints.gridheight = 6;dataQueryInptPanelConstraints.gridwidth = 2;dataQueryInputJPanel.add(dataQueryInputCardedSubButtonsJPanel, dataQueryInptPanelConstraints);dataQueryPanelConstraints.gridy = 0;dataQueryPanelConstraints.weightx = 1;dataQueryPanelConstraints.fill = GridBagConstraints.HORIZONTAL;dataQueryJPanel.add(dataQueryInputJPanel, dataQueryPanelConstraints);dataQueryPanelConstraints.gridy = 1;dataQueryPanelConstraints.weighty = 1;dataQueryPanelConstraints.fill = GridBagConstraints.BOTH;dataQueryJPanel.add(dataQueryOutputJPanel, dataQueryPanelConstraints);promptForComponentOrSubComponentsPanelJPopupMenu.setBorder(new CompoundBorder(new CompoundBorder(new LineBorder(Color.DARK_GRAY, 1), new LineBorder(Color.LIGHT_GRAY, 5)), new LineBorder(Color.GRAY)));statisticsPanelButtonsJPanel.setOpaque(false);statisticsPanelBasePanelConstraints.gridy = 0;statisticsPanelBasePanelConstraints.weightx = 1;statisticsPanelBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPanelBaseJPanel.add(statisticsPanelButtonsJPanel, statisticsPanelBasePanelConstraints);statisticsPanelBasePanelConstraints.gridy = 1;statisticsPanelBasePanelConstraints.weighty = 1;statisticsPanelBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsPanelBaseJPanel.add(statisticsPanelContentCardedJPanel, statisticsPanelBasePanelConstraints);statisticsPanelTTestJButton.addActionListener(this);statisticsPanelTTestJButton.setActionCommand("statisticsPanelTTestJButton");statisticsPanelOneWayANOVAJButton.addActionListener(this);statisticsPanelOneWayANOVAJButton.setActionCommand("statisticsPanelOneWayANOVAJButton");statisticsPanelSignedOnlyJButton.addActionListener(this);statisticsPanelSignedOnlyJButton.setActionCommand("statisticsPanelSignedOnlyJButton");statisticsPanelWilcoxonSignedRankJButton.addActionListener(this);statisticsPanelWilcoxonSignedRankJButton.setActionCommand("statisticsPanelWilcoxonSignedRankJButton");statisticsPanelWilcoxonRankSumJButton.addActionListener(this);statisticsPanelWilcoxonRankSumJButton.setActionCommand("statisticsPanelWilcoxonRankSumJButton");statisticsPanelConfidenceIntervalsJButton.addActionListener(this);statisticsPanelConfidenceIntervalsJButton.setActionCommand("statisticsPanelConfidenceIntervalsJButton");statisticsPanelPairedTTestJButton.addActionListener(this);statisticsPanelPairedTTestJButton.setActionCommand("statisticsPanelPairedTTestJButton");statisticsPanelIndependentJButton.addActionListener(this);statisticsPanelIndependentJButton.setActionCommand("statisticsPanelIndependentJButton");statisticsJToggleButton.addActionListener(this);statisticsJToggleButton.setActionCommand("statisticsJToggleButton");statisticsDataEntryJButton.addActionListener(this);statisticsDataEntryJButton.setActionCommand("statisticsDataEntryJButton");statisticsMedianAverageJButton.addActionListener(this);statisticsMedianAverageJButton.setActionCommand("statisticsMedianAverageJButton");statisticsDataEntryAndOutputAndDistributionsJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);statisticsDataEntryAndOutputAndDistributionsJPanel.add(statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel, statisticsDataEntryAndOutputAndDistributionsPanelConstraints);statisticsDataEntryAndOutputAndDistributionsPanelConstraints.gridy = 1;statisticsDataEntryAndOutputAndDistributionsPanelConstraints.weighty = 1;statisticsDataEntryAndOutputAndDistributionsPanelConstraints.weightx = 1;statisticsDataEntryAndOutputAndDistributionsPanelConstraints.fill = GridBagConstraints.BOTH;statisticsDataEntryAndOutputAndDistributionsJPanel.add(statisticsDataDisplayJPanel, statisticsDataEntryAndOutputAndDistributionsPanelConstraints);statisticsDataEntryAndOutputAndDistributionsPanelConstraints.gridy = 2;statisticsDataEntryAndOutputAndDistributionsJPanel.add(statisticsOutputAndDistributionsJPanel, statisticsDataEntryAndOutputAndDistributionsPanelConstraints);statisticsPanelButtonsPanelConstraints.insets = new Insets(6, 6, 6, 6);statisticsPanelButtonsPanelConstraints.gridx = 0;statisticsPanelButtonsJPanel.add(statisticsJToggleButton, statisticsPanelButtonsPanelConstraints);horizontalLineJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.GRAY));statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.setOpaque(false);statisticsEntryAndOutputButtonsPanelConstraints.insets = new Insets(4, 4, 2, 2);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 0;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsDataEntryJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.insets = new Insets(4, 4, 2, 2);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 1;statisticsOutputAndDistributionsJPanel.setOpaque(false);statisticsMeanAveragePanelConstraints.insets = new Insets(4, 4, 4, 4);statisticsMeanAverageJPanel.add(statisticsMeanAverageJLabel, statisticsMeanAveragePanelConstraints);statisticsMeanAveragePanelConstraints.gridy = 1;statisticsMeanAverageJPanel.add(statisticsMeanAverageJTextField, statisticsMeanAveragePanelConstraints);statisticsMedianAveragePanelConstraints.insets = new Insets(4, 4, 4, 4);statisticsMedianAverageJPanel.add(statisticsMedianAverageJLabel, statisticsMedianAveragePanelConstraints);statisticsMedianAveragePanelConstraints.gridy = 1;statisticsMedianAverageJPanel.add(statisticsMedianAverageJTextField, statisticsMedianAveragePanelConstraints);statisticsMeanAverageJButton.setActionCommand("statisticsMeanAverageJButton");statisticsMeanAverageJButton.addActionListener(this);statisticsMedianAverageJButton.setActionCommand("statisticsMedianAverageJButton");statisticsMedianAverageJButton.addActionListener(this);statisticsMeanAveragePanelConstraints.gridy = 0;statisticsAverageJPanel.add(statisticsMeanAverageJPanel, "statisticsMeanAverageJPanel");statisticsAverageJPanel.add(statisticsMeanAverageJPanel, "statisticsMedianAverageJPanel");statisticsOutputCardedJPanel.add(statisticsAverageJPanel, "statisticsAverageJPanel");statisticsOutputAndDistributionsJPanel.add(statisticsOutputCardedJPanel, statisticsOutputAndDistributionsPanelConstraints);statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsMeanAverageJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridy = 1;statisticsEntryAndOutputButtonsPanelConstraints.weightx = 1;statisticsEntryAndOutputButtonsPanelConstraints.gridwidth = 8;statisticsEntryAndOutputButtonsPanelConstraints.fill = GridBagConstraints.BOTH;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(horizontalLineJLabel, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridwidth = 1;statisticsEntryAndOutputButtonsPanelConstraints.gridy = 2;statisticsEntryAndOutputButtonsPanelConstraints.gridx = 0;statisticsEntryAndOutputButtonsPanelConstraints.insets = new Insets(2, 4, 4, 2);statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelTTestJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 1;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelOneWayANOVAJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 2;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelSignedOnlyJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 3;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelWilcoxonSignedRankJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 4;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelWilcoxonRankSumJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 5;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelConfidenceIntervalsJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 6;statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelPairedTTestJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsEntryAndOutputButtonsPanelConstraints.gridx = 7;statisticsEntryAndOutputButtonsPanelConstraints.insets = new Insets(2, 2, 4, 4);statisticsDataEntryAndOutputAndDistributionsPanelButtonsJPanel.add(statisticsPanelIndependentJButton, statisticsEntryAndOutputButtonsPanelConstraints);statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.addActionListener(this);statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setActionCommand("statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton");statisticsDataEntryCPT2009CodeTypeJToggleButton.addActionListener(this);statisticsDataEntryCPT2009CodeTypeJToggleButton.setActionCommand("statisticsDataEntryCPT2009CodeTypeJToggleButton");statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.addActionListener(this);statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setActionCommand("statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton");statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.addActionListener(this);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setActionCommand("statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton");statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.addActionListener(this);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setActionCommand("statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton");statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.addActionListener(this);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setActionCommand("statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton");statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.addActionListener(this);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setActionCommand("statisticsDataEntryLOINCMedicalCodeTypeJToggleButton");statisticsDataEntryMedicalCodeSetButtonsJPanel.setOpaque(false);statisticsDataEntryMedicalCodeTypePanelConstraints.insets = new Insets(4, 4, 2, 4);statisticsDataEntryMedicalCodeTypePanelConstraints.gridy = 0;statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 0;statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsDataEntryMedicalCodeTypePanelConstraints.insets = new Insets(2, 4, 2, 4);statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 1;statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryCPT2009CodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 2;statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 3;statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsDataEntryMedicalCodeTypePanelConstraints.gridy = 1;statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 0;statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 1;statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsDataEntryMedicalCodeTypePanelConstraints.gridx = 2;statisticsDataEntryMedicalCodeTypePanelConstraints.insets = new Insets(2, 4, 4, 4);statisticsDataEntryMedicalCodeSetButtonsJPanel.add(statisticsDataEntryLOINCMedicalCodeTypeJToggleButton, statisticsDataEntryMedicalCodeTypePanelConstraints);statisticsAddMedicalCodeGroupSaveJButton.addActionListener(this);statisticsAddMedicalCodeGroupSaveJButton.setActionCommand("statisticsAddMedicalCodeGroupSaveJButton");statisticsAddPatientChartGroupSaveJButton.addActionListener(this);statisticsAddPatientChartGroupSaveJButton.setActionCommand("statisticsAddPatientChartGroupSaveJButton");statisticsAddTimeRangeGroupSaveJButton.addActionListener(this);statisticsAddTimeRangeGroupSaveJButton.setActionCommand("statisticsAddTimeRangeGroupSaveJButton");statisticsCreateMedicalCodeEntryOkJButton.addActionListener(this);statisticsCreateMedicalCodeEntryOkJButton.setActionCommand("statisticsCreateMedicalCodeEntryOkJButton");statisticsAddSaveMedicalCodeGroupOkJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsAddSaveMedicalCodeGroupOkJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));statisticsAddMedicalCodeGroupOkJTextField.addActionListener(this);statisticsAddMedicalCodeGroupOkJTextField.setActionCommand("statisticsAddMedicalCodeGroupOkJTextField");statisticsAddMedicalCodeGroupOkPanelConstraints.gridwidth = 3;statisticsAddSaveMedicalCodeGroupOkJPanel.add(statisticsAddMedicalCodeGroupOkJLabel, statisticsAddMedicalCodeGroupOkPanelConstraints);statisticsAddMedicalCodeGroupOkPanelConstraints.gridy = 1;statisticsAddMedicalCodeGroupOkPanelConstraints.gridwidth = 1;statisticsAddMedicalCodeGroupOkPanelConstraints.weightx = 0;statisticsAddMedicalCodeGroupOkPanelConstraints.insets = new Insets(6, 6, 6, 3);statisticsAddSaveMedicalCodeGroupOkJPanel.add(statisticsAddMedicalCodeGroupNameJLabel, statisticsAddMedicalCodeGroupOkPanelConstraints);statisticsAddMedicalCodeGroupOkPanelConstraints.gridx = 1;statisticsAddMedicalCodeGroupOkPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsAddMedicalCodeGroupOkPanelConstraints.gridx = 1;statisticsAddMedicalCodeGroupOkPanelConstraints.weightx = 1;statisticsAddMedicalCodeGroupOkPanelConstraints.insets = new Insets(6, 3, 6, 3);statisticsAddSaveMedicalCodeGroupOkJPanel.add(statisticsAddMedicalCodeGroupOkJTextField, statisticsAddMedicalCodeGroupOkPanelConstraints);statisticsAddMedicalCodeGroupOkPanelConstraints.gridx = 2;statisticsAddMedicalCodeGroupOkPanelConstraints.weightx = 0;statisticsAddMedicalCodeGroupOkPanelConstraints.insets = new Insets(6, 3, 6, 6);statisticsAddSaveMedicalCodeGroupOkJPanel.add(statisticsAddMedicalCodeGroupSaveJButton, statisticsAddMedicalCodeGroupOkPanelConstraints);statisticsAddSavePatientChartGroupOkJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsAddSavePatientChartGroupOkJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));statisticsAddPatientChartGroupNameJTextField.addActionListener(this);statisticsAddPatientChartGroupNameJTextField.setActionCommand("statisticsAddPatientChartGroupOkJTextField");statisticsAddPatientChartGroupOkPanelConstraints.gridwidth = 3;statisticsAddSavePatientChartGroupOkJPanel.add(statisticsAddPatientChartGroupOkJLabel, statisticsAddPatientChartGroupOkPanelConstraints);statisticsAddPatientChartGroupOkPanelConstraints.gridy = 1;statisticsAddPatientChartGroupOkPanelConstraints.gridwidth = 1;statisticsAddPatientChartGroupOkPanelConstraints.insets = new Insets(6, 6, 6, 3);statisticsAddPatientChartGroupOkPanelConstraints.weightx = 0;statisticsAddSavePatientChartGroupOkJPanel.add(statisticsAddPatientChartGroupNameJLabel, statisticsAddPatientChartGroupOkPanelConstraints);statisticsAddPatientChartGroupOkPanelConstraints.gridx = 1;statisticsAddPatientChartGroupOkPanelConstraints.insets = new Insets(6, 3, 6, 3);statisticsAddPatientChartGroupOkPanelConstraints.weightx = 1;statisticsAddSavePatientChartGroupOkJPanel.add(statisticsAddPatientChartGroupNameJTextField, statisticsAddPatientChartGroupOkPanelConstraints);statisticsAddPatientChartGroupOkPanelConstraints.gridx = 2;statisticsAddPatientChartGroupOkPanelConstraints.weightx = 0;statisticsAddPatientChartGroupOkPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsAddPatientChartGroupOkPanelConstraints.insets = new Insets(6, 6, 2, 6);statisticsAddSavePatientChartGroupOkJPanel.add(statisticsAddPatientChartGroupSaveJButton, statisticsAddPatientChartGroupOkPanelConstraints);statisticsAddSaveTimeRangeGroupOkJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsAddSaveTimeRangeGroupOkJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));statisticsAddTimeRangeGroupOkJTextField.addActionListener(this);statisticsAddTimeRangeGroupOkJTextField.setActionCommand("statisticsAddTimeRangeGroupOkJTextField");statisticsAddTimeRangeGroupOkPanelConstraints.gridwidth = 3;statisticsAddSaveTimeRangeGroupOkJPanel.add(statisticsAddTimeRangeGroupOkJLabel, statisticsAddTimeRangeGroupOkPanelConstraints);statisticsAddTimeRangeGroupOkPanelConstraints.gridy = 1;statisticsAddTimeRangeGroupOkPanelConstraints.gridwidth = 1;statisticsAddTimeRangeGroupOkPanelConstraints.insets = new Insets(6, 6, 6, 3);statisticsAddTimeRangeGroupOkPanelConstraints.weightx = 0;statisticsAddSaveTimeRangeGroupOkJPanel.add(statisticsAddTimeRangeGroupNameJLabel, statisticsAddTimeRangeGroupOkPanelConstraints);statisticsAddTimeRangeGroupOkPanelConstraints.gridx = 1;statisticsAddTimeRangeGroupOkPanelConstraints.weightx = 1;statisticsAddTimeRangeGroupOkPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsAddTimeRangeGroupOkPanelConstraints.insets = new Insets(6, 3, 6, 3);statisticsAddSaveTimeRangeGroupOkJPanel.add(statisticsAddTimeRangeGroupOkJTextField, statisticsAddTimeRangeGroupOkPanelConstraints);statisticsAddTimeRangeGroupOkPanelConstraints.gridx = 2;statisticsAddTimeRangeGroupOkPanelConstraints.insets = new Insets(6, 3, 6, 6);statisticsAddTimeRangeGroupOkPanelConstraints.weightx = 0;statisticsAddSaveTimeRangeGroupOkJPanel.add(statisticsAddTimeRangeGroupSaveJButton, statisticsAddTimeRangeGroupOkPanelConstraints);statisticsCreatePatientChartEntryOkJButton.addActionListener(this);statisticsCreatePatientChartEntryOkJButton.setActionCommand("statisticsCreatePatientChartEntryOkJButton");statisticsCreateTimeRangeEntryOkJButton.addActionListener(this);statisticsCreateTimeRangeEntryOkJButton.setActionCommand("statisticsCreateTimeRangeEntryOkJButton");statisticsMedicalCodeJTextField.addActionListener(this);statisticsMedicalCodeJTextField.setActionCommand("statisticsMedicalCodeJTextField");statisticsMedicalCodeJTextField.setFont(SystemWindow.systemFont);statisticsAddMedicalCodeJPanel.setOpaque(false);statisticsAddMedicalCodePanelConstraints.insets = new Insets(4, 4, 4, 4);statisticsAddMedicalCodeJPanel.add(statisticsMedicalCodeGroupJLabel, statisticsAddMedicalCodePanelConstraints);statisticsAddMedicalCodePanelConstraints.gridx = 1;statisticsAddMedicalCodeJPanel.add(statisticsMedicalCodeJTextField, statisticsAddMedicalCodePanelConstraints);statisticsAddMedicalCodePanelConstraints.gridx = 2;statisticsAddMedicalCodeJPanel.add(statisticsCreateMedicalCodeEntryOkJButton, statisticsAddMedicalCodePanelConstraints);statisticsEncodedEntriesEntryHeaderJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));statisticsMedicalCodeEntryHeaderJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsMedicalCodeEntryHeaderPanelConstraints.weightx = 1;statisticsMedicalCodeEntryHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsMedicalCodeEntryHeaderPanelConstraints.insets = new Insets(4, 4, 0, 4);statisticsMedicalCodeEntryHeaderJPanel.add(statisticsEncodedEntriesEntryHeaderJLabel, statisticsMedicalCodeEntryHeaderPanelConstraints);statisticsMedicalCodeEntryHeaderPanelConstraints.gridy = 1;statisticsMedicalCodeEntryHeaderPanelConstraints.insets = new Insets(0, 4, 0, 4);statisticsMedicalCodeEntryHeaderJPanel.add(statisticsDataEntryMedicalCodeTypeHeaderJLabel, statisticsMedicalCodeEntryHeaderPanelConstraints);statisticsMedicalCodeEntryHeaderPanelConstraints.gridy = 2;statisticsMedicalCodeEntryHeaderJPanel.add(statisticsDataEntryMedicalCodeSetButtonsJPanel, statisticsMedicalCodeEntryHeaderPanelConstraints);statisticsMedicalCodeEntryHeaderPanelConstraints.gridy = 3;statisticsMedicalCodeEntryHeaderPanelConstraints.insets = new Insets(0, 4, 4, 4);statisticsMedicalCodeEntryHeaderJPanel.add(statisticsAddMedicalCodeJPanel, statisticsMedicalCodeEntryHeaderPanelConstraints);statisticsMedicalCodeBaseJPanel.setOpaque(false);statisticsMedicalCodeBasePusherJPanel.setOpaque(false);statisticsMedicalCodeBaseJPanelConstraints.gridy = 0;statisticsMedicalCodeBaseBaseJPanel.add(statisticsMedicalCodeBaseJPanel, statisticsMedicalCodeBaseJPanelConstraints);statisticsMedicalCodeBaseJPanelConstraints.gridy = 1;statisticsMedicalCodeBaseJPanelConstraints.weighty = 1;statisticsMedicalCodeBaseJPanelConstraints.fill = GridBagConstraints.BOTH;statisticsMedicalCodeBaseBaseJPanel.add(statisticsMedicalCodeBasePusherJPanel, statisticsMedicalCodeBaseJPanelConstraints);statisticsMedicalCodeEntryBaseJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));statisticsMedicalCodeGroupsJPanel.setBackground(Color.WHITE);statisticsMedicalCodeBaseBaseJPanel.setBackground(Color.WHITE);statisticsMedicalCodeBasePanelJScrollPane.getVerticalScrollBar().setUnitIncrement(25);statisticsMedicalCodeEntryBasePanelConstraints.gridy = 0;statisticsMedicalCodeEntryBasePanelConstraints.gridx = 0;statisticsMedicalCodeEntryBasePanelConstraints.weightx = 1;statisticsMedicalCodeEntryBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsMedicalCodeEntryBaseJPanel.add(statisticsMedicalCodeEntryHeaderJPanel, statisticsMedicalCodeEntryBasePanelConstraints);statisticsMedicalCodeEntryBasePanelConstraints.gridy = 1;statisticsMedicalCodeEntryBasePanelConstraints.weighty = 0.5;statisticsMedicalCodeEntryBasePanelConstraints.weightx = 1;statisticsMedicalCodeEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsMedicalCodeEntryBaseJPanel.add(statisticsMedicalCodeBasePanelJScrollPane, statisticsMedicalCodeEntryBasePanelConstraints);statisticsMedicalCodeEntryBasePanelConstraints.gridy = 2;statisticsMedicalCodeEntryBasePanelConstraints.weighty = 0;statisticsMedicalCodeEntryBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsMedicalCodeEntryBaseJPanel.add(statisticsAddSaveMedicalCodeGroupOkJPanel, statisticsMedicalCodeEntryBasePanelConstraints);statisticsMedicalCodeEntryBasePanelConstraints.gridy = 3;statisticsMedicalCodeEntryBasePanelConstraints.weighty = 0.5;statisticsMedicalCodeEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsMedicalCodeGroupsJScrollPane.getVerticalScrollBar().setUnitIncrement(25);statisticsMedicalCodeEntryBaseJPanel.add(statisticsMedicalCodeGroupsJScrollPane, statisticsMedicalCodeEntryBasePanelConstraints);statisticsPatientChartIDJTextField.addActionListener(this);statisticsPatientChartIDJTextField.setActionCommand("statisticsPatientChartIDJTextField");statisticsPatientChartIDJTextField.setFont(SystemWindow.systemFont);statisticsPatientNamePrefixJTextField.addActionListener(this);statisticsPatientNamePrefixJTextField.setActionCommand("statisticsPatientNamePrefixJTextField");statisticsPatientNamePrefixJTextField.setFont(SystemWindow.systemFont);statisticsPatientNameGivenNameJTextField.addActionListener(this);statisticsPatientNameGivenNameJTextField.setActionCommand("statisticsPatientNameGivenNameJTextField");statisticsPatientNameGivenNameJTextField.setFont(SystemWindow.systemFont);statisticsPatientNameMiddleInitialOrNameJTextField.addActionListener(this);statisticsPatientNameMiddleInitialOrNameJTextField.setActionCommand("statisticsPatientNameMiddleInitialOrNameJTextField");statisticsPatientNameMiddleInitialOrNameJTextField.setFont(SystemWindow.systemFont);statisticsPatientNameLastNamePrefixJTextField.addActionListener(this);statisticsPatientNameLastNamePrefixJTextField.setActionCommand("statisticsPatientNameLastNamePrefixJTextField");statisticsPatientNameLastNamePrefixJTextField.setFont(SystemWindow.systemFont);statisticsPatientNameFamilyNameJTextField.addActionListener(this);statisticsPatientNameFamilyNameJTextField.setActionCommand("statisticsPatientNameFamilyNameJTextField");statisticsPatientNameFamilyNameJTextField.setFont(SystemWindow.systemFont);statisticsPatientChartBaseJPanel.setOpaque(false);statisticsPatientChartBasePusherJPanel.setOpaque(false);statisticsPatientChartBaseBasePanelConstraints.gridy = 0;statisticsPatientChartBaseBaseJPanel.add(statisticsPatientChartBaseJPanel, statisticsPatientChartBaseBasePanelConstraints);statisticsPatientChartBaseBasePanelConstraints.gridy = 1;statisticsPatientChartBaseBasePanelConstraints.weighty = 1;statisticsPatientChartBaseBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsPatientChartBaseBaseJPanel.add(statisticsPatientChartBasePusherJPanel, statisticsPatientChartBaseBasePanelConstraints);statisticsPatientChartIDAndNamePrefixJPanel.setOpaque(false);statisticsPatientChartIDAndNamePrefixPanelConstraints.gridy = 0;statisticsPatientChartIDAndNamePrefixPanelConstraints.gridx = 0;statisticsPatientChartIDAndNamePrefixPanelConstraints.insets = new Insets(2, 2, 2, 1);statisticsPatientChartIDAndNamePrefixJPanel.add(statisticsPatientChartIDJLabel, statisticsPatientChartIDAndNamePrefixPanelConstraints);statisticsPatientChartIDAndNamePrefixPanelConstraints.weightx = 1;statisticsPatientChartIDAndNamePrefixPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientChartIDAndNamePrefixPanelConstraints.gridx = 1;statisticsPatientChartIDAndNamePrefixJPanel.add(statisticsPatientChartIDJTextField, statisticsPatientChartIDAndNamePrefixPanelConstraints);statisticsPatientChartIDAndNamePrefixPanelConstraints.gridx = 2;statisticsPatientChartIDAndNamePrefixPanelConstraints.weightx = 0;statisticsPatientChartIDAndNamePrefixPanelConstraints.fill = GridBagConstraints.NONE;statisticsPatientChartIDAndNamePrefixJPanel.add(statisticsPatientNamePrefixJLabel, statisticsPatientChartIDAndNamePrefixPanelConstraints);statisticsPatientChartIDAndNamePrefixPanelConstraints.gridx = 3;statisticsPatientChartIDAndNamePrefixPanelConstraints.weightx = 1;statisticsPatientChartIDAndNamePrefixPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientChartIDAndNamePrefixPanelConstraints.insets = new Insets(2, 1, 2, 2);statisticsPatientChartIDAndNamePrefixJPanel.add(statisticsPatientNamePrefixJTextField, statisticsPatientChartIDAndNamePrefixPanelConstraints);statisticsPatientNameGivenNameJPanel.setOpaque(false);statisticsPatientNameGivenNamePanelConstraints.gridy = 0;statisticsPatientNameGivenNamePanelConstraints.gridx = 0;statisticsPatientNameGivenNamePanelConstraints.insets = new Insets(2, 2, 2, 1);statisticsPatientNameGivenNameJPanel.add(statisticsPatientNameGivenNameJLabel, statisticsPatientNameGivenNamePanelConstraints);statisticsPatientNameGivenNamePanelConstraints.weightx = 1;statisticsPatientNameGivenNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientNameGivenNamePanelConstraints.insets = new Insets(2, 1, 2, 2);statisticsPatientNameGivenNamePanelConstraints.gridx = 1;statisticsPatientNameGivenNameJPanel.add(statisticsPatientNameGivenNameJTextField, statisticsPatientNameGivenNamePanelConstraints);statisticsPatientNameMiddleInitialOrNameJPanel.setOpaque(false);statisticsPatientNameMiddleInitialOrNamePanelConstraints.gridy = 0;statisticsPatientNameMiddleInitialOrNamePanelConstraints.gridx = 0;statisticsPatientNameMiddleInitialOrNamePanelConstraints.insets = new Insets(2, 2, 2, 1);statisticsPatientNameMiddleInitialOrNameJPanel.add(statisticsPatientNameMiddleInitialOrNameJLabel, statisticsPatientNameMiddleInitialOrNamePanelConstraints);statisticsPatientNameMiddleInitialOrNamePanelConstraints.weightx = 1;statisticsPatientNameMiddleInitialOrNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientNameMiddleInitialOrNamePanelConstraints.insets = new Insets(2, 1, 2, 2);statisticsPatientNameMiddleInitialOrNamePanelConstraints.gridx = 1;statisticsPatientNameMiddleInitialOrNameJPanel.add(statisticsPatientNameMiddleInitialOrNameJTextField, statisticsPatientNameMiddleInitialOrNamePanelConstraints);statisticsPatientNameLastNamePrefixJPanel.setOpaque(false);statisticsPatientNameLastNamePrefixPanelConstraints.gridy = 0;statisticsPatientNameLastNamePrefixPanelConstraints.gridx = 0;statisticsPatientNameLastNamePrefixPanelConstraints.insets = new Insets(2, 2, 2, 1);statisticsPatientNameLastNamePrefixJPanel.add(statisticsPatientNameLastNamePrefixJLabel, statisticsPatientNameLastNamePrefixPanelConstraints);statisticsPatientNameLastNamePrefixPanelConstraints.weightx = 1;statisticsPatientNameLastNamePrefixPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientNameLastNamePrefixPanelConstraints.insets = new Insets(2, 1, 2, 2);statisticsPatientNameLastNamePrefixPanelConstraints.gridx = 1;statisticsPatientNameLastNamePrefixJPanel.add(statisticsPatientNameLastNamePrefixJTextField, statisticsPatientNameLastNamePrefixPanelConstraints);statisticsPatientNameFamilyNameJPanel.setOpaque(false);statisticsPatientNameFamilyNamePanelConstraints.gridy = 0;statisticsPatientNameFamilyNamePanelConstraints.gridx = 0;statisticsPatientNameFamilyNamePanelConstraints.insets = new Insets(2, 2, 2, 1);statisticsPatientNameFamilyNameJPanel.add(statisticsPatientNameFamilyNameJLabel, statisticsPatientNameFamilyNamePanelConstraints);statisticsPatientNameFamilyNamePanelConstraints.weightx = 1;statisticsPatientNameFamilyNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientNameFamilyNamePanelConstraints.insets = new Insets(2, 1, 2, 2);statisticsPatientNameFamilyNamePanelConstraints.gridx = 1;statisticsPatientNameFamilyNameJPanel.add(statisticsPatientNameFamilyNameJTextField, statisticsPatientNameFamilyNamePanelConstraints);statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.setOpaque(false);statisticsDataEntryPatientChartInformationPanelConstraints.gridy = 0;statisticsDataEntryPatientChartInformationPanelConstraints.gridx = 0;statisticsDataEntryPatientChartInformationPanelConstraints.weightx = 1;statisticsDataEntryPatientChartInformationPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.add(statisticsPatientChartIDAndNamePrefixJPanel, statisticsDataEntryPatientChartInformationPanelConstraints);statisticsDataEntryPatientChartInformationPanelConstraints.gridy = 1;statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.add(statisticsPatientNameGivenNameJPanel, statisticsDataEntryPatientChartInformationPanelConstraints);statisticsDataEntryPatientChartInformationPanelConstraints.gridy = 2;statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.add(statisticsPatientNameMiddleInitialOrNameJPanel, statisticsDataEntryPatientChartInformationPanelConstraints);statisticsDataEntryPatientChartInformationPanelConstraints.gridy = 3;statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.add(statisticsPatientNameLastNamePrefixJPanel, statisticsDataEntryPatientChartInformationPanelConstraints);statisticsDataEntryPatientChartInformationPanelConstraints.gridy = 4;statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.add(statisticsPatientNameFamilyNameJPanel, statisticsDataEntryPatientChartInformationPanelConstraints);statisticsDataEntryPatientChartInformationPanelConstraints.gridy = 5;statisticsDataEntryPatientChartInformationPanelConstraints.weightx = 0;statisticsDataEntryPatientChartInformationPanelConstraints.fill = GridBagConstraints.NONE;statisticsDataEntryPatientChartIdOrNameTextFieldJPanel.add(statisticsCreatePatientChartEntryOkJButton, statisticsDataEntryPatientChartInformationPanelConstraints);statisticsMedicalCodeBasePanelConstraints.insets = new Insets(3, 3, 3, 3);statisticsMedicalCodeBasePanelConstraints.gridy = 0;statisticsMedicalCodeGroupsPanelConstraints.gridy = 0;statisticsMedicalCodeGroupsPanelConstraints.insets = new Insets(3, 3, 3, 3);statisticsPatientChartBasePanelConstraints.insets = new Insets(3, 3, 3, 3);statisticsPatientChartBasePanelConstraints.gridy = 0;statisticsPatientChartGroupsPanelConstraints.gridy = 0;statisticsPatientChartGroupsPanelConstraints.insets = new Insets(3, 3, 3, 3);statisticsTimeRangeBasePanelConstraints.insets = new Insets(3, 3, 3, 3);statisticsTimeRangeBasePanelConstraints.gridy = 0;statisticsTimeRangeGroupsPanelConstraints.gridy = 0;statisticsTimeRangeGroupsPanelConstraints.insets = new Insets(3, 3, 3, 3);statisticsTimeRangeFromDayOfWeekJTextField.addFocusListener(this);statisticsTimeRangeFromDayOfWeekJTextField.addActionListener(this);statisticsTimeRangeFromDayOfWeekJTextField.setActionCommand("statisticsTimeRangeFromDayOfWeekJTextField");statisticsTimeRangeFromDayOfWeekJTextField.setName("statisticsTimeRangeFromDayOfWeekJTextField");statisticsTimeRangeFromDayOfWeekJTextField.setDisabledTextColor(Color.BLACK);statisticsTimeRangeFromDayOfWeekJTextField.setBackground(Color.WHITE);statisticsTimeRangeFromDayOfWeekJTextField.setEditable(false);statisticsTimeRangeFromMonthJTextField.addFocusListener(this);statisticsTimeRangeFromMonthJTextField.addActionListener(this);statisticsTimeRangeFromMonthJTextField.setActionCommand("statisticsTimeRangeFromMonthJTextField");statisticsTimeRangeFromMonthJTextField.setName("statisticsTimeRangeFromMonthJTextField");statisticsTimeRangeFromDayOfMonthJTextField.addMouseListener(this);statisticsTimeRangeFromDayOfMonthJTextField.addActionListener(this);statisticsTimeRangeFromDayOfMonthJTextField.setActionCommand("statisticsTimeRangeFromDayOfMonthJTextField");statisticsTimeRangeFromDayOfMonthJTextField.setName("statisticsTimeRangeFromDayOfMonthJTextField");statisticsTimeRangeFromYearJTextField.addActionListener(this);statisticsTimeRangeFromYearJTextField.setActionCommand("statisticsTimeRangeFromYearJTextField");statisticsTimeRangeFromHourJTextField.addActionListener(this);statisticsTimeRangeFromHourJTextField.setActionCommand("statisticsTimeRangeFromHourJTextField");statisticsTimeRangeFromMinuteJTextField.addActionListener(this);statisticsTimeRangeFromMinuteJTextField.setActionCommand("statisticsTimeRangeFromMinuteJTextField");statisticsTimeRangeFromAmPmJTextField.addActionListener(this);statisticsTimeRangeFromAmPmJTextField.setActionCommand("statisticsTimeRangeFromAmPmJTextField");statisticsTimeRangeToDayOfWeekJTextField.addFocusListener(this);statisticsTimeRangeToDayOfWeekJTextField.addActionListener(this);statisticsTimeRangeToDayOfWeekJTextField.setActionCommand("statisticsTimeRangeToDayOfWeekJTextField");statisticsTimeRangeToDayOfWeekJTextField.setName("statisticsTimeRangeToDayOfWeekJTextField");statisticsTimeRangeToDayOfWeekJTextField.setDisabledTextColor(Color.BLACK);statisticsTimeRangeToDayOfWeekJTextField.setBackground(Color.WHITE);statisticsTimeRangeToDayOfWeekJTextField.setEditable(false);statisticsTimeRangeToMonthJTextField.addFocusListener(this);statisticsTimeRangeToMonthJTextField.addActionListener(this);statisticsTimeRangeToMonthJTextField.setActionCommand("statisticsTimeRangeToMonthJTextField");statisticsTimeRangeToMonthJTextField.setName("statisticsTimeRangeToMonthJTextField");statisticsTimeRangeToDayOfMonthJTextField.addFocusListener(this);statisticsTimeRangeToDayOfMonthJTextField.addActionListener(this);statisticsTimeRangeToDayOfMonthJTextField.setActionCommand("statisticsTimeRangeToDayOfMonthJTextField");statisticsTimeRangeToDayOfMonthJTextField.setName("statisticsTimeRangeToDayOfMonthJTextField");statisticsTimeRangeToYearJTextField.addFocusListener(this);statisticsTimeRangeToYearJTextField.addActionListener(this);statisticsTimeRangeToYearJTextField.setActionCommand("statisticsTimeRangeToYearJTextField");statisticsTimeRangeToYearJTextField.setName("statisticsTimeRangeToYearJTextField");statisticsTimeRangeToHourJTextField.addFocusListener(this);statisticsTimeRangeToHourJTextField.addActionListener(this);statisticsTimeRangeToHourJTextField.setActionCommand("statisticsTimeRangeToHourJTextField");statisticsTimeRangeToHourJTextField.setName("statisticsTimeRangeToHourJTextField");statisticsTimeRangeToMinuteJTextField.addFocusListener(this);statisticsTimeRangeToMinuteJTextField.addActionListener(this);statisticsTimeRangeToMinuteJTextField.setActionCommand("statisticsTimeRangeToMinuteJTextField");statisticsTimeRangeToMinuteJTextField.setName("statisticsTimeRangeToMinuteJTextField");statisticsTimeRangeToAmPmJTextField.addFocusListener(this);statisticsTimeRangeToAmPmJTextField.addActionListener(this);statisticsTimeRangeToAmPmJTextField.setActionCommand("statisticsTimeRangeToAmPmJTextField");statisticsTimeRangeToAmPmJTextField.setName("statisticsTimeRangeToAmPmJTextField");statisticsTimeRangeFromColonJLabel.setBackground(Color.WHITE);statisticsTimeRangeFromPatientTimeJPanel.setOpaque(false);statisticsTimeRangeFromPatientTimeJPanel.setBorder(userInputLineBorder);statisticsTimeRangeFromPatientTimePanelConstraints.gridx = 0;statisticsTimeRangeFromPatientTimeJPanel.add(statisticsTimeRangeFromPatientTimeJLabel, statisticsTimeRangeFromPatientTimePanelConstraints);statisticsTimeRangeFromPatientTimePanelConstraints.gridx++;statisticsTimeRangeFromPatientTimeJPanel.add(statisticsTimeRangeFromHourJTextField, statisticsTimeRangeFromPatientTimePanelConstraints);statisticsTimeRangeFromPatientTimePanelConstraints.gridx++;statisticsTimeRangeFromPatientTimeJPanel.add(statisticsTimeRangeFromColonJLabel, statisticsTimeRangeFromPatientTimePanelConstraints);statisticsTimeRangeFromPatientTimePanelConstraints.gridx++;statisticsTimeRangeFromPatientTimeJPanel.add(statisticsTimeRangeFromMinuteJTextField, statisticsTimeRangeFromPatientTimePanelConstraints);statisticsTimeRangeFromPatientTimePanelConstraints.gridx++;statisticsTimeRangeFromPatientTimePanelConstraints.weightx = 1;statisticsTimeRangeFromPatientTimePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeFromPatientTimeJPanel.add(statisticsTimeRangeFromAmPmJTextField, statisticsTimeRangeFromPatientTimePanelConstraints);statisticsTimeRangeFromComma1AndSpaceJLabel.setBackground(Color.WHITE);statisticsTimeRangeFromComma2JLabel.setBackground(Color.WHITE);statisticsTimeRangeFromPatientDateJPanel.setOpaque(false);statisticsTimeRangeFromPatientDateJPanel.setBorder(userInputLineBorder);statisticsTimeRangeFromPatientDatePanelConstraints.gridy = 0;statisticsTimeRangeFromPatientDatePanelConstraints.gridx = 0;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromPatientDateJLabel, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeFromPatientDatePanelConstraints.gridx++;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromDayOfWeekJTextField, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeFromPatientDatePanelConstraints.gridx++;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromComma1AndSpaceJLabel, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeFromPatientDatePanelConstraints.gridx++;statisticsTimeRangeFromPatientDatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeFromPatientDatePanelConstraints.weightx = 1;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromMonthJTextField, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeFromPatientDatePanelConstraints.gridx++;statisticsTimeRangeFromPatientDatePanelConstraints.fill = GridBagConstraints.NONE;statisticsTimeRangeFromPatientDatePanelConstraints.weightx = 0;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromDayOfMonthJTextField, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeFromPatientDatePanelConstraints.gridx++;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromComma2JLabel, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeFromPatientDatePanelConstraints.gridx++;statisticsTimeRangeFromPatientDateJPanel.add(statisticsTimeRangeFromYearJTextField, statisticsTimeRangeFromPatientDatePanelConstraints);statisticsTimeRangeToColonJLabel.setBackground(Color.WHITE);statisticsTimeRangeToPatientTimeJPanel.setOpaque(false);statisticsTimeRangeToPatientTimeJPanel.setBorder(userInputLineBorder);statisticsTimeRangeToPatientTimePanelConstraints.gridx = 0;statisticsTimeRangeToPatientTimeJPanel.add(statisticsTimeRangeToPatientTimeJLabel, statisticsTimeRangeToPatientTimePanelConstraints);statisticsTimeRangeToPatientTimePanelConstraints.gridx++;statisticsTimeRangeToPatientTimeJPanel.add(statisticsTimeRangeToHourJTextField, statisticsTimeRangeToPatientTimePanelConstraints);statisticsTimeRangeToPatientTimePanelConstraints.gridx++;statisticsTimeRangeToPatientTimeJPanel.add(statisticsTimeRangeToColonJLabel, statisticsTimeRangeToPatientTimePanelConstraints);statisticsTimeRangeToPatientTimePanelConstraints.gridx++;statisticsTimeRangeToPatientTimeJPanel.add(statisticsTimeRangeToMinuteJTextField, statisticsTimeRangeToPatientTimePanelConstraints);statisticsTimeRangeToPatientTimePanelConstraints.gridx++;statisticsTimeRangeToPatientTimePanelConstraints.weightx = 1;statisticsTimeRangeToPatientTimePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeToPatientTimeJPanel.add(statisticsTimeRangeToAmPmJTextField, statisticsTimeRangeToPatientTimePanelConstraints);statisticsTimeRangeToComma1AndSpaceJLabel.setBackground(Color.WHITE);statisticsTimeRangeToComma2JLabel.setBackground(Color.WHITE);statisticsTimeRangeToPatientDateJPanel.setOpaque(false);statisticsTimeRangeToPatientDateJPanel.setBorder(userInputLineBorder);statisticsTimeRangeToPatientDatePanelConstraints.gridy = 0;statisticsTimeRangeToPatientDatePanelConstraints.gridx = 0;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToPatientDateJLabel, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeToPatientDatePanelConstraints.gridx++;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToDayOfWeekJTextField, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeToPatientDatePanelConstraints.gridx++;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToComma1AndSpaceJLabel, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeToPatientDatePanelConstraints.gridx++;statisticsTimeRangeToPatientDatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeToPatientDatePanelConstraints.weightx = 1;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToMonthJTextField, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeToPatientDatePanelConstraints.gridx++;statisticsTimeRangeToPatientDatePanelConstraints.fill = GridBagConstraints.NONE;statisticsTimeRangeToPatientDatePanelConstraints.weightx = 0;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToDayOfMonthJTextField, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeToPatientDatePanelConstraints.gridx++;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToComma2JLabel, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeToPatientDatePanelConstraints.gridx++;statisticsTimeRangeToPatientDateJPanel.add(statisticsTimeRangeToYearJTextField, statisticsTimeRangeToPatientDatePanelConstraints);statisticsTimeRangeEntryHeaderJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));statisticsTimeRangeEntryHeaderJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsTimeRangeEntryHeaderPanelConstraints.weightx = 1;statisticsTimeRangeEntryHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeEntryHeaderPanelConstraints.insets = new Insets(4, 4, 0, 4);statisticsTimeRangeEntryHeaderJPanel.add(statisticsTimeRangeEntryHeaderJLabel, statisticsTimeRangeEntryHeaderPanelConstraints);statisticsTimeRangeEntryHeaderPanelConstraints.gridy = 1;statisticsTimeRangeEntryHeaderPanelConstraints.insets = new Insets(0, 4, 0, 4);statisticsTimeRangeEntryHeaderJPanel.add(statisticsTimeRangeFromPatientDateJPanel, statisticsTimeRangeEntryHeaderPanelConstraints);statisticsTimeRangeEntryHeaderPanelConstraints.gridy = 2;statisticsTimeRangeEntryHeaderJPanel.add(statisticsTimeRangeFromPatientTimeJPanel, statisticsTimeRangeEntryHeaderPanelConstraints);statisticsTimeRangeEntryHeaderPanelConstraints.gridy = 3;statisticsTimeRangeEntryHeaderJPanel.add(statisticsTimeRangeToPatientDateJPanel, statisticsTimeRangeEntryHeaderPanelConstraints);statisticsTimeRangeEntryHeaderPanelConstraints.gridy = 4;statisticsTimeRangeEntryHeaderJPanel.add(statisticsTimeRangeToPatientTimeJPanel, statisticsTimeRangeEntryHeaderPanelConstraints);statisticsTimeRangeEntryHeaderPanelConstraints.gridy = 5;statisticsTimeRangeEntryHeaderPanelConstraints.weightx = 0;statisticsTimeRangeEntryHeaderPanelConstraints.fill = GridBagConstraints.NONE;statisticsTimeRangeEntryHeaderPanelConstraints.insets = new Insets(0, 4, 4, 4);statisticsTimeRangeEntryHeaderJPanel.add(statisticsCreateTimeRangeEntryOkJButton, statisticsTimeRangeEntryHeaderPanelConstraints);statisticsTimeRangeBaseJPanel.setOpaque(false);statisticsTimeRangeBasePusherJPanel.setOpaque(false);statisticsTimeRangeBaseBasePanelConstraints.gridy = 0;statisticsTimeRangeBaseBaseJPanel.add(statisticsTimeRangeBaseJPanel, statisticsTimeRangeBaseBasePanelConstraints);statisticsTimeRangeBaseBasePanelConstraints.gridy = 1;statisticsTimeRangeBaseBasePanelConstraints.weighty = 1;statisticsTimeRangeBaseBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsTimeRangeBaseBaseJPanel.add(statisticsTimeRangeBasePusherJPanel, statisticsTimeRangeBaseBasePanelConstraints);statisticsTimeRangeEntryBaseJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));statisticsTimeRangeEntryBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);statisticsTimeRangeGroupsJPanel.setBackground(Color.WHITE);statisticsTimeRangeBaseBaseJPanel.setBackground(Color.WHITE);statisticsTimeRangeEntryBasePanelConstraints.gridy = 0;statisticsTimeRangeEntryBasePanelConstraints.gridx = 0;statisticsTimeRangeEntryBasePanelConstraints.weightx = 1;statisticsTimeRangeEntryBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeEntryBasePanelConstraints.insets = new Insets(4, 4, 2, 4);statisticsTimeRangeEntryBaseJPanel.add(statisticsTimeRangeEntryHeaderJPanel, statisticsTimeRangeEntryBasePanelConstraints);statisticsTimeRangeEntryBasePanelConstraints.gridy = 1;statisticsTimeRangeEntryBasePanelConstraints.weighty = 0.5;statisticsTimeRangeEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsTimeRangeEntryBasePanelConstraints.insets = new Insets(2, 4, 0, 4);statisticsTimeRangeBasePanelJScrollPane.getVerticalScrollBar().setUnitIncrement(25);statisticsTimeRangeGroupsJScrollPane.getVerticalScrollBar().setUnitIncrement(25);statisticsTimeRangeEntryBaseJPanel.add(statisticsTimeRangeBasePanelJScrollPane, statisticsTimeRangeEntryBasePanelConstraints);statisticsTimeRangeEntryBasePanelConstraints.gridy = 2;statisticsTimeRangeEntryBasePanelConstraints.weighty = 0;statisticsTimeRangeEntryBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsTimeRangeEntryBasePanelConstraints.insets = new Insets(0, 0, 0, 0);statisticsTimeRangeEntryBaseJPanel.add(statisticsAddSaveTimeRangeGroupOkJPanel, statisticsTimeRangeEntryBasePanelConstraints);statisticsTimeRangeEntryBasePanelConstraints.gridy = 3;statisticsTimeRangeEntryBasePanelConstraints.weighty = 0.5;statisticsTimeRangeEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsTimeRangeEntryBasePanelConstraints.insets = new Insets(0, 4, 4, 4);statisticsTimeRangeEntryBaseJPanel.add(statisticsTimeRangeGroupsJScrollPane, statisticsTimeRangeEntryBasePanelConstraints);statisticsPatientChartEntryHeaderJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));statisticsPatientChartEntryHeaderJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsPatientChartEntryHeaderPanelConstraints.weightx = 1;statisticsPatientChartEntryHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientChartEntryHeaderPanelConstraints.insets = new Insets(4, 4, 0, 4);statisticsPatientChartEntryHeaderJPanel.add(statisticsPatientChartEntryHeaderJLabel, statisticsPatientChartEntryHeaderPanelConstraints);statisticsPatientChartEntryHeaderPanelConstraints.gridy = 1;statisticsPatientChartEntryHeaderPanelConstraints.insets = new Insets(0, 4, 0, 4);statisticsPatientChartEntryHeaderJPanel.add(statisticsDataEntryPatientChartTypeHeaderJLabel, statisticsPatientChartEntryHeaderPanelConstraints);statisticsPatientChartEntryHeaderPanelConstraints.gridy = 2;statisticsPatientChartEntryHeaderPanelConstraints.insets = new Insets(0, 4, 4, 4);statisticsPatientChartEntryHeaderJPanel.add(statisticsDataEntryPatientChartIdOrNameTextFieldJPanel, statisticsPatientChartEntryHeaderPanelConstraints);statisticsPatientChartEntryBaseJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));statisticsPatientChartEntryBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);statisticsPatientChartGroupsJPanel.setBackground(Color.WHITE);statisticsPatientChartBaseBaseJPanel.setBackground(Color.WHITE);statisticsPatientChartBasePanelJScrollPane.getVerticalScrollBar().setUnitIncrement(25);statisticsPatientChartGroupsJScrollPane.getVerticalScrollBar().setUnitIncrement(25);statisticsPatientChartEntryBasePanelConstraints.gridy = 0;statisticsPatientChartEntryBasePanelConstraints.gridx = 0;statisticsPatientChartEntryBasePanelConstraints.weightx = 1;statisticsPatientChartEntryBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientChartEntryBasePanelConstraints.insets = new Insets(4, 4, 2, 4);statisticsPatientChartEntryBaseJPanel.add(statisticsPatientChartEntryHeaderJPanel, statisticsPatientChartEntryBasePanelConstraints);statisticsPatientChartEntryBasePanelConstraints.gridy = 1;statisticsPatientChartEntryBasePanelConstraints.weighty = 0.5;statisticsPatientChartEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsPatientChartEntryBasePanelConstraints.insets = new Insets(2, 4, 0, 4);statisticsPatientChartEntryBaseJPanel.add(statisticsPatientChartBasePanelJScrollPane, statisticsPatientChartEntryBasePanelConstraints);statisticsPatientChartEntryBasePanelConstraints.gridy = 2;statisticsPatientChartEntryBasePanelConstraints.weighty = 0;statisticsPatientChartEntryBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientChartEntryBasePanelConstraints.insets = new Insets(0, 0, 0, 0);statisticsPatientChartEntryBaseJPanel.add(statisticsAddSavePatientChartGroupOkJPanel, statisticsPatientChartEntryBasePanelConstraints);statisticsPatientChartEntryBasePanelConstraints.gridy = 3;statisticsPatientChartEntryBasePanelConstraints.weighty = 0.5;statisticsPatientChartEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsPatientChartEntryBasePanelConstraints.insets = new Insets(0, 4, 4, 4);statisticsPatientChartEntryBaseJPanel.add(statisticsPatientChartGroupsJScrollPane, statisticsPatientChartEntryBasePanelConstraints);statisticsDataEntryJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);statisticsDataEntryPanelConstraints.gridx = 0;statisticsDataEntryPanelConstraints.weighty = 1;statisticsDataEntryPanelConstraints.fill = GridBagConstraints.BOTH;statisticsDataEntryPanelConstraints.insets = new Insets(8, 8, 8, 4);statisticsDataEntryJPanel.add(statisticsMedicalCodeEntryBaseJPanel, statisticsDataEntryPanelConstraints);statisticsDataEntryPanelConstraints.gridx = 1;statisticsDataEntryPanelConstraints.weightx = 1;statisticsDataEntryJPanel.add(statisticsTimeRangeEntryBaseJPanel, statisticsDataEntryPanelConstraints);statisticsDataEntryPanelConstraints.gridx = 2;statisticsDataEntryPanelConstraints.insets = new Insets(8, 4, 8, 8);statisticsDataEntryPanelConstraints.weightx = 0;statisticsDataEntryJPanel.add(statisticsPatientChartEntryBaseJPanel, statisticsDataEntryPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioJPanel.setOpaque(false);decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints.gridy = 0;decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints.gridx = 0;decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints.gridheight = 2;decisionAnalysisIncrementalCostEffectivenessRatioJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio1JLabel, decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints.gridx = 1;decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints.gridheight = 1;decisionAnalysisIncrementalCostEffectivenessRatioJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel, decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints.gridy = 1;decisionAnalysisIncrementalCostEffectivenessRatioJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel, decisionAnalysisIncrementalCostEffectivenessRatioPanelConstraints);saveAsTreatmentAnalysisNameJTextField.setFont(SystemWindow.systemFont);saveAsTreatmentAnalysisHorizontalLineJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.GRAY));openTreatmentAnalysisHorizontalLineJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.GRAY));saveAsTreatmentAnalysisHeaderJPanel.setOpaque(false);saveAsTreatmentAnalysisHeaderJPanel.add(saveAsTreatmentAnalysisHeaderJLabel, saveAsTreatmentAnalysisHeaderPanelConstraints);saveAsTreatmentAnalysisHeaderJPanel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));openTreatmentAnalysisHeaderJPanel.setOpaque(false);openTreatmentAnalysisHeaderJPanel.add(openTreatmentAnalysisHeaderJLabel, openTreatmentCostsAnalysisHeaderPanelConstraints);openTreatmentAnalysisHeaderJPanel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));saveAsTreatmentAnalysisJPopupMenu.setPreferredSize(new Dimension(popupMenusScrollPaneSizeDimension.width, 100));saveAsTreatmentAnalysisJPopupMenu.setBorder(menuPanelPopupMenuBorder);saveAsTreatmentAnalysisJPopupMenu.setLayout(new GridBagLayout());saveAsTreatmentAnalysisJPopupMenu.setBackground(Color.LIGHT_GRAY);saveAsTreatmentAnalysisPopupMenuConstraints.gridy = 0;saveAsTreatmentAnalysisPopupMenuConstraints.gridx = 0;saveAsTreatmentAnalysisPopupMenuConstraints.insets = new Insets(6, 6, 3, 6);saveAsTreatmentAnalysisPopupMenuConstraints.gridwidth = 2;saveAsTreatmentAnalysisPopupMenuConstraints.fill = GridBagConstraints.BOTH;saveAsTreatmentAnalysisJPopupMenu.add(saveAsTreatmentAnalysisHeaderJPanel, saveAsTreatmentAnalysisPopupMenuConstraints);saveAsTreatmentAnalysisPopupMenuConstraints.gridy = 1;saveAsTreatmentAnalysisPopupMenuConstraints.gridwidth = 1;saveAsTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 16, 3, 0);saveAsTreatmentAnalysisJPopupMenu.add(saveAsTreatmentAnalysisNamePromptJLabel, saveAsTreatmentAnalysisPopupMenuConstraints);saveAsTreatmentAnalysisPopupMenuConstraints.gridx = 1;saveAsTreatmentAnalysisPopupMenuConstraints.weightx = 1;saveAsTreatmentAnalysisPopupMenuConstraints.fill = GridBagConstraints.BOTH;saveAsTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 0, 3, 6);saveAsTreatmentAnalysisJPopupMenu.add(saveAsTreatmentAnalysisNameJTextField, saveAsTreatmentAnalysisPopupMenuConstraints);saveAsTreatmentAnalysisPopupMenuConstraints.gridy = 2;saveAsTreatmentAnalysisPopupMenuConstraints.gridx = 0;saveAsTreatmentAnalysisPopupMenuConstraints.gridwidth = 2;saveAsTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 6, 3, 6);saveAsTreatmentAnalysisJPopupMenu.add(saveAsTreatmentAnalysisHorizontalLineJLabel, saveAsTreatmentAnalysisPopupMenuConstraints);saveAsTreatmentAnalysisPopupMenuConstraints.gridy = 3;saveAsTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 40, 6, 40);saveAsTreatmentAnalysisJPopupMenu.add(saveAsTreatmentAnalysisOkJButton, saveAsTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisChoicesBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);openTreatmentAnalysisChoicesJPanel.setOpaque(false);openTreatmentAnalysisChoicesPusherJPanel.setOpaque(false);openTreatmentAnalysisChoicesBaseJPanel.add(openTreatmentAnalysisChoicesJPanel, openTreatmentCostsAnalysisChoicesPanelConstraints);openTreatmentCostsAnalysisChoicesPanelConstraints.gridy = 1;openTreatmentCostsAnalysisChoicesPanelConstraints.weighty = 1;openTreatmentCostsAnalysisChoicesPanelConstraints.fill = GridBagConstraints.VERTICAL;openTreatmentAnalysisChoicesBaseJPanel.add(openTreatmentAnalysisChoicesPusherJPanel, openTreatmentCostsAnalysisChoicesPanelConstraints);openTreatmentAnalysisOkJButton.addActionListener(this);openTreatmentAnalysisOkJButton.setActionCommand("openTreatmentAnalysisOkJButton");openTreatmentAnalysisJTextField.setFont(SystemWindow.systemFont);openTreatmentAnalysisJPopupMenu.setLayout(new GridBagLayout());openTreatmentAnalysisJPopupMenu.setBorder(menuPanelPopupMenuBorder);openTreatmentAnalysisJPopupMenu.setBackground(Color.LIGHT_GRAY);openTreatmentAnalysisJScrollPane.getVerticalScrollBar().setUnitIncrement(25);openTreatmentAnalysisPopupMenuConstraints.gridy = 0;openTreatmentAnalysisPopupMenuConstraints.gridx = 0;openTreatmentAnalysisPopupMenuConstraints.insets = new Insets(6, 6, 3, 6);openTreatmentAnalysisPopupMenuConstraints.gridwidth = 4;openTreatmentAnalysisPopupMenuConstraints.fill = GridBagConstraints.BOTH;openTreatmentAnalysisJPopupMenu.add(openTreatmentAnalysisHeaderJPanel, openTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisPopupMenuConstraints.gridy = 1;openTreatmentAnalysisPopupMenuConstraints.gridwidth = 1;openTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 16, 3, 0);openTreatmentAnalysisJPopupMenu.add(openTreatmentAnalysisNamePromptJLabel, openTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisPopupMenuConstraints.gridx = 1;openTreatmentAnalysisPopupMenuConstraints.gridheight = 1;openTreatmentAnalysisPopupMenuConstraints.weightx = 1;openTreatmentAnalysisPopupMenuConstraints.gridwidth = 3;openTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 0, 3, 6);openTreatmentAnalysisJPopupMenu.add(openTreatmentAnalysisJTextField, openTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisPopupMenuConstraints.gridy = 4;openTreatmentAnalysisPopupMenuConstraints.gridx = 0;openTreatmentAnalysisPopupMenuConstraints.gridheight = 1;openTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 6, 3, 6);openTreatmentAnalysisPopupMenuConstraints.gridwidth = 4;openTreatmentAnalysisPopupMenuConstraints.weightx = 1;openTreatmentAnalysisJPopupMenu.add(openTreatmentAnalysisHorizontalLineJLabel, openTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisPopupMenuConstraints.gridy = 5;openTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 40, 3, 40);openTreatmentAnalysisJPopupMenu.add(openTreatmentAnalysisOkJButton, openTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisPopupMenuConstraints.gridy = 6;openTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 0, 6, 0);openTreatmentAnalysisJPopupMenu.add(openTreatmentAnalysisJScrollPane, openTreatmentAnalysisPopupMenuConstraints);openTreatmentAnalysisJScrollPane.setPreferredSize(popupMenusScrollPaneSizeDimension);promptToSaveTreatmentAnalysisYesJButton.addActionListener(this);promptToSaveTreatmentAnalysisYesJButton.setActionCommand("promptToSaveTreatmentAnalysisYesJButton");promptToSaveTreatmentAnalysisNoJButton.addActionListener(this);promptToSaveTreatmentAnalysisNoJButton.setActionCommand("promptToSaveTreatmentAnalysisNoJButton");promptToSaveTreatmentAnalysisJPopupMenu.setBorder(menuPanelPopupMenuBorder);promptToSaveTreatmentAnalysisJPopupMenu.setBackground(Color.LIGHT_GRAY);promptToSaveTreatmentAnalysisJPopupMenu.setLayout(new GridBagLayout());promptToSaveTreatmentAnalysisPopupMenuConstraints.gridy = 0;promptToSaveTreatmentAnalysisPopupMenuConstraints.gridwidth = 2;promptToSaveTreatmentAnalysisPopupMenuConstraints.insets = new Insets(6, 6, 3, 6);promptToSaveTreatmentAnalysisJPopupMenu.add(promptToSaveTreatmentAnalysisHeader1JLabel, promptToSaveTreatmentAnalysisPopupMenuConstraints);promptToSaveTreatmentAnalysisPopupMenuConstraints.gridy = 1;promptToSaveTreatmentAnalysisJPopupMenu.add(promptToSaveTreatmentAnalysisHeader2JLabel, promptToSaveTreatmentAnalysisPopupMenuConstraints);promptToSaveTreatmentAnalysisPopupMenuConstraints.gridy = 2;promptToSaveTreatmentAnalysisJPopupMenu.add(promptToSaveTreatmentAnalysisHeader3JLabel, promptToSaveTreatmentAnalysisPopupMenuConstraints);promptToSaveTreatmentAnalysisPopupMenuConstraints.gridy = 3;promptToSaveTreatmentAnalysisPopupMenuConstraints.gridwidth = 1;promptToSaveTreatmentAnalysisPopupMenuConstraints.insets = new Insets(6, 6, 6, 3);promptToSaveTreatmentAnalysisJPopupMenu.add(promptToSaveTreatmentAnalysisYesJButton, promptToSaveTreatmentAnalysisPopupMenuConstraints);promptToSaveTreatmentAnalysisPopupMenuConstraints.gridx = 1;promptToSaveTreatmentAnalysisPopupMenuConstraints.insets = new Insets(6, 3, 6, 6);promptToSaveTreatmentAnalysisJPopupMenu.add(promptToSaveTreatmentAnalysisNoJButton, promptToSaveTreatmentAnalysisPopupMenuConstraints);costAnalysisTreatmentNameJTextField.addActionListener(this);costAnalysisTreatmentNameJTextField.setActionCommand("costAnalysisTreatmentNameJTextField");costAnalysisTreatmentCostJTextField.addActionListener(this);costAnalysisTreatmentCostJTextField.setActionCommand("costAnalysisTreatmentCostJTextField");costAnalysisTreatmentEffectivenessJTextField.addActionListener(this);costAnalysisTreatmentEffectivenessJTextField.setActionCommand("costAnalysisTreatmentEffectivenessJTextField");costAnalysisSaveTreatmentCostPointJPanel.setBorder(new MatteBorder(2, 0, 0, 0, Color.GRAY));costAnalysisSaveTreatmentCostPointJPanel.setOpaque(false);costAnalysisSaveTreatmentCostPointPanelConstraints.gridy = 0;costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 0;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisTreatmentNameJLabel, costAnalysisSaveTreatmentCostPointPanelConstraints);costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 1;costAnalysisSaveTreatmentCostPointPanelConstraints.insets = new Insets(6, 0, 0, 6);costAnalysisSaveTreatmentCostPointPanelConstraints.weightx = 1;costAnalysisSaveTreatmentCostPointPanelConstraints.fill = GridBagConstraints.HORIZONTAL;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisTreatmentNameJTextField, costAnalysisSaveTreatmentCostPointPanelConstraints);costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 2;costAnalysisSaveTreatmentCostPointPanelConstraints.insets = new Insets(6, 0, 0, 0);costAnalysisSaveTreatmentCostPointPanelConstraints.weightx = 0;costAnalysisSaveTreatmentCostPointPanelConstraints.fill = GridBagConstraints.NONE;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisTreatmentCostPromptJLabel, costAnalysisSaveTreatmentCostPointPanelConstraints);costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 3;costAnalysisSaveTreatmentCostPointPanelConstraints.insets = new Insets(6, 0, 0, 6);costAnalysisSaveTreatmentCostPointPanelConstraints.weightx = 1;costAnalysisSaveTreatmentCostPointPanelConstraints.fill = GridBagConstraints.HORIZONTAL;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisTreatmentCostJTextField, costAnalysisSaveTreatmentCostPointPanelConstraints);costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 4;costAnalysisSaveTreatmentCostPointPanelConstraints.insets = new Insets(6, 0, 0, 0);costAnalysisSaveTreatmentCostPointPanelConstraints.weightx = 0;costAnalysisSaveTreatmentCostPointPanelConstraints.fill = GridBagConstraints.NONE;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisTreatmentEffectivenessPromptJLabel, costAnalysisSaveTreatmentCostPointPanelConstraints);costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 5;costAnalysisSaveTreatmentCostPointPanelConstraints.weightx = 1;costAnalysisSaveTreatmentCostPointPanelConstraints.fill = GridBagConstraints.HORIZONTAL;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisTreatmentEffectivenessJTextField, costAnalysisSaveTreatmentCostPointPanelConstraints);costAnalysisSaveTreatmentCostPointPanelConstraints.gridx = 6;costAnalysisSaveTreatmentCostPointPanelConstraints.insets = new Insets(6, 12, 0, 12);costAnalysisSaveTreatmentCostPointPanelConstraints.weightx = 0;costAnalysisSaveTreatmentCostPointPanelConstraints.fill = GridBagConstraints.NONE;costAnalysisSaveTreatmentCostPointJPanel.add(costAnalysisOkJButton, costAnalysisSaveTreatmentCostPointPanelConstraints);qualityAdjustedSaveTreatmentCostPointJPanel.setOpaque(false);qualityAdjustedSaveTreatmentCostPointPusherJPanel.setOpaque(false);qualityAdjustedSaveTreatmentCostPointJPanel.add(qualityAdjustedLifeYearsPromptJLabel, qualityAdjustedSaveTreatmentCostPointPanelConstraints);qualityAdjustedSaveTreatmentCostPointPanelConstraints.gridx = 1;qualityAdjustedSaveTreatmentCostPointPanelConstraints.insets = new Insets(0, 6, 0, 4);qualityAdjustedSaveTreatmentCostPointJPanel.add(qualityAdjustedLifeYearsYesJToggleButton, qualityAdjustedSaveTreatmentCostPointPanelConstraints);qualityAdjustedSaveTreatmentCostPointPanelConstraints.gridx = 2;qualityAdjustedSaveTreatmentCostPointPanelConstraints.insets = new Insets(0, 4, 0, 0);qualityAdjustedSaveTreatmentCostPointJPanel.add(qualityAdjustedLifeYearsNoJToggleButton, qualityAdjustedSaveTreatmentCostPointPanelConstraints);qualityAdjustedSaveTreatmentCostPointPanelConstraints.gridx = 3;qualityAdjustedSaveTreatmentCostPointJPanel.add(qualityAdjustedLifeYearsAutoRankJToggleButton, qualityAdjustedSaveTreatmentCostPointPanelConstraints);qualityAdjustedSaveTreatmentCostPointPanelConstraints.gridx = 4;qualityAdjustedSaveTreatmentCostPointPanelConstraints.weightx = 1;qualityAdjustedSaveTreatmentCostPointJPanel.add(qualityAdjustedSaveTreatmentCostPointPusherJPanel, qualityAdjustedSaveTreatmentCostPointPanelConstraints);treatmentCostPointTreatmentNameHeaderJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentCostPointCostHeaderJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentCostPointEffectivenessHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentCostPointTreatmentNameHeaderJPanel.setOpaque(false);treatmentCostPointCostHeaderJPanel.setOpaque(false);treatmentCostPointEffectivenessHeaderJPanel.setOpaque(false);treatmentCostPointTreatmentNameHeaderJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointCostHeaderJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointEffectivenessHeaderJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointCostHeaderJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessHeaderJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointCostHeaderJPanel.setSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessHeaderJPanel.setSize(costPointsCellPanelDimension);treatmentCostPointTreatmentNameHeaderJPanel.add(treatmentCostPointTreatmentNameHeaderJLabel, treatmentCostPointTreatmentNameHeaderPanelConstraints);treatmentCostPointCostHeaderJPanel.add(treatmentCostPointCostHeaderJLabel, treatmentCostPointCostHeaderPanelConstraints);treatmentCostPointEffectivenessHeaderJPanel.add(treatmentCostPointEffectivenessHeaderJLabel, treatmentCostPointEffectivenessHeaderPanelConstraints);costPointsHeaderJPanel.setBackground(Color.WHITE);decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridy = 0;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridx = 0;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.weightx = 1;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.fill = GridBagConstraints.BOTH;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridwidth = 2;costPointsHeaderJPanel.add(treatmentCostPointTreatmentNameHeaderJPanel, decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints);decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridy = 1;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridx = 0;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridwidth = 1;costPointsHeaderJPanel.add(treatmentCostPointCostHeaderJPanel, decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints);decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.gridx = 1;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.weightx = 1;decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;costPointsHeaderJPanel.add(treatmentCostPointEffectivenessHeaderJPanel, decisionAnalysisAddTreatmentCostPointsDisplayScrollPaneHeaderPanelConstraints);costPointsPanelConstraints.weightx = 1;costPointsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;costPointsPanelConstraints.insets = new Insets(6, 0, 0, 0);costPointsDisplayJPanel.setOpaque(false);costPointsDisplayPanelConstraints.gridy = 0;costPointsDisplayPanelConstraints.gridx = 0;costPointsDisplayPanelConstraints.weightx = 1;costPointsDisplayPanelConstraints.fill = GridBagConstraints.BOTH;costPointsDisplayJPanel.add(costPointsHeaderJPanel, costPointsDisplayPanelConstraints);costPointsDisplayPanelConstraints.gridy = 1;costPointsDisplayJPanel.add(costPointsJPanel, costPointsDisplayPanelConstraints);costPointsDisplayPanelConstraints.gridy = 2;costPointsDisplayPanelConstraints.weighty = 1;costPointsDisplayJPanel.add(costPointsDisplayPanelPusherJPanel, costPointsDisplayPanelConstraints);costPointsDisplayBaseJPanel.setBorder(new LineBorder(Color.GRAY, 1));costPointsDisplayBaseJPanel.setBackground(Color.WHITE);costAnalysisSaveTreatmentCostPointsDisplayPusherJPanel.setOpaque(false);costPointsDisplayBasePanelConstraints.gridy = 0;costPointsDisplayBasePanelConstraints.weightx = 1;costPointsDisplayBasePanelConstraints.fill = GridBagConstraints.BOTH;costPointsDisplayBaseJPanel.add(costPointsDisplayJPanel, costPointsDisplayBasePanelConstraints);costPointsDisplayBasePanelConstraints.gridy = 1;costPointsDisplayBasePanelConstraints.weighty = 1;costPointsDisplayBaseJPanel.add(costAnalysisSaveTreatmentCostPointsDisplayPusherJPanel, costPointsDisplayBasePanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel.setOpaque(false);decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints.ipadx = 2;decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio2JLabel, decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints.insets = new Insets(7, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio3JLabel, decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints.insets = new Insets(0, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio5JLabel, decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints.insets = new Insets(7, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioUpperJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio6JLabel, decisionAnalysisIncrementalCostEffectivenessRatioUpperPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel.setOpaque(false);decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints.ipadx = 2;decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio7JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints.insets = new Insets(7, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio8JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints.insets = new Insets(0, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio10JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints.insets = new Insets(7, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioLowerJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatio11JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLowerPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.setOpaque(false);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.gridx = 0;decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.ipadx = 2;decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.add(statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend1JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.gridx = 1;decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.insets = new Insets(7, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.ipadx = 0;decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.add(statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend2JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.gridx = 2;decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.insets = new Insets(0, 0, 0, 0);decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.add(statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend3JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.gridx = 3;decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.add(statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend4JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.gridx = 4;decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.add(statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend5JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints);decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints.gridx = 5;decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel.add(statisticsClinicalEffectivenessOfTreatmentOptionsAAndBLegend6JLabel, decisionAnalysisIncrementalCostEffectivenessRatioLegendPanelConstraints);statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.setOpaque(false);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.gridx = 1;statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.ipadx = 2;statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegend1JLabel, statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.gridx = 2;statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.insets = new Insets(7, 0, 0, 0);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.ipadx = 0;statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegend2JLabel, statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.gridx = 3;statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.insets = new Insets(0, 0, 0, 0);statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegend3JLabel, statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.gridx = 4;statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegend4JLabel, statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.gridx = 5;statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegend5JLabel, statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints);statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints.gridx = 6;statisticsCostsOfTreatmentOptionsAAndBLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegend6JLabel, statisticsCostsOfTreatmentOptionsAAndBLegendPanelConstraints);statisticsPanelContentCardedJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);statisticsPanelContentCardedJPanel.add(statisticsDataEntryAndOutputAndDistributionsJPanel, "statisticsDataEntryAndOutputAndDistributionsJPanel");statisticsPanelContentCardedJPanel.add(statisticsDataEntryJPanel, "statisticsDataEntryJPanel");internalQueryTermOkJButton.addActionListener(this);internalQueryTermOkJButton.setActionCommand("internalQueryTermOkJButton");internetBrowserButton1JLabel.setForeground(SystemWindow.mainButtonsFontColor);internetBrowserButton2JLabel.setForeground(SystemWindow.mainButtonsFontColor);decisionAnalysisButton1JLabel.setForeground(SystemWindow.mainButtonsFontColor);decisionAnalysisButton2JLabel.setForeground(SystemWindow.mainButtonsFontColor);treatmentAnalysisJButton.setLayout(new GridBagLayout());treatmentAnalysisJButton.add(decisionAnalysisButton1JLabel, decisionAnalysisButtonConstraints);decisionAnalysisButtonConstraints.gridy = 1;treatmentAnalysisJButton.add(decisionAnalysisButton2JLabel, decisionAnalysisButtonConstraints);treatmentAnalysisJButton.setPreferredSize(decisionSupportMainButtonsDimension);treatmentAnalysisJButton.setSize(decisionSupportMainButtonsDimension);treatmentAnalysisJButton.setMinimumSize(decisionSupportMainButtonsDimension);treatmentAnalysisJButton.addActionListener(this);treatmentAnalysisJButton.setActionCommand("decisionAnalysisJButton");treatmentAnalysisJButton.setMnemonic('A');internetBrowserJButton.setLayout(new GridBagLayout());internetBrowserJButton.add(internetBrowserButton1JLabel, internetBrowserButtonConstraints);internetBrowserButtonConstraints.gridy = 1;internetBrowserJButton.add(internetBrowserButton2JLabel, internetBrowserButtonConstraints);internetBrowserJButton.setPreferredSize(decisionSupportMainButtonsDimension);internetBrowserJButton.setSize(decisionSupportMainButtonsDimension);internetBrowserJButton.setMinimumSize(decisionSupportMainButtonsDimension);internetBrowserJButton.addActionListener(this);internetBrowserJButton.setActionCommand("internetBrowserJButton");internetBrowserJButton.setMnemonic('I');dataQueryJButton.setForeground(SystemWindow.mainButtonsFontColor);dataQueryJButton.setPreferredSize(decisionSupportMainButtonsDimension);dataQueryJButton.setSize(decisionSupportMainButtonsDimension);dataQueryJButton.setMinimumSize(decisionSupportMainButtonsDimension);dataQueryJButton.addActionListener(this);dataQueryJButton.setActionCommand("dataQueryJButton");dataQueryJButton.setMnemonic('Q');statisticsJButton.setForeground(SystemWindow.mainButtonsFontColor);statisticsJButton.setPreferredSize(decisionSupportMainButtonsDimension);statisticsJButton.setSize(decisionSupportMainButtonsDimension);statisticsJButton.addActionListener(this);statisticsJButton.setActionCommand("statisticsJButton");statisticsJButton.setMnemonic('S');statisticsJButton.setMinimumSize(decisionSupportMainButtonsDimension);rulesJButton.setForeground(SystemWindow.mainButtonsFontColor);rulesJButton.setPreferredSize(decisionSupportMainButtonsDimension);rulesJButton.setMinimumSize(decisionSupportMainButtonsDimension);rulesJButton.setSize(decisionSupportMainButtonsDimension);rulesJButton.addActionListener(this);rulesJButton.setActionCommand("rulesJButton");rulesJButton.setMnemonic('R');MolecularAssemblerButton1JLabel.setForeground(SystemWindow.mainButtonsFontColor);MolecularAssemblerButton2JLabel.setForeground(SystemWindow.mainButtonsFontColor);MolecularAssemblerJButton.setLayout(new GridBagLayout());MolecularAssemblerJButton.add(MolecularAssemblerButton1JLabel, MolecularAssemblerButtonConstraints);MolecularAssemblerButtonConstraints.gridy = 1;MolecularAssemblerJButton.add(MolecularAssemblerButton2JLabel, MolecularAssemblerButtonConstraints);MolecularAssemblerJButton.setPreferredSize(decisionSupportMainButtonsDimension);MolecularAssemblerJButton.setMinimumSize(decisionSupportMainButtonsDimension);MolecularAssemblerJButton.setSize(decisionSupportMainButtonsDimension);MolecularAssemblerJButton.addActionListener(this);MolecularAssemblerJButton.setActionCommand("MolecularAssemblerJButton");MolecularAssemblerJButton.setMnemonic('T');molecularPanelConstraints.weighty = 1;molecularPanelConstraints.weightx = 1;molecularPanelConstraints.fill = GridBagConstraints.BOTH;molecularPanelConstraints.insets = new Insets(0, 0, 0, 0);molecularPanelConstraints.insets = new Insets(3, 3, 3, 3);inputPanelConstraints.insets = new Insets(2, 2, 1, 2);inputPanelConstraints.anchor = GridBagConstraints.WEST;findQueryAssociatedMolecularNetworksJToggleButton.addActionListener(this);findQueryAssociatedMolecularNetworksJToggleButton.setActionCommand("findQueryAssociatedMolecularNetworksJToggleButton");findQueryAssociatedMolecularNetworksJToggleButton.setMnemonic('F');findQueryAssociatedMolecularNetworksJToggleButton.setHorizontalTextPosition(SwingConstants.CENTER);findQueryAssociatedMolecularNetworksJToggleButton.setVerticalTextPosition(SwingConstants.CENTER);findQueryAssociatedMolecularNetworksJToggleButton.setBackground(SystemWindow.buttonColor);findQueryAssociatedMolecularNetworksJToggleButton.setFont(new Font("arial", Font.BOLD, 15));findQueryAssociatedMolecularNetworksJToggleButton.setRolloverEnabled(false);findQueryAssociatedMolecularNetworksJToggleButton.setFocusPainted(false);includeMolecularAbbreviationsJToggleButton.setHorizontalTextPosition(SwingConstants.CENTER);includeMolecularAbbreviationsJToggleButton.setMnemonic('I');includeMolecularAbbreviationsJToggleButton.setVerticalTextPosition(SwingConstants.CENTER);includeMolecularAbbreviationsJToggleButton.setBackground(SystemWindow.buttonColor);includeMolecularAbbreviationsJToggleButton.setFont(new Font("arial", Font.BOLD, 15));includeMolecularAbbreviationsJToggleButton.setRolloverEnabled(false);includeMolecularAbbreviationsJToggleButton.setFocusPainted(false);includeMolecularAbbreviationsJToggleButton.setSelected(true);MolecularAssemblerQueryJTextArea.setColumns(20);MolecularAssemblerQueryJTextArea.setBorder(new CompoundBorder(new BevelBorder(BevelBorder.LOWERED), MolecularAssemblerQueryTextAreaTitledBorder));MolecularAssemblerInputPanelTopHorizontalLineJLabel.setBorder(new MatteBorder(2, 0, 0, 0, new Color(80, 80, 80)));MolecularAssemblerInputPanelBottomHorizontalLineJLabel.setBorder(new MatteBorder(2, 0, 0, 0, new Color(80, 80, 80)));inputJPanel.setBorder(new CompoundBorder(new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new LineBorder(Color.LIGHT_GRAY, 4)), new BevelBorder(BevelBorder.LOWERED)));inputPanelConstraints.insets = new Insets(9, 9, 0, 9);inputPanelConstraints.anchor = GridBagConstraints.CENTER;inputJPanel.add(MolecularAssemblerHeaderJLabel, inputPanelConstraints);inputPanelConstraints.gridy = 1;inputPanelConstraints.insets = new Insets(0, 9, 0, 9);inputPanelConstraints.weightx = 1;inputPanelConstraints.fill = GridBagConstraints.BOTH;inputJPanel.add(MolecularAssemblerInputPanelTopHorizontalLineJLabel, inputPanelConstraints);inputPanelConstraints.gridy = 2;inputPanelConstraints.insets = new Insets(9, 9, 0, 9);inputPanelConstraints.weighty = 1;inputJPanel.add(MolecularAssemblerQueryJTextArea, inputPanelConstraints);inputPanelConstraints.gridy = 3;inputPanelConstraints.weighty = 0;inputPanelConstraints.fill = GridBagConstraints.NONE;inputJPanel.add(findQueryAssociatedMolecularNetworksJToggleButton, inputPanelConstraints);inputPanelConstraints.gridy = 4;inputPanelConstraints.weightx = 1;inputPanelConstraints.fill = GridBagConstraints.HORIZONTAL;inputJPanel.add(MolecularAssemblerInputPanelBottomHorizontalLineJLabel, inputPanelConstraints);inputPanelConstraints.gridy = 5;inputPanelConstraints.weightx = 0;inputPanelConstraints.fill = GridBagConstraints.NONE;inputJPanel.add(MolecularAssemblerPossibleInterventionStrategiesButtonsPanelHeaderJLabel, inputPanelConstraints);inputPanelConstraints.gridy = 6;inputPanelConstraints.insets = new Insets(9, 9, 9, 9);inputJPanel.add(MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel, inputPanelConstraints);MolecularAssemblerOpenJButton.addActionListener(this);MolecularAssemblerOpenJButton.setActionCommand("MolecularAssemblerOpenJButton");MolecularAssemblerSaveJButton.addActionListener(this);MolecularAssemblerSaveJButton.setActionCommand("MolecularAssemblerSaveJButton");MolecularAssemblerDeleteJButton.addActionListener(this);MolecularAssemblerDeleteJButton.setActionCommand("MolecularAssemblerDeleteJButton");MolecularAssemblerZoomInJButton.addActionListener(this);MolecularAssemblerZoomInJButton.setActionCommand("MolecularAssemblerZoomInJButton");MolecularAssemblerZoomOutJButton.addActionListener(this);MolecularAssemblerZoomOutJButton.setActionCommand("MolecularAssemblerZoomOutJButton");MolecularAssemblerZoomResetJButton.addActionListener(this);MolecularAssemblerZoomResetJButton.setActionCommand("MolecularAssemblerZoomResetJButton");cycleClinicalTrialsShowAllJToggleButton.addActionListener(this);cycleClinicalTrialsShowAllJToggleButton.setActionCommand("cycleClinicalTrialsShowAllJToggleButton");cycleClinicalTrialsUpJButton.addActionListener(this);cycleClinicalTrialsUpJButton.setActionCommand("cycleClinicalTrialsUpJButton");cycleClinicalTrialsUpJButton.setMnemonic(KeyEvent.VK_RIGHT);cycleClinicalTrialsDownJButton.addActionListener(this);cycleClinicalTrialsDownJButton.setActionCommand("cycleClinicalTrialsDownJButton");cycleClinicalTrialsDownJButton.setMnemonic(KeyEvent.VK_LEFT);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelHeaderJLabel.setBackground(SystemWindow.buttonColor);MolecularAssemblerNetworkNumberJTextField.setForeground(Color.BLUE);MolecularAssemblerNetworkNumberJTextField.setHorizontalAlignment(SwingConstants.CENTER);MolecularAssemblerNetworkNumberJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));MolecularAssemblerNetworkNumberJTextField.addActionListener(this);MolecularAssemblerNetworkNumberJTextField.setActionCommand("MolecularAssemblerNetworkNumberJTextField");MolecularAssemblerNetworkNumberPromptJLabel.setEnabled(false);cycleClinicalTrialsShowAllJToggleButton.setEnabled(false);cycleClinicalTrialsUpJButton.setEnabled(false);cycleClinicalTrialsDownJButton.setEnabled(false);MolecularAssemblerNetworkNumberJTextField.setEnabled(false);MolecularAssemblerNetworkJPanel.setOpaque(false);MolecularAssemblerNetworkJPanel.add(MolecularAssemblerNetworkNumberPromptJLabel, MolecularAssemblerNetworkPanelConstraints);MolecularAssemblerNetworkPanelConstraints.gridx = 1;MolecularAssemblerNetworkPanelConstraints.weightx = 1;MolecularAssemblerNetworkPanelConstraints.fill = GridBagConstraints.BOTH;MolecularAssemblerNetworkPanelConstraints.anchor = GridBagConstraints.EAST;MolecularAssemblerNetworkJPanel.add(MolecularAssemblerNetworkNumberJTextField, MolecularAssemblerNetworkPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.setOpaque(false);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.weightx = 1;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(8, 8, 5, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerNetworkJPanel, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 1;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(5, 8, 5, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(cycleClinicalTrialsUpJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 2;MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(cycleClinicalTrialsDownJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 3;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(5, 8, 8, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(cycleClinicalTrialsShowAllJToggleButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 1;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridx = 1;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(8, 5, 5, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerZoomInJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 2;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(5, 5, 5, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerZoomOutJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 3;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(5, 5, 8, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerZoomResetJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 1;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridx = 2;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(5, 5, 5, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerSaveJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 2;MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerOpenJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.gridy = 3;MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints.insets = new Insets(5, 5, 8, 5);MolecularAssemblerPossibleInterventionStrategiesButtonsJPanel.add(MolecularAssemblerDeleteJButton, MolecularAssemblerPossibleInterventionStrategiesButtonsPanelConstraints);biomoietyNetworksPanelBaseJPanel.setBackground(Color.BLACK);biomoietyNetworksPanelBasePanelConstraints.insets = new Insets(4, 10, 2, 2);biomoietyNetworksPanelBaseJPanel.add(molecularNetworksPanel, biomoietyNetworksPanelBasePanelConstraints);biomoietyNetworksJScrollPane.getVerticalScrollBar().setUnitIncrement(25);biomoietyNetworksJScrollPane.setHorizontalScrollBar(clinicalTrialsPanelHorizontalJScrollbar);biomoietyNetworksJScrollPane.setVerticalScrollBar(clinicalTrialsPanelVerticalJScrollbar);biomoietyNetworksJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);biomoietyNetworksJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);biomoietyNetworksJScrollPane.setBackground(Color.LIGHT_GRAY);biomoietyNetworksJScrollPane.setBorder(new CompoundBorder(new MatteBorder(1, 0, 0, 0, Color.WHITE), new MatteBorder(4, 0, 0, 0, Color.LIGHT_GRAY)));biomoietyNetworksJScrollPane.setPreferredSize(MolecularAssemblerResultsJSplitPane.getTopComponent().getSize());biomoietyNetworksJScrollPane.setSize(MolecularAssemblerResultsJSplitPane.getTopComponent().getSize());MolecularAssemblerResultsMainBiomoietyNetworksJPanel.setBackground(Color.LIGHT_GRAY);MolecularAssemblerResultsMainBiomoietyNetworksJPanel.setBorder(new CompoundBorder(new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new LineBorder(Color.LIGHT_GRAY, 4)), new BevelBorder(BevelBorder.LOWERED)));MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.fill = GridBagConstraints.HORIZONTAL;biomoietyNetworksPanelViewRadarPanel.setBorder(new LineBorder(Color.LIGHT_GRAY, 1, true));biomoietyNetworksPanelViewRadarPanel.setBounds(0, 0, 0, 0);biomoietyNetworksPanelViewRadarPanel.setOpaque(false);biomoietyNetworksPanelViewRadarPanel.setVisible(false);biomoietyNetworksRadarPanel = new BiomoietyNetworksRadarPanel();biomoietyNetworksRadarPanel.add(biomoietyNetworksPanelViewRadarPanel);MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.fill = GridBagConstraints.BOTH;MolecularAssemblerResultsMainBiomoietyNetworksJPanel.add(biomoietyNetworksRadarPanel, MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints);MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.gridy = 1;MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.weighty = 1;MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.weightx = 1;MolecularAssemblerResultsMainBiomoietyNetworksJPanel.add(biomoietyNetworksJScrollPane, MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints);MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.gridy = 0;MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.weighty = 0;MolecularAssemblerResultsMainBiomoietyNetworksPanelConstraints.weightx = 0;clinicalTrialsPanelHorizontalJScrollbar.addMouseListener(this);clinicalTrialsPanelHorizontalJScrollbar.setName("clinicalTrialsPanelHorizontalJScrollbar");clinicalTrialsPanelVerticalJScrollbar.addMouseListener(this);clinicalTrialsPanelVerticalJScrollbar.setName("clinicalTrialsPanelVerticalJScrollbar");MolecularAssemblerResultsJSplitPane.setUI(new BasicSplitPaneUI() {public BasicSplitPaneDivider createDefaultDivider() {return new BasicSplitPaneDivider(this) {public void setBorder(Border b) {}};}});MolecularAssemblerResultsJSplitPane.getComponent(2).addMouseListener(this);MolecularAssemblerResultsJSplitPane.getComponent(2).setName("MolecularAssemblerResultsJSplitPane.getComponent(2)");MolecularAssemblerResultsJSplitPane.setBorder(null);MolecularAssemblerResultsJSplitPane.setOpaque(false);MolecularAssemblerResultsJSplitPane.setDividerLocation(400);MolecularAssemblerResultsJSplitPane.setDividerSize(translucentPanelDividerSize);MolecularAssemblerJPanel.setOpaque(false);MolecularAssemblerJPanel.setBackground(SystemWindow.outerPanelColor);molecularNetworkChooserJScrollPane.getVerticalScrollBar().setUnitIncrement(25);fileChooserOnMolecularAssemblerPanel.add(MolecularAssemblerResultsJSplitPane, "MolecularAssemblerResultsSplitPane");fileChooserOnMolecularAssemblerPanel.add(molecularNetworkChooserJScrollPane, "molecularNetworkChooserJScrollPane");MolecularAssemblerPanelConstraints.insets = new Insets(0, 0, 0, translucentPanelDividerSize);MolecularAssemblerPanelConstraints.fill = GridBagConstraints.BOTH;MolecularAssemblerPanelConstraints.gridy = 0;MolecularAssemblerJPanel.add(inputJPanel, MolecularAssemblerPanelConstraints);MolecularAssemblerPanelConstraints.gridx = 1;MolecularAssemblerPanelConstraints.weighty = 1;MolecularAssemblerPanelConstraints.weightx = 1;MolecularAssemblerPanelConstraints.fill = GridBagConstraints.BOTH;MolecularAssemblerPanelConstraints.insets = new Insets(0, 0, 0, 0);MolecularAssemblerJPanel.add(fileChooserOnMolecularAssemblerPanel, MolecularAssemblerPanelConstraints);abstractReferencePanelJScrollPane.getVerticalScrollBar().setUnitIncrement(25);abstractReferencePanelJScrollPane.setBorder(new CompoundBorder(new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new LineBorder(Color.LIGHT_GRAY, 4)), new BevelBorder(BevelBorder.LOWERED)));abstractReferencePanelJScrollPane.setPreferredSize(abstractReferencePanelScrollPaneDimension);abstractReferencePanelJScrollPane.setSize(abstractReferencePanelScrollPaneDimension);abstractReferencePanelJScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);abstractReferencePanelJScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);abstractReferenceJPanel.setBackground(abstractReferencePanelColor);abstractReferenceJPanel.setOpaque(true);mainButtonsPaneBottomLineJPanel.setBorder(new MatteBorder(4, 0, 0, 0, new Color(128, 128, 128, 128)));mainButtonsPaneBottomLineJPanel.setBackground(SystemWindow.quintessentialThemeColor);mainButtonsPanelBottomLineAndPusherJPanel.setBorder(new MatteBorder(4, 0, 0, 0, new Color(128, 128, 128, 128)));mainButtonsPanelBottomLineAndPusherJPanel.setBackground(SystemWindow.quintessentialThemeColor);mainButtonsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;mainButtonsPanelConstraints.weightx = 1;mainButtonsPanelConstraints.insets = new Insets(8, 8, 8, 8);mainButtonsJPanel.add(internetBrowserJButton, mainButtonsPanelConstraints);mainButtonsPanelConstraints.gridy = 1;mainButtonsJPanel.add(dataQueryJButton, mainButtonsPanelConstraints);mainButtonsPanelConstraints.gridy = 2;mainButtonsJPanel.add(statisticsJButton, mainButtonsPanelConstraints);mainButtonsPanelConstraints.gridy = 3;mainButtonsJPanel.add(treatmentAnalysisJButton, mainButtonsPanelConstraints);mainButtonsPanelConstraints.gridy = 4;mainButtonsJPanel.add(rulesJButton, mainButtonsPanelConstraints);mainButtonsPanelConstraints.gridy = 5;mainButtonsJPanel.add(MolecularAssemblerJButton, mainButtonsPanelConstraints);mainButtonsPanelConstraints.gridy = 6;mainButtonsPanelConstraints.fill = GridBagConstraints.BOTH;mainButtonsPanelConstraints.insets = new Insets(6, 8, 6, 8);mainButtonsJPanel.add(mainButtonsPaneBottomLineJPanel, mainButtonsPanelConstraints);mainButtonsPanelConstraints.weighty = 1;mainButtonsPanelConstraints.gridy = 7;mainButtonsPanelConstraints.insets = new Insets(0, 16, 0, 16);mainButtonsJPanel.add(mainButtonsPanelBottomLineAndPusherJPanel, mainButtonsPanelConstraints);mainButtonsJPanel.setBackground(SystemWindow.quintessentialThemeColor);decisionSupportMainJPanel.setOpaque(false);dSCoverJPanel.setBackground(SystemWindow.quintessentialThemeColor);internetBrowserJPanel.setBackground(SystemWindow.quintessentialThemeColor);statisticsPanelBaseJPanel.setBackground(SystemWindow.quintessentialThemeColor);dataQueryJPanel.setBackground(SystemWindow.quintessentialThemeColor);decisionAnalysisJPanel.setBackground(SystemWindow.quintessentialThemeColor);inputJPanel.setBackground(new Color(165, 160, 172));rulesJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);rulesPanelConstraints.gridwidth = 2;rulesJPanel.add(rulesHeaderJButton, rulesPanelConstraints);rulesPanelConstraints.gridy = 1;rulesJPanel.add(rulesHeaderJOptionPane, rulesPanelConstraints);rulesPanelConstraints.gridy = 2;rulesPanelConstraints.gridx = 1;rulesPanelConstraints.gridwidth = 1;rulesPanelConstraints.weightx = 1;rulesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;rulesJPanel.add(rulesMedicalCodeJTextField, rulesPanelConstraints);rulesPanelConstraints.gridx = 0;rulesPanelConstraints.gridy = 5;rulesPanelConstraints.weightx = 0;rulesPanelConstraints.fill = GridBagConstraints.NONE;rulesJPanel.add(rulesMedicalCodeValueJLabel, rulesPanelConstraints);rulesPanelConstraints.gridx = 1;rulesPanelConstraints.weightx = 1;rulesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;rulesJPanel.add(rulesMedicalCodeValueJTextField, rulesPanelConstraints);rulesPanelConstraints.gridy = 6;rulesPanelConstraints.gridx = 0;rulesPanelConstraints.weightx = 0;rulesPanelConstraints.fill = GridBagConstraints.NONE;rulesJPanel.add(rulesAlertJLabel, rulesPanelConstraints);rulesPanelConstraints.gridx = 1;rulesPanelConstraints.weightx = 1;rulesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;rulesJPanel.add(rulesAlertJTextField, rulesPanelConstraints);rulesPanelConstraints.gridy = 7;rulesPanelConstraints.gridx = 0;rulesPanelConstraints.weightx = 0;rulesPanelConstraints.fill = GridBagConstraints.NONE;rulesJPanel.add(rulesToWhatProcedureOrNarrativeJLabel, rulesPanelConstraints);rulesPanelConstraints.gridx = 1;rulesPanelConstraints.weightx = 1;rulesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;rulesJPanel.add(rulesToWhatProcedureOrNarrativeJTextField, rulesPanelConstraints);rulesPanelConstraints.gridy = 8;rulesPanelConstraints.gridx = 0;rulesJPanel.add(rulesMedicalCodeTestCodeJLabel, rulesPanelConstraints);rulesPanelConstraints.gridy = 9;rulesPanelConstraints.gridx = 0;rulesPanelConstraints.weightx = 1;rulesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;rulesJPanel.add(rulesMedicalCodeTestCodeJLabel, rulesPanelConstraints);costAnalysisJToggleButton.addActionListener(this);costAnalysisJToggleButton.setActionCommand("costAnalysisJToggleButton");treatmentEffectJToggleButton.addActionListener(this);treatmentEffectJToggleButton.setActionCommand("treatmentEffectJToggleButton");decisionModelsJToggleButton.addActionListener(this);decisionModelsJToggleButton.setActionCommand("decisionModelsJToggleButton");lifeExpectancyPerYearJButton.addActionListener(this);lifeExpectancyPerYearJButton.setActionCommand("lifeExpectancyPerYearJButton");includeAverageIncreasePerYearJToggleButton.setBackground(SystemWindow.buttonColor);includeAverageIncreasePerYearJToggleButton.addActionListener(this);includeAverageIncreasePerYearJToggleButton.setActionCommand("includeAverageIncreasePerYearJToggleButton");lifeExpectancyAtBirthOverLastFortyYearsJButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsJButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsJButton");optimizedLifeExpectancyJToggleButton.addActionListener(this);optimizedLifeExpectancyJToggleButton.setActionCommand("optimizedLifeExpectancyJToggleButton");actuarialLifeExpectancyJToggleButton.addActionListener(this);actuarialLifeExpectancyJToggleButton.setActionCommand("actuarialLifeExpectancyJToggleButton");lifeExpectancyJToggleButton.addActionListener(this);lifeExpectancyJToggleButton.setActionCommand("lifeExpectancyJToggleButton");decisionAnalysisBaseButtonsPanelPusher1JPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.DARK_GRAY));decisionAnalysisBaseButtonsPanelPusher1JPanel.setOpaque(false);decisionAnalysisBaseButtonsPanelPusher2JPanel.setOpaque(false);decisionAnalysisTopButtonsJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.DARK_GRAY));decisionAnalysisTopButtonsJPanel.setBackground(SystemWindow.quintessentialThemeColor);decisionAnalysisTopButtonsPanelConstraints.gridx = 0;decisionAnalysisTopButtonsPanelConstraints.insets = new Insets(6, 12, 6, 0);decisionAnalysisTopButtonsJPanel.add(costAnalysisJToggleButton, decisionAnalysisTopButtonsPanelConstraints);decisionAnalysisTopButtonsPanelConstraints.gridx = 1;decisionAnalysisTopButtonsJPanel.add(treatmentEffectJToggleButton, decisionAnalysisTopButtonsPanelConstraints);decisionAnalysisTopButtonsPanelConstraints.gridx = 2;decisionAnalysisTopButtonsJPanel.add(decisionModelsJToggleButton, decisionAnalysisTopButtonsPanelConstraints);decisionAnalysisTopButtonsPanelConstraints.gridx = 3;decisionAnalysisTopButtonsJPanel.add(lifeExpectancyJToggleButton, decisionAnalysisTopButtonsPanelConstraints);decisionAnalysisBaseButtonsJPanel.setBackground(SystemWindow.quintessentialThemeColor);decisionAnalysisBaseButtonsPanelConstraints.gridx = 0;decisionAnalysisBaseButtonsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;decisionAnalysisBaseButtonsPanelConstraints.anchor = GridBagConstraints.WEST;decisionAnalysisBaseButtonsJPanel.add(decisionAnalysisTopButtonsJPanel, decisionAnalysisBaseButtonsPanelConstraints);decisionAnalysisBaseButtonsPanelConstraints.gridy = 1;decisionAnalysisBaseButtonsJPanel.add(menuJPanel, decisionAnalysisBaseButtonsPanelConstraints);decisionAnalysisBaseButtonsPanelConstraints.gridy = 0;decisionAnalysisBaseButtonsPanelConstraints.gridx = 1;decisionAnalysisBaseButtonsPanelConstraints.weightx = 1;decisionAnalysisBaseButtonsPanelConstraints.fill = GridBagConstraints.BOTH;decisionAnalysisBaseButtonsJPanel.add(decisionAnalysisBaseButtonsPanelPusher1JPanel, decisionAnalysisBaseButtonsPanelConstraints);decisionAnalysisBaseButtonsPanelConstraints.gridy = 1;decisionAnalysisBaseButtonsJPanel.add(decisionAnalysisBaseButtonsPanelPusher2JPanel, decisionAnalysisBaseButtonsPanelConstraints);costAnalysisOkJButton.setActionCommand("costAnalysisOkJButton");costAnalysisOkJButton.addActionListener(this);iCERValuesBaseJPanel.setBorder(new LineBorder(Color.GRAY, 1));firstPageCostAnalysisICERValuesJPanel.setOpaque(false);iCERValuesBaseJPanel.setBackground(Color.WHITE);iCERValuesPanelPusherJPanel.setOpaque(false);iCERValuesBasePanelConstraints.gridy = 0;iCERValuesBasePanelConstraints.weightx = 1;iCERValuesBasePanelConstraints.fill = GridBagConstraints.BOTH;iCERValuesBaseJPanel.add(newICERHeaderPanel(), iCERValuesBasePanelConstraints);iCERValuesBasePanelConstraints.gridy = 1;iCERValuesBaseJPanel.add(firstPageCostAnalysisICERValuesJPanel, iCERValuesBasePanelConstraints);iCERValuesBasePanelConstraints.gridy = 2;iCERValuesBasePanelConstraints.weighty = 1;iCERValuesBaseJPanel.add(iCERValuesPanelPusherJPanel, iCERValuesBasePanelConstraints);decisionAnalysisICERLegendPanelConstraints.gridy = 0;decisionAnalysisICERLegendJPanel.setOpaque(false);decisionAnalysisICERLegendJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatioJPanel, decisionAnalysisICERLegendPanelConstraints);decisionAnalysisICERLegendPanelConstraints.gridy = 1;decisionAnalysisICERLegendJPanel.add(statisticsCostsOfTreatmentOptionsAAndBLegendJPanel, decisionAnalysisICERLegendPanelConstraints);decisionAnalysisICERLegendPanelConstraints.gridy = 2;decisionAnalysisICERLegendJPanel.add(decisionAnalysisIncrementalCostEffectivenessRatioLegendJPanel, decisionAnalysisICERLegendPanelConstraints);costAnalysisICERValuesJPanel.setOpaque(false);costAnalysisICERValuesPanelConstraints.gridy = 0;costAnalysisICERValuesPanelConstraints.gridx = 0;costAnalysisICERValuesPanelConstraints.weightx = 1;costAnalysisICERValuesPanelConstraints.fill = GridBagConstraints.BOTH;costAnalysisICERValuesJPanel.add(decisionAnalysisICERLegendJPanel, costAnalysisICERValuesPanelConstraints);costAnalysisICERValuesPanelConstraints.gridy = 1;costAnalysisICERValuesPanelConstraints.weighty = 1;costAnalysisICERValuesJPanel.add(iCERValuesBaseJPanel, costAnalysisICERValuesPanelConstraints);newTreatmentAnalysisJButton.addActionListener(this);newTreatmentAnalysisJButton.setActionCommand("newJButton");openTreatmentAnalysisJButton.addActionListener(this);openTreatmentAnalysisJButton.setActionCommand("openJButton");closeTreatmentAnalysisJButton.addActionListener(this);closeTreatmentAnalysisJButton.setActionCommand("closeJButton");saveTreatmentAnalysisJButton.addActionListener(this);saveTreatmentAnalysisJButton.setActionCommand("saveJButton");saveAsTreatmentAnalysisJButton.addActionListener(this);saveAsTreatmentAnalysisJButton.setActionCommand("saveAsJButton");sendTreatmentAnalysisJButton.addActionListener(this);sendTreatmentAnalysisJButton.setActionCommand("sendJButton");deleteTreatmentAnalysisJButton.addActionListener(this);deleteTreatmentAnalysisJButton.setActionCommand("deleteJButton");addNoteTreatmentAnalysisJButton.addActionListener(this);addNoteTreatmentAnalysisJButton.setActionCommand("noteJButton");printTreatmentAnalysisJButton.addActionListener(this);printTreatmentAnalysisJButton.setActionCommand("printJButton");menuPanelConstraints.weightx = 1;menuPanelConstraints.fill = GridBagConstraints.BOTH;menuJPanel.setBackground(Color.LIGHT_GRAY);menuJPanel.setBorder(new LineBorder(Color.GRAY, 1));menuPanelConstraints.gridx = 0;menuPanelConstraints.insets = new Insets(6, 12, 6, 0);menuJPanel.add(newTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 1;menuPanelConstraints.weightx = 1;menuJPanel.add(openTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 2;menuJPanel.add(closeTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 3;menuJPanel.add(saveTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 4;menuJPanel.add(saveAsTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 5;menuJPanel.add(sendTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 6;menuJPanel.add(addNoteTreatmentAnalysisJButton, menuPanelConstraints);menuPanelConstraints.gridx = 7;menuPanelConstraints.weightx = 0;menuJPanel.add(printTreatmentAnalysisJButton, menuPanelConstraints);costAnalysisBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);costAnalysisButtonsSpacerJPanel.setOpaque(false);costAnalysisButtonsJPanel.setOpaque(false);costAnalysisButtonsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;costAnalysisButtonsPanelConstraints.weightx = 1;costAnalysisButtonsPanelConstraints.insets = new Insets(6, 6, 0, 6);costAnalysisButtonsJPanel.add(costAnalysisSaveTreatmentCostPointHeaderJLabel, costAnalysisButtonsPanelConstraints);costAnalysisButtonsPanelConstraints.gridy = 1;costAnalysisButtonsPanelConstraints.insets = new Insets(0, 6, 3, 6);costAnalysisButtonsJPanel.add(costAnalysisSaveTreatmentCostPointJPanel, costAnalysisButtonsPanelConstraints);costAnalysisButtonsPanelConstraints.gridy = 2;costAnalysisButtonsPanelConstraints.insets = new Insets(3, 6, 6, 6);costAnalysisButtonsJPanel.add(qualityAdjustedSaveTreatmentCostPointJPanel, costAnalysisButtonsPanelConstraints);costAnalysisButtonsBaseJPanel.setBackground(SystemWindow.quintessentialThemeColor);costAnalysisButtonsBasePanelConstraints.gridx = 0;costAnalysisButtonsBasePanelConstraints.insets = new Insets(0, 6, 0, 0);costAnalysisButtonsBaseJPanel.add(costAnalysisButtonsJPanel, costAnalysisButtonsBasePanelConstraints);costAnalysisButtonsBasePanelConstraints.gridx = 1;costAnalysisButtonsBasePanelConstraints.weightx = 1;costAnalysisButtonsBasePanelConstraints.insets = new Insets(0, 0, 0, 0);costAnalysisButtonsBaseJPanel.add(costAnalysisButtonsSpacerJPanel, costAnalysisButtonsBasePanelConstraints);treatmentEffectAnalysisPaperJPanel.setBackground(Color.WHITE);treatmentEffectAnalysisPaperJPanel.setBorder(SystemWindow.paperBorder);treatmentEffectAnalysisPaperPanelConstraints.insets = new Insets(paperMargin, paperMargin, paperMargin, paperMargin);treatmentEffectAnalysisPaperJPanel.add(treatmentEffectAnalysisPaperContentsJPanel, treatmentEffectAnalysisPaperPanelConstraints);treatmentEffectAnalysisBasePusherJPanel.setOpaque(false);treatmentEffectAnalysisBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);treatmentEffectAnalysisBasePanelConstraints.gridy = 0;treatmentEffectAnalysisBasePanelConstraints.gridx = 0;treatmentEffectAnalysisBasePanelConstraints.insets = new Insets(12, 6, 6, 6);treatmentEffectAnalysisBasePanelConstraints.fill = GridBagConstraints.NONE;treatmentEffectAnalysisBaseJPanel.add(treatmentEffectAnalysisPaperJPanel, treatmentEffectAnalysisBasePanelConstraints);treatmentEffectAnalysisBasePanelConstraints.insets = new Insets(0, 0, 0, 0);treatmentEffectAnalysisBasePanelConstraints.gridy = 1000;treatmentEffectAnalysisBasePanelConstraints.weighty = 1;treatmentEffectAnalysisBaseJPanel.add(treatmentEffectAnalysisBasePusherJPanel, treatmentEffectAnalysisBasePanelConstraints);treatmentEffectAnalysisBasePanelConstraints.insets = new Insets(6, 6, 6, 6);treatmentEffectAnalysisBasePanelConstraints.weighty = 0;treatmentEffectAnalysisBasePanelConstraints.gridy = 1;costAnalysisBasePusherJPanel.setOpaque(false);costAnalysisBasePanelConstraints.gridy = 0;costAnalysisBasePanelConstraints.gridx = 0;costAnalysisBasePanelConstraints.insets = new Insets(12, 6, 6, 6);costAnalysisBasePanelConstraints.fill = GridBagConstraints.NONE;costAnalysisBaseJPanel.add(costAnalysisPaperJPanel, costAnalysisBasePanelConstraints);costAnalysisBasePanelConstraints.insets = new Insets(0, 0, 0, 0);costAnalysisBasePanelConstraints.gridy = 1000;costAnalysisBasePanelConstraints.weighty = 1;costAnalysisBaseJPanel.add(costAnalysisBasePusherJPanel, costAnalysisBasePanelConstraints);costAnalysisBasePanelConstraints.insets = new Insets(6, 6, 6, 6);costAnalysisBasePanelConstraints.weighty = 0;costAnalysisBasePanelConstraints.gridy = 1;costAnalysisNameJLabel.setFont(treatmentAnalysisDataFont);costAnalysisDateCreatedJLabel.setFont(treatmentAnalysisDataFont);costAnalysisGraphHeaderDateGraphLastModifiedJLabel.setFont(treatmentAnalysisDataFont);costAnalysisGraphHeaderUserIDJLabel.setFont(treatmentAnalysisDataFont);costAnalysisNameHeaderJLabel.setFont(treatmentAnalysisDataFont);costAnalysisNameJPanel.setOpaque(false);costAnalysisNameJPanel.add(costAnalysisNameJLabel, costAnalysisNamePanelConstraints);costAnalysisNamePanelConstraints.gridx = 1;costAnalysisNamePanelConstraints.weightx = 1;costAnalysisNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;costAnalysisNameJPanel.add(costAnalysisNameHeaderJLabel, costAnalysisNamePanelConstraints);costAnalysisGraphHeaderJPanel.setOpaque(false);costAnalysisGraphHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));costAnalysisGraphHeaderPanelConstraints.gridx = 0;costAnalysisGraphHeaderPanelConstraints.gridy = 0;costAnalysisGraphHeaderPanelConstraints.fill = GridBagConstraints.BOTH;costAnalysisGraphHeaderPanelConstraints.weightx = 1;costAnalysisGraphHeaderJPanel.add(costAnalysisNameJPanel, costAnalysisGraphHeaderPanelConstraints);costAnalysisGraphHeaderPanelConstraints.gridy = 1;costAnalysisGraphHeaderPanelConstraints.gridx = 0;costAnalysisGraphHeaderPanelConstraints.gridwidth = 2;costAnalysisGraphHeaderJPanel.add(costAnalysisDateCreatedJLabel, costAnalysisGraphHeaderPanelConstraints);costAnalysisGraphHeaderPanelConstraints.gridy = 2;costAnalysisGraphHeaderJPanel.add(costAnalysisGraphHeaderDateGraphLastModifiedJLabel, costAnalysisGraphHeaderPanelConstraints);costAnalysisGraphHeaderPanelConstraints.gridy = 3;costAnalysisGraphHeaderJPanel.add(costAnalysisGraphHeaderUserIDJLabel, costAnalysisGraphHeaderPanelConstraints);costAnalysisPaperJPanel.setPreferredSize(landscapePaperSizeDimension);costAnalysisPaperJPanel.setBackground(Color.WHITE);costAnalysisPaperJPanel.setBorder(SystemWindow.paperBorder);costAnalysisPaperPanelConstraints.fill = GridBagConstraints.BOTH;costAnalysisPaperPanelConstraints.weightx = 1;costAnalysisPaperPanelConstraints.gridy = 0;costAnalysisPaperPanelConstraints.gridx = 0;costAnalysisPaperPanelConstraints.insets = new Insets(paperMargin, paperMargin, 6, 6);costAnalysisPaperPanelConstraints.gridwidth = 2;costAnalysisPaperJPanel.add(costAnalysisGraphHeaderJPanel, costAnalysisPaperPanelConstraints);costAnalysisPaperPanelConstraints.weightx = 0;costAnalysisPaperPanelConstraints.gridy = 1;costAnalysisPaperPanelConstraints.gridx = 0;costAnalysisPaperPanelConstraints.gridwidth = 1;costAnalysisPaperPanelConstraints.insets = new Insets(6, paperMargin, paperMargin, 6);costAnalysisPaperPanelConstraints.fill = GridBagConstraints.VERTICAL;costAnalysisPaperJPanel.add(costPointsDisplayBaseJPanel, costAnalysisPaperPanelConstraints);costAnalysisPaperPanelConstraints.gridx = 1;costAnalysisPaperPanelConstraints.insets = new Insets(paperMargin, 6, paperMargin, 6);costAnalysisPaperJPanel.add(costAnalysisICERValuesJPanel, costAnalysisPaperPanelConstraints);costAnalysisPaperPanelConstraints.gridy = 0;costAnalysisPaperPanelConstraints.gridx = 2;costAnalysisPaperPanelConstraints.weightx = 1;costAnalysisPaperPanelConstraints.gridheight = 2;costAnalysisPaperPanelConstraints.insets = new Insets(paperMargin, 6, paperMargin, paperMargin);costAnalysisPaperJPanel.add(costAnalysisGraphPanel, costAnalysisPaperPanelConstraints);costAnalysisPaperPanelConstraints.gridy = 2;costAnalysisPaperPanelConstraints.gridx = 0;costAnalysisPaperPanelConstraints.weightx = 0;costAnalysisPaperPanelConstraints.gridwidth = 3;costAnalysisPaperPanelConstraints.insets = new Insets(0, 0, 0, 0);costAnalysisPaperJPanel.add(costAnalysisPaperFirstPageNumberJLabel, costAnalysisPaperPanelConstraints);costAnalysisPaperPanelConstraints.gridy = 0;costAnalysisPaperPanelConstraints.gridx = 2;costAnalysisPaperPanelConstraints.weightx = 1;costAnalysisPaperPanelConstraints.gridheight = 2;costAnalysisPaperPanelConstraints.insets = new Insets(paperMargin, 6, paperMargin, paperMargin);costAnalysisPaperPanelConstraints.gridwidth = 1;qualityAdjustedLifeYearsToggleButtonConstraints.gridx = 0;qualityAdjustedLifeYearsToggleButtonConstraints.gridy = 0;qualityAdjustedLifeYearsYesJToggleButton.setLayout(new GridBagLayout());qualityAdjustedLifeYearsYesJToggleButton.add(qualityAdjustedLifeYearsYesToggleButtonJLabel, qualityAdjustedLifeYearsToggleButtonConstraints);qualityAdjustedLifeYearsYesJToggleButton.setActionCommand("qualityAdjustedLifeYearsYesJToggleButton");qualityAdjustedLifeYearsYesJToggleButton.addActionListener(this);qualityAdjustedLifeYearsYesJToggleButton.setBackground(SystemWindow.buttonColor);qualityAdjustedLifeYearsNoYesToggleButtonJLabel.setForeground(new Color(0, 0, 0, 0));qualityAdjustedLifeYearsNoJToggleButton.setLayout(new GridBagLayout());qualityAdjustedLifeYearsNoJToggleButton.add(qualityAdjustedLifeYearsNoYesToggleButtonJLabel, qualityAdjustedLifeYearsToggleButtonConstraints);qualityAdjustedLifeYearsNoJToggleButton.add(qualityAdjustedLifeYearsNoToggleButtonJLabel, qualityAdjustedLifeYearsToggleButtonConstraints);qualityAdjustedLifeYearsNoJToggleButton.setActionCommand("qualityAdjustedLifeYearsNoJToggleButton");qualityAdjustedLifeYearsNoJToggleButton.addActionListener(this);qualityAdjustedLifeYearsNoJToggleButton.setBackground(SystemWindow.buttonColor);qualityAdjustedLifeYearsAutoRankJToggleButton.setActionCommand("qualityAdjustedLifeYearsAutoRankJToggleButton");qualityAdjustedLifeYearsAutoRankJToggleButton.addActionListener(this);qualityAdjustedLifeYearsAutoRankJToggleButton.setBackground(SystemWindow.buttonColor);saveAsTreatmentAnalysisOkJButton.setActionCommand("saveAsTreatmentAnalysisOkJButton");saveAsTreatmentAnalysisOkJButton.addActionListener(this);costAnalysisScrollPaneBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);costAnalysisBaseJScrollPane.getVerticalScrollBar().setUnitIncrement(25);costAnalysisScrollPanePanelConstraints.weightx = 1;costAnalysisScrollPanePanelConstraints.fill = GridBagConstraints.BOTH;costAnalysisScrollPaneJPanel.add(costAnalysisButtonsBaseJPanel, costAnalysisScrollPanePanelConstraints);costAnalysisScrollPanePanelConstraints.gridy = 1;costAnalysisScrollPanePanelConstraints.weighty = 1;costAnalysisScrollPaneJPanel.add(costAnalysisBaseJScrollPane, costAnalysisScrollPanePanelConstraints);costAnalysisScrollPaneBasePanelConstraints.weighty = 1;costAnalysisScrollPaneBasePanelConstraints.weightx = 1;costAnalysisScrollPaneBasePanelConstraints.fill = GridBagConstraints.BOTH;costAnalysisScrollPaneBaseJPanel.add(costAnalysisScrollPaneJPanel, costAnalysisScrollPaneBasePanelConstraints);treatmentEffectAnalysisButtonsJPanel.setOpaque(false);treatmentEffectCurveButtonsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectCurveButtonsPanelConstraints.weightx = 1;treatmentEffectCurveButtonsPanelConstraints.insets = new Insets(6, 0, 0, 4);treatmentEffectCurveButtonsPanelConstraints.weightx = 1;treatmentEffectCurveButtonsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisButtonsJPanel.add(treatmentEffectAnalysisTreatmentPointEntryJPanel, treatmentEffectCurveButtonsPanelConstraints);treatmentEffectCurveButtonsPanelConstraints.gridx = 1;treatmentEffectCurveButtonsPanelConstraints.insets = new Insets(6, 4, 0, 0);treatmentEffectAnalysisButtonsJPanel.add(treatmentEffectAnalysisControlPointEntryJPanel, treatmentEffectCurveButtonsPanelConstraints);treatmentEffectAnalysisScrollPaneBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);treatmentEffectCurveScrollPaneBasePanelConstraints.weighty = 1;treatmentEffectCurveScrollPaneBasePanelConstraints.weightx = 1;treatmentEffectCurveScrollPaneBasePanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisScrollPaneBaseJPanel.add(treatmentEffectAnalysisScrollPaneJPanel, treatmentEffectCurveScrollPaneBasePanelConstraints);treatmentEffectCurveBaseJScrollPane.getVerticalScrollBar().setUnitIncrement(25);treatmentEffectAnalysisScrollPaneJPanel.setBackground(SystemWindow.quintessentialThemeColor);treatmentEffectCurveScrollPanePanelConstraints.weightx = 1;treatmentEffectCurveScrollPanePanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectCurveScrollPanePanelConstraints.anchor = GridBagConstraints.WEST;treatmentEffectAnalysisScrollPaneJPanel.add(treatmentEffectAnalysisButtonsJPanel, treatmentEffectCurveScrollPanePanelConstraints);treatmentEffectCurveScrollPanePanelConstraints.gridy = 1;treatmentEffectCurveScrollPanePanelConstraints.weighty = 1;treatmentEffectCurveScrollPanePanelConstraints.anchor = GridBagConstraints.CENTER;treatmentEffectAnalysisScrollPaneJPanel.add(treatmentEffectCurveBaseJScrollPane, treatmentEffectCurveScrollPanePanelConstraints);treatmentEffectAnalysisPaperPanelHeaderJPanel.setOpaque(false);treatmentEffectAnalysisPaperPanelHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));treatmentEffectAnalysisPaperPanelHeaderPanelConstraints.weightx = 1;treatmentEffectAnalysisPaperPanelHeaderPanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisPaperPanelHeaderJPanel.add(treatmentEffectAnalysisHeaderPanelNameJLabel, treatmentEffectAnalysisPaperPanelHeaderPanelConstraints);treatmentEffectAnalysisPaperPanelHeaderPanelConstraints.gridy = 1;treatmentEffectAnalysisPaperPanelHeaderJPanel.add(treatmentEffectAnalysisHeaderPanelDateCreatedJLabel, treatmentEffectAnalysisPaperPanelHeaderPanelConstraints);treatmentEffectAnalysisPaperPanelHeaderPanelConstraints.gridy = 2;treatmentEffectAnalysisPaperPanelHeaderJPanel.add(treatmentEffectAnalysisHeaderPanelUserIDJLabel, treatmentEffectAnalysisPaperPanelHeaderPanelConstraints);treatmentEffectAnalysisPaperContentsJPanel.setPreferredSize(new Dimension(EffectCurveGraphPanel.graphWidth + 650, EffectCurveGraphPanel.graphHeight + 2 * effectCurveGraphMargin + 140));treatmentEffectAnalysisPaperContentsJPanel.setBackground(Color.WHITE);treatmentEffectAnalysisPaperContentsPanelConstraints.gridy = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.gridx = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.insets = new Insets(0, 0, 6, 6);treatmentEffectAnalysisPaperContentsPanelConstraints.gridwidth = 2;treatmentEffectAnalysisPaperContentsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisPaperContentsJPanel.add(treatmentEffectAnalysisPaperPanelHeaderJPanel, treatmentEffectAnalysisPaperContentsPanelConstraints);treatmentEffectAnalysisPaperContentsPanelConstraints.gridy = 1;treatmentEffectAnalysisPaperContentsPanelConstraints.gridx = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.weighty = 1;treatmentEffectAnalysisPaperContentsPanelConstraints.fill = GridBagConstraints.VERTICAL;treatmentEffectAnalysisPaperContentsPanelConstraints.gridwidth = 1;treatmentEffectAnalysisPaperContentsPanelConstraints.insets = new Insets(6, 0, 12, 6);treatmentEffectAnalysisPaperContentsJPanel.add(treatmentEffectAnalysisTreatmentPointsJPanel, treatmentEffectAnalysisPaperContentsPanelConstraints);treatmentEffectAnalysisPaperContentsPanelConstraints.gridx = 1;treatmentEffectAnalysisPaperContentsPanelConstraints.insets = new Insets(6, 6, 12, 6);treatmentEffectAnalysisPaperContentsJPanel.add(treatmentEffectAnalysisControlPointsJPanel, treatmentEffectAnalysisPaperContentsPanelConstraints);treatmentEffectAnalysisPaperContentsPanelConstraints.gridy = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.gridx = 2;treatmentEffectAnalysisPaperContentsPanelConstraints.weightx = 1;treatmentEffectAnalysisPaperContentsPanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisPaperContentsPanelConstraints.gridheight = 2;treatmentEffectAnalysisPaperContentsPanelConstraints.insets = new Insets(0, 6, effectCurveGraphMargin, 0);treatmentEffectAnalysisPaperContentsJPanel.add(effectCurveGraphPanel, treatmentEffectAnalysisPaperContentsPanelConstraints);treatmentEffectAnalysisPaperContentsPanelConstraints.weightx = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.weighty = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisPaperContentsPanelConstraints.gridy = 2;treatmentEffectAnalysisPaperContentsPanelConstraints.gridwidth = 4;treatmentEffectAnalysisPaperContentsPanelConstraints.insets = new Insets(0, 0, 0, 0);treatmentEffectAnalysisPaperContentsJPanel.add(effectCurvePaperFirstPageNumberJLabel, treatmentEffectAnalysisPaperContentsPanelConstraints);treatmentEffectAnalysisPaperContentsPanelConstraints.gridy = 0;treatmentEffectAnalysisPaperContentsPanelConstraints.gridx = 2;treatmentEffectAnalysisPaperContentsPanelConstraints.weightx = 1;treatmentEffectAnalysisPaperContentsPanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisPaperContentsPanelConstraints.gridheight = 2;treatmentEffectAnalysisPaperContentsPanelConstraints.insets = new Insets(0, 6, effectCurveGraphMargin, 0);showMortalityCurveJRadioButton.addActionListener(this);showMortalityCurveJRadioButton.setActionCommand("showMortalityCurveJRadioButton");showLifeExpectancyCurveJRadioButton.addActionListener(this);showLifeExpectancyCurveJRadioButton.setActionCommand("showLifeExpectancyCurveJRadioButton");popupMenuConstraints.gridy = 0;popupMenuConstraints.insets = new Insets(0, 0, 0, 0);showMortalityAndOrLifeExpectancyJPopupMenu.add(showLifeExpectancyCurveJRadioButton, popupMenuConstraints);popupMenuConstraints.gridy = 1;showMortalityAndOrLifeExpectancyJPopupMenu.add(showMortalityCurveJRadioButton, popupMenuConstraints);mortalityRatePanelConstraints.gridy = 0;toErrIsHumanMortalityRateModificationJPanel.add(toErrIsHumanMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;toErrIsHumanMortalityRateModificationJPanel.add(toErrIsHumanMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;toErrIsHumanMortalityRateModificationJPanel.add(toErrIsHumanMortalityRateModification3JLabel, mortalityRatePanelConstraints);lifeExtendingFactorsLeftJPanel.setOpaque(false);lifeExtendingFactorsLeftJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExtendingFactorsLeftJPanel.add(lifeExtendingFactorsLeft1JLabel, lifeExtendingFactorsLeftPanelConstraints);lifeExtendingFactorsLeftPanelConstraints.gridy = 1;lifeExtendingFactorsLeftJPanel.add(lifeExtendingFactorsLeft2JLabel, lifeExtendingFactorsLeftPanelConstraints);lifeExtendingFactorsRightJPanel.setOpaque(false);lifeExtendingFactorsRightJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExtendingFactorsRightJPanel.add(lifeExtendingFactorsRight1JLabel, lifeExtendingFactorsRightPanelConstraints);lifeExtendingFactorsRightPanelConstraints.gridy = 1;lifeExtendingFactorsRightJPanel.add(lifeExtendingFactorsRight2JLabel, lifeExtendingFactorsRightPanelConstraints);diseasesOfHeartMortalityRateModificationJPanel.setVisible(false);malignantNeoplasmsMortalityRateModificationJPanel.setVisible(false);chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel.setVisible(false);cerebrovascularDiseaseMortalityRateModificationJPanel.setVisible(false);alzheimersDiseaseMortalityRateModificationJPanel.setVisible(false);diabetesMellitusMortalityRateModificationJPanel.setVisible(false);nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel.setVisible(false);toErrIsHumanMortalityRateModificationJPanel.setVisible(false);humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel.setVisible(false);septicemiaMortalityRateModificationJPanel.setVisible(false);accidentsUnintentionalInjuriesMortalityRateModificationJPanel.setVisible(false);accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel.setVisible(false);influenzaAndPneumoniaMortalityRateModificationJPanel.setVisible(false);intentionalSelfHarmSuicideMortalityRateModificationJPanel.setVisible(false);congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel.setVisible(false);disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel.setVisible(false);suddenInfantDeathSyndromeMortalityRateJPanel.setVisible(false);newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel.setVisible(false);newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel.setVisible(false);bacterialSepsisOfNewbornMortalityRateJPanel.setVisible(false);respiratoryDistressOfNewbornMortalityRateJPanel.setVisible(false);diseasesOfTheCirculatorySystemMortalityRateJPanel.setVisible(false);neonatalHemorrhageMortalityRateJPanel.setVisible(false);assaultHomocideMortalityRateModificationJPanel.setVisible(false);inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel.setVisible(false);pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel.setVisible(false);chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel.setVisible(false);diseasesOfHeartMortalityRateModificationJPanel.setOpaque(false);malignantNeoplasmsMortalityRateModificationJPanel.setOpaque(false);chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel.setOpaque(false);cerebrovascularDiseaseMortalityRateModificationJPanel.setOpaque(false);alzheimersDiseaseMortalityRateModificationJPanel.setOpaque(false);diabetesMellitusMortalityRateModificationJPanel.setOpaque(false);nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel.setOpaque(false);toErrIsHumanMortalityRateModificationJPanel.setOpaque(false);humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel.setOpaque(false);septicemiaMortalityRateModificationJPanel.setOpaque(false);accidentsUnintentionalInjuriesMortalityRateModificationJPanel.setOpaque(false);accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel.setOpaque(false);influenzaAndPneumoniaMortalityRateModificationJPanel.setOpaque(false);intentionalSelfHarmSuicideMortalityRateModificationJPanel.setOpaque(false);congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel.setOpaque(false);disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel.setOpaque(false);suddenInfantDeathSyndromeMortalityRateJPanel.setOpaque(false);newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel.setOpaque(false);newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel.setOpaque(false);bacterialSepsisOfNewbornMortalityRateJPanel.setOpaque(false);respiratoryDistressOfNewbornMortalityRateJPanel.setOpaque(false);diseasesOfTheCirculatorySystemMortalityRateJPanel.setOpaque(false);neonatalHemorrhageMortalityRateJPanel.setOpaque(false);assaultHomocideMortalityRateModificationJPanel.setOpaque(false);inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel.setOpaque(false);pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel.setOpaque(false);chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel.setOpaque(false);diseasesOfHeartMortalityRateModificationJPanel.setName("Diseases of heart (I00-I09,I11,I13,I20-I51)");malignantNeoplasmsMortalityRateModificationJPanel.setName("Malignant neoplasms (C00-C97)");chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel.setName("Chronic lower respiratory diseases (J40-J47)");cerebrovascularDiseaseMortalityRateModificationJPanel.setName("Cerebrovascular diseases (I60-I69)");alzheimersDiseaseMortalityRateModificationJPanel.setName("Alzheimer's disease (G30)");diabetesMellitusMortalityRateModificationJPanel.setName("Diabetes mellitus (E10-E14)");nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel.setName("Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)");toErrIsHumanMortalityRateModificationJPanel.setName("toErrIsHumanMortalityRateModificationJPanel");humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel.setName("Human immunodeficiency virus (HIV) disease (B20-B24)");septicemiaMortalityRateModificationJPanel.setName("Septicemia (A40-A41)");accidentsUnintentionalInjuriesMortalityRateModificationJPanel.setName("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel.setName("Accidents (unintentional injuries) (V01-X59)");influenzaAndPneumoniaMortalityRateModificationJPanel.setName("Influenza and pneumonia (J09-J18)");intentionalSelfHarmSuicideMortalityRateModificationJPanel.setName("Intentional self harm (suicide) (U03,X60-X84,Y87.0)");congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel.setName("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)");disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel.setName("Disorders related to short gestation and low birth weight, not elsewhere classified (P07)");suddenInfantDeathSyndromeMortalityRateJPanel.setName("Sudden infant death syndrome (R95)");newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel.setName("Newborn affected by maternal complications of pregnancy (P01)");newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel.setName("Newborn affected by complications of placenta, cord and membranes (P02)");bacterialSepsisOfNewbornMortalityRateJPanel.setName("Bacterial sepsis of newborn (P36)");respiratoryDistressOfNewbornMortalityRateJPanel.setName("Respiratory distress of newborn (P22)");diseasesOfTheCirculatorySystemMortalityRateJPanel.setName("Diseases of the circulatory system (I00-I99)");neonatalHemorrhageMortalityRateJPanel.setName("Neonatal hemorrhage (P50-P52,P54)");assaultHomocideMortalityRateModificationJPanel.setName("Assault (homocide) (U01-U02,X85-Y09,Y87.1)");inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel.setName("In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)");pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel.setName("Pregnancy, child birth, and the puerperium (O00-O99)");chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel.setName("Chronic liver disease and cirrhosis (K70,K73-K74)");optimizedLifeExpectancyMortalityRatesPanelPusherJPanel.setOpaque(false);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 0;optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.anchor = GridBagConstraints.WEST;optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.insets = new Insets(0, 20, 0, 0);diseasesWithModifiedMortalitiesLegendPanel.add(diseasesOfHeartMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 1;diseasesWithModifiedMortalitiesLegendPanel.add(malignantNeoplasmsMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 2;diseasesWithModifiedMortalitiesLegendPanel.add(chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 3;diseasesWithModifiedMortalitiesLegendPanel.add(cerebrovascularDiseaseMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 4;diseasesWithModifiedMortalitiesLegendPanel.add(alzheimersDiseaseMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 5;diseasesWithModifiedMortalitiesLegendPanel.add(diabetesMellitusMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 6;diseasesWithModifiedMortalitiesLegendPanel.add(nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 7;diseasesWithModifiedMortalitiesLegendPanel.add(toErrIsHumanMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 8;diseasesWithModifiedMortalitiesLegendPanel.add(humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 9;diseasesWithModifiedMortalitiesLegendPanel.add(septicemiaMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 10;diseasesWithModifiedMortalitiesLegendPanel.add(accidentsUnintentionalInjuriesMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 11;diseasesWithModifiedMortalitiesLegendPanel.add(accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 12;diseasesWithModifiedMortalitiesLegendPanel.add(influenzaAndPneumoniaMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 13;diseasesWithModifiedMortalitiesLegendPanel.add(intentionalSelfHarmSuicideMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 14;diseasesWithModifiedMortalitiesLegendPanel.add(congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 15;diseasesWithModifiedMortalitiesLegendPanel.add(disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 16;diseasesWithModifiedMortalitiesLegendPanel.add(suddenInfantDeathSyndromeMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 17;diseasesWithModifiedMortalitiesLegendPanel.add(newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 18;diseasesWithModifiedMortalitiesLegendPanel.add(newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 19;diseasesWithModifiedMortalitiesLegendPanel.add(bacterialSepsisOfNewbornMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 20;diseasesWithModifiedMortalitiesLegendPanel.add(respiratoryDistressOfNewbornMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 21;diseasesWithModifiedMortalitiesLegendPanel.add(diseasesOfTheCirculatorySystemMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 22;diseasesWithModifiedMortalitiesLegendPanel.add(neonatalHemorrhageMortalityRateJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 23;diseasesWithModifiedMortalitiesLegendPanel.add(assaultHomocideMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 24;diseasesWithModifiedMortalitiesLegendPanel.add(inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 25;diseasesWithModifiedMortalitiesLegendPanel.add(pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 26;diseasesWithModifiedMortalitiesLegendPanel.add(chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridy = 27;optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.gridx = 3;optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.weighty = 1;optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.weightx = 1;optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints.insets = new Insets(0, 0, 0, 0);diseasesWithModifiedMortalitiesLegendPanel.add(optimizedLifeExpectancyMortalityRatesPanelPusherJPanel, optimizedLifeExpectancyGraphPanelMortalityRatesModificationPanelConstraints);diseasesOfHeartMortalityRateModification1JLabel.setFont(smallFont);diseasesOfHeartMortalityRateModification2JLabel.setFont(smallFont);diseasesOfHeartMortalityRateModification3JLabel.setFont(smallFont);malignantNeoplasmsMortalityRateModification1JLabel.setFont(smallFont);malignantNeoplasmsMortalityRateModification2JLabel.setFont(smallFont);malignantNeoplasmsMortalityRateModification3JLabel.setFont(smallFont);chronicLowerRespiratoryDiseaseMortalityRateModification1JLabel.setFont(smallFont);chronicLowerRespiratoryDiseaseMortalityRateModification2JLabel.setFont(smallFont);chronicLowerRespiratoryDiseaseMortalityRateModification3JLabel.setFont(smallFont);cerebrovascularDiseaseMortalityRateModification1JLabel.setFont(smallFont);cerebrovascularDiseaseMortalityRateModification2JLabel.setFont(smallFont);cerebrovascularDiseaseMortalityRateModification3JLabel.setFont(smallFont);alzheimersDiseaseMortalityRateModification1JLabel.setFont(smallFont);alzheimersDiseaseMortalityRateModification2JLabel.setFont(smallFont);alzheimersDiseaseMortalityRateModification3JLabel.setFont(smallFont);diabetesMellitusMortalityRateModification1JLabel.setFont(smallFont);diabetesMellitusMortalityRateModification2JLabel.setFont(smallFont);diabetesMellitusMortalityRateModification3JLabel.setFont(smallFont);nephritisNephroticSyndromeAndNephrosisMortalityRateModification1JLabel.setFont(smallFont);nephritisNephroticSyndromeAndNephrosisMortalityRateModification2JLabel.setFont(smallFont);nephritisNephroticSyndromeAndNephrosisMortalityRateModification3JLabel.setFont(smallFont);toErrIsHumanMortalityRateModification1JLabel.setFont(smallFont);toErrIsHumanMortalityRateModification2JLabel.setFont(smallFont);toErrIsHumanMortalityRateModification3JLabel.setFont(smallFont);humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification1JLabel.setFont(smallFont);humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification2JLabel.setFont(smallFont);humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification3JLabel.setFont(smallFont);septicemiaMortalityRateModification1JLabel.setFont(smallFont);septicemiaMortalityRateModification2JLabel.setFont(smallFont);septicemiaMortalityRateModification3JLabel.setFont(smallFont);accidentsUnintentionalInjuriesMortalityRateModification1JLabel.setFont(smallFont);accidentsUnintentionalInjuriesMortalityRateModification2JLabel.setFont(smallFont);accidentsUnintentionalInjuriesMortalityRateModification3JLabel.setFont(smallFont);accidentsUnintentionalInjuriesForInfantsMortalityRateModification1JLabel.setFont(smallFont);accidentsUnintentionalInjuriesForInfantsMortalityRateModification2JLabel.setFont(smallFont);accidentsUnintentionalInjuriesForInfantsMortalityRateModification3JLabel.setFont(smallFont);influenzaAndPneumoniaMortalityRateModification1JLabel.setFont(smallFont);influenzaAndPneumoniaMortalityRateModification2JLabel.setFont(smallFont);influenzaAndPneumoniaMortalityRateModification3JLabel.setFont(smallFont);intentionalSelfHarmSuicideMortalityRateModification1JLabel.setFont(smallFont);intentionalSelfHarmSuicideMortalityRateModification2JLabel.setFont(smallFont);intentionalSelfHarmSuicideMortalityRateModification3JLabel.setFont(smallFont);congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification1JLabel.setFont(smallFont);congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification2JLabel.setFont(smallFont);congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification3JLabel.setFont(smallFont);disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate1JLabel.setFont(smallFont);disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate2JLabel.setFont(smallFont);disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate3JLabel.setFont(smallFont);suddenInfantDeathSyndromeMortalityRate1JLabel.setFont(smallFont);suddenInfantDeathSyndromeMortalityRate2JLabel.setFont(smallFont);suddenInfantDeathSyndromeMortalityRate3JLabel.setFont(smallFont);newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate1JLabel.setFont(smallFont);newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate2JLabel.setFont(smallFont);newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate3JLabel.setFont(smallFont);newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate1JLabel.setFont(smallFont);newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate2JLabel.setFont(smallFont);newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate3JLabel.setFont(smallFont);bacterialSepsisOfNewbornMortalityRate1JLabel.setFont(smallFont);bacterialSepsisOfNewbornMortalityRate2JLabel.setFont(smallFont);bacterialSepsisOfNewbornMortalityRate3JLabel.setFont(smallFont);respiratoryDistressOfNewbornMortalityRate1JLabel.setFont(smallFont);respiratoryDistressOfNewbornMortalityRate2JLabel.setFont(smallFont);respiratoryDistressOfNewbornMortalityRate3JLabel.setFont(smallFont);diseasesOfTheCirculatorySystemMortalityRate1JLabel.setFont(smallFont);diseasesOfTheCirculatorySystemMortalityRate2JLabel.setFont(smallFont);diseasesOfTheCirculatorySystemMortalityRate3JLabel.setFont(smallFont);neonatalHemorrhageMortalityRate1JLabel.setFont(smallFont);neonatalHemorrhageMortalityRate2JLabel.setFont(smallFont);neonatalHemorrhageMortalityRate3JLabel.setFont(smallFont);assaultHomocideMortalityRateModification1JLabel.setFont(smallFont);assaultHomocideMortalityRateModification2JLabel.setFont(smallFont);assaultHomocideMortalityRateModification3JLabel.setFont(smallFont);inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification1JLabel.setFont(smallFont);inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification2JLabel.setFont(smallFont);inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification3JLabel.setFont(smallFont);pregnancyChildBirthAndThePuerperiumMortalityRateModification1JLabel.setFont(smallFont);pregnancyChildBirthAndThePuerperiumMortalityRateModification2JLabel.setFont(smallFont);pregnancyChildBirthAndThePuerperiumMortalityRateModification3JLabel.setFont(smallFont);chronicLiverDiseaseAndCirrhosisMortalityRateModification1JLabel.setFont(smallFont);chronicLiverDiseaseAndCirrhosisMortalityRateModification2JLabel.setFont(smallFont);chronicLiverDiseaseAndCirrhosisMortalityRateModification3JLabel.setFont(smallFont);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;diseasesOfHeartMortalityRateModificationJPanel.add(diseasesOfHeartMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;diseasesOfHeartMortalityRateModificationJPanel.add(diseasesOfHeartMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;diseasesOfHeartMortalityRateModificationJPanel.add(diseasesOfHeartMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel.add(humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;humanImmunodeficiencyVirusHIVDiseaseMortalityRateModificationJPanel.add(humanImmunodeficiencyVirusHIVDiseaseMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;malignantNeoplasmsMortalityRateModificationJPanel.add(malignantNeoplasmsMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;malignantNeoplasmsMortalityRateModificationJPanel.add(malignantNeoplasmsMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;malignantNeoplasmsMortalityRateModificationJPanel.add(malignantNeoplasmsMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel.add(chronicLowerRespiratoryDiseaseMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel.add(chronicLowerRespiratoryDiseaseMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;chronicLowerRespiratoryDiseaseMortalityRateModificationJPanel.add(chronicLowerRespiratoryDiseaseMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;cerebrovascularDiseaseMortalityRateModificationJPanel.add(cerebrovascularDiseaseMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;cerebrovascularDiseaseMortalityRateModificationJPanel.add(cerebrovascularDiseaseMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;cerebrovascularDiseaseMortalityRateModificationJPanel.add(cerebrovascularDiseaseMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;alzheimersDiseaseMortalityRateModificationJPanel.add(alzheimersDiseaseMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;alzheimersDiseaseMortalityRateModificationJPanel.add(alzheimersDiseaseMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;alzheimersDiseaseMortalityRateModificationJPanel.add(alzheimersDiseaseMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;diabetesMellitusMortalityRateModificationJPanel.add(diabetesMellitusMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;diabetesMellitusMortalityRateModificationJPanel.add(diabetesMellitusMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;diabetesMellitusMortalityRateModificationJPanel.add(diabetesMellitusMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel.add(nephritisNephroticSyndromeAndNephrosisMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel.add(nephritisNephroticSyndromeAndNephrosisMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;nephritisNephroticSyndromeAndNephrosisMortalityRateModificationJPanel.add(nephritisNephroticSyndromeAndNephrosisMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;septicemiaMortalityRateModificationJPanel.add(septicemiaMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;septicemiaMortalityRateModificationJPanel.add(septicemiaMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;septicemiaMortalityRateModificationJPanel.add(septicemiaMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;accidentsUnintentionalInjuriesMortalityRateModificationJPanel.add(accidentsUnintentionalInjuriesMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;accidentsUnintentionalInjuriesMortalityRateModificationJPanel.add(accidentsUnintentionalInjuriesMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;accidentsUnintentionalInjuriesMortalityRateModificationJPanel.add(accidentsUnintentionalInjuriesMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel.add(accidentsUnintentionalInjuriesForInfantsMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel.add(accidentsUnintentionalInjuriesForInfantsMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;accidentsUnintentionalInjuriesForInfantsMortalityRateModificationJPanel.add(accidentsUnintentionalInjuriesForInfantsMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;influenzaAndPneumoniaMortalityRateModificationJPanel.add(influenzaAndPneumoniaMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;influenzaAndPneumoniaMortalityRateModificationJPanel.add(influenzaAndPneumoniaMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;influenzaAndPneumoniaMortalityRateModificationJPanel.add(influenzaAndPneumoniaMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel.add(disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel.add(disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateJPanel.add(disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;suddenInfantDeathSyndromeMortalityRateJPanel.add(suddenInfantDeathSyndromeMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;suddenInfantDeathSyndromeMortalityRateJPanel.add(suddenInfantDeathSyndromeMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;suddenInfantDeathSyndromeMortalityRateJPanel.add(suddenInfantDeathSyndromeMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel.add(newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel.add(newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateJPanel.add(newbornAffectedByMaternalComplicationsOfPregnancyMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel.add(newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel.add(newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateJPanel.add(newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;bacterialSepsisOfNewbornMortalityRateJPanel.add(bacterialSepsisOfNewbornMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;bacterialSepsisOfNewbornMortalityRateJPanel.add(bacterialSepsisOfNewbornMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;bacterialSepsisOfNewbornMortalityRateJPanel.add(bacterialSepsisOfNewbornMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;respiratoryDistressOfNewbornMortalityRateJPanel.add(respiratoryDistressOfNewbornMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;respiratoryDistressOfNewbornMortalityRateJPanel.add(respiratoryDistressOfNewbornMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;respiratoryDistressOfNewbornMortalityRateJPanel.add(respiratoryDistressOfNewbornMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;diseasesOfTheCirculatorySystemMortalityRateJPanel.add(diseasesOfTheCirculatorySystemMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;diseasesOfTheCirculatorySystemMortalityRateJPanel.add(diseasesOfTheCirculatorySystemMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;diseasesOfTheCirculatorySystemMortalityRateJPanel.add(diseasesOfTheCirculatorySystemMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;neonatalHemorrhageMortalityRateJPanel.add(neonatalHemorrhageMortalityRate1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;neonatalHemorrhageMortalityRateJPanel.add(neonatalHemorrhageMortalityRate2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;neonatalHemorrhageMortalityRateJPanel.add(neonatalHemorrhageMortalityRate3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;mortalityRatePanelConstraints.gridy = 0;intentionalSelfHarmSuicideMortalityRateModificationJPanel.add(intentionalSelfHarmSuicideMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;intentionalSelfHarmSuicideMortalityRateModificationJPanel.add(intentionalSelfHarmSuicideMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;intentionalSelfHarmSuicideMortalityRateModificationJPanel.add(intentionalSelfHarmSuicideMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel.add(congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel.add(congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModificationJPanel.add(congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;assaultHomocideMortalityRateModificationJPanel.add(assaultHomocideMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;assaultHomocideMortalityRateModificationJPanel.add(assaultHomocideMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;assaultHomocideMortalityRateModificationJPanel.add(assaultHomocideMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel.add(inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel.add(inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModificationJPanel.add(inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel.add(pregnancyChildBirthAndThePuerperiumMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel.add(pregnancyChildBirthAndThePuerperiumMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;pregnancyChildBirthAndThePuerperiumMortalityRateModificationJPanel.add(pregnancyChildBirthAndThePuerperiumMortalityRateModification3JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 0;mortalityRatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel.add(chronicLiverDiseaseAndCirrhosisMortalityRateModification1JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 1;chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel.add(chronicLiverDiseaseAndCirrhosisMortalityRateModification2JLabel, mortalityRatePanelConstraints);mortalityRatePanelConstraints.gridy = 2;chronicLiverDiseaseAndCirrhosisMortalityRateModificationJPanel.add(chronicLiverDiseaseAndCirrhosisMortalityRateModification3JLabel, mortalityRatePanelConstraints);lifeExtensionButtonsHeaderHorizontalLineJPanel.setBorder(new MatteBorder(1, 0, 0, 0, Color.BLACK));optimizedLifeExpectancyTextFieldsJPanel.setOpaque(false);lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton.addActionListener(this);lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton.setActionCommand("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton");lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton.addActionListener(this);lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton.addActionListener(this);lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton.addActionListener(this);lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton.addActionListener(this);lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearHispanicFemalesJToggleButton.addActionListener(this);lifeExpectancyPerYearHispanicFemalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearHispanicMalesJToggleButton.addActionListener(this);lifeExpectancyPerYearHispanicMalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearBlackFemalesJToggleButton.addActionListener(this);lifeExpectancyPerYearBlackFemalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearBlackMalesJToggleButton.addActionListener(this);lifeExpectancyPerYearBlackMalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearWhiteFemalesJToggleButton.addActionListener(this);lifeExpectancyPerYearWhiteFemalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");lifeExpectancyPerYearWhiteMalesJToggleButton.addActionListener(this);lifeExpectancyPerYearWhiteMalesJToggleButton.setActionCommand("lifeExpectancyPerYearToggleButton");decisionModelOutcomesJToggleButton.addActionListener(this);decisionModelOutcomesJToggleButton.setActionCommand("decisionModelOutcomesJToggleButton");lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJPanel.setOpaque(false);lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJLabel, lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyPerYearButtonsPanelHeaderJPanel.setOpaque(false);lifeExpectancyPerYearButtonsPanelHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyPerYearButtonsPanelHeaderJPanel.add(lifeExpectancyPerYearButtonsPanelHeaderJLabel, lifeExpectancyPerYearButtonsPanelHeaderPanelConstraints);lifeExpectancyGraphHeaderPatientBirthdateJPanel.setOpaque(false);lifeExpectancyGraphHeaderPatientBirthdateJPanel.add(lifeExpectancyGraphPatientBirthdateHeaderJLabel, lifeExpectancyGraphHeaderPatientBirthdatePanelConstraints);lifeExpectancyGraphHeaderPatientBirthdatePanelConstraints.gridx = 1;lifeExpectancyGraphHeaderPatientBirthdatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyGraphHeaderPatientBirthdatePanelConstraints.weightx = 1;lifeExpectancyGraphHeaderPatientBirthdateJPanel.add(lifeExpectancyGraphPatientBirthdateContentJLabel, lifeExpectancyGraphHeaderPatientBirthdatePanelConstraints);lifeExpectancyGraphHeaderPatientRaceJPanel.setOpaque(false);lifeExpectancyGraphHeaderPatientRaceJPanel.add(lifeExpectancyGraphHeaderPatientRaceHeaderJLabel, lifeExpectancyGraphHeaderPatientRacePanelConstraints);lifeExpectancyGraphHeaderPatientRacePanelConstraints.gridx = 1;lifeExpectancyGraphHeaderPatientRacePanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyGraphHeaderPatientRacePanelConstraints.weightx = 1;lifeExpectancyGraphHeaderPatientRaceJPanel.add(lifeExpectancyGraphHeaderPatientRaceJLabel, lifeExpectancyGraphHeaderPatientRacePanelConstraints);lifeExpectancyGraphHeaderPatientSexJPanel.setOpaque(false);lifeExpectancyGraphHeaderPatientSexJPanel.add(lifeExpectancyGraphHeaderPatientSexHeaderJLabel, lifeExpectancyGraphHeaderPatientSexPanelConstraints);lifeExpectancyGraphHeaderPatientSexPanelConstraints.gridx = 1;lifeExpectancyGraphHeaderPatientSexPanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyGraphHeaderPatientSexPanelConstraints.weightx = 1;lifeExpectancyGraphHeaderPatientSexJPanel.add(lifeExpectancyGraphHeaderPatientSexJLabel, lifeExpectancyGraphHeaderPatientSexPanelConstraints);lifeExpectancyGraphNameJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyGraphNameJPanel.setOpaque(false);lifeExpectancyGraphNameJPanel.add(lifeExpectancyGraphNameJLabel, lifeExpectancyGraphNamePanelConstraints);lifeExpectancyGraphNamePanelConstraints.gridx = 1;lifeExpectancyGraphNamePanelConstraints.weightx = 1;lifeExpectancyGraphNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyGraphNameJPanel.add(lifeExpectancyGraphNameHeaderJLabel, lifeExpectancyGraphNamePanelConstraints);lifeExpectancyGraphHeaderJPanel.setOpaque(false);lifeExpectancyGraphHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyGraphHeaderPanelConstraints.weightx = 1;lifeExpectancyGraphHeaderPanelConstraints.fill = GridBagConstraints.BOTH;lifeExpectancyGraphHeaderJPanel.add(lifeExpectancyGraphNameJPanel, lifeExpectancyGraphHeaderPanelConstraints);lifeExpectancyGraphHeaderPanelConstraints.gridy = 1;lifeExpectancyGraphHeaderJPanel.add(lifeExpectancyGraphHeaderDateGraphCreatedJLabel, lifeExpectancyGraphHeaderPanelConstraints);lifeExpectancyGraphHeaderPanelConstraints.gridy = 2;lifeExpectancyGraphHeaderJPanel.add(lifeExpectancyGraphHeaderUserIDJLabel, lifeExpectancyGraphHeaderPanelConstraints);lifeExpectancyGraphHeaderPanelConstraints.gridy = 3;lifeExpectancyGraphHeaderJPanel.add(lifeExpectancyGraphHeaderPatientBirthdateJPanel, lifeExpectancyGraphHeaderPanelConstraints);lifeExpectancyGraphHeaderPanelConstraints.gridy = 4;lifeExpectancyGraphHeaderJPanel.add(lifeExpectancyGraphHeaderPatientRaceJPanel, lifeExpectancyGraphHeaderPanelConstraints);lifeExpectancyGraphHeaderPanelConstraints.gridy = 5;lifeExpectancyGraphHeaderJPanel.add(lifeExpectancyGraphHeaderPatientSexJPanel, lifeExpectancyGraphHeaderPanelConstraints);lifeExpectancyContentJPanel.add(aChartMustBeOpenToCalculateLifeExpectancyJLabel, lifeExpectancyContentPanelConstraints);lifeExpectancyContentJPanel.setPreferredSize(landscapePaperSizeDimension);actuarialLifeExpectancyPaperPanelConstraints.insets = new Insets(paperMargin, paperMargin, paperMargin, paperMargin);actuarialLifeExpectancyPaperJPanel.add(lifeExpectancyContentJPanel, actuarialLifeExpectancyPaperPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsJButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearJButton.setBackground(SystemWindow.buttonColor);actuarialLifeExpectancyJToggleButton.setBackground(SystemWindow.buttonColor);optimizedLifeExpectancyJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsJButton.setFont(SystemWindow.systemFont);lifeExpectancyPerYearJButton.setFont(SystemWindow.systemFont);actuarialLifeExpectancyJToggleButton.setFont(SystemWindow.systemFont);optimizedLifeExpectancyJToggleButton.setFont(SystemWindow.systemFont);lifeExpectancyPaperBaseButtonsJPanel.setBackground(SystemWindow.quintessentialThemeColor);lifeExpectancyPaperBaseButtonsJPanel.setBorder(new BevelBorder(BevelBorder.RAISED));lifeExpectancyPaperBaseButtonsPanelConstraints.insets = new Insets(6, 6, 6, 6);lifeExpectancyPaperBaseButtonsJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsJButton, lifeExpectancyPaperBaseButtonsPanelConstraints);lifeExpectancyPaperBaseButtonsPanelConstraints.gridx = 1;lifeExpectancyPaperBaseButtonsJPanel.add(lifeExpectancyPerYearJButton, lifeExpectancyPaperBaseButtonsPanelConstraints);lifeExpectancyPaperBaseButtonsPanelConstraints.gridx = 2;lifeExpectancyPaperBaseButtonsJPanel.add(actuarialLifeExpectancyJToggleButton, lifeExpectancyPaperBaseButtonsPanelConstraints);lifeExpectancyPaperBaseButtonsPanelConstraints.gridx = 3;lifeExpectancyPaperBaseButtonsJPanel.add(optimizedLifeExpectancyJToggleButton, lifeExpectancyPaperBaseButtonsPanelConstraints);optimizedLifeExpectancyPaperBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);optimizedLifeExpectancyPaperBaseJPanel.add(optimizedLifeExpectancyTextFieldsJPanel, optimizedLifeExpectancyPaperBasePanelConstraints);optimizedLifeExpectancyPaperBasePanelConstraints.gridy = 1;optimizedLifeExpectancyPaperBasePanelConstraints.insets = new Insets(10, 10, 10, 10);optimizedLifeExpectancyPaperBaseJPanel.add(optimizedLifeExpectancyPaperJPanel, optimizedLifeExpectancyPaperBasePanelConstraints);actuarialLifeExpectancyPaperBasePanelConstraints.insets = new Insets(10, 10, 10, 10);actuarialLifeExpectancyPaperBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);actuarialLifeExpectancyPaperBaseJPanel.add(actuarialLifeExpectancyPaperJPanel, actuarialLifeExpectancyPaperBasePanelConstraints);lifeExpectancyContentCardedJPanel.add(actuarialLifeExpectancyPaperBaseJPanel, "actuarialLifeExpectancyPaperBaseJPanel");lifeExpectancyContentCardedJPanel.add(optimizedLifeExpectancyPaperBaseJPanel, "optimizedLifeExpectancyPaperBaseJPanel");lifeExpectancyBasePusherJPanel.setOpaque(false);lifeExpectancyBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);lifeExpectancyBasePanelConstraints.gridy = 0;lifeExpectancyBasePanelConstraints.gridx = 0;lifeExpectancyBasePanelConstraints.insets = new Insets(0, 0, 6, 0);lifeExpectancyBaseJPanel.add(lifeExpectancyContentCardedJPanel, lifeExpectancyBasePanelConstraints);lifeExpectancyBasePanelConstraints.insets = new Insets(0, 0, 0, 0);lifeExpectancyBasePanelConstraints.gridy = 2;lifeExpectancyBasePanelConstraints.weighty = 1;lifeExpectancyBaseJPanel.add(lifeExpectancyBasePusherJPanel, lifeExpectancyBasePanelConstraints);lifeExpectancyGraphPanel.setPreferredSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);lifeExpectancyGraphPanel.setSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);lifeExpectancyGraphPanel.addMouseListener(this);lifeExpectancyGraphPanel.setName("lifeExpectancyGraphPanel");mortalityGraphPanel.setPreferredSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);mortalityGraphPanel.setSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);mortalityGraphPanel.addMouseListener(this);mortalityGraphPanel.setName("mortalityGraphPanel");actuarialLifeExpectancyPaperJPanel.setBackground(Color.WHITE);actuarialLifeExpectancyPaperJPanel.setBorder(SystemWindow.paperBorder);lifeExpectancyContentJPanel.setBackground(Color.WHITE);decisionModelsButtonsJPanel.add(decisionModelOutcomesJToggleButton, decisionModelsButtonsPanelConstraints);decisionModelsBaseJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);decisionModelsBasePanelConstraints.weighty = 1;decisionModelsBasePanelConstraints.weightx = 1;decisionModelsBasePanelConstraints.fill = GridBagConstraints.BOTH;decisionModelsBaseJPanel.add(decisionModelsJPanel, decisionModelsBasePanelConstraints);decisionModelsGraphHeaderPanelConstraints.gridy = 1;decisionModelsNameJPanel.setOpaque(false);decisionModelsNameJPanel.add(decisionModelsNameJLabel, decisionModelsNamePanelConstraints);decisionModelsNamePanelConstraints.gridy = 1;decisionModelsNamePanelConstraints.weightx = 1;decisionModelsNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;decisionModelsNameJPanel.add(decisionModelsNameHeaderJLabel, decisionModelsNamePanelConstraints);decisionModelsGraphHeaderJPanel.setOpaque(false);decisionModelsGraphHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));decisionModelsGraphHeaderPanelConstraints.fill = GridBagConstraints.BOTH;decisionModelsGraphHeaderPanelConstraints.weightx = 1;decisionModelsGraphHeaderJPanel.add(decisionModelsNameJPanel, costAnalysisGraphHeaderPanelConstraints);decisionModelsGraphHeaderPanelConstraints.gridy = 1;decisionModelsGraphHeaderJPanel.add(decisionModelsGraphHeaderDateGraphCreatedJLabel, costAnalysisGraphHeaderPanelConstraints);decisionModelsGraphHeaderPanelConstraints.gridy = 2;decisionModelsGraphHeaderJPanel.add(decisionModelsGraphHeaderUserIDJLabel, costAnalysisGraphHeaderPanelConstraints);decisionModelsJPanel.setBackground(SystemWindow.quintessentialThemeColor);decisionModelsPanelConstraints.gridy = 0;decisionModelsPanelConstraints.weighty = 0;decisionModelsPanelConstraints.weightx = 1;decisionModelsPanelConstraints.fill = GridBagConstraints.BOTH;decisionModelsJPanel.add(decisionModelsGraphHeaderJPanel, decisionModelsPanelConstraints);decisionModelsPanelConstraints.gridy = 1;decisionModelsJPanel.add(decisionModelsButtonsJPanel, decisionModelsPanelConstraints);decisionModelsPanelConstraints.gridy = 2;decisionModelsPanelConstraints.weighty = 1;decisionModelsJPanel.add(decisionModelsScrollPaneJPanel, decisionModelsPanelConstraints);costAnalysisScrollPaneJPanel.setVisible(false);treatmentEffectAnalysisScrollPaneJPanel.setVisible(false);decisionModelsButtonsJPanel.setVisible(false);decisionModelsJPanel.setVisible(false);lifeExpectancyPaperBasePanelScrollPaneBaseJPanel.setOpaque(false);lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.gridy = 0;lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.weightx = 1;lifeExpectancyPaperBasePanelScrollPaneBaseJPanel.add(lifeExpectancyPaperBaseButtonsJPanel, lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints);lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.gridy = 3;lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.fill = GridBagConstraints.BOTH;lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.weighty = 1;lifeExpectancyPaperBasePanelScrollPaneBaseJPanel.add(lifeExpectancyPaperBasePanelJScrollPane, lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints);lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.weighty = 0;decisionAnalysisPanelCardedJPanel.setBackground(SystemWindow.quintessentialThemeColor);decisionAnalysisPanelCardedPanelCoverJPanel.setOpaque(false);decisionAnalysisPanelCardedJPanel.add(decisionAnalysisPanelCardedPanelCoverJPanel, "decisionAnalysisPanelCardedPanelCoverJPanel");decisionAnalysisPanelCardedJPanel.add(costAnalysisScrollPaneBaseJPanel, "costAnalysisScrollPaneBaseJPanel");decisionAnalysisPanelCardedJPanel.add(treatmentEffectAnalysisScrollPaneBaseJPanel, "treatmentEffectAnalysisScrollPaneBaseJPanel");decisionAnalysisPanelCardedJPanel.add(decisionModelsBaseJPanel, "decisionModelsBaseJPanel");decisionAnalysisPanelCardedJPanel.add(lifeExpectancyPaperBasePanelScrollPaneBaseJPanel, "lifeExpectancyPaperBasePanelScrollPaneBaseJPanel");optimalLifeExpectancyHeaderActuarialCurveInActuarialOnlyPanelJLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderActuarialPlusAverageIncreaseInNonOptimizedPanelTop1JLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderActuarialPlusAverageIncreaseInNonOptimizedPanelTop2JLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderActuarialBottomInNonOptimizedPanelJLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderOptimizedCurveWithAverageIncreaseInOptimizedPanel1JLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderOptimizedCurveWithAverageIncreaseInOptimizedPanel2JLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderOptimizedCurveInOptimizedPanelJLabel.setFont(mediumSmallFont);optimalLifeExpectancyHeaderActuarialBottomInOptimizedPanelJLabel.setFont(mediumSmallFont);optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderJPanel.setOpaque(false);optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderJPanel.add(optimalLifeExpectancyHeaderActuarialCurveInActuarialOnlyPanelJLabel, optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints.anchor = GridBagConstraints.WEST;optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderActuarialPlusAverageIncreaseInNonOptimizedPanelTop1JLabel, optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints.gridy = 1;optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderActuarialPlusAverageIncreaseInNonOptimizedPanelTop2JLabel, optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints.gridy = 2;optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderActuarialBottomInNonOptimizedPanelJLabel, optimizedLifeExpectancyGraphPanelNonOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel.setOpaque(false);optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel.setOpaque(false);optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderOptimizedCurveWithAverageIncreaseInOptimizedPanel1JLabel, optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints.gridy = 1;optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderOptimizedCurveWithAverageIncreaseInOptimizedPanel2JLabel, optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints.gridy = 2;optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderOptimizedCurveInOptimizedPanelJLabel, optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints.gridy = 3;optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel.add(optimalLifeExpectancyHeaderActuarialBottomInOptimizedPanelJLabel, optimizedLifeExpectancyGraphPanelOptimizedHeaderPanelConstraints);optimizedLifeExpectancyGraphPanelHeaderCardedJPanel.setOpaque(false);optimizedLifeExpectancyGraphPanelHeaderCardedJPanel.add(optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderJPanel, "optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderJPanel");optimizedLifeExpectancyGraphPanelHeaderCardedJPanel.add(optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel, "optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel");optimizedLifeExpectancyGraphPanelHeaderCardedJPanel.add(optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel, "optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel");optimizedLifeExpectancyPaperJPanel.setBackground(Color.WHITE);optimizedLifeExpectancyPaperJPanel.setBorder(SystemWindow.paperBorder);optimizedLifeExpectancyPaperJPanel.setName("optimizedLifeExpectancyPaperJPanel");diseasesWithModifiedMortalitiesLegendPanel.setOpaque(false);diseasesWithModifiedMortalitiesLegendPanel.setBounds(360, 0, 540, 400);optimizedLifeExpectancyGraphJPanel.add(diseasesWithModifiedMortalitiesLegendPanel);lifeExpectancyGraphNameJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyGraphNameJPanel.setOpaque(false);lifeExpectancyGraphNameJPanel.add(lifeExpectancyGraphNameJLabel, lifeExpectancyGraphNamePanelConstraints);lifeExpectancyGraphNamePanelConstraints.gridx = 1;lifeExpectancyGraphNamePanelConstraints.weightx = 1;lifeExpectancyGraphNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;lifeExpectancyGraphNameJPanel.add(lifeExpectancyGraphNameHeaderJLabel, lifeExpectancyGraphNamePanelConstraints);optimizedLifeExpectancyGraphHeaderPatientBirthdateJPanel.setOpaque(false);optimizedLifeExpectancyGraphHeaderPatientBirthdateJPanel.add(optimizedLifeExpectancyGraphPatientBirthdateHeaderJLabel, optimizedLifeExpectancyGraphHeaderPatientBirthdatePanelConstraints);optimizedLifeExpectancyGraphHeaderPatientBirthdatePanelConstraints.gridx = 1;optimizedLifeExpectancyGraphHeaderPatientBirthdatePanelConstraints.fill = GridBagConstraints.HORIZONTAL;optimizedLifeExpectancyGraphHeaderPatientBirthdatePanelConstraints.weightx = 1;optimizedLifeExpectancyGraphHeaderPatientBirthdateJPanel.add(optimizedLifeExpectancyGraphPatientBirthdateContentJLabel, optimizedLifeExpectancyGraphHeaderPatientBirthdatePanelConstraints);optimizedLifeExpectancyGraphHeaderPatientRaceJPanel.setOpaque(false);optimizedLifeExpectancyGraphHeaderPatientRaceJPanel.add(optimizedLifeExpectancyGraphHeaderPatientRaceHeaderJLabel, optimizedLifeExpectancyGraphHeaderPatientRacePanelConstraints);optimizedLifeExpectancyGraphHeaderPatientRacePanelConstraints.gridx = 1;optimizedLifeExpectancyGraphHeaderPatientRacePanelConstraints.fill = GridBagConstraints.HORIZONTAL;optimizedLifeExpectancyGraphHeaderPatientRacePanelConstraints.weightx = 1;optimizedLifeExpectancyGraphHeaderPatientRaceJPanel.add(optimizedLifeExpectancyGraphHeaderPatientRaceJLabel, optimizedLifeExpectancyGraphHeaderPatientRacePanelConstraints);optimizedLifeExpectancyGraphHeaderPatientSexJPanel.setOpaque(false);optimizedLifeExpectancyGraphHeaderPatientSexJPanel.add(optimizedLifeExpectancyGraphHeaderPatientSexHeaderJLabel, optimizedLifeExpectancyGraphHeaderPatientSexPanelConstraints);optimizedLifeExpectancyGraphHeaderPatientSexPanelConstraints.gridx = 1;optimizedLifeExpectancyGraphHeaderPatientSexPanelConstraints.fill = GridBagConstraints.HORIZONTAL;optimizedLifeExpectancyGraphHeaderPatientSexPanelConstraints.weightx = 1;optimizedLifeExpectancyGraphHeaderPatientSexJPanel.add(optimizedLifeExpectancyGraphHeaderPatientSexJLabel, optimizedLifeExpectancyGraphHeaderPatientSexPanelConstraints);optimizedLifeExpectancyGraphHeaderJPanel.setOpaque(false);optimizedLifeExpectancyGraphHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));optimizedLifeExpectancyGraphHeaderPanelConstraints.weightx = 1;optimizedLifeExpectancyGraphHeaderPanelConstraints.fill = GridBagConstraints.BOTH;optimizedLifeExpectancyGraphHeaderJPanel.add(optimizedLifeExpectancyGraphNameJPanel, optimizedLifeExpectancyGraphHeaderPanelConstraints);optimizedLifeExpectancyGraphHeaderPanelConstraints.gridy = 1;optimizedLifeExpectancyGraphHeaderJPanel.add(optimizedLifeExpectancyGraphHeaderDateGraphCreatedJLabel, optimizedLifeExpectancyGraphHeaderPanelConstraints);optimizedLifeExpectancyGraphHeaderPanelConstraints.gridy = 2;optimizedLifeExpectancyGraphHeaderJPanel.add(optimizedLifeExpectancyGraphHeaderUserIDJLabel, optimizedLifeExpectancyGraphHeaderPanelConstraints);optimizedLifeExpectancyGraphHeaderPanelConstraints.gridy = 3;optimizedLifeExpectancyGraphHeaderJPanel.add(optimizedLifeExpectancyGraphHeaderPatientBirthdateJPanel, optimizedLifeExpectancyGraphHeaderPanelConstraints);optimizedLifeExpectancyGraphHeaderPanelConstraints.gridy = 4;optimizedLifeExpectancyGraphHeaderJPanel.add(optimizedLifeExpectancyGraphHeaderPatientRaceJPanel, optimizedLifeExpectancyGraphHeaderPanelConstraints);optimizedLifeExpectancyGraphHeaderPanelConstraints.gridy = 5;optimizedLifeExpectancyGraphHeaderJPanel.add(optimizedLifeExpectancyGraphHeaderPatientSexJPanel, optimizedLifeExpectancyGraphHeaderPanelConstraints);optimizedLifeExpectancyGraphNameJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));optimizedLifeExpectancyGraphNameJPanel.setOpaque(false);optimizedLifeExpectancyGraphNameJPanel.add(optimizedLifeExpectancyGraphNameJLabel, optimizedLifeExpectancyGraphNamePanelConstraints);optimizedLifeExpectancyGraphNamePanelConstraints.gridy = 1;optimizedLifeExpectancyGraphNamePanelConstraints.weightx = 1;optimizedLifeExpectancyGraphNamePanelConstraints.fill = GridBagConstraints.HORIZONTAL;optimizedLifeExpectancyGraphNameJPanel.add(optimizedLifeExpectancyGraphNameHeaderJLabel, optimizedLifeExpectancyGraphNamePanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.insets = new Insets(paperMargin, paperMargin, 0, paperMargin);optimizedLifeExpectancyPaperJPanel.add(optimizedLifeExpectancyGraphHeaderJPanel, optimizedLifeExpectancyPaperPanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.gridx = 1;optimizedLifeExpectancyPaperJPanel.add(optimizedLifeExpectancyGraphPanelHeaderCardedJPanel, optimizedLifeExpectancyPaperPanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.gridwidth = 2;optimizedLifeExpectancyPaperPanelConstraints.gridx = 0;optimizedLifeExpectancyPaperPanelConstraints.gridy = 1;optimizedLifeExpectancyPaperPanelConstraints.insets = new Insets(0, paperMargin, paperMargin, paperMargin);optimizedLifeExpectancyPaperJPanel.add(optimizedLifeExpectancyGraphJPanel, optimizedLifeExpectancyPaperPanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.gridy = 1;optimizedLifeExpectancyPaperPanelConstraints.insets = new Insets(0, paperMargin, 0, paperMargin);optimizedLifeExpectancyButtonsJPanel.setOpaque(false);optimizedLifeExpectancyButtonsJPanel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));optimizedLifeExpectancyButtonsPanelConstraints.insets = new Insets(4, 6, 4, 6);optimizedLifeExpectancyButtonsJPanel.add(optimizedLifeExpectancyPanelClearJButton, optimizedLifeExpectancyButtonsPanelConstraints);optimizedLifeExpectancyButtonsPanelConstraints.gridx = 2;optimizedLifeExpectancyButtonsJPanel.add(includeAverageIncreasePerYearJToggleButton, optimizedLifeExpectancyButtonsPanelConstraints);optimizedLifeExpectancyPanelClearJButton.addActionListener(this);optimizedLifeExpectancyPanelClearJButton.setActionCommand("optimizedLifeExpectancyPanelClearJButton");optimizedLifeExpectancyPanelClearJButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);lifeExpectancyAtBirthOverLastFortyYearsJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));lifeExpectancyAtBirthOverLastFortyYearsBaseJPanel.setOpaque(false);lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.setBackground(SystemWindow.quintessentialThemeColor);lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.add(lifeExpectancyAtBirthOverLastFortyYearsBaseJPanel);lifeExpectancyPerYearJPanel.setBackground(SystemWindow.lightQuintessentialThemeColor);lifeExpectancyPerYearJPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));lifeExpectancyPerYearBaseJPanel.setOpaque(false);lifeExpectancyPerYearPanelJPopupMenu.setBackground(SystemWindow.quintessentialThemeColor);lifeExpectancyPerYearPanelJPopupMenu.add(lifeExpectancyPerYearBaseJPanel);lifeExpectancyPerYearButtonsInner1JPanel.setOpaque(false);lifeExpectancyPerYearButtonsInner1PanelConstraints.insets = new Insets(0, 0, 0, 3);lifeExpectancyPerYearButtonsInner1JPanel.add(lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton, lifeExpectancyPerYearButtonsInner1PanelConstraints);lifeExpectancyPerYearButtonsInner1PanelConstraints.gridx = 1;lifeExpectancyPerYearButtonsInner1PanelConstraints.insets = new Insets(0, 3, 0, 3);lifeExpectancyPerYearButtonsInner1JPanel.add(lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton, lifeExpectancyPerYearButtonsInner1PanelConstraints);lifeExpectancyPerYearButtonsInner1PanelConstraints.gridx = 2;lifeExpectancyPerYearButtonsInner1PanelConstraints.insets = new Insets(0, 3, 0, 0);lifeExpectancyPerYearButtonsInner1JPanel.add(lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton, lifeExpectancyPerYearButtonsInner1PanelConstraints);lifeExpectancyPerYearButtonsInner2JPanel.setOpaque(false);lifeExpectancyPerYearButtonsInner2PanelConstraints.insets = new Insets(0, 0, 0, 3);lifeExpectancyPerYearButtonsInner2JPanel.add(lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton, lifeExpectancyPerYearButtonsInner2PanelConstraints);lifeExpectancyPerYearButtonsInner2PanelConstraints.gridx = 1;lifeExpectancyPerYearButtonsInner2PanelConstraints.insets = new Insets(0, 3, 0, 3);lifeExpectancyPerYearButtonsInner2JPanel.add(lifeExpectancyPerYearHispanicFemalesJToggleButton, lifeExpectancyPerYearButtonsInner2PanelConstraints);lifeExpectancyPerYearButtonsInner2PanelConstraints.gridx = 2;lifeExpectancyPerYearButtonsInner2PanelConstraints.insets = new Insets(0, 3, 0, 0);lifeExpectancyPerYearButtonsInner2JPanel.add(lifeExpectancyPerYearWhiteMalesJToggleButton, lifeExpectancyPerYearButtonsInner2PanelConstraints);lifeExpectancyPerYearButtonsInner3JPanel.setOpaque(false);lifeExpectancyPerYearButtonsInner3PanelConstraints.insets = new Insets(0, 0, 0, 3);lifeExpectancyPerYearButtonsInner3JPanel.add(lifeExpectancyPerYearBlackFemalesJToggleButton, lifeExpectancyPerYearButtonsInner3PanelConstraints);lifeExpectancyPerYearButtonsInner3PanelConstraints.gridx = 1;lifeExpectancyPerYearButtonsInner3PanelConstraints.insets = new Insets(0, 3, 0, 3);lifeExpectancyPerYearButtonsInner3JPanel.add(lifeExpectancyPerYearBlackMalesJToggleButton, lifeExpectancyPerYearButtonsInner3PanelConstraints);lifeExpectancyPerYearButtonsInner3PanelConstraints.gridx = 2;lifeExpectancyPerYearButtonsInner3PanelConstraints.insets = new Insets(0, 3, 0, 0);lifeExpectancyPerYearButtonsInner3JPanel.add(lifeExpectancyPerYearWhiteFemalesJToggleButton, lifeExpectancyPerYearButtonsInner3PanelConstraints);lifeExpectancyPerYearButtonsJPanel.setOpaque(false);lifeExpectancyPerYearButtonsJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyPerYearButtonsJPanel.add(lifeExpectancyPerYearButtonsPanelHeaderJPanel, lifeExpectancyPerYearButtonsPanelConstraints);lifeExpectancyPerYearButtonsPanelConstraints.gridy = 1;lifeExpectancyPerYearButtonsPanelConstraints.insets = new Insets(6, 0, 3, 6);lifeExpectancyPerYearButtonsJPanel.add(lifeExpectancyPerYearButtonsInner1JPanel, lifeExpectancyPerYearButtonsPanelConstraints);lifeExpectancyPerYearButtonsPanelConstraints.gridy = 2;lifeExpectancyPerYearButtonsPanelConstraints.insets = new Insets(3, 6, 3, 6);lifeExpectancyPerYearButtonsJPanel.add(lifeExpectancyPerYearButtonsInner2JPanel, lifeExpectancyPerYearButtonsPanelConstraints);lifeExpectancyPerYearButtonsPanelConstraints.gridy = 3;lifeExpectancyPerYearButtonsPanelConstraints.insets = new Insets(3, 6, 3, 6);lifeExpectancyPerYearButtonsJPanel.add(lifeExpectancyPerYearButtonsInner3JPanel, lifeExpectancyPerYearButtonsPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel.setOpaque(false);lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints.insets = new Insets(6, 0, 3, 6);lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsButtonsHeaderJPanel, lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints.insets = new Insets(3, 6, 3, 6);lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints.gridy = 1;lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1JPanel, lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints.gridy = 2;lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints.insets = new Insets(3, 6, 3, 6);lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel, lifeExpectancyAtBirthOverLastFortyYearsButtonsPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1JPanel.setOpaque(false);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints.insets = new Insets(0, 0, 0, 3);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints.insets = new Insets(0, 3, 0, 3);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints.gridx = 1;lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints.insets = new Insets(0, 3, 0, 0);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints.gridx = 2;lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner1PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel.setOpaque(false);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints.insets = new Insets(0, 0, 0, 3);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints.gridx = 1;lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints.insets = new Insets(0, 3, 0, 0);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints.gridx = 2;lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints.gridx = 3;lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints.insets = new Insets(0, 3, 0, 0);lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2JPanel.add(lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton, lifeExpectancyAtBirthOverLastFortyYearsButtonsInner2PanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsBasePanelConstraints.insets = new Insets(12, 12, 6, 12);lifeExpectancyAtBirthOverLastFortyYearsBaseJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsButtonsJPanel, lifeExpectancyAtBirthOverLastFortyYearsBasePanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsBasePanelConstraints.gridy = 1;lifeExpectancyAtBirthOverLastFortyYearsBasePanelConstraints.insets = new Insets(6, 12, 12, 12);lifeExpectancyAtBirthOverLastFortyYearsBaseJPanel.add(lifeExpectancyAtBirthOverLastFortyYearsJPanel, lifeExpectancyAtBirthOverLastFortyYearsBasePanelConstraints);lifeExpectancyPerYearBasePanelConstraints.insets = new Insets(12, 12, 6, 12);lifeExpectancyPerYearBaseJPanel.add(lifeExpectancyPerYearButtonsJPanel, lifeExpectancyPerYearBasePanelConstraints);lifeExpectancyPerYearBasePanelConstraints.gridy = 1;lifeExpectancyPerYearBasePanelConstraints.insets = new Insets(6, 12, 6, 12);lifeExpectancyPerYearBaseJPanel.add(lifeExpectancyPerYearJPanel, lifeExpectancyPerYearBasePanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsPanelConstraints.insets = new Insets(12, 12, 12, 12);lifeExpectancyAtBirthOverLastFortyYearsJPanel.add(new LifeExpectancy1Panels(new Vector<String>(), 0), lifeExpectancyAtBirthOverLastFortyYearsPanelConstraints);lifeExpectancyPerYearPanelConstraints.insets = new Insets(12, 12, 12, 12);lifeExpectancyPerYearJPanel.add(new LifeExpectancy1Panels(new Vector<String>(), 0), lifeExpectancyPerYearPanelConstraints);treatmentEffectAnalysisTreatmentAddTimePointOkJButton.setActionCommand("treatmentEffectAnalysisTreatmentAddTimePointOkJButton");treatmentEffectAnalysisTreatmentAddTimePointOkJButton.addActionListener(this);treatmentEffectAnalysisTreatmentTimeUnitJButton.addActionListener(this);treatmentEffectAnalysisTreatmentTimeUnitJButton.setActionCommand("treatmentEffectAnalysisTreatmentTimeUnitJButton");effectCurveTreatmentTimePointHeaderJPanel.setOpaque(false);effectCurveTreatmentTimePointHeaderJPanel.add(effectCurveTreatmentTimePointHeaderJLabel, effectCurveTreatmentTimePointHeaderPanelConstraints);effectCurveTreatmentTimePointHeaderJPanel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));treatmentEffectAnalysisTreatmentNameJTextField.addActionListener(this);treatmentEffectAnalysisTreatmentNameJTextField.setActionCommand("treatmentEffectAnalysisTreatmentNameJTextField");treatmentEffectAnalysisTreatmentEffectValueJTextField.addActionListener(this);treatmentEffectAnalysisTreatmentEffectValueJTextField.setActionCommand("treatmentEffectAnalysisTreatmentEffectValueJTextField");treatmentEffectAnalysisTreatmentTimeUnitJTextField.addActionListener(this);treatmentEffectAnalysisTreatmentTimeUnitJTextField.setActionCommand("treatmentEffectAnalysisTreatmentTimeUnitJTextField");treatmentEffectAnalysisTreatmentTimeValueJTextField.addActionListener(this);treatmentEffectAnalysisTreatmentTimeValueJTextField.setActionCommand("treatmentEffectAnalysisTreatmentTimeValueJTextField");treatmentEffectAnalysisTreatmentPointEntryJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridy = 0;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 0;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridwidth = 5;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.weightx = 1;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(6, 6, 6, 6);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisTreatmentPointEntryJPanel.add(effectCurveTreatmentTimePointHeaderJPanel, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridy = 1;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridwidth = 1;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.weightx = 0;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 0);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.fill = GridBagConstraints.NONE;treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentNameJLabel, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 1;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentNameJTextField, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 2;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 6);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentEffectValueJLabel, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 3;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentEffectValueJTextField, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridy = 2;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 0;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 0);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentTimeValueJLabel, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 1;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentTimeValueJTextField, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 2;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 0);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentTimeUnitJButton, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 3;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentTimeUnitJTextField, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridy = 1;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridx = 4;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.gridheight = 2;treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 6);treatmentEffectAnalysisTreatmentPointEntryPanelConstraints.fill = GridBagConstraints.VERTICAL;treatmentEffectAnalysisTreatmentPointEntryJPanel.add(treatmentEffectAnalysisTreatmentAddTimePointOkJButton, treatmentEffectAnalysisTreatmentPointEntryPanelConstraints);effectCurveTreatmentPointsDisplayScrollPaneJPanel.setBackground(veryLightGrayColor);effectCurveTreatmentPointsDisplayPusherJPanel.setOpaque(false);effectCurveTreatmentPointsDisplayJPanel.setOpaque(false);effectCurveTreatmentPointsDisplayBasePanelConstraints.gridy = 0;effectCurveTreatmentPointsDisplayScrollPaneJPanel.add(effectCurveTreatmentPointsDisplayJPanel, effectCurveTreatmentPointsDisplayBasePanelConstraints);effectCurveTreatmentPointsDisplayBasePanelConstraints.gridy = 1;effectCurveTreatmentPointsDisplayScrollPaneJPanel.add(effectCurveTreatmentPointsDisplayPusherJPanel, effectCurveTreatmentPointsDisplayBasePanelConstraints);treatmentEffectAnalysisControlPointsPanelConstraints.gridy = 0;treatmentEffectAnalysisControlPointsPanelConstraints.weightx = 1;treatmentEffectAnalysisControlPointsPanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisTreatmentNameHeaderJPanel.add(treatmentEffectAnalysisTreatmentNameHeaderJLabel, treatmentEffectAnalysisTreatmentNameHeaderPanelConstraints);treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel.add(treatmentEffectAnalysisTreatmentEffectValueHeaderJLabel, treatmentEffectAnalysisTreatmentEffectValueHeaderPanelConstraints);treatmentEffectAnalysisTreatmentTimeHeaderJPanel.add(treatmentEffectAnalysisTreatmentTimeHeaderJLabel, treatmentEffectAnalysisTreatmentTimeHeaderPanelConstraints);treatmentEffectAnalysisTreatmentNameHeaderJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentTimeHeaderJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentNameHeaderJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentEffectAnalysisTreatmentTimeHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel.setPreferredSize(treatmentEffectCellPanelDimension);treatmentEffectAnalysisTreatmentTimeHeaderJPanel.setPreferredSize(treatmentTimeCellPanelDimension);treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel.setSize(treatmentEffectCellPanelDimension);treatmentEffectAnalysisTreatmentTimeHeaderJPanel.setSize(treatmentTimeCellPanelDimension);treatmentEffectAnalysisTreatmentPointHeaderJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.gridy = 0;treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.gridx = 0;treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.gridwidth = 3;treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.weightx = 1;treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisTreatmentPointHeaderJPanel.add(treatmentEffectAnalysisTreatmentNameHeaderJPanel, treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints);treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.gridy = 1;treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.gridwidth = 1;treatmentEffectAnalysisTreatmentPointHeaderJPanel.add(treatmentEffectAnalysisTreatmentEffectValueHeaderJPanel, treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints);treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints.gridx = 1;treatmentEffectAnalysisTreatmentPointHeaderJPanel.add(treatmentEffectAnalysisTreatmentTimeHeaderJPanel, treatmentEffectAnalysisTreatmentPointHeaderPanelConstraints);treatmentEffectAnalysisTreatmentPointsDisplayPanelConstraints.gridy = 0;treatmentEffectAnalysisTreatmentPointsDisplayPanelConstraints.insets = new Insets(6, 0, 0, 0);treatmentEffectAnalysisTreatmentPointsContentJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentPointsContentPanelConstraints.gridy = 0;treatmentEffectAnalysisTreatmentPointsContentJPanel.add(treatmentEffectAnalysisTreatmentPointsDisplayJPanel, treatmentEffectAnalysisTreatmentPointsContentPanelConstraints);treatmentEffectAnalysisTreatmentPointsContentPanelConstraints.gridy = 1;treatmentEffectAnalysisTreatmentPointsContentPanelConstraints.weighty = 1;treatmentEffectAnalysisTreatmentPointsContentPanelConstraints.fill = GridBagConstraints.VERTICAL;treatmentEffectAnalysisTreatmentPointsContentJPanel.add(treatmentEffectAnalysisTreatmentPointsDisplayPusherJPanel, treatmentEffectAnalysisTreatmentPointsContentPanelConstraints);treatmentEffectAnalysisTreatmentPointsPanelConstraints.gridy = 0;treatmentEffectAnalysisTreatmentPointsPanelConstraints.weightx = 1;treatmentEffectAnalysisTreatmentPointsPanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisTreatmentPointsJPanel.setBorder(new LineBorder(Color.BLACK, 1));treatmentEffectAnalysisTreatmentPointsJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentPointsPanelConstraints.gridy = 0;treatmentEffectAnalysisTreatmentPointsPanelConstraints.weightx = 1;treatmentEffectAnalysisTreatmentPointsPanelConstraints.fill = GridBagConstraints.BOTH;treatmentEffectAnalysisTreatmentPointsJPanel.add(treatmentEffectAnalysisTreatmentPointHeaderJPanel, treatmentEffectAnalysisTreatmentPointsPanelConstraints);treatmentEffectAnalysisTreatmentPointsPanelConstraints.gridy = 1;treatmentEffectAnalysisTreatmentPointsPanelConstraints.weighty = 1;treatmentEffectAnalysisTreatmentPointsJPanel.add(treatmentEffectAnalysisTreatmentPointsContentJPanel, treatmentEffectAnalysisTreatmentPointsPanelConstraints);treatmentEffectAnalysisTreatmentPointsPanelConstraints.insets = new Insets(0, 0, 6, 0);treatmentEffectAnalysisControlNameHeaderJPanel.setOpaque(false);treatmentEffectAnalysisControlEffectValueHeaderJPanel.setOpaque(false);treatmentEffectAnalysisControlTimeHeaderJPanel.setOpaque(false);treatmentEffectAnalysisControlNameHeaderJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentEffectAnalysisControlEffectValueHeaderJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentEffectAnalysisControlTimeHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentEffectAnalysisControlEffectValueHeaderJPanel.setPreferredSize(treatmentEffectCellPanelDimension);treatmentEffectAnalysisControlTimeHeaderJPanel.setPreferredSize(treatmentTimeCellPanelDimension);treatmentEffectAnalysisControlEffectValueHeaderJPanel.setSize(treatmentEffectCellPanelDimension);treatmentEffectAnalysisControlTimeHeaderJPanel.setSize(treatmentTimeCellPanelDimension);treatmentEffectAnalysisControlNameHeaderJPanel.add(treatmentEffectAnalysisControlNameHeaderJLabel, treatmentEffectAnalysisControlNameHeaderPanelConstraints);treatmentEffectAnalysisControlEffectValueHeaderJPanel.add(treatmentEffectAnalysisControlEffectValueHeaderJLabel, treatmentEffectAnalysisControlEffectValueHeaderPanelConstraints);treatmentEffectAnalysisControlTimeHeaderJPanel.add(treatmentEffectAnalysisControlTimeHeaderJLabel, treatmentEffectAnalysisControlTimeHeaderPanelConstraints);treatmentEffectAnalysisControlPointHeaderJPanel.setOpaque(false);treatmentEffectAnalysisControlPointHeaderPanelConstraints.gridy = 0;treatmentEffectAnalysisControlPointHeaderPanelConstraints.gridx = 0;treatmentEffectAnalysisControlPointHeaderPanelConstraints.gridwidth = 3;treatmentEffectAnalysisControlPointHeaderPanelConstraints.weightx = 1;treatmentEffectAnalysisControlPointHeaderPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisControlPointHeaderJPanel.add(treatmentEffectAnalysisControlNameHeaderJPanel, treatmentEffectAnalysisControlPointHeaderPanelConstraints);treatmentEffectAnalysisControlPointHeaderPanelConstraints.gridy = 1;treatmentEffectAnalysisControlPointHeaderPanelConstraints.gridwidth = 1;treatmentEffectAnalysisControlPointHeaderJPanel.add(treatmentEffectAnalysisControlEffectValueHeaderJPanel, treatmentEffectAnalysisControlPointHeaderPanelConstraints);treatmentEffectAnalysisControlPointHeaderPanelConstraints.gridx = 1;treatmentEffectAnalysisControlPointHeaderJPanel.add(treatmentEffectAnalysisControlTimeHeaderJPanel, treatmentEffectAnalysisControlPointHeaderPanelConstraints);treatmentEffectAnalysisControlAddTimePointOkJButton.setActionCommand("treatmentEffectAnalysisControlAddTimePointOkJButton");treatmentEffectAnalysisControlAddTimePointOkJButton.addActionListener(this);treatmentEffectAnalysisControlTimePointPromptJPanel.setOpaque(false);treatmentEffectAnalysisControlTimePointPromptJPanel.add(treatmentEffectAnalysisControlTimePointPromptJLabel, effectCurveControlTimePointPanelConstraints);treatmentEffectAnalysisControlTimePointPromptJPanel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));treatmentEffectAnalysisTreatmentPointsDisplayPusherJPanel.setOpaque(false);treatmentEffectAnalysisTreatmentPointsDisplayJPanel.setOpaque(false);treatmentEffectAnalysisControlPointsDisplayJPanel.setOpaque(false);treatmentEffectAnalysisControlPointsContentJPanel.setOpaque(false);treatmentEffectAnalysisControlPointsContentPanelConstraints.gridy = 0;treatmentEffectAnalysisControlPointsContentJPanel.add(treatmentEffectAnalysisControlPointsDisplayJPanel, treatmentEffectAnalysisControlPointsContentPanelConstraints);treatmentEffectAnalysisControlPointsContentPanelConstraints.gridy = 1;treatmentEffectAnalysisControlPointsContentPanelConstraints.weighty = 1;treatmentEffectAnalysisControlPointsContentPanelConstraints.fill = GridBagConstraints.VERTICAL;treatmentEffectAnalysisControlPointsContentJPanel.add(treatmentEffectAnalysisControlPointsDisplayPusherJPanel, treatmentEffectAnalysisControlPointsContentPanelConstraints);treatmentEffectAnalysisControlNameJTextField.addActionListener(this);treatmentEffectAnalysisControlNameJTextField.setActionCommand("treatmentEffectAnalysisControlNameJTextField");treatmentEffectAnalysisControlEffectValueJTextField.addActionListener(this);treatmentEffectAnalysisControlEffectValueJTextField.setActionCommand("treatmentEffectAnalysisControlEffectValueJTextField");treatmentEffectAnalysisControlTimeUnitJTextField.addActionListener(this);treatmentEffectAnalysisControlTimeUnitJTextField.setActionCommand("treatmentEffectAnalysisControlTimeUnitJTextField");treatmentEffectAnalysisControlTimeValueJTextField.addActionListener(this);treatmentEffectAnalysisControlTimeValueJTextField.setActionCommand("treatmentEffectAnalysisControlTimeValueJTextField");treatmentEffectAnalysisControlTimeUnitJButton.addActionListener(this);treatmentEffectAnalysisControlTimeUnitJButton.setActionCommand("treatmentEffectAnalysisControlTimeUnitJButton");treatmentEffectAnalysisControlPointsJPanel.setOpaque(false);treatmentEffectAnalysisControlPointsJPanel.setBorder(new LineBorder(Color.BLACK, 1));treatmentEffectAnalysisControlPointsJPanel.add(treatmentEffectAnalysisControlPointHeaderJPanel, treatmentEffectAnalysisControlPointsPanelConstraints);treatmentEffectAnalysisControlPointsPanelConstraints.gridy = 1;treatmentEffectAnalysisControlPointsPanelConstraints.weighty = 1;treatmentEffectAnalysisControlPointsJPanel.add(treatmentEffectAnalysisControlPointsContentJPanel, treatmentEffectAnalysisControlPointsPanelConstraints);treatmentEffectAnalysisControlPointsPanelConstraints.insets = new Insets(0, 0, 6, 0);treatmentEffectAnalysisControlPointEntryJPanel.setOpaque(false);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridy = 0;treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 0;treatmentEffectAnalysisControlPointEntryPanelConstraints.gridwidth = 5;treatmentEffectAnalysisControlPointEntryPanelConstraints.weightx = 1;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(6, 6, 6, 6);treatmentEffectAnalysisControlPointEntryPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlTimePointPromptJPanel, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridy = 1;treatmentEffectAnalysisControlPointEntryPanelConstraints.gridwidth = 1;treatmentEffectAnalysisControlPointEntryPanelConstraints.weightx = 0;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 0);treatmentEffectAnalysisControlPointEntryPanelConstraints.fill = GridBagConstraints.NONE;treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlNamePromptJLabel, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 1;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlNameJTextField, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 2;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 6);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlEffectValueJLabel, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 3;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlEffectValueJTextField, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridy = 2;treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 0;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 0);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlTimeValueJLabel, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 1;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlTimeValueJTextField, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 2;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 0);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlTimeUnitJButton, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 3;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 0, 4, 6);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlTimeUnitJTextField, treatmentEffectAnalysisControlPointEntryPanelConstraints);treatmentEffectAnalysisControlPointEntryPanelConstraints.gridy = 1;treatmentEffectAnalysisControlPointEntryPanelConstraints.gridx = 4;treatmentEffectAnalysisControlPointEntryPanelConstraints.gridheight = 2;treatmentEffectAnalysisControlPointEntryPanelConstraints.fill = GridBagConstraints.VERTICAL;treatmentEffectAnalysisControlPointEntryPanelConstraints.insets = new Insets(0, 6, 4, 6);treatmentEffectAnalysisControlPointEntryJPanel.add(treatmentEffectAnalysisControlAddTimePointOkJButton, treatmentEffectAnalysisControlPointEntryPanelConstraints);newTreatmentAnalysisHorizontalLineJLabel.setBorder(menuPanelPopupMenuBorder);newTreatmentAnalysisNameJTextField.setActionCommand("newTreatmentAnalysisNameJTextField");newTreatmentAnalysisNameJTextField.addActionListener(this);newTreatmentAnalysisOkJButton.setActionCommand("newTreatmentAnalysisOkJButton");newTreatmentAnalysisOkJButton.addActionListener(this);newTreatmentAnalysisHeaderJPanel.setOpaque(false);newTreatmentAnalysisHeaderJPanel.add(newTreatmentAnalysisHeaderJLabel, newTreatmentAnalysisHeaderPanelConstraints);newTreatmentAnalysisHeaderJPanel.setBorder(new MatteBorder(0, 0, 2, 0, Color.GRAY));openTreatmentAnalysisJTextField.setFont(SystemWindow.systemFont);newTreatmentAnalysisJPopupMenu.setPreferredSize(new Dimension(popupMenusScrollPaneSizeDimension.width, 100));newTreatmentAnalysisJPopupMenu.setBorder(menuPanelPopupMenuBorder);newTreatmentAnalysisJPopupMenu.setLayout(new GridBagLayout());newTreatmentAnalysisJPopupMenu.setBackground(Color.LIGHT_GRAY);newTreatmentAnalysisPopupMenuConstraints.gridy = 0;newTreatmentAnalysisPopupMenuConstraints.gridx = 0;newTreatmentAnalysisPopupMenuConstraints.insets = new Insets(6, 6, 3, 6);newTreatmentAnalysisPopupMenuConstraints.gridwidth = 2;newTreatmentAnalysisPopupMenuConstraints.fill = GridBagConstraints.BOTH;newTreatmentAnalysisJPopupMenu.add(newTreatmentAnalysisHeaderJPanel, newTreatmentAnalysisPopupMenuConstraints);newTreatmentAnalysisPopupMenuConstraints.gridy = 1;newTreatmentAnalysisPopupMenuConstraints.gridwidth = 1;newTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 16, 3, 0);newTreatmentAnalysisJPopupMenu.add(newTreatmentAnalysisNamePromptJLabel, newTreatmentAnalysisPopupMenuConstraints);newTreatmentAnalysisPopupMenuConstraints.gridx = 1;newTreatmentAnalysisPopupMenuConstraints.weightx = 1;newTreatmentAnalysisPopupMenuConstraints.fill = GridBagConstraints.BOTH;newTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 0, 3, 6);newTreatmentAnalysisJPopupMenu.add(newTreatmentAnalysisNameJTextField, newTreatmentAnalysisPopupMenuConstraints);newTreatmentAnalysisPopupMenuConstraints.gridy = 2;newTreatmentAnalysisPopupMenuConstraints.gridx = 0;newTreatmentAnalysisPopupMenuConstraints.gridwidth = 2;newTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 6, 3, 6);newTreatmentAnalysisJPopupMenu.add(newTreatmentAnalysisHorizontalLineJLabel, newTreatmentAnalysisPopupMenuConstraints);newTreatmentAnalysisPopupMenuConstraints.gridy = 3;newTreatmentAnalysisPopupMenuConstraints.insets = new Insets(3, 40, 6, 40);newTreatmentAnalysisJPopupMenu.add(newTreatmentAnalysisOkJButton, newTreatmentAnalysisPopupMenuConstraints);decisionAnalysisPanelConstraints.gridy = 0;decisionAnalysisPanelConstraints.fill = GridBagConstraints.HORIZONTAL;decisionAnalysisJPanel.add(decisionAnalysisBaseButtonsJPanel, decisionAnalysisPanelConstraints);decisionAnalysisPanelConstraints.gridy = 1;decisionAnalysisPanelConstraints.weightx = 1;decisionAnalysisPanelConstraints.weighty = 1;decisionAnalysisPanelConstraints.fill = GridBagConstraints.BOTH;decisionAnalysisJPanel.add(decisionAnalysisPanelCardedJPanel, decisionAnalysisPanelConstraints);decisionSupportMainJPanel.add(dSCoverJPanel, "dSCoverJPanel");decisionSupportMainJPanel.add(internetBrowserJPanel, "browseInternetJPanel");decisionSupportMainJPanel.add(dataQueryJPanel, "dataQueryJPanel");decisionSupportMainJPanel.add(statisticsPanelBaseJPanel, "statisticsPanelBaseJPanel");decisionSupportMainJPanel.add(decisionAnalysisJPanel, "decisionAnalysisJPanel");decisionSupportMainJPanel.add(rulesJPanel, "rulesJPanel");decisionSupportMainJPanel.add(MolecularAssemblerJPanel, "MolecularAssemblerJPanel");contentPanelConstraints.insets = new Insets(0, 0, 0, translucentPanelDividerSize);contentPanelConstraints.weighty = 1;contentPanelConstraints.fill = GridBagConstraints.VERTICAL;contentJPanel.add(mainButtonsJPanel, contentPanelConstraints);contentPanelConstraints.gridx = 1;contentPanelConstraints.insets = new Insets(0, 0, 0, 0);contentPanelConstraints.weighty = 1;contentPanelConstraints.weightx = 1;contentPanelConstraints.fill = GridBagConstraints.BOTH;contentJPanel.add(decisionSupportMainJPanel, contentPanelConstraints);pack();}public JPopupMenu createTreatmentEffectAnalysisTimeUnitPopupMenu(String treatmentOrControl) {JPopupMenu createTreatmentEffectAnalysisTimeUnitJPopupMenu = new JPopupMenu();JPanel treatmentEffectAnalysisTimeUnitPopupListJPanel = new JPanel(new GridBagLayout());JButton treatmentEffectAnalysisTimeSecondsJButton = new JButton(" seconds ");JButton treatmentEffectAnalysisTimeMinutesJButton = new JButton(" minutes ");JButton treatmentEffectAnalysisTimeHoursJButton = new JButton(" hours ");JButton treatmentEffectAnalysisTimeDaysJButton = new JButton(" days ");JButton treatmentEffectAnalysisTimeWeeksJButton = new JButton(" weeks ");JButton treatmentEffectAnalysisTimeMonthsJButton = new JButton(" months ");treatmentEffectAnalysisTimeSecondsJButton.setFont(SystemWindow.systemFont);treatmentEffectAnalysisTimeMinutesJButton.setFont(SystemWindow.systemFont);treatmentEffectAnalysisTimeHoursJButton.setFont(SystemWindow.systemFont);treatmentEffectAnalysisTimeDaysJButton.setFont(SystemWindow.systemFont);treatmentEffectAnalysisTimeWeeksJButton.setFont(SystemWindow.systemFont);treatmentEffectAnalysisTimeMonthsJButton.setFont(SystemWindow.systemFont);treatmentEffectAnalysisTimeSecondsJButton.setBackground(SystemWindow.buttonColor);treatmentEffectAnalysisTimeMinutesJButton.setBackground(SystemWindow.buttonColor);treatmentEffectAnalysisTimeHoursJButton.setBackground(SystemWindow.buttonColor);treatmentEffectAnalysisTimeDaysJButton.setBackground(SystemWindow.buttonColor);treatmentEffectAnalysisTimeWeeksJButton.setBackground(SystemWindow.buttonColor);treatmentEffectAnalysisTimeMonthsJButton.setBackground(SystemWindow.buttonColor);treatmentEffectAnalysisTimeSecondsJButton.addActionListener(this);treatmentEffectAnalysisTimeSecondsJButton.setActionCommand(treatmentOrControl);treatmentEffectAnalysisTimeSecondsJButton.setName(treatmentEffectAnalysisTimeSecondsJButton.getText());treatmentEffectAnalysisTimeMinutesJButton.addActionListener(this);treatmentEffectAnalysisTimeMinutesJButton.setActionCommand(treatmentOrControl);treatmentEffectAnalysisTimeMinutesJButton.setName(treatmentEffectAnalysisTimeMinutesJButton.getText());treatmentEffectAnalysisTimeHoursJButton.addActionListener(this);treatmentEffectAnalysisTimeHoursJButton.setActionCommand(treatmentOrControl);treatmentEffectAnalysisTimeHoursJButton.setName(treatmentEffectAnalysisTimeHoursJButton.getText());treatmentEffectAnalysisTimeDaysJButton.addActionListener(this);treatmentEffectAnalysisTimeDaysJButton.setActionCommand(treatmentOrControl);treatmentEffectAnalysisTimeDaysJButton.setName(treatmentEffectAnalysisTimeDaysJButton.getText());treatmentEffectAnalysisTimeWeeksJButton.addActionListener(this);treatmentEffectAnalysisTimeWeeksJButton.setActionCommand(treatmentOrControl);treatmentEffectAnalysisTimeWeeksJButton.setName(treatmentEffectAnalysisTimeWeeksJButton.getText());treatmentEffectAnalysisTimeMonthsJButton.addActionListener(this);treatmentEffectAnalysisTimeMonthsJButton.setActionCommand(treatmentOrControl);treatmentEffectAnalysisTimeMonthsJButton.setName(treatmentEffectAnalysisTimeMonthsJButton.getText());GridBagConstraints treatmentEffectAnalysisTimeUnitPopupListPanelConstraints = new GridBagConstraints();treatmentEffectAnalysisTimeUnitPopupListJPanel.setBackground(SystemWindow.quintessentialThemeColor);treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.fill = GridBagConstraints.HORIZONTAL;treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.insets = new Insets(4, 4, 0, 4);treatmentEffectAnalysisTimeUnitPopupListJPanel.add(treatmentEffectAnalysisTimeSecondsJButton, treatmentEffectAnalysisTimeUnitPopupListPanelConstraints);treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.gridy = 1;treatmentEffectAnalysisTimeUnitPopupListJPanel.add(treatmentEffectAnalysisTimeMinutesJButton, treatmentEffectAnalysisTimeUnitPopupListPanelConstraints);treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.gridy = 2;treatmentEffectAnalysisTimeUnitPopupListJPanel.add(treatmentEffectAnalysisTimeHoursJButton, treatmentEffectAnalysisTimeUnitPopupListPanelConstraints);treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.gridy = 3;treatmentEffectAnalysisTimeUnitPopupListJPanel.add(treatmentEffectAnalysisTimeDaysJButton, treatmentEffectAnalysisTimeUnitPopupListPanelConstraints);treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.gridy = 4;treatmentEffectAnalysisTimeUnitPopupListJPanel.add(treatmentEffectAnalysisTimeWeeksJButton, treatmentEffectAnalysisTimeUnitPopupListPanelConstraints);treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.gridy = 5;treatmentEffectAnalysisTimeUnitPopupListPanelConstraints.insets = new Insets(0, 4, 4, 4);treatmentEffectAnalysisTimeUnitPopupListJPanel.add(treatmentEffectAnalysisTimeMonthsJButton, treatmentEffectAnalysisTimeUnitPopupListPanelConstraints);createTreatmentEffectAnalysisTimeUnitJPopupMenu.add(treatmentEffectAnalysisTimeUnitPopupListJPanel);return createTreatmentEffectAnalysisTimeUnitJPopupMenu;}public Vector testVector() {Vector v = new Vector();v.add(new Vector());((Vector) (v.lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add("0." + "||*||10001||*||2||*||3");((Vector) (v.lastElement())).add(new Vector());v.add(new Vector());((Vector) (v.lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add("1." + "||*||10001||*||2||*||3");((Vector) (v.lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add("1.0." + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add("1.0.0." + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add("1.0.1." + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add("1.0.2" + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).lastElement())).add(new Vector());v.add(new Vector());((Vector) (v.lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add("2." + "||*||10001||*||2||*||3");((Vector) (v.lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add("2.0." + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add("2.1." + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (v.lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());((Vector) (((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).lastElement())).add("2.2." + "||*||10001||*||2||*||3");((Vector) (((Vector) (((Vector) (v.lastElement())).lastElement())).lastElement())).add(new Vector());return v;}public void actionPerformed(ActionEvent e) {if (e.getActionCommand().equals("Treatment")) {treatmentEffectAnalysisTreatmentTimeUnitJTextField.setText(((JButton) (e.getSource())).getName());treatmentEffectAnalysisTreatmentTimeUnitButtonJPopupMenu.setVisible(false);} else if (e.getActionCommand().equals("Control")) {treatmentEffectAnalysisControlTimeUnitJTextField.setText(((JButton) (e.getSource())).getName());treatmentEffectAnalysisControlTimeUnitButtonJPopupMenu.setVisible(false);} else if (e.getActionCommand().equals("treatmentEffectAnalysisTreatmentTimeUnitJButton")) {treatmentEffectAnalysisTreatmentTimeUnitButtonJPopupMenu.show(treatmentEffectAnalysisTreatmentTimeUnitJButton, 0, 0);} else if (e.getActionCommand().equals("treatmentEffectAnalysisControlTimeUnitJButton")) {treatmentEffectAnalysisControlTimeUnitButtonJPopupMenu.show(treatmentEffectAnalysisControlTimeUnitJButton, 0, 0);} else if (e.getActionCommand().equals("treatmentEffectAnalysisTreatmentNameJTextField")) {if (!treatmentEffectAnalysisTreatmentNameJTextField.equals("")) {treatmentEffectAnalysisTreatmentEffectValueJTextField.requestFocusInWindow();} else {addTalkbackText("Please enter a valid treatment name.", null, true);}} else if (e.getActionCommand().equals("treatmentEffectAnalysisTreatmentEffectValueJTextField")) {String putativeTalkbackText = "Please enter a treatment effect value.";boolean valideInt = false;if (!treatmentEffectAnalysisTreatmentEffectValueJTextField.equals("")) {try {int testInt = Integer.parseInt(treatmentEffectAnalysisTreatmentEffectValueJTextField.getText());valideInt = true;} catch (Exception exception) {putativeTalkbackText = "Please enter a valide treatment effect (number).";}}if (valideInt) {treatmentEffectAnalysisTreatmentTimeValueJTextField.requestFocusInWindow();} else {addTalkbackText(putativeTalkbackText, null, true);}} else if (e.getActionCommand().equals("treatmentEffectAnalysisTreatmentTimeValueJTextField")) {if (null == validateTreatmentEffectAnalysisTimeValue(treatmentEffectAnalysisTreatmentTimeValueJTextField.getText(), "treatment")) {treatmentEffectAnalysisTreatmentTimeUnitJTextField.requestFocusInWindow();} else {addTalkbackText("Please enter a valid time.", null, true);}} else if (e.getActionCommand().equals("treatmentEffectAnalysisControlTimeUnitJTextField")) {if (null == validateTreatmentEffectAnalysisTimeUnit(treatmentEffectAnalysisControlTimeUnitJTextField.getText(), "control")) {treatmentEffectAnalysisControlTimeValueJTextField.requestFocusInWindow();} else {addTalkbackText("Please select or enter a unit of time.", null, true);}if (e.getActionCommand().equals("treatmentEffectAnalysisControlNameJTextField")) {if (!treatmentEffectAnalysisControlNameJTextField.equals("")) {treatmentEffectAnalysisControlEffectValueJTextField.requestFocusInWindow();} else {addTalkbackText("Please enter a valid control name.", null, true);}}} else if (e.getActionCommand().equals("treatmentEffectAnalysisControlEffectValueJTextField")) {String putativeTalkbackText = "Please enter a control effect value.";boolean valideInt = false;if (!treatmentEffectAnalysisControlEffectValueJTextField.equals("")) {try {int testInt = Integer.parseInt(treatmentEffectAnalysisControlEffectValueJTextField.getText());valideInt = true;} catch (Exception exception) {putativeTalkbackText = "Please enter a valide control effect (number).";}}if (valideInt) {treatmentEffectAnalysisControlTimeValueJTextField.requestFocusInWindow();} else {addTalkbackText(putativeTalkbackText, null, true);}} else if (e.getActionCommand().equals("treatmentEffectAnalysisControlTimeValueJTextField")) {if (null == validateTreatmentEffectAnalysisTimeValue(treatmentEffectAnalysisControlTimeValueJTextField.getText(), "control")) {treatmentEffectAnalysisControlTimeUnitJTextField.requestFocusInWindow();} else {addTalkbackText("Please enter a valid time.", null, true);}} else if (e.getActionCommand().equals("treatmentEffectAnalysisControlTimeUnitJTextField")) {if (null == validateTreatmentEffectAnalysisTimeUnit(treatmentEffectAnalysisControlTimeUnitJTextField.getText(), "control")) {treatmentEffectAnalysisControlTimeValueJTextField.requestFocusInWindow();} else {addTalkbackText("Please select or enter a unit of time.", null, true);}} else if (e.getActionCommand().equals("costAnalysisTreatmentNameJTextField")) {if (!costAnalysisTreatmentNameJTextField.getText().equals("") && !costAnalysisTreatmentCostJTextField.getText().equals("") && !costAnalysisTreatmentEffectivenessJTextField.getText().equals("")) {addCostAnalysisGraphPoint();this.requestFocusInWindow();validate();repaint();} else {costAnalysisTreatmentCostJTextField.requestFocusInWindow();}} else if (e.getActionCommand().equals("costAnalysisTreatmentCostJTextField")) {if (!costAnalysisTreatmentNameJTextField.getText().equals("") && !costAnalysisTreatmentCostJTextField.getText().equals("") && !costAnalysisTreatmentEffectivenessJTextField.getText().equals("")) {addCostAnalysisGraphPoint();this.requestFocusInWindow();} else {costAnalysisTreatmentEffectivenessJTextField.requestFocusInWindow();}} else if (e.getActionCommand().equals("costAnalysisTreatmentEffectivenessJTextField")) {if (!costAnalysisTreatmentNameJTextField.getText().equals("") && !costAnalysisTreatmentCostJTextField.getText().equals("") && !costAnalysisTreatmentEffectivenessJTextField.getText().equals("")) {addCostAnalysisGraphPoint();this.requestFocusInWindow();} else {costAnalysisTreatmentNameJTextField.requestFocusInWindow();}} else if (e.getActionCommand().equals("analysisNameJButton")) {openTreatmentAnalysisJPopupMenu.setVisible(false);openCostAnalysis(((JButton) (e.getSource())).getName());} else if (e.getActionCommand().equals("promptToSaveTreatmentAnalysisNoJButton")) {if (costAnalysisJToggleButton.isSelected()) {closeTreatmentAnalysis("costAnalysis");} else if (treatmentEffectJToggleButton.isSelected()) {} else if (decisionModelsJToggleButton.isSelected()) {}promptToSaveTreatmentAnalysisJPopupMenu.setVisible(false);} else if (e.getActionCommand().equals("promptToSaveTreatmentAnalysisYesJButton")) {if (costAnalysisJToggleButton.isSelected()) {saveCostAnalysis(null, false);closeTreatmentAnalysis("costAnalysis");} else if (treatmentEffectJToggleButton.isSelected()) {} else if (decisionModelsJToggleButton.isSelected()) {}promptToSaveTreatmentAnalysisJPopupMenu.setVisible(false);} else if (e.getActionCommand().equals("showLifeExpectancyCurveJRadioButton")) {if (showLifeExpectancyCurveJRadioButton.isSelected()) {lifeExpectancyGraphPanel.setVisible(true);} else {lifeExpectancyGraphPanel.setVisible(false);}} else if (e.getActionCommand().equals("showMortalityCurveJRadioButton")) {if (showMortalityCurveJRadioButton.isSelected()) {mortalityGraphPanel.setVisible(true);} else {mortalityGraphPanel.setVisible(false);}} else if (e.getActionCommand().equals("queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton")) {queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(true);queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(false);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryChartsEntryCPT2009CodeTypeJToggleButton")) {queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(true);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton")) {queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(true);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(false);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton")) {queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(true);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(false);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton")) {queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(true);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(false);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton")) {queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(true);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(false);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryChartsEntryLOINCMedicalCodeTypeJToggleButton")) {queryChartsEntryLOINCMedicalCodeTypeJToggleButton.setSelected(true);queryChartsEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryCPT2009CodeTypeJToggleButton.setSelected(false);queryChartsEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);queryChartsEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("queryEverythingJToggleButton")) {queryEverythingJToggleButton.setSelected(true);querySystemWindowJToggleButton.setSelected(false);queryChartsWindowJToggleButton.setSelected(false);queryMessagingWindowJToggleButton.setSelected(false);queryDecisionSupportWindowJToggleButton.setSelected(false);queryPracticeAssistantWindowJToggleButton.setSelected(false);dataQueryInputCardedSubButtonsCardLayout.show(dataQueryInputCardedSubButtonsJPanel, "dataQueryInputCardedSubButtonsCoverJPanel");} else if (e.getActionCommand().equals("querySystemWindowJToggleButton")) {querySystemWindowJToggleButton.setSelected(true);queryEverythingJToggleButton.setSelected(false);queryChartsWindowJToggleButton.setSelected(false);queryMessagingWindowJToggleButton.setSelected(false);queryDecisionSupportWindowJToggleButton.setSelected(false);queryPracticeAssistantWindowJToggleButton.setSelected(false);dataQueryInputCardedSubButtonsCardLayout.show(dataQueryInputCardedSubButtonsJPanel, "dataQuerySystemSubButtonsJPanel");} else if (e.getActionCommand().equals("queryChartsWindowJToggleButton")) {queryChartsWindowJToggleButton.setSelected(true);queryEverythingJToggleButton.setSelected(false);querySystemWindowJToggleButton.setSelected(false);queryMessagingWindowJToggleButton.setSelected(false);queryDecisionSupportWindowJToggleButton.setSelected(false);queryPracticeAssistantWindowJToggleButton.setSelected(false);dataQueryInputCardedSubButtonsCardLayout.show(dataQueryInputCardedSubButtonsJPanel, "dataQueryChartsSubButtonsJPanel");} else if (e.getActionCommand().equals("queryMessagingWindowJToggleButton")) {queryMessagingWindowJToggleButton.setSelected(true);queryEverythingJToggleButton.setSelected(false);querySystemWindowJToggleButton.setSelected(false);queryChartsWindowJToggleButton.setSelected(false);queryDecisionSupportWindowJToggleButton.setSelected(false);queryPracticeAssistantWindowJToggleButton.setSelected(false);dataQueryInputCardedSubButtonsCardLayout.show(dataQueryInputCardedSubButtonsJPanel, "dataQueryMessagingSubButtonsJPanel");} else if (e.getActionCommand().equals("queryDecisionSupportWindowJToggleButton")) {queryDecisionSupportWindowJToggleButton.setSelected(true);queryEverythingJToggleButton.setSelected(false);querySystemWindowJToggleButton.setSelected(false);queryChartsWindowJToggleButton.setSelected(false);queryMessagingWindowJToggleButton.setSelected(false);queryPracticeAssistantWindowJToggleButton.setSelected(false);dataQueryInputCardedSubButtonsCardLayout.show(dataQueryInputCardedSubButtonsJPanel, "dataQueryDecisionSupportSubButtonsJPanel");} else if (e.getActionCommand().equals("queryPracticeAssistantWindowJToggleButton")) {queryPracticeAssistantWindowJToggleButton.setSelected(true);queryEverythingJToggleButton.setSelected(false);querySystemWindowJToggleButton.setSelected(false);queryChartsWindowJToggleButton.setSelected(false);queryDecisionSupportWindowJToggleButton.setSelected(false);queryMessagingWindowJToggleButton.setSelected(false);dataQueryInputCardedSubButtonsCardLayout.show(dataQueryInputCardedSubButtonsJPanel, "dataQueryPracticeAssistantSubButtonsJPanel");} else if (e.getActionCommand().equals("newTreatmentAnalysisOkJButton") || e.getActionCommand().equals("newTreatmentAnalysisNameJTextField")) {if (costAnalysisJToggleButton.isSelected()) {newCostAnalysis();} else if (treatmentEffectJToggleButton.isSelected()) {newTreatmentEffectAnalysis();} else if (decisionModelsJToggleButton.isSelected()) {}} else if (e.getActionCommand().equals("lifeExpectancyPerYearToggleButton")) {Vector<String> lifeTableNames = new Vector<String>();if (lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton.isSelected()) {lifeTableNames.add("non Hisp black fem");}if (lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton.isSelected()) {lifeTableNames.add("non Hisp black males");}if (lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton.isSelected()) {lifeTableNames.add("non Hisp white fem");}if (lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton.isSelected()) {lifeTableNames.add("non Hisp white males");}if (lifeExpectancyPerYearHispanicFemalesJToggleButton.isSelected()) {lifeTableNames.add("Hispanic females");}if (lifeExpectancyPerYearHispanicMalesJToggleButton.isSelected()) {lifeTableNames.add("Hispanic males");}if (lifeExpectancyPerYearBlackFemalesJToggleButton.isSelected()) {lifeTableNames.add("black females");}if (lifeExpectancyPerYearBlackMalesJToggleButton.isSelected()) {lifeTableNames.add("black males");}if (lifeExpectancyPerYearWhiteFemalesJToggleButton.isSelected()) {lifeTableNames.add("white females");}if (lifeExpectancyPerYearWhiteMalesJToggleButton.isSelected()) {lifeTableNames.add("white males");}lifeExpectancyPerYearJPanel.removeAll();lifeExpectancyPerYearJPanel.add(new LifeExpectancy1Panels(lifeTableNames, 0), lifeExpectancyPerYearPanelConstraints);lifeExpectancyPerYearPanelJPopupMenu.validate();lifeExpectancyPerYearPanelJPopupMenu.repaint();} else if (e.getActionCommand().equals("lifeExpectancyAtBirthOverLastFortyYearsSubcategoryToggleButton")) {Vector<String> lifeTableNames = new Vector<String>();if (lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears all races, both sexes");}if (lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears all races, females");}if (lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears all races, males");}if (lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears black females");}if (lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears black males");}if (lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears white females");}if (lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton.isSelected()) {lifeTableNames.add("lifeExpectancyAtBirthOverLastFortyYears white males");}lifeExpectancyAtBirthOverLastFortyYearsJPanel.removeAll();lifeExpectancyAtBirthOverLastFortyYearsPanelConstraints.gridx = 0;lifeExpectancyAtBirthOverLastFortyYearsJPanel.add(new LifeExpectancy1Panels(lifeTableNames, 0), lifeExpectancyAtBirthOverLastFortyYearsPanelConstraints);lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.validate();lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.repaint();} else if (e.getActionCommand().equals("newJButton")) {newTreatmentAnalysisJPopupMenu.setFont(SystemWindow.systemFont);newTreatmentAnalysisNameJTextField.setFont(SystemWindow.systemFont);newTreatmentAnalysisNameJTextField.setText("");newTreatmentAnalysisOkJButton.setBorder(SystemWindow.buttonBorder);newTreatmentAnalysisOkJButton.setBackground(SystemWindow.buttonColor);if (costAnalysisJToggleButton.isSelected()) {if (!costAnalysisScrollPaneJPanel.isVisible()) {newTreatmentAnalysisHeaderJLabel.setText("New Cost analysis: ");newTreatmentAnalysisOkJButton.setName("costAnalysis");newTreatmentAnalysisNameJTextField.setName("costAnalysis");newTreatmentAnalysisJPopupMenu.show(newTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {addTalkbackText("Please close the open cost analysis.", null, true);}} else if (treatmentEffectJToggleButton.isSelected()) {if (!treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {newTreatmentAnalysisHeaderJLabel.setText("New Treatement effect analysis: ");newTreatmentAnalysisOkJButton.setName("treatmentEffect");newTreatmentAnalysisNameJTextField.setName("treatmentEffect");newTreatmentAnalysisJPopupMenu.show(newTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {addTalkbackText("Please close the open treatment effect analysis before creating new.", null, true);}} else if (decisionModelsJToggleButton.isSelected()) {if (decisionModelsJPanel.isVisible()) {newTreatmentAnalysisHeaderJLabel.setText("New Decision model analysis: ");newTreatmentAnalysisOkJButton.setName("decisionModels");newTreatmentAnalysisNameJTextField.setName("decisionModels");newTreatmentAnalysisJPopupMenu.show(newTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {addTalkbackText("Please close the open decision model before creating new.", null, true);}} else {addTalkbackText("Please select an analysis type (click \"costAnalysis,\" \"Treatment effect,\" or \"decisionModels\").", null, true);}} else if (e.getActionCommand().equals("openJButton")) {openTreatmentAnalysisJPopupMenu.setFont(SystemWindow.systemFont);openTreatmentAnalysisOkJButton.setBorder(SystemWindow.buttonBorder);openTreatmentAnalysisOkJButton.setBackground(SystemWindow.buttonColor);if (costAnalysisJToggleButton.isSelected()) {if (costAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText("Please close the open cost analysis.", null, true);} else {openTreatmentAnalysisHeaderJLabel.setText("Open Cost-Analysis:");openTreatmentAnalysisOkJButton.setName("costAnalysis");Vector costAnalyses = ((Vector) (((Vector) (((Vector) (Access.individualUserData.elementAt(4))).elementAt(3))).elementAt(0)));fillOpenTreatmentAnalysisChoicesJPanel();openTreatmentAnalysisJPopupMenu.show(openTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);}} else if (treatmentEffectJToggleButton.isSelected()) {if (treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText("Please close the open treatment effect analysis.", null, true);} else {openTreatmentAnalysisHeaderJLabel.setText("Open treatment-effect analysis: ");openTreatmentAnalysisOkJButton.setName("treatmentEffect");fillOpenTreatmentAnalysisChoicesJPanel();openTreatmentAnalysisJPopupMenu.show(openTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);}} else if (decisionModelsJToggleButton.isSelected()) {if (decisionModelsJPanel.isVisible()) {addTalkbackText("Please close the open decision model analysis.", null, true);} else {openTreatmentAnalysisHeaderJLabel.setText("Open Plan-Model: ");openTreatmentAnalysisOkJButton.setName("decisionModels");fillOpenTreatmentAnalysisChoicesJPanel();openTreatmentAnalysisJPopupMenu.show(openTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);}}} else if (e.getActionCommand().equals("openTreatmentAnalysisOkJButton")) {if (costAnalysisJToggleButton.isSelected()) {openCostAnalysis(openTreatmentAnalysisJTextField.getText());} else if (treatmentEffectJToggleButton.isSelected()) {openTreatmentEffect(openTreatmentAnalysisJTextField.getText());} else if (decisionModelsJToggleButton.isSelected()) {}} else if (e.getActionCommand().equals("closeJButton")) {promptToSaveTreatmentAnalysisJPopupMenu.setFont(SystemWindow.systemFont);promptToSaveTreatmentAnalysisYesJButton.setBackground(SystemWindow.buttonColor);promptToSaveTreatmentAnalysisYesJButton.setBorder(SystemWindow.buttonBorder);promptToSaveTreatmentAnalysisNoJButton.setBackground(SystemWindow.buttonColor);promptToSaveTreatmentAnalysisNoJButton.setBorder(SystemWindow.buttonBorder);if (costAnalysisJToggleButton.isSelected()) {if (costAnalysisScrollPaneJPanel.isVisible()) {if (isCostAnalysisUnsaved) {promptToSaveTreatmentAnalysisHeader2JLabel.setText(costAnalysisNameJLabel.getText());addTalkbackText("Save changes to cost analysis, \"" + costAnalysisNameJLabel.getText() + ",\" before closing?", null, true);promptToSaveTreatmentAnalysisYesJButton.setName("costAnalysis");promptToSaveTreatmentAnalysisJPopupMenu.show(closeTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {closeTreatmentAnalysis("costAnalysis");addTalkbackText("Closed cost analysis, \"" + costAnalysisNameJLabel.getText() + ".\"", null, true);}} else {addTalkbackText("There is no open cost analysis to close.", null, true);}} else if (treatmentEffectJToggleButton.isSelected()) {if (treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {if (isTreatmentEffectUnsaved) {promptToSaveTreatmentAnalysisHeader2JLabel.setText(" name ");addTalkbackText("Save changes to " + treatmentEffectAnalysisHeaderPanelNameJLabel.getText() + " before closing?", null, true);promptToSaveTreatmentAnalysisYesJButton.setName("treatmentEffect");promptToSaveTreatmentAnalysisJPopupMenu.show(closeTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {closeTreatmentAnalysis("treatmentEffect");String closedName = treatmentEffectAnalysisHeaderPanelNameJLabel.getText();closedName = closedName.substring(0, 1).toLowerCase() + closedName.substring(1);addTalkbackText("Closed " + closedName, null, true);}} else {addTalkbackText("There is no open analysis to close.", null, true);}} else if (decisionModelsJToggleButton.isSelected()) {if (decisionModelsJPanel.isVisible()) {if (isDecisionModelUnsaved) {promptToSaveTreatmentAnalysisHeader2JLabel.setText(" name ");addTalkbackText("Save changes to " + decisionModelsNameJLabel.getText() + " before closing?", null, true);promptToSaveTreatmentAnalysisYesJButton.setName("decisionModels");promptToSaveTreatmentAnalysisJPopupMenu.show(closeTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {closeTreatmentAnalysis("decisionModels");addTalkbackText("Closed " + decisionModelsNameJLabel.getText(), null, true);}} else {addTalkbackText("There is no open analysis to close.", null, true);}} else {addTalkbackText("There is no open analysis to close.", null, true);}} else if (e.getActionCommand().equals("saveJButton")) {if (costAnalysisJToggleButton.isSelected()) {saveCostAnalysis(null, false);} else if (treatmentEffectJToggleButton.isSelected()) {} else if (decisionModelsJToggleButton.isSelected()) {}} else if (e.getActionCommand().equals("saveAsJButton")) {saveAsTreatmentAnalysisOkJButton.setBorder(SystemWindow.buttonBorder);saveAsTreatmentAnalysisOkJButton.setBackground(SystemWindow.buttonColor);saveAsTreatmentAnalysisJPopupMenu.setFont(SystemWindow.systemFont);if (costAnalysisJToggleButton.isSelected()) {if (costAnalysisScrollPaneJPanel.isVisible()) {saveAsTreatmentAnalysisHeaderJLabel.setText("Save Cost-Analysis as: ");saveAsTreatmentAnalysisJPopupMenu.show(saveAsTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {addTalkbackText("There is no open cost analysis to save as.", null, true);}} else if (treatmentEffectJToggleButton.isSelected()) {if (treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {saveAsTreatmentAnalysisHeaderJLabel.setText("Save Effect-Curve as: ");saveAsTreatmentAnalysisJPopupMenu.show(saveAsTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {addTalkbackText("There is no open treatment effect analysis to save.", null, true);}} else if (decisionModelsJToggleButton.isSelected()) {if (decisionModelsJPanel.isVisible()) {saveAsTreatmentAnalysisHeaderJLabel.setText("Save Plan-Model as: ");saveAsTreatmentAnalysisJPopupMenu.show(saveAsTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);} else {addTalkbackText("There is no open decision model to save.", null, true);}}} else if (e.getActionCommand().equals("sendJButton")) {if (costAnalysisScrollPaneJPanel.isVisible()) {} else {addTalkbackText("There is no open cost analysis to send.", null, true);}} else if (e.getActionCommand().equals("printJButton")) {if (costAnalysisScrollPaneJPanel.isVisible()) {} else {addTalkbackText("There is no open cost analysis to print.", null, true);}} else if (e.getActionCommand().equals("saveAsTreatmentAnalysisOkJButton")) {saveTreatmentAnalysis(saveAsTreatmentAnalysisNamePromptJLabel.getText(), qualityAdjustedLifeYearsYesJToggleButton.isSelected(), true);} else if (e.getActionCommand().equals("qualityAdjustedLifeYearsYesJToggleButton")) {setCostAnalysisQALY(true);} else if (e.getActionCommand().equals("qualityAdjustedLifeYearsAutoRankJToggleButton")) {autoRankCostAnalysis();} else if (e.getActionCommand().equals("costAnalysisOkJButton")) {addCostAnalysisGraphPoint();} else if (e.getActionCommand().equals("treatmentEffectAnalysisTreatmentAddTimePointOkJButton")) {addTreatmentEffectAnalysisTreatmentPoint();} else if (e.getActionCommand().equals("treatmentEffectAnalysisControlAddTimePointOkJButton")) {addTreatmentEffectAnalysisControlPoint();} else if (e.getActionCommand().equals("costAnalysisJToggleButton")) {costAnalysisJToggleButton.setSelected(true);treatmentEffectJToggleButton.setSelected(false);decisionModelsJToggleButton.setSelected(false);lifeExpectancyJToggleButton.setSelected(false);treatmentEffectAnalysisTreatmentPointsX.clear();treatmentEffectAnalysisTreatmentPointsY.clear();treatmentEffectAnalysisControlPointsX.clear();treatmentEffectAnalysisControlPointsY.clear();decisionAnalysisPanelCardedPanelCardLayout.show(decisionAnalysisPanelCardedJPanel, "costAnalysisScrollPaneBaseJPanel");newTreatmentAnalysisJButton.setEnabled(true);openTreatmentAnalysisJButton.setEnabled(true);closeTreatmentAnalysisJButton.setEnabled(true);saveTreatmentAnalysisJButton.setEnabled(true);saveAsTreatmentAnalysisJButton.setEnabled(true);if (costAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText(costAnalysisNameJLabel.getText() + ":", null, true);} else {addTalkbackText("Open or create a new cost analysis.", null, true);}} else if (e.getActionCommand().equals("treatmentEffectJToggleButton")) {treatmentEffectJToggleButton.setSelected(true);costAnalysisJToggleButton.setSelected(false);decisionModelsJToggleButton.setSelected(false);lifeExpectancyJToggleButton.setSelected(false);treatmentEffectAnalysisTreatmentPointsX.clear();treatmentEffectAnalysisTreatmentPointsY.clear();treatmentEffectAnalysisControlPointsX.clear();treatmentEffectAnalysisControlPointsY.clear();decisionAnalysisPanelCardedPanelCardLayout.show(decisionAnalysisPanelCardedJPanel, "treatmentEffectAnalysisScrollPaneBaseJPanel");newTreatmentAnalysisJButton.setEnabled(true);openTreatmentAnalysisJButton.setEnabled(true);closeTreatmentAnalysisJButton.setEnabled(true);saveTreatmentAnalysisJButton.setEnabled(true);saveAsTreatmentAnalysisJButton.setEnabled(true);addTalkbackText("Open or create a new treatment effect analysis.", null, true);} else if (e.getActionCommand().equals("decisionModelsJToggleButton")) {decisionModelsJToggleButton.setSelected(true);treatmentEffectJToggleButton.setSelected(false);costAnalysisJToggleButton.setSelected(false);lifeExpectancyJToggleButton.setSelected(false);treatmentEffectAnalysisTreatmentPointsX.clear();treatmentEffectAnalysisTreatmentPointsY.clear();treatmentEffectAnalysisControlPointsX.clear();treatmentEffectAnalysisControlPointsY.clear();decisionAnalysisPanelCardedPanelCardLayout.show(decisionAnalysisPanelCardedJPanel, "decisionModelsBaseJPanel");newTreatmentAnalysisJButton.setEnabled(true);openTreatmentAnalysisJButton.setEnabled(true);closeTreatmentAnalysisJButton.setEnabled(true);saveTreatmentAnalysisJButton.setEnabled(true);saveAsTreatmentAnalysisJButton.setEnabled(true);addTalkbackText("Open or create a new decision model.", null, true);} else if (e.getActionCommand().equals("lifeExpectancyJToggleButton")) {lifeExpectancyJToggleButton.setSelected(true);costAnalysisJToggleButton.setSelected(false);treatmentEffectJToggleButton.setSelected(false);decisionModelsJToggleButton.setSelected(false);newTreatmentAnalysisJButton.setEnabled(false);openTreatmentAnalysisJButton.setEnabled(false);closeTreatmentAnalysisJButton.setEnabled(false);saveTreatmentAnalysisJButton.setEnabled(false);saveAsTreatmentAnalysisJButton.setEnabled(false);if (ChartingWindow.chartIsOpen) {createLifeExpectancyPanel();} else {addTalkbackText("Open a chart to calculate life expectancy.", null, true);}decisionAnalysisPanelCardedPanelCardLayout.show(decisionAnalysisPanelCardedJPanel, "lifeExpectancyPaperBasePanelScrollPaneBaseJPanel");} else if (e.getActionCommand().equals("includeAverageIncreasePerYearJToggleButton")) {factorReductionOfMortalitiesWithTalkback();} else if (e.getActionCommand().endsWith("InfallibilityFactorJTextField") || e.getActionCommand().contains("ProceduralCompletenessFactorJTextField")) {if (!(((JTextField) (e.getSource())).getText().equals("")) && isValidTreatmentFactorWithTalkback((JTextField) (e.getSource()))) {factorReductionOfMortalitiesWithTalkback();}} else if (e.getActionCommand().equals("actuarialLifeExpectancyJToggleButton")) {actuarialLifeExpectancyJToggleButton.setSelected(true);optimizedLifeExpectancyJToggleButton.setSelected(false);lifeExpectancyPaperBasePanelScrollPaneBaseJPanel.remove(optimizedLifeExpectancyButtonsJPanel);lifeExpectancyPaperBasePanelScrollPaneBaseJPanel.remove(optimizedLifeExpectancyTextFieldsJPanel);newTreatmentAnalysisJButton.setEnabled(false);openTreatmentAnalysisJButton.setEnabled(false);closeTreatmentAnalysisJButton.setEnabled(false);saveTreatmentAnalysisJButton.setEnabled(false);saveAsTreatmentAnalysisJButton.setEnabled(false);validate();repaint();lifeExpectancyContentCardedPanelCardLayout.show(lifeExpectancyContentCardedJPanel, "actuarialLifeExpectancyPaperBaseJPanel");addTalkbackText("Decision Support - Treatment analysis - Actuarial life expectancy", null, false);} else if (e.getActionCommand().equals("optimizedLifeExpectancyJToggleButton")) {optimizedLifeExpectancyJToggleButton.setSelected(true);actuarialLifeExpectancyJToggleButton.setSelected(false);lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints.gridy = 1;lifeExpectancyPaperBasePanelScrollPaneBaseJPanel.add(optimizedLifeExpectancyButtonsJPanel, lifeExpectancyPaperBasePanelScrollPaneBasePanelConstraints);newTreatmentAnalysisJButton.setEnabled(true);openTreatmentAnalysisJButton.setEnabled(true);closeTreatmentAnalysisJButton.setEnabled(true);saveTreatmentAnalysisJButton.setEnabled(true);saveAsTreatmentAnalysisJButton.setEnabled(true);factorReductionOfMortalitiesWithTalkback();validate();repaint();lifeExpectancyContentCardedPanelCardLayout.show(lifeExpectancyContentCardedJPanel, "optimizedLifeExpectancyPaperBaseJPanel");addTalkbackText("Decision Support - Treatment analysis - Optimized life expectancy", null, false);} else if (e.getActionCommand().equals("decisionModelOutcomesJToggleButton")) {decisionModelOutcomesJPopupMenu.show(this, 0, 80);} else if (e.getActionCommand().equals("lifeExpectancyAtBirthOverLastFortyYearsJButton")) {lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyAtBirthOverLastFortyYearsBothSexesAllRacesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsFemalesAllRacesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsMalesAllRacesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsBlackFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsBlackMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsWhiteFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsWhiteMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.validate();lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.repaint();lifeExpectancyAtBirthOverLastFortyYearsJPopupMenu.show(Device.device.workspace, 120, 40);} else if (e.getActionCommand().equals("lifeExpectancyPerYearJButton")) {lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearHispanicFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearHispanicMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearBlackFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearBlackMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearWhiteFemalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearWhiteMalesJToggleButton.setBorder(SystemWindow.buttonBorder);lifeExpectancyPerYearNonHispanicBlackFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearNonHispanicBlackMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearNonHispanicWhiteFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearNonHispanicWhiteMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearHispanicFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearHispanicMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearBlackFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearBlackMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearWhiteFemalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearWhiteMalesJToggleButton.setBackground(SystemWindow.buttonColor);lifeExpectancyPerYearPanelJPopupMenu.validate();lifeExpectancyPerYearPanelJPopupMenu.repaint();lifeExpectancyPerYearPanelJPopupMenu.show(Device.device.workspace, Device.halfScreenWidth, 40);} else if (e.getActionCommand().equals("decisionAnalysisJButton")) {internetBrowserJButton.setBackground(SystemWindow.buttonColor);dataQueryJButton.setBackground(SystemWindow.buttonColor);statisticsJButton.setBackground(SystemWindow.buttonColor);rulesJButton.setBackground(SystemWindow.buttonColor);MolecularAssemblerJButton.setBackground(SystemWindow.buttonColor);treatmentAnalysisJButton.setBackground(Color.LIGHT_GRAY);decisionSupportMainPanelCardLayout.show(decisionSupportMainJPanel, "decisionAnalysisJPanel");addTalkbackText("Decision Support - Treatment analysis", null, false);validate();repaint();} else if (e.getActionCommand().equals("componentJButton")) {createStatisticsMedicalCodeEntry(null, codeSetRecordPlusHeaderVector, ((JButton) (e.getSource())).getName());promptForComponentOrSubComponentsPanelJPopupMenu.setVisible(false);} else if (e.getActionCommand().equals("statisticsAddMedicalCodeGroupSaveJButton") || e.getActionCommand().equals("statisticsAddMedicalCodeGroupOkJTextField")) {String newGroupName = statisticsAddMedicalCodeGroupOkJTextField.getText();boolean groupNameAlreadyExists = false;int medicalCodeButtonInd = 0;int inder = 0;System.out.println("size should be zero: " + ((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).size());while (inder < ((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).size()) {if (((String) (((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).elementAt(inder).elementAt(0))).equals(newGroupName)) {groupNameAlreadyExists = true;}inder++;}if (!groupNameAlreadyExists && statisticsMedicalCodeBaseJPanel.getComponentCount() != 0) {((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).add(new Vector<Object>());((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).lastElement().add(newGroupName);String name = statisticsMedicalCodeBaseJPanel.getComponent(medicalCodeButtonInd).getName();int ind1 = name.indexOf("|");String nameParse1 = name.substring(ind1 + 1);int ind2 = nameParse1.indexOf("|");String nameParse2 = nameParse1.substring(ind2 + 1);int ind3 = nameParse2.indexOf("|");String nameParse3 = nameParse2.substring(ind3 + 1);int ind4 = nameParse3.indexOf("|");String nameParse4 = nameParse3.substring(ind4 + 1);String buttonIdentifier = name.substring(0, name.indexOf("|"));String pCodeSetIdentifier = nameParse1.substring(0, nameParse1.indexOf("|"));String codeElementNumber = nameParse2.substring(0, nameParse2.indexOf("|"));String subComponentNumber = nameParse3;String subSubComponentNumber = nameParse4;while (medicalCodeButtonInd < statisticsMedicalCodeBaseJPanel.getComponentCount()) {((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).lastElement().add(codeSetIdentifier + "|" + codeElementNumber);medicalCodeButtonInd = medicalCodeButtonInd + 2;}} else {addTalkbackText("Add medical codes above before creating a group.", null, true);}medicalCodeButtonInd = 0;int innerInd = 0;while (medicalCodeButtonInd < ((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).size()) {System.out.println("New group " + medicalCodeButtonInd + ":");innerInd = 1;while (innerInd < ((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).elementAt(medicalCodeButtonInd).size()) {String g = ((String) (((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).elementAt(medicalCodeButtonInd).elementAt(innerInd)));System.out.println("   group member: " + g);innerInd++;}medicalCodeButtonInd++;}JButton statisticsMedicalCodeGroupJButton = new JButton(((String) (((Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0))).lastElement().elementAt(0))));statisticsMedicalCodeGroupJButton.addActionListener(this);statisticsMedicalCodeGroupJButton.setActionCommand("");statisticsMedicalCodeGroupJButton.setBackground(SystemWindow.buttonColor);statisticsMedicalCodeGroupJButton.setBorder(SystemWindow.buttonBorder);statisticsMedicalCodeGroupsPanelConstraints.gridy++;statisticsMedicalCodeGroupsJPanel.add(statisticsMedicalCodeGroupJButton, statisticsMedicalCodeGroupsPanelConstraints);validate();repaint();} else if (e.getActionCommand().equals("statisticsAddPatientChartGroupSaveJButton")) {} else if (e.getActionCommand().equals("statisticsAddTimeRangeGroupSaveJButton")) {} else if (e.getActionCommand().equals("statisticsTimeRangeToDayOfMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "DAY_OF_MONTH_FIELD", statisticsTimeRangeToDayOfMonthJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeToMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "MONTH_FIELD", statisticsTimeRangeToMonthJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeToYearJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "YEAR_FIELD", statisticsTimeRangeToYearJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeToHourJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "HOUR_FIELD", statisticsTimeRangeToHourJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeToMinuteJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "MINUTE_FIELD", statisticsTimeRangeToMinuteJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeToAmPmJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "AM_PM_FIELD", statisticsTimeRangeToAmPmJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeFromDayOfMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "DAY_OF_MONTH_FIELD", statisticsTimeRangeFromDayOfMonthJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeFromMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "MONTH_FIELD", statisticsTimeRangeFromMonthJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeFromYearJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "YEAR_FIELD", statisticsTimeRangeFromYearJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeFromHourJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "HOUR_FIELD", statisticsTimeRangeFromHourJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeFromMinuteJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "MINUTE_FIELD", statisticsTimeRangeFromMinuteJTextField.getText());} else if (e.getActionCommand().equals("statisticsTimeRangeFromAmPmJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "AM_PM_FIELD", statisticsTimeRangeFromAmPmJTextField.getText());} else if (e.getActionCommand().equals("statisticsPatientChartIDJTextField") || e.getActionCommand().equals("statisticsCreatePatientChartEntryOkJButton")) {createStatisticsPatientChartEntry();} else if (e.getActionCommand().equals("statisticsPatientNamePrefixJTextField")) {createStatisticsPatientChartEntry();} else if (e.getActionCommand().equals("statisticsPatientNameMiddleInitialOrNameJTextField")) {createStatisticsPatientChartEntry();} else if (e.getActionCommand().equals("statisticsPatientNameLastNamePrefixJTextField")) {createStatisticsPatientChartEntry();} else if (e.getActionCommand().equals("statisticsPatientNameGivenNameJTextField")) {createStatisticsPatientChartEntry();} else if (e.getActionCommand().equals("statisticsPatientNameFamilyNameJTextField")) {createStatisticsPatientChartEntry();} else if (e.getActionCommand().equals("statisticsCreateMedicalCodeEntryOkJButton") || e.getActionCommand().equals("statisticsMedicalCodeJTextField")) {codeSetRecordPlusHeaderVector = null;createStatisticsMedicalCodeEntry(statisticsMedicalCodeJTextField.getText(), null, null);} else if (e.getActionCommand().equals("statisticsMedicalCodeEntryDeleteJButton")) {String deleteButtonName = ((JButton) (e.getSource())).getName();int ind = 0;while (ind < statisticsMedicalCodeBaseJPanel.getComponentCount()) {if (statisticsMedicalCodeBaseJPanel.getComponent(ind).getName().equals(deleteButtonName)) {statisticsMedicalCodeBaseJPanel.remove(ind);ind--;}ind++;}} else if (e.getActionCommand().equals("statisticsTimeRangeEntryDeleteJButton")) {String deleteButtonName = ((JButton) (e.getSource())).getName();int ind = 0;while (ind < statisticsTimeRangeBaseJPanel.getComponentCount()) {if (statisticsTimeRangeBaseJPanel.getComponent(ind).getName().equals(deleteButtonName)) {statisticsTimeRangeBaseJPanel.remove(ind);ind--;}ind++;}} else if (e.getActionCommand().equals("statisticsPatientChartEntryDeleteJButton")) {String deleteButtonName = ((JButton) (e.getSource())).getName();int ind = 0;while (ind < statisticsPatientChartBaseJPanel.getComponentCount()) {if (statisticsPatientChartBaseJPanel.getComponent(ind).getName().equals(deleteButtonName)) {statisticsPatientChartBaseJPanel.remove(ind);ind--;}ind++;}} else if (e.getActionCommand().equals("statisticsCreateTimeRangeEntryOkJButton")) {createStatisticsTimeRangeEntry();} else if (e.getActionCommand().equals("statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton")) {codeSetIdentifier = "HL7_2.3.1";statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryCPT2009CodeTypeJToggleButton.setSelected(false);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("statisticsDataEntryCPT2009MedicalCodeTypeJToggleButton")) {codeSetIdentifier = "CPT2009";statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton")) {codeSetIdentifier = "RXNCONSO09072010";statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryCPT2009CodeTypeJToggleButton.setSelected(false);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton")) {codeSetIdentifier = "ICD10";statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryCPT2009CodeTypeJToggleButton.setSelected(false);statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton")) {codeSetIdentifier = "HCPCS1Blah";statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryCPT2009CodeTypeJToggleButton.setSelected(false);statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton")) {codeSetIdentifier = "HCPCS2Blah";statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryCPT2009CodeTypeJToggleButton.setSelected(false);statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryLOINCMedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("statisticsDataEntryLOINCMedicalCodeTypeJToggleButton")) {codeSetIdentifier = "LOINC2.32";statisticsDataEntryHL7Hyphen2Point3MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryCPT2009CodeTypeJToggleButton.setSelected(false);statisticsDataEntryRXNCONSO09072010MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryICDHyphen10MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS1MedicalCodeTypeJToggleButton.setSelected(false);statisticsDataEntryHCPCS2MedicalCodeTypeJToggleButton.setSelected(false);} else if (e.getActionCommand().equals("networkStructureJButton")) {openMolecularAssembler(Integer.valueOf(((JButton) (e.getSource())).getName()));fileChooserOnMolecularAssemblerPanelCardLayout.show(fileChooserOnMolecularAssemblerPanel, "MolecularAssemblerResultsSplitPane");} else if (e.getActionCommand().equals("statisticsJToggleButton")) {statisticsFromCalendar = Calendar.getInstance();statisticsToCalendar = Calendar.getInstance();fillStatisticsGroupsScrollPane("MEDICAL_CODE_GROUPS");fillStatisticsGroupsScrollPane("PATIENT_CHART_GROUPS");fillStatisticsGroupsScrollPane("TIME_RANGE_GROUPS");statisticsDataDisplayPanelConstraints.gridx = 0;statisticsDataDisplayPanelConstraints.weighty = 1;statisticsDataDisplayPanelConstraints.weightx = 1;statisticsDataDisplayPanelConstraints.fill = GridBagConstraints.BOTH;statisticsDataDisplayJPanel.add(statisticsMedicalCodeBasePanelJScrollPane, statisticsDataDisplayPanelConstraints);statisticsDataDisplayPanelConstraints.gridx = 1;statisticsDataDisplayJPanel.add(statisticsTimeRangeBasePanelJScrollPane, statisticsDataDisplayPanelConstraints);statisticsDataDisplayPanelConstraints.gridx = 2;statisticsDataDisplayJPanel.add(statisticsPatientChartBasePanelJScrollPane, statisticsDataDisplayPanelConstraints);statisticsDataDisplayJPanel.validate();statisticsDataDisplayJPanel.repaint();validate();repaint();statisticsPanelCardLayout.show(statisticsPanelContentCardedJPanel, "statisticsDataEntryAndOutputAndDistributionsJPanel");} else if (e.getActionCommand().equals("statisticsMeanAverageJButton")) {statisticsOutput("statisticsMeanAverageJButton");} else if (e.getActionCommand().equals("statisticsMedianAverageJButton")) {statisticsOutput("statisticsMedianAverageJButton");} else if (e.getActionCommand().equals("statisticsDataEntryJButton")) {statisticsMedicalCodeEntryBasePanelConstraints.gridy = 1;statisticsMedicalCodeEntryBasePanelConstraints.weighty = 0.5;statisticsMedicalCodeEntryBasePanelConstraints.weightx = 1;statisticsMedicalCodeEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsMedicalCodeEntryBaseJPanel.add(statisticsMedicalCodeBasePanelJScrollPane, statisticsMedicalCodeEntryBasePanelConstraints);statisticsTimeRangeEntryBasePanelConstraints.gridy = 1;statisticsTimeRangeEntryBasePanelConstraints.weighty = 0.5;statisticsTimeRangeEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsTimeRangeEntryBasePanelConstraints.insets = new Insets(2, 4, 2, 2);statisticsTimeRangeEntryBaseJPanel.add(statisticsTimeRangeBasePanelJScrollPane, statisticsTimeRangeEntryBasePanelConstraints);statisticsPatientChartEntryBasePanelConstraints.gridy = 1;statisticsPatientChartEntryBasePanelConstraints.weighty = 0.5;statisticsPatientChartEntryBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsPatientChartEntryBasePanelConstraints.insets = new Insets(2, 4, 2, 2);statisticsPatientChartEntryBaseJPanel.add(statisticsPatientChartBasePanelJScrollPane, statisticsPatientChartEntryBasePanelConstraints);statisticsPanelCardLayout.show(statisticsPanelContentCardedJPanel, "statisticsDataEntryJPanel");} else if (e.getActionCommand().equals("MolecularAssemblerNetworkNumberJTextField")) {try {int MolecularAssemblerNetworkTextFieldNumber = Integer.parseInt(MolecularAssemblerNetworkNumberJTextField.getText());cycleClinicalTrialsShowAllJToggleButton.setSelected(false);if (MolecularAssemblerNetworkTextFieldNumber <= MolecularAssembler.tertiaryNetworksPolyLinePointsX.size() && MolecularAssemblerNetworkTextFieldNumber > 0) {cycleTherapeuticTargetsParameterString = "ONE";molecularNetworksPanel.userSelectedTertiaryNetworkNumber = MolecularAssemblerNetworkTextFieldNumber - 1;setViewPositionOnBiomoietyNetworksPanel();} else {addTalkbackText("Network number " + MolecularAssemblerNetworkTextFieldNumber + " does not exist.", null, true);}} catch (Exception er) {addTalkbackText("Please enter a valid network number.", null, true);}} else if (e.getActionCommand().equals("cycleClinicalTrialsUpJButton")) {cycleClinicalTrialsShowAllJToggleButton.setSelected(false);int numTertiaryNetworks = MolecularAssembler.tertiaryNetworksPolyLinePointsX.size() - 1;if (molecularNetworksPanel.userSelectedTertiaryNetworkNumber < numTertiaryNetworks) {molecularNetworksPanel.userSelectedTertiaryNetworkNumber++;cycleTherapeuticTargetsParameterString = "ONE";MolecularAssemblerNetworkNumberJTextField.setText(String.valueOf(molecularNetworksPanel.userSelectedTertiaryNetworkNumber));setViewPositionOnBiomoietyNetworksPanel();}} else if (e.getActionCommand().equals("cycleClinicalTrialsDownJButton")) {cycleClinicalTrialsShowAllJToggleButton.setSelected(false);if (molecularNetworksPanel.userSelectedTertiaryNetworkNumber > 0) {molecularNetworksPanel.userSelectedTertiaryNetworkNumber--;cycleTherapeuticTargetsParameterString = "ONE";MolecularAssemblerNetworkNumberJTextField.setText(String.valueOf(molecularNetworksPanel.userSelectedTertiaryNetworkNumber));setViewPositionOnBiomoietyNetworksPanel();}} else if (e.getActionCommand().equals("cycleClinicalTrialsShowAllJToggleButton")) {if (cycleClinicalTrialsShowAllJToggleButton.isSelected()) {if (molecularNetworksPanel.userSelectedTertiaryNetworkNumber == 0) {cycleClinicalTrialsShowAllJToggleButton.setSelected(false);MolecularAssemblerNetworkNumberJTextField.setText("None");} else {cycleTherapeuticTargetsParameterString = "ALL";MolecularAssemblerNetworkNumberJTextField.setText("All (" + (MolecularAssembler.tertiaryNetworksPolyLinePointsX.size() - 1) + ")");molecularNetworksPanel.repaint();}} else {cycleTherapeuticTargetsParameterString = "NONE";MolecularAssemblerNetworkNumberJTextField.setText("None");molecularNetworksPanel.repaint();}} else if (e.getActionCommand().equals("findQueryAssociatedMolecularNetworksJToggleButton")) {final String MolecularAssemblerQueryJTextAreaText = MolecularAssemblerQueryJTextArea.getText();pMolecularAssemblerQueryJTextAreaText = MolecularAssemblerQueryJTextAreaText;setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));MolecularAssembler.calculateSecondaryNetworks = false;cycleTherapeuticTargetsParameterString = "NONE";biomoietyNetworksPanelBaseJPanel.remove(molecularNetworksPanel);molecularNetworksPanel = new MolecularNetworksPanel();biomoietyNetworksPanelBaseJPanel.add(molecularNetworksPanel, biomoietyNetworksPanelBasePanelConstraints);biomoietyNetworksRadarPanel.getGraphics().clearRect(0, 0, biomoietyNetworksRadarPanel.getWidth(), biomoietyNetworksRadarPanel.getHeight());biomoietyNetworksJScrollPane.paintImmediately(0, 0, biomoietyNetworksJScrollPane.getWidth(), biomoietyNetworksJScrollPane.getHeight());MolecularAssemblerResultsMainBiomoietyNetworksJPanel.paintImmediately(0, 0, MolecularAssemblerResultsMainBiomoietyNetworksJPanel.getWidth(), MolecularAssemblerResultsMainBiomoietyNetworksJPanel.getHeight());if (!MolecularAssemblerQueryJTextAreaText.equals(null) && !MolecularAssemblerQueryJTextAreaText.trim().equals("")) {Thread MolecularAssemblerThread = new Thread(new Runnable() {public void run() {findQueryAssociatedMolecularNetworks(MolecularAssemblerQueryJTextAreaText);biomoietyNetworksPanelViewRadarPanel.setVisible(true);}});MolecularAssemblerThread.start();} else {addTalkbackText("Please enter a query or drag a chart into this window.", null, true);}findQueryAssociatedMolecularNetworksJToggleButton.setSelected(false);int boxPanelWidth = Math.round(biomoietyNetworksJScrollPane.getViewport().getWidth() / 10);int boxPanelHeight = Math.round(biomoietyNetworksJScrollPane.getViewport().getHeight() / 10);int yAdjustment = 1;int xAdjustment = 0;biomoietyNetworksPanelViewRadarPanel.setBounds(Math.round(biomoietyNetworksJScrollPane.getViewport().getViewPosition().x / 10) + xAdjustment, Math.round(biomoietyNetworksJScrollPane.getViewport().getViewPosition().y / 10) + yAdjustment, boxPanelWidth, boxPanelHeight);setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));repaint();} else if (e.getActionCommand().equals("MolecularAssemblerZoomInJButton")) {zoomBiomoietyNetworksDisplayPanelInDecisionSupport("in");biomoietyNetworksJScrollPane.getViewport().setViewPosition(new Point(0, 10000));repaint();} else if (e.getActionCommand().equals("MolecularAssemblerZoomOutJButton")) {zoomBiomoietyNetworksDisplayPanelInDecisionSupport("out");repaint();} else if (e.getActionCommand().equals("MolecularAssemblerOpenJButton")) {if (((Vector) ((Vector) Access.user.elementAt(2)).elementAt(4)) != null) {int ind = 0;molecularNetworkChooserScrollPanePanelConstraints.gridy = -1;molecularNetworkChooserScrollPanePanelConstraints.insets = new Insets(8, 8, 0, 8);while (ind < ((Vector) ((Vector) Access.user.elementAt(2)).elementAt(4)).size()) {molecularNetworkChooserScrollPanePanelConstraints.gridy = molecularNetworkChooserScrollPanePanelConstraints.gridy + 1;JButton networkStructureJButton = new JButton(" " + (String) (((Vector) ((Vector) ((Vector) Access.user.elementAt(2)).elementAt(4)).elementAt(ind)).elementAt(0)) + " ");networkStructureJButton.setBackground(SystemWindow.buttonColor);networkStructureJButton.setBorder(new LineBorder(Color.GRAY, 1));networkStructureJButton.setFont(SystemWindow.systemFont);networkStructureJButton.addActionListener(this);networkStructureJButton.setActionCommand("networkStructureJButton");networkStructureJButton.setName(String.valueOf(ind));molecularNetworkChooserScrollPaneJPanel.add(networkStructureJButton, molecularNetworkChooserScrollPanePanelConstraints);ind++;}}fileChooserOnMolecularAssemblerPanelCardLayout.show(fileChooserOnMolecularAssemblerPanel, "molecularNetworkChooserJScrollPane");} else if (e.getActionCommand().equals("MolecularAssemblerSaveJButton")) {((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).add(new Vector(10));((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(0, pMolecularAssemblerQueryJTextAreaText);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(1, molecularNetworksPanel.primaryNetworksGraphicsPolylines);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(2, molecularNetworksPanel.primaryNetworksRootLocationPoints);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(3, MolecularAssembler.tertiaryNetworksPolyLinePointsX);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(4, MolecularAssembler.tertiaryNetworksPolyLinePointsY);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(5, molecularNetworksPanel.secondaryNetworksBiomoietyButtonsPrimitives);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(6, molecularNetworksPanel.primaryNetworksBiomoietyButtonsPrimitives);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(7, molecularNetworksPanel.topmostPrimaryNetworksPixelY);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(8, molecularNetworksPanel.bottommostPrimaryNetworksPixelY);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(9, molecularNetworksPanel.rightmostPrimaryNetworksPixelX);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(10, molecularNetworksPanel.leftmostPrimaryNetworksPixelX);((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).lastElement()).add(11, MolecularAssembler.referencePublications);} else if (e.getActionCommand().equals("MolecularAssemblerDeleteJButton")) {} else if (e.getActionCommand().equals("MolecularAssemblerZoomResetJButton")) {zoomBiomoietyNetworksDisplayPanelInDecisionSupport("reset");repaint();} else if (e.getActionCommand().equals("internalQueryTermOkJButton") || e.getActionCommand().equals("internalQueryTermJTextField")) {Vector<String> codeSetAndAtomicElementNumbers = new Vector<String>();codeSetAndAtomicElementNumbers.add(internalQueryTermJTextField.getText());fillDataQueryOutputJPanel(find(null, codeSetAndAtomicElementNumbers, null, null, null, null));} else if (e.getActionCommand().equals("internetBrowserJButton")) {decisionSupportMainPanelCardLayout.show(decisionSupportMainJPanel, "dSCoverJPanel");MolecularAssemblerJButton.setBackground(SystemWindow.buttonColor);rulesJButton.setBackground(SystemWindow.buttonColor);internetBrowserJButton.setBackground(Color.LIGHT_GRAY);dataQueryJButton.setBackground(SystemWindow.buttonColor);statisticsJButton.setBackground(SystemWindow.buttonColor);treatmentAnalysisJButton.setBackground(SystemWindow.buttonColor);} else if (e.getActionCommand().equals("dataQueryJButton")) {internetBrowserJButton.setBackground(SystemWindow.buttonColor);dataQueryJButton.setBackground(Color.LIGHT_GRAY);statisticsJButton.setBackground(SystemWindow.buttonColor);treatmentAnalysisJButton.setBackground(SystemWindow.buttonColor);rulesJButton.setBackground(SystemWindow.buttonColor);MolecularAssemblerJButton.setBackground(SystemWindow.buttonColor);decisionSupportMainPanelCardLayout.show(decisionSupportMainJPanel, "dataQueryJPanel");} else if (e.getActionCommand().equals("statisticsJButton")) {decisionSupportMainPanelCardLayout.show(decisionSupportMainJPanel, "statisticsPanelBaseJPanel");MolecularAssemblerJButton.setBackground(SystemWindow.buttonColor);rulesJButton.setBackground(SystemWindow.buttonColor);internetBrowserJButton.setBackground(SystemWindow.buttonColor);dataQueryJButton.setBackground(SystemWindow.buttonColor);statisticsJButton.setBackground(Color.LIGHT_GRAY);treatmentAnalysisJButton.setBackground(SystemWindow.buttonColor);} else if (e.getActionCommand().equals("rulesJButton")) {decisionSupportMainPanelCardLayout.show(decisionSupportMainJPanel, "dSCoverJPanel");rulesJButton.setBackground(Color.LIGHT_GRAY);MolecularAssemblerJButton.setBackground(SystemWindow.buttonColor);internetBrowserJButton.setBackground(SystemWindow.buttonColor);dataQueryJButton.setBackground(SystemWindow.buttonColor);statisticsJButton.setBackground(SystemWindow.buttonColor);treatmentAnalysisJButton.setBackground(SystemWindow.buttonColor);} else if (e.getActionCommand().equals("MolecularAssemblerJButton")) {internetBrowserJButton.setBackground(SystemWindow.buttonColor);dataQueryJButton.setBackground(SystemWindow.buttonColor);statisticsJButton.setBackground(SystemWindow.buttonColor);rulesJButton.setBackground(SystemWindow.buttonColor);MolecularAssemblerJButton.setBackground(Color.LIGHT_GRAY);treatmentAnalysisJButton.setBackground(SystemWindow.buttonColor);decisionSupportMainPanelCardLayout.show(decisionSupportMainJPanel, "MolecularAssemblerJPanel");MolecularAssemblerQueryJTextArea.requestFocusInWindow();MolecularAssemblerQueryJTextArea.validate();MolecularAssemblerQueryJTextArea.repaint();validate();repaint();} else if (e.getActionCommand().equals("browserGoJButton")) {} else if (e.getActionCommand().equals("browserBackJButton")) {} else if (e.getActionCommand().equals("browserForwardJButton")) {} else if (e.getActionCommand().equals("browserRefreshJButton")) {} else if (e.getActionCommand().equals("browserHomeJButton")) {} else if (e.getActionCommand().equals("browserStopJButton")) {}}public boolean isValidTreatmentFactorWithTalkback(JTextField jTextField) {double infallibilityFactor;try {infallibilityFactor = Double.parseDouble(jTextField.getText());if (!(infallibilityFactor >= -1 && infallibilityFactor <= 1)) {throw new Exception("");}} catch (Exception e) {jTextField.setBackground(Color.PINK);addTalkbackText("Please enter a valid infallibility factor from 1.0 to -1.0", null, true);return false;}return true;}public void clearOptimizedLifeExpectancyPanel() {}private void addTreatmentEffectAnalysisTreatmentPoint() {String newTreatmentEffectAnalysisTreatmentNameTextFieldText = treatmentEffectAnalysisTreatmentNameJTextField.getText();String newTreatmentEffectAnalysisTreatmentEffectValueTextFieldText = treatmentEffectAnalysisTreatmentEffectValueJTextField.getText();String newTreatmentEffectAnalysisTreatmentTimeUnitTextFieldText = treatmentEffectAnalysisTreatmentTimeUnitJTextField.getText();String newTreatmentEffectAnalysisTreatmentTimeValueTextFieldText = treatmentEffectAnalysisTreatmentTimeValueJTextField.getText();String errorMessage = null;if (null != (errorMessage = validateTreatmentEffectAnalysisName(newTreatmentEffectAnalysisTreatmentNameTextFieldText, "treatment"))) {} else if (null != (errorMessage = validateTreatmentEffectAnalysisEffectValue(newTreatmentEffectAnalysisTreatmentEffectValueTextFieldText, "treatment"))) {} else if (null != (errorMessage = validateTreatmentEffectAnalysisTimeUnit(newTreatmentEffectAnalysisTreatmentTimeUnitTextFieldText, "treatment"))) {} else if (null != (errorMessage = validateTreatmentEffectAnalysisTimeValue(newTreatmentEffectAnalysisTreatmentTimeValueTextFieldText, "treatment"))) {}if (null == errorMessage) {JPanel newTreatmentEffectAnalysisTreatmentPointJPanel = new JPanel(new GridBagLayout());JPanel newTreatmentEffectAnalysisTreatmentNameJPanel = new JPanel(new GridBagLayout());JPanel newTreatmentEffectAnalysisTreatmentEffectValueJPanel = new JPanel(new GridBagLayout());JPanel newTreatmentEffectAnalysisTreatmentTimeJPanel = new JPanel(new GridBagLayout());JLabel newTreatmentEffectAnalysisTreatmentNameJLabel = new JLabel(newTreatmentEffectAnalysisTreatmentNameTextFieldText);JLabel newTreatmentEffectAnalysisTreatmentEffectValueJLabel = new JLabel(newTreatmentEffectAnalysisTreatmentEffectValueTextFieldText);JLabel newTreatmentEffectAnalysisTreatmentTimeValueJLabel = new JLabel(newTreatmentEffectAnalysisTreatmentTimeValueTextFieldText);JLabel newTreatmentEffectAnalysisTreatmentUnitOfTimeJLabel = new JLabel(newTreatmentEffectAnalysisTreatmentTimeUnitTextFieldText);JLabel newTreatmentEffectAnalysisTreatmentTimePanelSpaceCharacterJLabel = new JLabel(" ");GridBagConstraints newTreatmentEffectAnalysisTreatmentPointPanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentEffectAnalysisTreatmentNamePanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentEffectAnalysisTreatmentEffectValuePanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentEffectAnalysisTreatmentTimePanelConstraints = new GridBagConstraints();newTreatmentEffectAnalysisTreatmentNameJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisTreatmentEffectValueJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisTreatmentTimeValueJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisTreatmentUnitOfTimeJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisTreatmentTimePanelSpaceCharacterJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisTreatmentNameJPanel.add(newTreatmentEffectAnalysisTreatmentNameJLabel, newTreatmentEffectAnalysisTreatmentNamePanelConstraints);newTreatmentEffectAnalysisTreatmentEffectValueJPanel.add(newTreatmentEffectAnalysisTreatmentEffectValueJLabel, newTreatmentEffectAnalysisTreatmentEffectValuePanelConstraints);newTreatmentEffectAnalysisTreatmentTimePanelConstraints.gridx = 0;newTreatmentEffectAnalysisTreatmentTimeJPanel.add(newTreatmentEffectAnalysisTreatmentTimeValueJLabel, newTreatmentEffectAnalysisTreatmentTimePanelConstraints);newTreatmentEffectAnalysisTreatmentTimePanelConstraints.gridx = 1;newTreatmentEffectAnalysisTreatmentTimeJPanel.add(newTreatmentEffectAnalysisTreatmentTimePanelSpaceCharacterJLabel, newTreatmentEffectAnalysisTreatmentTimePanelConstraints);newTreatmentEffectAnalysisTreatmentTimePanelConstraints.gridx = 2;newTreatmentEffectAnalysisTreatmentTimeJPanel.add(newTreatmentEffectAnalysisTreatmentUnitOfTimeJLabel, newTreatmentEffectAnalysisTreatmentTimePanelConstraints);newTreatmentEffectAnalysisTreatmentPointJPanel.setOpaque(false);newTreatmentEffectAnalysisTreatmentNameJPanel.setOpaque(false);newTreatmentEffectAnalysisTreatmentEffectValueJPanel.setOpaque(false);newTreatmentEffectAnalysisTreatmentTimeJPanel.setOpaque(false);newTreatmentEffectAnalysisTreatmentNameJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));newTreatmentEffectAnalysisTreatmentEffectValueJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));newTreatmentEffectAnalysisTreatmentTimeJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));newTreatmentEffectAnalysisTreatmentEffectValueJPanel.setPreferredSize(treatmentEffectCellPanelDimension);newTreatmentEffectAnalysisTreatmentTimeJPanel.setPreferredSize(treatmentTimeCellPanelDimension);newTreatmentEffectAnalysisTreatmentEffectValueJPanel.setSize(treatmentEffectCellPanelDimension);newTreatmentEffectAnalysisTreatmentTimeJPanel.setSize(treatmentTimeCellPanelDimension);newTreatmentEffectAnalysisTreatmentPointPanelConstraints.gridy = 0;newTreatmentEffectAnalysisTreatmentPointPanelConstraints.gridx = 0;newTreatmentEffectAnalysisTreatmentPointPanelConstraints.gridwidth = 3;newTreatmentEffectAnalysisTreatmentPointPanelConstraints.weightx = 1;newTreatmentEffectAnalysisTreatmentPointPanelConstraints.fill = GridBagConstraints.HORIZONTAL;newTreatmentEffectAnalysisTreatmentPointJPanel.add(newTreatmentEffectAnalysisTreatmentNameJPanel, newTreatmentEffectAnalysisTreatmentPointPanelConstraints);newTreatmentEffectAnalysisTreatmentPointPanelConstraints.gridy = 1;newTreatmentEffectAnalysisTreatmentPointPanelConstraints.gridwidth = 1;newTreatmentEffectAnalysisTreatmentPointJPanel.add(newTreatmentEffectAnalysisTreatmentEffectValueJPanel, newTreatmentEffectAnalysisTreatmentPointPanelConstraints);newTreatmentEffectAnalysisTreatmentPointPanelConstraints.gridx = 1;newTreatmentEffectAnalysisTreatmentPointJPanel.add(newTreatmentEffectAnalysisTreatmentTimeJPanel, newTreatmentEffectAnalysisTreatmentPointPanelConstraints);treatmentEffectAnalysisTreatmentPointsDisplayPanelConstraints.gridy++;treatmentEffectAnalysisTreatmentPointsDisplayJPanel.add(newTreatmentEffectAnalysisTreatmentPointJPanel, treatmentEffectAnalysisTreatmentPointsDisplayPanelConstraints);int treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount = treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponentCount();int treatmentEffectAnalysisControlPointsDisplayPanelComponentCount = treatmentEffectAnalysisControlPointsDisplayJPanel.getComponentCount();double[] treatmentEffectAnalysisTreatmentEffectValues = new double[treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount];double[] treatmentEffectAnalysisTreatmentTimeValues = new double[treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount];double[] treatmentEffectAnalysisControlEffectValues = new double[treatmentEffectAnalysisControlPointsDisplayPanelComponentCount];double[] treatmentEffectAnalysisControlTimeValues = new double[treatmentEffectAnalysisControlPointsDisplayPanelComponentCount];int pointInd = 0;while (pointInd < treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount) {treatmentEffectAnalysisTreatmentEffectValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());treatmentEffectAnalysisTreatmentTimeValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());pointInd++;}pointInd = 0;while (pointInd < treatmentEffectAnalysisControlPointsDisplayPanelComponentCount) {treatmentEffectAnalysisControlEffectValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisControlPointsDisplayJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());treatmentEffectAnalysisControlTimeValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisControlPointsDisplayJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());pointInd++;}treatmentEffectAnalysisPaperContentsJPanel.remove(effectCurveGraphPanel);effectCurveGraphPanel = new EffectCurveGraphPanel(treatmentEffectAnalysisTreatmentEffectValues, treatmentEffectAnalysisTreatmentTimeValues, treatmentEffectAnalysisControlEffectValues, treatmentEffectAnalysisControlTimeValues);effectCurveGraphPanel.setSize(new Dimension(522, 517));effectCurveGraphPanel.setPreferredSize(new Dimension(522, 517));treatmentEffectAnalysisPaperContentsJPanel.add(effectCurveGraphPanel, treatmentEffectAnalysisPaperContentsPanelConstraints);validate();repaint();}}private void addTreatmentEffectAnalysisControlPoint() {String newTreatmentEffectAnalysisControlNameTextFieldText = treatmentEffectAnalysisControlNameJTextField.getText();String newTreatmentEffectAnalysisControlEffectValueTextFieldText = treatmentEffectAnalysisControlEffectValueJTextField.getText();String newTreatmentEffectAnalysisControlTimeUnitTextFieldText = treatmentEffectAnalysisControlTimeUnitJTextField.getText();String newTreatmentEffectAnalysisControlTimeValueTextFieldText = treatmentEffectAnalysisControlTimeValueJTextField.getText();String errorMessage = null;if (null != (errorMessage = validateTreatmentEffectAnalysisName(newTreatmentEffectAnalysisControlNameTextFieldText, "treatment"))) {} else if (null != (errorMessage = validateTreatmentEffectAnalysisEffectValue(newTreatmentEffectAnalysisControlEffectValueTextFieldText, "treatment"))) {} else if (null != (errorMessage = validateTreatmentEffectAnalysisTimeUnit(newTreatmentEffectAnalysisControlTimeUnitTextFieldText, "treatment"))) {} else if (null != (errorMessage = validateTreatmentEffectAnalysisTimeValue(newTreatmentEffectAnalysisControlTimeValueTextFieldText, "treatment"))) {}if (null == errorMessage) {JPanel newTreatmentEffectAnalysisControlPointJPanel = new JPanel(new GridBagLayout());JPanel newTreatmentEffectAnalysisControlNameJPanel = new JPanel(new GridBagLayout());JPanel newTreatmentEffectAnalysisControlEffectValueJPanel = new JPanel(new GridBagLayout());JPanel newTreatmentEffectAnalysisControlTimeJPanel = new JPanel(new GridBagLayout());JLabel newTreatmentEffectAnalysisControlNameJLabel = new JLabel(newTreatmentEffectAnalysisControlNameTextFieldText);JLabel newTreatmentEffectAnalysisControlEffectValueJLabel = new JLabel(newTreatmentEffectAnalysisControlEffectValueTextFieldText);JLabel newTreatmentEffectAnalysisControlTimeValueJLabel = new JLabel(newTreatmentEffectAnalysisControlTimeValueTextFieldText);JLabel newTreatmentEffectAnalysisControlUnitOfTimeJLabel = new JLabel(newTreatmentEffectAnalysisControlTimeUnitTextFieldText);JLabel newTreatmentEffectAnalysisControlTimePanelSpaceCharacterJLabel = new JLabel(" ");GridBagConstraints newTreatmentEffectAnalysisControlPointPanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentEffectAnalysisControlNamePanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentEffectAnalysisControlEffectValuePanelConstraints = new GridBagConstraints();GridBagConstraints newTreatmentEffectAnalysisControlTimePanelConstraints = new GridBagConstraints();newTreatmentEffectAnalysisControlNameJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisControlEffectValueJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisControlTimeValueJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisControlUnitOfTimeJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisControlTimePanelSpaceCharacterJLabel.setFont(treatmentAnalysisDataFont);newTreatmentEffectAnalysisControlNameJPanel.add(newTreatmentEffectAnalysisControlNameJLabel, newTreatmentEffectAnalysisControlNamePanelConstraints);newTreatmentEffectAnalysisControlEffectValueJPanel.add(newTreatmentEffectAnalysisControlEffectValueJLabel, newTreatmentEffectAnalysisControlEffectValuePanelConstraints);newTreatmentEffectAnalysisControlTimePanelConstraints.gridx = 0;newTreatmentEffectAnalysisControlTimeJPanel.add(newTreatmentEffectAnalysisControlTimeValueJLabel, newTreatmentEffectAnalysisControlTimePanelConstraints);newTreatmentEffectAnalysisControlTimePanelConstraints.gridx = 1;newTreatmentEffectAnalysisControlTimeJPanel.add(newTreatmentEffectAnalysisControlTimePanelSpaceCharacterJLabel, newTreatmentEffectAnalysisControlTimePanelConstraints);newTreatmentEffectAnalysisControlTimePanelConstraints.gridx = 2;newTreatmentEffectAnalysisControlTimeJPanel.add(newTreatmentEffectAnalysisControlUnitOfTimeJLabel, newTreatmentEffectAnalysisControlTimePanelConstraints);newTreatmentEffectAnalysisControlPointJPanel.setOpaque(false);newTreatmentEffectAnalysisControlNameJPanel.setOpaque(false);newTreatmentEffectAnalysisControlEffectValueJPanel.setOpaque(false);newTreatmentEffectAnalysisControlTimeJPanel.setOpaque(false);newTreatmentEffectAnalysisControlNameJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));newTreatmentEffectAnalysisControlEffectValueJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));newTreatmentEffectAnalysisControlTimeJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));newTreatmentEffectAnalysisControlEffectValueJPanel.setPreferredSize(treatmentEffectCellPanelDimension);newTreatmentEffectAnalysisControlTimeJPanel.setPreferredSize(treatmentTimeCellPanelDimension);newTreatmentEffectAnalysisControlEffectValueJPanel.setSize(treatmentEffectCellPanelDimension);newTreatmentEffectAnalysisControlTimeJPanel.setSize(treatmentTimeCellPanelDimension);newTreatmentEffectAnalysisControlPointPanelConstraints.gridy = 0;newTreatmentEffectAnalysisControlPointPanelConstraints.gridx = 0;newTreatmentEffectAnalysisControlPointPanelConstraints.gridwidth = 3;newTreatmentEffectAnalysisControlPointPanelConstraints.weightx = 1;newTreatmentEffectAnalysisControlPointPanelConstraints.fill = GridBagConstraints.HORIZONTAL;newTreatmentEffectAnalysisControlPointJPanel.add(newTreatmentEffectAnalysisControlNameJPanel, newTreatmentEffectAnalysisControlPointPanelConstraints);newTreatmentEffectAnalysisControlPointPanelConstraints.gridy = 1;newTreatmentEffectAnalysisControlPointPanelConstraints.gridwidth = 1;newTreatmentEffectAnalysisControlPointJPanel.add(newTreatmentEffectAnalysisControlEffectValueJPanel, newTreatmentEffectAnalysisControlPointPanelConstraints);newTreatmentEffectAnalysisControlPointPanelConstraints.gridx = 1;newTreatmentEffectAnalysisControlPointJPanel.add(newTreatmentEffectAnalysisControlTimeJPanel, newTreatmentEffectAnalysisControlPointPanelConstraints);treatmentEffectAnalysisControlPointsDisplayPanelConstraints.gridy++;treatmentEffectAnalysisControlPointsDisplayJPanel.add(newTreatmentEffectAnalysisControlPointJPanel, treatmentEffectAnalysisControlPointsDisplayPanelConstraints);int treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount = treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponentCount();int treatmentEffectAnalysisControlPointsDisplayPanelComponentCount = treatmentEffectAnalysisControlPointsDisplayJPanel.getComponentCount();double[] treatmentEffectAnalysisTreatmentEffectValues = new double[treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount];double[] treatmentEffectAnalysisTreatmentTimeValues = new double[treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount];double[] treatmentEffectAnalysisControlEffectValues = new double[treatmentEffectAnalysisControlPointsDisplayPanelComponentCount];double[] treatmentEffectAnalysisControlTimeValues = new double[treatmentEffectAnalysisControlPointsDisplayPanelComponentCount];int pointInd = 0;while (pointInd < treatmentEffectAnalysisTreatmentPointsDisplayPanelComponentCount) {treatmentEffectAnalysisTreatmentEffectValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());treatmentEffectAnalysisTreatmentTimeValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());pointInd++;}pointInd = 0;while (pointInd < treatmentEffectAnalysisControlPointsDisplayPanelComponentCount) {treatmentEffectAnalysisControlEffectValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisControlPointsDisplayJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());treatmentEffectAnalysisControlTimeValues[pointInd] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisControlPointsDisplayJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());pointInd++;}treatmentEffectAnalysisPaperContentsJPanel.remove(effectCurveGraphPanel);effectCurveGraphPanel = new EffectCurveGraphPanel(treatmentEffectAnalysisTreatmentEffectValues, treatmentEffectAnalysisTreatmentTimeValues, treatmentEffectAnalysisControlEffectValues, treatmentEffectAnalysisControlTimeValues);effectCurveGraphPanel.setSize(new Dimension(522, 517));effectCurveGraphPanel.setPreferredSize(new Dimension(522, 517));treatmentEffectAnalysisPaperContentsJPanel.add(effectCurveGraphPanel, treatmentEffectAnalysisPaperContentsPanelConstraints);validate();repaint();System.out.println("DS control effectCurveGraphPanel.getSize(): " + effectCurveGraphPanel.getSize());System.out.println("treatmentEffectAnalysisTreatmentPointsJPanel.getSize(): " + treatmentEffectAnalysisTreatmentPointsJPanel.getSize());System.out.println("treatmentEffectAnalysisControlPointsJPanel.getSize(): " + treatmentEffectAnalysisControlPointsJPanel.getSize());}}private String validateTreatmentEffectAnalysisTimeUnit(String treatmentEffectAnalysisTreatmentTimeUnitTextFieldText, String treatmentOrControl) {String errorMessage = null;if (treatmentEffectAnalysisTreatmentTimeUnitTextFieldText.equals("")) {errorMessage = "Please enter a unit of time.";}return errorMessage;}private String validateTreatmentEffectAnalysisEffectValue(String pTreatmentEffectAnalysisTreatmentEffectValueTextFieldText, String treatmentOrControl) {String errorMessage = null;if (!pTreatmentEffectAnalysisTreatmentEffectValueTextFieldText.equals("")) {try {double testDouble = Double.parseDouble(pTreatmentEffectAnalysisTreatmentEffectValueTextFieldText);} catch (Exception e) {errorMessage = "Please enter a valid " + treatmentOrControl + " treatment effect (number).";}} else {errorMessage = "Please enter a " + treatmentOrControl + " treatment effect value.";}return errorMessage;}private String validateTreatmentEffectAnalysisTimeValue(String pTreatmentEffectAnalysisTimeValueTextFieldText, String treatmentOrControl) {String errorMessage = null;if (!pTreatmentEffectAnalysisTimeValueTextFieldText.equals("")) {try {double testDouble = Double.parseDouble(pTreatmentEffectAnalysisTimeValueTextFieldText);} catch (Exception e) {errorMessage = "Please enter a valid " + treatmentOrControl + " time value (number of units such as, \"14\").";}} else {errorMessage = "Please enter a " + treatmentOrControl + " time value (number of units such as, \"14\").";}return errorMessage;}private String validateTreatmentEffectAnalysisName(String effectCurveTreatmentTimeValueTextFieldText, String treatmentOrControl) {String errorMessage = null;if (effectCurveTreatmentTimeValueTextFieldText.equals("")) {errorMessage = "Please enter a " + treatmentOrControl + " name.";}return errorMessage;}public Vector deriveTreatmentEffectAnalysisVector() {Vector<Object> vector = new Vector<Object>();vector.add(new Vector());System.out.println("effectCurveNameJLabel should have name here: " + treatmentEffectAnalysisHeaderPanelNameJLabel.getText());(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisHeaderPanelNameJLabel.getText());(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisHeaderPanelDateCreatedJLabel.getText().substring(9, costAnalysisDateCreatedJLabel.getText().length()));Calendar calendar = Calendar.getInstance();String lastModifiedDate = month[calendar.get(Calendar.MONTH)].substring(0, 3) + ". " + calendar.get(Calendar.DAY_OF_MONTH) + ", " + calendar.get(Calendar.YEAR);(((Vector) (vector.lastElement()))).add(lastModifiedDate);(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisHeaderPanelUserIDJLabel.getText());int pointInd = 0;while (pointInd < treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponentCount()) {String treatmentEffectAnalysisName = ((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(0))).getComponent(0))).getText();double treatmentEffectAnalysisEffectValue = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());double treatmentEffectAnalysisTime = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());String treatmentEffectAnalysisUnitOfTime = ((JLabel) (((JPanel) (((JPanel) (treatmentEffectAnalysisTreatmentPointsDisplayJPanel.getComponent(pointInd))).getComponent(2))).getComponent(1))).getText();vector.add(new Vector());(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisName);(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisEffectValue);(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisTime);(((Vector) (vector.lastElement()))).add(treatmentEffectAnalysisUnitOfTime);pointInd++;}return vector;}private void autoRankCostAnalysis() {String utilityOrEffectiveness;String[] costPointTreatmentNames = null;double[] costPointsForXAxis = null;double[] effectivenessPointsForYAxis = null;JPanel treatmentCostPointTreatmentNameJPanel;JPanel treatmentCostPointCostJPanel;JPanel treatmentCostPointEffectivenessJPanel;JPanel costPointJPanel;Vector<Object> costAnalysisVector = deriveCostAnalysisVector(null);Vector<Vector<Object>> rankedPoints = new Vector<Vector<Object>>();GridBagConstraints treatmentCostPointTreatmentNamePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointCostPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointEffectivenessPanelConstraints = new GridBagConstraints();GridBagConstraints costPointPanelConstraints = new GridBagConstraints();JLabel newTreatmentCostPointTreatmentNameJLabel;JLabel newTreatmentCostPointCostJLabel;JLabel newTreatmentCostPointEffectivenessJLabel;int costAnalysisInd = 2;int rankedPointInd;boolean isPointAdded;System.out.println("Adding to rankedPoints costAnalysisVector.elementAt(1): " + (costAnalysisVector.elementAt(1)));rankedPoints.add((Vector<Object>) (costAnalysisVector.elementAt(1)));System.out.println("  ");while (costAnalysisInd < costAnalysisVector.size()) {rankedPointInd = 0;isPointAdded = false;int numRankedPoints = rankedPoints.size();while (rankedPointInd < numRankedPoints && !isPointAdded) {if (((Double) (((Vector<Object>) (costAnalysisVector.elementAt(costAnalysisInd))).elementAt(1))) < (Double) (rankedPoints.elementAt(rankedPointInd).elementAt(1))) {System.out.println(" < ");rankedPoints.add(rankedPointInd, (Vector<Object>) (costAnalysisVector.elementAt(costAnalysisInd)));isPointAdded = true;}rankedPointInd++;}if (!isPointAdded) {System.out.println(" >= ");rankedPoints.add((Vector<Object>) (costAnalysisVector.elementAt(costAnalysisInd)));}costAnalysisInd++;}clearTreatmentAnalysis("costAnalysis");if (qualityAdjustedLifeYearsYesJToggleButton.isSelected()) {utilityOrEffectiveness = "Utility";} else {utilityOrEffectiveness = "Effectiveness";}int pointInd = 0;costPointTreatmentNames = new String[rankedPoints.size() + 1];costPointsForXAxis = new double[rankedPoints.size() + 1];effectivenessPointsForYAxis = new double[rankedPoints.size() + 1];costPointTreatmentNames[0] = null;costPointsForXAxis[0] = -1;effectivenessPointsForYAxis[0] = -1;while (pointInd < rankedPoints.size()) {costPointTreatmentNames[pointInd + 1] = (String) (rankedPoints.elementAt(pointInd).elementAt(0));costPointsForXAxis[pointInd + 1] = (Double) (rankedPoints.elementAt(pointInd).elementAt(1));effectivenessPointsForYAxis[pointInd + 1] = (Double) (rankedPoints.elementAt(pointInd).elementAt(2));treatmentCostPointTreatmentNameJPanel = new JPanel(new GridBagLayout());treatmentCostPointCostJPanel = new JPanel(new GridBagLayout());treatmentCostPointEffectivenessJPanel = new JPanel(new GridBagLayout());costPointJPanel = new JPanel(new GridBagLayout());newTreatmentCostPointTreatmentNameJLabel = new JLabel(costPointTreatmentNames[pointInd + 1]);newTreatmentCostPointCostJLabel = new JLabel(String.valueOf(costPointsForXAxis[pointInd + 1]));newTreatmentCostPointEffectivenessJLabel = new JLabel(String.valueOf(effectivenessPointsForYAxis[pointInd + 1]));treatmentCostPointCostHeaderJPanel.add(treatmentCostPointCostHeaderJLabel, treatmentCostPointCostHeaderPanelConstraints);treatmentCostPointEffectivenessHeaderJPanel.add(treatmentCostPointEffectivenessHeaderJLabel, treatmentCostPointEffectivenessHeaderPanelConstraints);treatmentCostPointCostJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointCostJPanel.setSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setSize(costPointsCellPanelDimension);newTreatmentCostPointTreatmentNameJLabel.setFont(treatmentAnalysisDataFont);newTreatmentCostPointCostJLabel.setFont(treatmentAnalysisDataFont);newTreatmentCostPointEffectivenessJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentCostPointCostJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentCostPointEffectivenessJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentCostPointTreatmentNameJPanel.setOpaque(false);treatmentCostPointCostJPanel.setOpaque(false);treatmentCostPointEffectivenessJPanel.setOpaque(false);treatmentCostPointTreatmentNameJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointCostJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointEffectivenessJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.add(newTreatmentCostPointTreatmentNameJLabel, treatmentCostPointTreatmentNamePanelConstraints);treatmentCostPointCostJPanel.add(newTreatmentCostPointCostJLabel, treatmentCostPointCostPanelConstraints);treatmentCostPointEffectivenessJPanel.add(newTreatmentCostPointEffectivenessJLabel, treatmentCostPointEffectivenessPanelConstraints);costPointJPanel.setBackground(Color.WHITE);costPointPanelConstraints.gridy = 0;costPointPanelConstraints.gridx = 0;costPointPanelConstraints.weightx = 1;costPointPanelConstraints.fill = GridBagConstraints.BOTH;costPointPanelConstraints.gridwidth = 2;costPointJPanel.add(treatmentCostPointTreatmentNameJPanel, costPointPanelConstraints);costPointPanelConstraints.gridy = 1;costPointPanelConstraints.gridwidth = 1;costPointPanelConstraints.gridx = 0;costPointJPanel.add(treatmentCostPointCostJPanel, costPointPanelConstraints);costPointPanelConstraints.gridx = 1;costPointJPanel.add(treatmentCostPointEffectivenessJPanel, costPointPanelConstraints);costPointsPanelConstraints.gridy++;costPointsJPanel.add(costPointJPanel, costPointsPanelConstraints);pointInd++;}validate();costPointsJPanel.paintImmediately(0, 0, costPointsJPanel.getWidth(), costPointsJPanel.getHeight());calculateCostAnalysisICERs();costAnalysisPaperJPanel.remove(costAnalysisGraphPanel);costAnalysisGraphPanel = new CostAnalysisGraph(utilityOrEffectiveness, costPointTreatmentNames, costPointsForXAxis, effectivenessPointsForYAxis);costAnalysisPaperJPanel.add(costAnalysisGraphPanel, costAnalysisPaperPanelConstraints);repaint();}private void testJVM() {String[] costPointTreatmentNames = new String[5];double[] costPointsForXAxis = new double[5];double[] effectivenessPointsForYAxis = new double[5];int pointInd = 0;JPanel treatmentCostPointTreatmentNameJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointCostJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointEffectivenessJPanel = new JPanel(new GridBagLayout());JPanel costPointJPanel = new JPanel(new GridBagLayout());JLabel newTreatmentCostPointTreatmentNameJLabel = new JLabel(costPointTreatmentNames[pointInd + 1]);JLabel newTreatmentCostPointCostJLabel = new JLabel(String.valueOf(costPointsForXAxis[pointInd + 1]));JLabel newTreatmentCostPointEffectivenessJLabel = new JLabel(String.valueOf(effectivenessPointsForYAxis[pointInd + 1]));GridBagConstraints costPointPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointTreatmentNamePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointCostPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointEffectivenessPanelConstraints = new GridBagConstraints();String utilityOrEffectiveness = "Utility";costPointTreatmentNames[0] = null;costPointsForXAxis[0] = -1;effectivenessPointsForYAxis[0] = -1;costPointTreatmentNames[1] = "1";costPointsForXAxis[1] = 50;effectivenessPointsForYAxis[1] = 5;costPointTreatmentNames[2] = "2";costPointsForXAxis[2] = 40;effectivenessPointsForYAxis[2] = 5;costPointTreatmentNames[3] = "3";costPointsForXAxis[3] = 30;effectivenessPointsForYAxis[3] = 5;int analysisInd = 0;while (analysisInd < 100) {pointInd = 0;while (pointInd < 5) {treatmentCostPointTreatmentNameJPanel = new JPanel(new GridBagLayout());treatmentCostPointCostJPanel = new JPanel(new GridBagLayout());treatmentCostPointEffectivenessJPanel = new JPanel(new GridBagLayout());costPointJPanel = new JPanel(new GridBagLayout());newTreatmentCostPointTreatmentNameJLabel = new JLabel(costPointTreatmentNames[pointInd]);newTreatmentCostPointCostJLabel = new JLabel(String.valueOf(costPointsForXAxis[pointInd]));newTreatmentCostPointEffectivenessJLabel = new JLabel(String.valueOf(effectivenessPointsForYAxis[pointInd]));treatmentCostPointCostHeaderJPanel.add(treatmentCostPointCostHeaderJLabel, treatmentCostPointCostHeaderPanelConstraints);treatmentCostPointEffectivenessHeaderJPanel.add(treatmentCostPointEffectivenessHeaderJLabel, treatmentCostPointEffectivenessHeaderPanelConstraints);treatmentCostPointCostJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointCostJPanel.setSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setSize(costPointsCellPanelDimension);newTreatmentCostPointTreatmentNameJLabel.setFont(treatmentAnalysisDataFont);newTreatmentCostPointCostJLabel.setFont(treatmentAnalysisDataFont);newTreatmentCostPointEffectivenessJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentCostPointCostJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentCostPointEffectivenessJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentCostPointTreatmentNameJPanel.setOpaque(false);treatmentCostPointCostJPanel.setOpaque(false);treatmentCostPointEffectivenessJPanel.setOpaque(false);treatmentCostPointTreatmentNameJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointCostJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointEffectivenessJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.add(newTreatmentCostPointTreatmentNameJLabel, treatmentCostPointTreatmentNamePanelConstraints);treatmentCostPointCostJPanel.add(newTreatmentCostPointCostJLabel, treatmentCostPointCostPanelConstraints);treatmentCostPointEffectivenessJPanel.add(newTreatmentCostPointEffectivenessJLabel, treatmentCostPointEffectivenessPanelConstraints);costPointJPanel.setBackground(Color.WHITE);costPointPanelConstraints.gridy = 0;costPointPanelConstraints.gridx = 0;costPointPanelConstraints.weightx = 1;costPointPanelConstraints.fill = GridBagConstraints.BOTH;costPointPanelConstraints.gridwidth = 2;costPointJPanel.add(treatmentCostPointTreatmentNameJPanel, costPointPanelConstraints);costPointPanelConstraints.gridy = 1;costPointPanelConstraints.gridwidth = 1;costPointPanelConstraints.gridx = 0;costPointJPanel.add(treatmentCostPointCostJPanel, costPointPanelConstraints);costPointPanelConstraints.gridx = 1;costPointJPanel.add(treatmentCostPointEffectivenessJPanel, costPointPanelConstraints);costPointsPanelConstraints.gridy++;costPointsJPanel.add(costPointJPanel, costPointsPanelConstraints);pointInd++;}closeTreatmentAnalysis("costAnalysis");validate();costPointsJPanel.paintImmediately(0, 0, costPointsJPanel.getWidth(), costPointsJPanel.getHeight());calculateCostAnalysisICERs();costAnalysisPaperJPanel.remove(costAnalysisGraphPanel);costAnalysisGraphPanel = new CostAnalysisGraph(utilityOrEffectiveness, costPointTreatmentNames, costPointsForXAxis, effectivenessPointsForYAxis);costAnalysisPaperJPanel.add(costAnalysisGraphPanel, costAnalysisPaperPanelConstraints);costAnalysisPaperJPanel.paintImmediately(0, 0, costAnalysisPaperJPanel.getWidth(), costAnalysisPaperJPanel.getHeight());analysisInd++;}}private void setCostAnalysisQALY(boolean isQALY) {if (isQALY) {costAnalysisNameHeaderJLabel.setText(", cost-effectiveness analysis: ");costAnalysisTreatmentEffectivenessPromptJLabel.setText("Effectiveness: ");treatmentCostPointEffectivenessHeaderJLabel.setText("Effectiveness");costAnalysisSaveTreatmentCostPointHeaderJLabel.setText("Add cost-effectiveness point:");costAnalysisGraphPanel.effectivenessJLabel.setText("Effectiveness");} else {costAnalysisNameHeaderJLabel.setText(", cost-utility analysis: ");costAnalysisTreatmentEffectivenessPromptJLabel.setText("Utility: ");treatmentCostPointEffectivenessHeaderJLabel.setText("Utility");costAnalysisSaveTreatmentCostPointHeaderJLabel.setText("Add cost-utility point:");costAnalysisGraphPanel.effectivenessJLabel.setText("Utility");}qualityAdjustedLifeYearsNoJToggleButton.setSelected(!isQALY);qualityAdjustedLifeYearsYesJToggleButton.setSelected(isQALY);}private void openTreatmentEffect(String buttonName) {}private void openCostAnalysis(String buttonName) {String utilityOrEffectiveness;int analysisIndice = Integer.parseInt(buttonName.substring(buttonName.indexOf("|") + 1));int pointInd = 1;Vector analysesVector = ((Vector) (((Vector) (((Vector) (((Vector) (Access.individualUserData.elementAt(4))).elementAt(3))).elementAt(0))).elementAt(analysisIndice)));String[] costPointTreatmentNames = new String[analysesVector.size()];double[] costPointsForXAxis = new double[analysesVector.size()];double[] effectivenessPointsForYAxis = new double[analysesVector.size()];costPointsPanelConstraints.gridy = 0;System.out.println("pointInd: " + pointInd);System.out.println("analysesVector.size(): " + analysesVector.size());while (pointInd < analysesVector.size()) {System.out.println("Making point " + pointInd);JPanel treatmentCostPointTreatmentNameJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointCostJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointEffectivenessJPanel = new JPanel(new GridBagLayout());JPanel costPointJPanel = new JPanel(new GridBagLayout());JLabel treatmentCostPointTreatmentNameJLabel = new JLabel(((String) (((Vector) (analysesVector.elementAt(pointInd))).elementAt(0))));JLabel treatmentCostPointCostJLabel = new JLabel(String.valueOf(((((Vector) (analysesVector.elementAt(pointInd))).elementAt(1)))));JLabel treatmentCostPointEffectivenessJLabel = new JLabel(String.valueOf(((((Vector) (analysesVector.elementAt(pointInd))).elementAt(2)))));GridBagConstraints treatmentCostPointTreatmentNamePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointCostPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointEffectivenessPanelConstraints = new GridBagConstraints();GridBagConstraints costPointPanelConstraints = new GridBagConstraints();treatmentCostPointCostJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointCostJPanel.setSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setSize(costPointsCellPanelDimension);costPointTreatmentNames[pointInd] = ((String) (((Vector) (analysesVector.elementAt(pointInd))).elementAt(0)));costPointsForXAxis[pointInd] = ((Double) (((Vector) (analysesVector.elementAt(pointInd))).elementAt(1)));effectivenessPointsForYAxis[pointInd] = ((Double) (((Vector) (analysesVector.elementAt(pointInd))).elementAt(2)));treatmentCostPointTreatmentNameJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentCostPointCostJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentCostPointEffectivenessJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentCostPointTreatmentNameJPanel.setOpaque(false);treatmentCostPointCostJPanel.setOpaque(false);treatmentCostPointEffectivenessJPanel.setOpaque(false);treatmentCostPointTreatmentNameJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointCostJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointEffectivenessJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.add(treatmentCostPointTreatmentNameJLabel, treatmentCostPointTreatmentNamePanelConstraints);treatmentCostPointCostJPanel.add(treatmentCostPointCostJLabel, treatmentCostPointCostPanelConstraints);treatmentCostPointEffectivenessJPanel.add(treatmentCostPointEffectivenessJLabel, treatmentCostPointEffectivenessPanelConstraints);costPointJPanel.setBackground(Color.WHITE);costPointPanelConstraints.gridy = 0;costPointPanelConstraints.gridx = 0;costPointPanelConstraints.weightx = 1;costPointPanelConstraints.fill = GridBagConstraints.BOTH;costPointPanelConstraints.gridwidth = 2;costPointJPanel.add(treatmentCostPointTreatmentNameJPanel, costPointPanelConstraints);costPointPanelConstraints.gridy = 1;costPointPanelConstraints.gridwidth = 1;costPointPanelConstraints.gridx = 0;costPointJPanel.add(treatmentCostPointCostJPanel, costPointPanelConstraints);costPointPanelConstraints.gridx = 1;costPointJPanel.add(treatmentCostPointEffectivenessJPanel, costPointPanelConstraints);costPointsPanelConstraints.gridy++;costPointsJPanel.add(costPointJPanel, costPointsPanelConstraints);pointInd++;}if (((Boolean) (((Vector) (analysesVector.elementAt(0))).elementAt(1)))) {utilityOrEffectiveness = "Utility";} else {utilityOrEffectiveness = "Effectiveness";}costAnalysisPaperJPanel.remove(costAnalysisGraphPanel);costAnalysisGraphPanel = new CostAnalysisGraph(utilityOrEffectiveness, costPointTreatmentNames, costPointsForXAxis, effectivenessPointsForYAxis);costAnalysisPaperJPanel.add(costAnalysisGraphPanel, costAnalysisPaperPanelConstraints);calculateCostAnalysisICERs();costAnalysisScrollPaneJPanel.setVisible(true);costAnalysisNameJLabel.setText(((String) (((Vector) (analysesVector.elementAt(0))).elementAt(0))));costAnalysisDateCreatedJLabel.setText("Created: " + ((String) (((Vector) (analysesVector.elementAt(0))).elementAt(2))));costAnalysisGraphHeaderDateGraphLastModifiedJLabel.setText("Last modified: " + ((String) (((Vector) (analysesVector.elementAt(0))).elementAt(3))));costAnalysisGraphHeaderUserIDJLabel.setText("by " + ((String) (((Vector) (analysesVector.elementAt(0))).elementAt(4))));addTalkbackText("Opened cost analysis, \"" + ((String) (((Vector) (analysesVector.elementAt(0))).elementAt(0))) + ":\" ", null, false);repaint();}private void fillOpenTreatmentAnalysisChoicesJPanel() {int treatmentAnalysesVectorIndice = 0;if (costAnalysisJToggleButton.isSelected()) {treatmentAnalysesVectorIndice = 0;} else if (treatmentEffectJToggleButton.isSelected()) {treatmentAnalysesVectorIndice = 1;} else if (decisionModelsJToggleButton.isSelected()) {treatmentAnalysesVectorIndice = 2;}GridBagConstraints openTreatmentAnalysisChoicesPanelConstraints = new GridBagConstraints();openTreatmentAnalysisChoicesJPanel.removeAll();JButton analysisNameJButton;openTreatmentAnalysisChoicesPanelConstraints.insets = new Insets(4, 4, 0, 4);Vector userTreatmentAnalyses = ((Vector) (((Vector) (((Vector) (Access.individualUserData.elementAt(4))).elementAt(3))).elementAt(treatmentAnalysesVectorIndice)));int analysisInd = 0;while (analysisInd < userTreatmentAnalyses.size()) {analysisNameJButton = new JButton(((String) (((Vector) (((Vector) (userTreatmentAnalyses.elementAt(analysisInd))).elementAt(0))).elementAt(0))));analysisNameJButton.addActionListener(this);analysisNameJButton.setActionCommand("analysisNameJButton");analysisNameJButton.setName(treatmentAnalysesVectorIndice + "|" + analysisInd);analysisNameJButton.setBackground(SystemWindow.buttonColor);analysisNameJButton.setBorder(SystemWindow.buttonBorder);analysisNameJButton.setFont(SystemWindow.systemFont);openTreatmentAnalysisChoicesPanelConstraints.gridy++;openTreatmentAnalysisChoicesJPanel.add(analysisNameJButton, openTreatmentAnalysisChoicesPanelConstraints);analysisInd++;}}public void createLifeExpectancyPanel() {treatmentEffectAnalysisTreatmentPointsX.clear();treatmentEffectAnalysisTreatmentPointsY.clear();treatmentEffectAnalysisControlPointsX.clear();treatmentEffectAnalysisControlPointsY.clear();Vector<Vector<Double>> baselineMortalityForAgeSexAndRace = new Vector<Vector<Double>>();Vector<Vector<Double>> baselineLifeExpectencyForAgeSexAndRace = new Vector<Vector<Double>>();String ageGroup = "all ages";Vector patientIndexInformation = ((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(Integer.parseInt(ChartingWindow.openChartID))));String patientSex = (String) ((Vector) patientIndexInformation.elementAt(6)).elementAt(0);String birthdateCalendarString = (String) (((Vector) (patientIndexInformation.elementAt(7))).elementAt(0));String patientRace = (String) ((Vector) patientIndexInformation.elementAt(8)).elementAt(0);System.out.println("patientSex: " + patientSex);System.out.println("birthdateCalendarString: " + birthdateCalendarString);System.out.println("patientRace: " + patientRace);String sexStringInLifeTable = null;String raceStringInLifeTable = null;String raceStringForAverageChangePerYearOverLast40Years = null;String sexStringForAverageChangePerYearOverLast40Years = null;JPanel newLifeExpectancyContentJPanel = new JPanel(new GridBagLayout());JPanel newLifeExpectancyContentPanelTopJPanel = new JPanel(new GridBagLayout());GridBagConstraints newLifeExpectancyContentPanelConstraints = new GridBagConstraints();GridBagConstraints newLifeExpectancyContentPanelTopPanelConstraints = new GridBagConstraints();Calendar patientBirthTimeAndDate = Calendar.getInstance();int patientAge = 0;actuarialLifeExpectancyPaperJPanel.removeAll();if (ChartingWindow.chartIsOpen) {try {patientBirthTimeAndDate.setTimeInMillis(Long.parseLong(birthdateCalendarString));patientAge = Calendar.getInstance().get(Calendar.YEAR) - patientBirthTimeAndDate.get(Calendar.YEAR);if (patientAge == 0) {ageGroup = "0";} else if (patientAge > 0 && patientAge < 5) {ageGroup = "1 to 4";} else if (patientAge > 4 && patientAge < 15) {ageGroup = "5 to 14";} else if (patientAge > 14 && patientAge < 25) {ageGroup = "15 to 24";} else if (patientAge > 24 && patientAge < 45) {ageGroup = "25 to 44";} else if (patientAge > 44 && patientAge < 65) {ageGroup = "45 to 64";} else if (patientAge >= 65) {ageGroup = "65 years and older";} else {ageGroup = "0";}} catch (Exception er) {ageGroup = "all ages";}if (null == patientRace) {raceStringInLifeTable = "all races ";raceStringForAverageChangePerYearOverLast40Years = "all races, ";} else if (patientRace.equals("AI") || patientRace.equals("AP")) {raceStringInLifeTable = "non Hisp ";raceStringForAverageChangePerYearOverLast40Years = "all races, ";} else if (patientRace.equals("HI")) {raceStringInLifeTable = "Hispanic ";raceStringForAverageChangePerYearOverLast40Years = "all races, ";} else if (patientRace.equals("WH")) {raceStringInLifeTable = "white ";raceStringForAverageChangePerYearOverLast40Years = "white ";} else if (patientRace.equals("BL")) {raceStringInLifeTable = "black ";raceStringForAverageChangePerYearOverLast40Years = "black ";} else {raceStringInLifeTable = "all races ";raceStringForAverageChangePerYearOverLast40Years = "all races, ";}if (null == patientSex) {sexStringInLifeTable = "U";sexStringForAverageChangePerYearOverLast40Years = "both sexes";} else if (patientSex.equals("M")) {sexStringInLifeTable = "males";sexStringForAverageChangePerYearOverLast40Years = "males";} else if (patientSex.equals("F")) {sexStringInLifeTable = "females";sexStringForAverageChangePerYearOverLast40Years = "females";} else if (patientSex.equals("O") || patientSex.equals("U")) {sexStringInLifeTable = "both sexes";sexStringForAverageChangePerYearOverLast40Years = "both sexes";} else {sexStringInLifeTable = "U";sexStringForAverageChangePerYearOverLast40Years = "both sexes";}String raceAndSex = raceStringForAverageChangePerYearOverLast40Years + sexStringForAverageChangePerYearOverLast40Years;raceAndSexLifeTableName = raceStringInLifeTable + sexStringInLifeTable;JLabel fineJLabel = new JLabel("Affect on mortality due to the increase in heart health care causes predicted life spans to increase faster than decrease for an identifiable proportion of the population. Therefore, identifiying a medical event horizon. I do beleive this event horizon is was predicated in scripture and science. Moreover, I do beleive we are in a tim-line cohort together. I beleive we may continue to live on this planet together, as far as I can see. visible. Tree Life Crystal (object-oriented community health management system), " + "" + "" + "3" + "");baselineLifeExpectencyForAgeSexAndRace.add(LifeExpectancy1Panels.lifeTable(raceAndSexLifeTableName));baselineMortalityForAgeSexAndRace.add(LifeExpectancy1Panels.mortality(raceAndSexLifeTableName));fillTreatmentAnalysisHeaderPanel(lifeExpectancyGraphHeaderJPanel, null);fillOptimizedLifeExpectancyTextFieldsPanelWithTenLeadingCausesOfDeathInAgeGroup(ageGroup);if (ageGroup == null) {ageGroup = "all ages";}tenLeadingCausesOfDeathByAgeGroupJPanel = LifeExpectancy1Panels.fill10LeadingCausesOfDeathByAgeGroupPanel(ageGroup);lifeExpectancyGraphPanel = new LifeExpectancy2Panels(baselineLifeExpectencyForAgeSexAndRace, "Life expectancy", "Age", patientAge);mortalityGraphPanel = new LifeExpectancy2Panels(baselineMortalityForAgeSexAndRace, "Probability of surviving another year", "Year", patientAge);lifeExpectancyGraphPanel.setPreferredSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);mortalityGraphPanel.setPreferredSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);lifeExpectancyGraphPanel.setSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);mortalityGraphPanel.setSize(lifeExpectancyGraphPanelAndMortalityGraphPanelDimension);newLifeExpectancyContentPanelTopJPanel.setOpaque(false);newLifeExpectancyContentPanelTopPanelConstraints.anchor = GridBagConstraints.WEST;newLifeExpectancyContentPanelTopPanelConstraints.insets = new Insets(0, 0, 0, 8);newLifeExpectancyContentPanelTopJPanel.add(lifeExpectancyGraphHeaderJPanel, newLifeExpectancyContentPanelTopPanelConstraints);newLifeExpectancyContentPanelTopPanelConstraints.gridx = 1;newLifeExpectancyContentPanelTopPanelConstraints.insets = new Insets(0, 8, 0, 0);newLifeExpectancyContentPanelTopJPanel.add(tenLeadingCausesOfDeathByAgeGroupJPanel, newLifeExpectancyContentPanelTopPanelConstraints);newLifeExpectancyContentPanelConstraints.fill = GridBagConstraints.BOTH;newLifeExpectancyContentPanelConstraints.insets = new Insets(3, 0, 3, 0);newLifeExpectancyContentJPanel.setOpaque(false);newLifeExpectancyContentPanelConstraints.gridwidth = 2;newLifeExpectancyContentPanelConstraints.fill = GridBagConstraints.VERTICAL;newLifeExpectancyContentJPanel.add(newLifeExpectancyContentPanelTopJPanel, newLifeExpectancyContentPanelConstraints);newLifeExpectancyContentPanelConstraints.gridwidth = 1;newLifeExpectancyContentPanelConstraints.gridx = 0;newLifeExpectancyContentPanelConstraints.gridy = 1;newLifeExpectancyContentPanelConstraints.weightx = 1;newLifeExpectancyContentPanelConstraints.weighty = 1;newLifeExpectancyContentPanelConstraints.anchor = GridBagConstraints.CENTER;newLifeExpectancyContentPanelConstraints.fill = GridBagConstraints.BOTH;newLifeExpectancyContentJPanel.add(lifeExpectancyGraphPanel, newLifeExpectancyContentPanelConstraints);newLifeExpectancyContentPanelConstraints.gridx = 1;actuarialLifeExpectancyPaperJPanel.add(newLifeExpectancyContentJPanel, actuarialLifeExpectancyPaperPanelConstraints);} else {actuarialLifeExpectancyPaperJPanel.add(lifeExpectancyContentJPanel, actuarialLifeExpectancyPaperPanelConstraints);}addTalkbackText("Decision Support - Treatment analysis - Life expectancy", null, false);validate();repaint();}public void fillOptimizedLifeExpectancyTextFieldsPanelWithTenLeadingCausesOfDeathInAgeGroup(String ageGroup) {optimizedLifeExpectancyTextFieldsJPanel.removeAll();JPanel optimizedLifeExpectancyTextFieldsHeaderJPanel = new JPanel(new GridBagLayout());JLabel optimizedLifeExpectancyTextFieldsHeader1JLabel = new JLabel("Infa.: Infallibility factor of the expected treatment (0 = disease state, 1 = never fail).");JLabel optimizedLifeExpectancyTextFieldsHeader2JLabel = new JLabel("Proc.: Procedural completeness factor of the expected treatment (0 = disease state, 1 = never fail).");GridBagConstraints optimizedLifeExpectancyTextFieldsPanelConstraints = new GridBagConstraints();GridBagConstraints optimizedLifeExpectancyTextFieldsHeaderPanelConstraints = new GridBagConstraints();optimizedLifeExpectancyTextFieldsHeaderJPanel.setOpaque(false);optimizedLifeExpectancyTextFieldsHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));optimizedLifeExpectancyTextFieldsHeaderJPanel.add(optimizedLifeExpectancyTextFieldsHeader1JLabel, optimizedLifeExpectancyTextFieldsHeaderPanelConstraints);optimizedLifeExpectancyTextFieldsHeaderPanelConstraints.gridy = 1;optimizedLifeExpectancyTextFieldsHeaderJPanel.add(optimizedLifeExpectancyTextFieldsHeader2JLabel, optimizedLifeExpectancyTextFieldsHeaderPanelConstraints);JLabel leadingCause1JLabel = new JLabel();JLabel leadingCause2JLabel = new JLabel();JLabel leadingCause3JLabel = new JLabel();JLabel leadingCause4JLabel = new JLabel();JLabel leadingCause5JLabel = new JLabel();JLabel leadingCause6JLabel = new JLabel();JLabel leadingCause7JLabel = new JLabel();JLabel leadingCause8JLabel = new JLabel();JLabel leadingCause9JLabel = new JLabel();JLabel leadingCause10JLabel = new JLabel();JTextField infallibilityFactor1JTextField = new JTextField(3);JTextField infallibilityFactor2JTextField = new JTextField(3);JTextField infallibilityFactor3JTextField = new JTextField(3);JTextField infallibilityFactor4JTextField = new JTextField(3);JTextField infallibilityFactor5JTextField = new JTextField(3);JTextField infallibilityFactor6JTextField = new JTextField(3);JTextField infallibilityFactor7JTextField = new JTextField(3);JTextField infallibilityFactor8JTextField = new JTextField(3);JTextField infallibilityFactor9JTextField = new JTextField(3);JTextField infallibilityFactor10JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor1JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor2JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor3JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor4JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor5JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor6JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor7JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor8JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor9JTextField = new JTextField(3);JTextField treatmentProceduralCompletenessFactor10JTextField = new JTextField(3);infallibilityFactor1JTextField.addActionListener(this);infallibilityFactor2JTextField.addActionListener(this);infallibilityFactor3JTextField.addActionListener(this);infallibilityFactor4JTextField.addActionListener(this);infallibilityFactor5JTextField.addActionListener(this);infallibilityFactor6JTextField.addActionListener(this);infallibilityFactor7JTextField.addActionListener(this);infallibilityFactor8JTextField.addActionListener(this);infallibilityFactor9JTextField.addActionListener(this);infallibilityFactor10JTextField.addActionListener(this);treatmentProceduralCompletenessFactor1JTextField.addActionListener(this);treatmentProceduralCompletenessFactor2JTextField.addActionListener(this);treatmentProceduralCompletenessFactor3JTextField.addActionListener(this);treatmentProceduralCompletenessFactor4JTextField.addActionListener(this);treatmentProceduralCompletenessFactor5JTextField.addActionListener(this);treatmentProceduralCompletenessFactor6JTextField.addActionListener(this);treatmentProceduralCompletenessFactor7JTextField.addActionListener(this);treatmentProceduralCompletenessFactor8JTextField.addActionListener(this);treatmentProceduralCompletenessFactor9JTextField.addActionListener(this);treatmentProceduralCompletenessFactor10JTextField.addActionListener(this);infallibilityFactor1JTextField.addFocusListener(this);infallibilityFactor2JTextField.addFocusListener(this);infallibilityFactor3JTextField.addFocusListener(this);infallibilityFactor4JTextField.addFocusListener(this);infallibilityFactor5JTextField.addFocusListener(this);infallibilityFactor6JTextField.addFocusListener(this);infallibilityFactor7JTextField.addFocusListener(this);infallibilityFactor8JTextField.addFocusListener(this);infallibilityFactor9JTextField.addFocusListener(this);infallibilityFactor10JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor1JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor2JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor3JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor4JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor5JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor6JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor7JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor8JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor9JTextField.addFocusListener(this);treatmentProceduralCompletenessFactor10JTextField.addFocusListener(this);if (ageGroup.equals("all ages")) {leadingCause1JLabel.setText("Fully implantable replaceable heart: ");leadingCause2JLabel.setText("Cancer therapy: ");leadingCause3JLabel.setText("Fully implantable replaceable lungs: ");leadingCause4JLabel.setText("Replaceable blood vessels, thrombus filtering and anticoagulants");leadingCause5JLabel.setText("Accident risk assement panel: ");leadingCause6JLabel.setText("Alzheimer's disease treatment: ");leadingCause7JLabel.setText("Pancreatic cell repopulation: ");leadingCause8JLabel.setText("Innoculations");leadingCause9JLabel.setText("Fully implantable replaceable kidneys: ");leadingCause10JLabel.setText("Suicide risk assesment panel: ");infallibilityFactor1JTextField.setActionCommand("replaceableHeartLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("cancerLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("replaceableLungsLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("alzheimersDiseaseTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("replaceableKidneysLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("intentionalSelfHarmSuicideMortalityRateLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("replaceableHeartLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("cancerLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("replaceableLungsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("alzheimersDiseaseTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("replaceableKidneysLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("intentionalSelfHarmSuicideMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Cerebrovascular diseases (I60-I69)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Alzheimer's disease (G30)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Diabetes mellitus (E10-E14)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Influenza and pneumonia (J09-J18)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Cerebrovascular diseases (I60-I69)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Alzheimer's disease (G30)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Diabetes mellitus (E10-E14)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Influenza and pneumonia (J09-J18)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|treatmentProcedural");} else if (ageGroup.equals("0")) {leadingCause1JLabel.setText("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)");leadingCause2JLabel.setText("Disorders related to short gestation and low birth weight, not elsewhere classified (P07)");leadingCause3JLabel.setText("Sudden infant death syndrome (R95)");leadingCause4JLabel.setText("Newborn affected by maternal complications of pregnancy (P01)");leadingCause5JLabel.setText("Accidents (unintentional injuries) (V01-X59)");leadingCause6JLabel.setText("Newborn affected by complications of placenta, cord and membranes (P02)");leadingCause7JLabel.setText("Bacterial sepsis of newborn (P36)");leadingCause8JLabel.setText("Respiratory distress of newborn (P22)");leadingCause9JLabel.setText("Diseases of the circulatory system (I00-I99)");leadingCause10JLabel.setText("Neonatal hemorrhage (P50-P52,P54)");infallibilityFactor1JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("suddenInfantDeathSyndromeMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("bacterialSepsisOfNewbornMortalityRateMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("respiratoryDistressOfNewbornMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("diseasesOfTheCirculatorySystemMortalityRateJPanelMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("neonatalHemorrhageMortalityRateMortalityRateLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("disordersRelatedToShortGestationAndLowBirthWeightNotElsewhereClassifiedMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("suddenInfantDeathSyndromeMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("newbornAffectedByMaternalComplicationsOfPregnancyMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("newbornAffectedByComplicationsOfPlacentaCordAndMembranesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("bacterialSepsisOfNewbornMortalityRateMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("respiratoryDistressOfNewbornMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("diseasesOfTheCirculatorySystemMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("neonatalHemorrhageMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Disorders related to short gestation and low birth weight, not elsewhere classified (P07)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Sudden infant death syndrome (R95)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Newborn affected by complications of placenta, cord and membranes (P02)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Accidents (unintentional injuries) (V01-X59)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Newborn affected by complications of placenta, cord and membranes (P02)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Bacterial sepsis of newborn (P36)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Respiratory distress of newborn (P22)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Diseases of the circulatory system (I00-I99)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Neonatal hemorrhage (P50-P52,P54)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Disorders related to short gestation and low birth weight, not elsewhere classified (P07)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Sudden infant death syndrome (R95)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Newborn affected by complications of placenta, cord and membranes (P02)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Accidents (unintentional injuries) (V01-X59)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Newborn affected by complications of placenta, cord and membranes (P02)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Bacterial sepsis of newborn (P36)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Respiratory distress of newborn (P22)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Diseases of the circulatory system (I00-I99)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Neonatal hemorrhage (P50-P52,P54)|treatmentProcedural");} else if (ageGroup.equals("1 to 4")) {leadingCause1JLabel.setText("Accidents (unintentional injuries)");leadingCause2JLabel.setText("Congenital malformations, deformations");leadingCause3JLabel.setText("Assault (homocide)");leadingCause4JLabel.setText("Malignant neoplasms");leadingCause5JLabel.setText("Diseases of heart");leadingCause6JLabel.setText("Influenza and pneumonia");leadingCause7JLabel.setText("Septicemia");leadingCause8JLabel.setText("Chronic lower respiratory disease");leadingCause9JLabel.setText("In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior");leadingCause10JLabel.setText("Cerebrovascular disease");infallibilityFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("assaultHomocideMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("cancerLeadingCauseInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("replaceableHeartLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("septicemiaInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("replaceableLungsLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("assaultHomocideMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("cancerLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("replaceableHeartLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("septicemiaTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("replaceableLungsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Malignant neoplasms (C00-C97)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Influenza and pneumonia (J09-J18)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Septicemia (A40-A41)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Cerebrovascular diseases (I60-I69)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Influenza and pneumonia (J09-J18)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Septicemia (A40-A41)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Cerebrovascular diseases (I60-I69)|treatmentProcedural");} else if (ageGroup.equals("5 to 14")) {leadingCause1JLabel.setText("Accidents (unintentional injuries)");leadingCause2JLabel.setText("Malignant neoplasms");leadingCause3JLabel.setText("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)");leadingCause4JLabel.setText("Intentional self-harm (suicide)");leadingCause5JLabel.setText("Assault (homocide)");leadingCause6JLabel.setText("Diseases of heart");leadingCause7JLabel.setText("Chronic lower respiratory disease");leadingCause8JLabel.setText("Influenza and pneumonia");leadingCause9JLabel.setText("Cerebrovascular disease");leadingCause10JLabel.setText("In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior");infallibilityFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("intentionalSelfHarmSuicideInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("assaultHomocideLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("cancerLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("intentionalSelfHarmSuicideTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("assaultHomocideLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("replaceableHeartTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("replaceableLungsTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("influenzaAndPneumoniaTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("inSituNeoplasmsBenignNeoplasmsAndNeoplasmsOfUncertainOrUnknownBehaviorLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|infallibilityFactor|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Assault (homocide) (U01-U02,X85-Y09,Y87.1)infallibilityFactortor");infallibilityFactor6JTextField.setName("21|22|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Influenza and pneumonia (J09-J18)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Cerebrovascular diseases (I60-I69)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Influenza and pneumonia (J09-J18)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Cerebrovascular diseases (I60-I69)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)|treatmentProcedural");} else if (ageGroup.equals("15 to 24")) {leadingCause1JLabel.setText("Accidents (unintentional injuries)");leadingCause2JLabel.setText("Intentional self harm (suicide)");leadingCause3JLabel.setText("Assault (homocide)");leadingCause4JLabel.setText("Malignant neoplasms");leadingCause5JLabel.setText("Diseases of heart");leadingCause6JLabel.setText("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)");leadingCause7JLabel.setText("Influenza and pneumonia");leadingCause8JLabel.setText("Cerebrovascular disease");leadingCause9JLabel.setText("Pregnancy, child birth and the puerperium");leadingCause10JLabel.setText("Chronic lower respiratory disease");infallibilityFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("intentionalSelfHarmSuicideInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("assaultHomocideLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("pregnancyChildBirthAndThePuerperiumMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("intentionalSelfHarmSuicideTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("assaultHomocideLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("congenitalMalformationsDeformationsAndChromosomalAbnormalitiesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("pregnancyChildBirthAndThePuerperiumMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Malignant neoplasms (C00-C97)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Influenza and pneumonia (J09-J18)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Cerebrovascular diseases (I60-I69)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Pregnancy, child birth, and the puerperium (O00-O99)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Influenza and pneumonia (J09-J18)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Cerebrovascular diseases (I60-I69)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Pregnancy, child birth, and the puerperium (O00-O99)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");} else if (ageGroup.equals("25 to 44")) {leadingCause1JLabel.setText("Accidents (unintentional injuries)");leadingCause1JLabel.setName("35.7");leadingCause2JLabel.setText("Malignant neoplasms");leadingCause2JLabel.setName("18.5");leadingCause3JLabel.setText("Diseases of heart");leadingCause3JLabel.setName("16.4");leadingCause4JLabel.setText("Intentional self harm (suicide)");leadingCause4JLabel.setName("14.9");leadingCause5JLabel.setText("Assault (homocide)");leadingCause5JLabel.setName("8.1");leadingCause6JLabel.setText("Chronic lower respiratory disease");leadingCause6JLabel.setName("3.5");leadingCause7JLabel.setText("Diabetes mellitus");leadingCause7JLabel.setName("3.0");leadingCause8JLabel.setText("Human immunodeficiency virus (HIV) disease");leadingCause8JLabel.setName("2.7");leadingCause9JLabel.setText("Cerebrovascular disease");leadingCause9JLabel.setName("2.7");leadingCause10JLabel.setText("Influenza and pneumonia");leadingCause10JLabel.setName("1.6");infallibilityFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("intentionalSelfHarmSuicideInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("assaultHomocideLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("hIVTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("intentionalSelfHarmSuicideTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("assaultHomocideLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("hIVTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Diabetes mellitus (E10-E14)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Human immunodeficiency virus (HIV) disease (B20-B24)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Cerebrovascular diseases (I60-I69)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Influenza and pneumonia (J09-J18)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Assault (homocide) (U01-U02,X85-Y09,Y87.1)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Diabetes mellitus (E10-E14)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Human immunodeficiency virus (HIV) disease (B20-B24)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Cerebrovascular diseases (I60-I69)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Influenza and pneumonia (J09-J18)|treatmentProcedural");} else if (ageGroup.equals("45 to 64")) {leadingCause1JLabel.setText("Malignant neoplasms");leadingCause2JLabel.setText("Diseases of heart");leadingCause3JLabel.setText("Accidents (unintentional injuries)");leadingCause4JLabel.setText("Chronic lower respiratory disease");leadingCause5JLabel.setText("Chronic liver disease and cirrhosis");leadingCause6JLabel.setText("Diabetes mellitus");leadingCause7JLabel.setText("Cerebrovascular disease");leadingCause8JLabel.setText("Intentional self harm (suicide)");leadingCause9JLabel.setText("Septicemia");leadingCause10JLabel.setText("Nephritis, nephrotic syndrome and nephrosiX");infallibilityFactor1JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("chronicLiverDiseaseAndCirrhosisMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("intentionalSelfHarmSuicideInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("septicemiaInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("replaceableKidneysLeadingCauseInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("chronicLiverDiseaseAndCirrhosisMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("intentionalSelfHarmSuicideTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("septicemiaTreatmentProceduralCompletenessFactorTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("replaceableKidneysLeadingCauseTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Malignant neoplasms (C00-C97)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Chronic liver disease and cirrhosis (K70,K73-K74)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Diabetes mellitus (E10-E14)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Cerebrovascular diseases (I60-I69)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Septicemia (A40-A41)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Chronic liver disease and cirrhosis (K70,K73-K74)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Diabetes mellitus (E10-E14)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Cerebrovascular diseases (I60-I69)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Intentional self harm (suicide) (U03,X60-X84,Y87.0)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Septicemia (A40-A41)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)|treatmentProcedural");} else if (ageGroup.equals("65 years and older")) {leadingCause1JLabel.setText("Diseases of heart");leadingCause2JLabel.setText("Malignant neoplasms");leadingCause3JLabel.setText("Chronic lower respiratory disease");leadingCause4JLabel.setText("Cerebrovascular disease");leadingCause5JLabel.setText("Alzheimer's disease");leadingCause6JLabel.setText("Diabetes mellitus");leadingCause7JLabel.setText("Influenza and pneumonia");leadingCause8JLabel.setText("Accidents (unintentional injuries)");leadingCause9JLabel.setText("Nephritis, nephrotic syndrome and nephrosiX");leadingCause10JLabel.setText("Septicemia");infallibilityFactor1JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor2JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor3JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor4JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseInfallibilityFactorJTextField");infallibilityFactor5JTextField.setActionCommand("alzheimersDiseaseTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor6JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseInfallibilityFactorJTextField");infallibilityFactor7JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor8JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseInfallibilityFactorJTextField");infallibilityFactor9JTextField.setActionCommand("replaceableKidneysLeadingCauseInfallibilityFactorJTextField");infallibilityFactor10JTextField.setActionCommand("septicemiaInfallibilityFactorJTextField");treatmentProceduralCompletenessFactor1JTextField.setActionCommand("replaceableHeartMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor2JTextField.setActionCommand("cancerLeadingCauseMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor3JTextField.setActionCommand("replaceableLungsMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor4JTextField.setActionCommand("replaceableBloodVesselsThrombusFilteringAnticoagulantsLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor5JTextField.setActionCommand("alzheimersDiseaseTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor6JTextField.setActionCommand("pancreaticRepopulationTherapyLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor7JTextField.setActionCommand("influenzaAndPneumoniaMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor8JTextField.setActionCommand("accidentsUnintentionalInjuriesMortalityRateLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor9JTextField.setActionCommand("replaceableKidneysLeadingCauseTreatmentProceduralCompletenessFactorJTextField");treatmentProceduralCompletenessFactor10JTextField.setActionCommand("septicemiaProceduralCompletenessFactorTreatmentProceduralCompletenessFactorJTextField");infallibilityFactor1JTextField.setName("06|07|Diseases of heart (I00-I09,I11,I13,I20-I51)|infallibilityFactor");infallibilityFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|infallibilityFactor");infallibilityFactor3JTextField.setName("12|13|Chronic lower respiratory diseases (J40-J47)|infallibilityFactor");infallibilityFactor4JTextField.setName("12|16|Cerebrovascular diseases (I60-I69)|infallibilityFactor");infallibilityFactor5JTextField.setName("18|19|Alzheimer's disease (G30)|infallibilityFactor");infallibilityFactor6JTextField.setName("21|22|Diabetes mellitus (E10-E14)|infallibilityFactor");infallibilityFactor7JTextField.setName("24|25|Influenza and pneumonia (J09-J18)|infallibilityFactor");infallibilityFactor8JTextField.setName("27|28|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|infallibilityFactor");infallibilityFactor9JTextField.setName("30|31|Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)|infallibilityFactor");infallibilityFactor10JTextField.setName("33|34|Septicemia (A40-A41)|infallibilityFactor");treatmentProceduralCompletenessFactor1JTextField.setName("06|07|Diseases of heart (I00-I09,I11,I13,I20-I51)|treatmentProcedural");treatmentProceduralCompletenessFactor2JTextField.setName("09|10|Malignant neoplasms (C00-C97)|treatmentProcedural");treatmentProceduralCompletenessFactor3JTextField.setName("12|13|Chronic lower respiratory diseases (J40-J47)|treatmentProcedural");treatmentProceduralCompletenessFactor4JTextField.setName("12|16|Cerebrovascular diseases (I60-I69)|treatmentProcedural");treatmentProceduralCompletenessFactor5JTextField.setName("18|19|Alzheimer's disease (G30)|treatmentProcedural");treatmentProceduralCompletenessFactor6JTextField.setName("21|22|Diabetes mellitus (E10-E14)|treatmentProcedural");treatmentProceduralCompletenessFactor7JTextField.setName("24|25|Influenza and pneumonia (J09-J18)|treatmentProcedural");treatmentProceduralCompletenessFactor8JTextField.setName("27|28|Accidents (unintentional injuries) (V01-X59,Y85-Y86)|treatmentProcedural");treatmentProceduralCompletenessFactor9JTextField.setName("30|31|Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)|treatmentProcedural");treatmentProceduralCompletenessFactor10JTextField.setName("33|34|Septicemia (A40-A41)|treatmentProcedural");}optimizedLifeExpectancyTextFieldsPanelConstraints.gridwidth = 6;optimizedLifeExpectancyTextFieldsJPanel.add(optimizedLifeExpectancyTextFieldsHeaderJPanel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 1;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.weightx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.fill = GridBagConstraints.NONE;optimizedLifeExpectancyTextFieldsPanelConstraints.insets = new Insets(3, 0, 3, 3);optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsPanelConstraints.gridwidth = 1;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 1;optimizedLifeExpectancyTextFieldsJPanel.add(infa1JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 2;optimizedLifeExpectancyTextFieldsJPanel.add(comp1JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infa2JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 5;optimizedLifeExpectancyTextFieldsJPanel.add(comp2JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 2;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause1JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 1;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor1JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 2;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor1JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause2JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 1;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor2JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 2;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor2JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause3JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 1;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor3JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 2;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor3JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 5;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause4JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 1;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor4JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 2;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor4JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 6;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 0;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause5JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 1;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor5JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 2;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor5JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 2;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause6JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor6JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 5;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor6JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause7JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor7JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 5;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor7JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause8JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor8JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 5;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor8JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 5;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause9JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor9JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 5;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor9JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridy = 6;optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 3;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.EAST;optimizedLifeExpectancyTextFieldsJPanel.add(leadingCause10JLabel, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 4;optimizedLifeExpectancyTextFieldsPanelConstraints.anchor = GridBagConstraints.CENTER;optimizedLifeExpectancyTextFieldsJPanel.add(infallibilityFactor10JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);optimizedLifeExpectancyTextFieldsPanelConstraints.gridx = 5;optimizedLifeExpectancyTextFieldsJPanel.add(treatmentProceduralCompletenessFactor10JTextField, optimizedLifeExpectancyTextFieldsPanelConstraints);}private void fillTreatmentAnalysisHeaderPanel(JPanel headerPanel, String analysisName) {if (headerPanel.equals(costAnalysisGraphHeaderJPanel)) {} else if (headerPanel.equals(treatmentEffectAnalysisPaperPanelHeaderJPanel)) {treatmentEffectAnalysisHeaderPanelNameJLabel.setText("Treatment Effect Analysis: " + analysisName);treatmentEffectAnalysisHeaderPanelDateCreatedJLabel.setText("Created: " + Calendar.getInstance().getTime());treatmentEffectAnalysisHeaderPanelUserIDJLabel.setText(Access.loggedOnUserID);} else if (headerPanel.equals(decisionModelsGraphHeaderJPanel)) {decisionModelsNameJLabel.setText(analysisName);decisionModelsGraphHeaderDateGraphCreatedJLabel.setText("Created: " + Calendar.getInstance().getTime());decisionModelsGraphHeaderUserIDJLabel.setText(Access.loggedOnUserID);} else if (headerPanel.equals(optimizedLifeExpectancyGraphHeaderJPanel)) {optimizedLifeExpectancyGraphNameJLabel.setText(analysisName);optimizedLifeExpectancyGraphPatientBirthdateContentJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient birthdate"));optimizedLifeExpectancyGraphHeaderPatientRaceJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient race"));optimizedLifeExpectancyGraphHeaderPatientSexJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient sex"));optimizedLifeExpectancyGraphHeaderDateGraphCreatedJLabel.setText("Created: " + Calendar.getInstance().getTime());optimizedLifeExpectancyGraphHeaderUserIDJLabel.setText(Access.loggedOnUserID);} else if (headerPanel.equals(lifeExpectancyGraphHeaderJPanel)) {lifeExpectancyGraphNameJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient name"));lifeExpectancyGraphPatientBirthdateContentJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient birthdate"));lifeExpectancyGraphHeaderPatientRaceJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient race"));lifeExpectancyGraphHeaderPatientSexJLabel.setText(Device.device.workspace.chartingWindow.getPatientInformation("patient sex"));lifeExpectancyGraphHeaderDateGraphCreatedJLabel.setText("Created: " + Calendar.getInstance().getTime());lifeExpectancyGraphHeaderUserIDJLabel.setText(Access.loggedOnUserID);}repaint();}private void fillDataQueryOutputJPanel(Vector<Vector<Object>> finds) {System.out.println("Enacting internal query return service");System.out.println("finds:");int innerInd = 0;int outerInd = 0;while (outerInd < finds.size()) {outerInd = 0;while (innerInd < finds.size()) {System.out.println("finds.elementAt(outerInd).elementAt(innerInd): " + finds.elementAt(outerInd).elementAt(innerInd));innerInd++;}outerInd++;}JPanel returnJPanel;JLabel return1JLabel;JLabel return2JLabel;JLabel return3JLabel;JLabel return4JLabel;JLabel return5JLabel;GridBagConstraints returnPanelConstraints = new GridBagConstraints();dataQueryOutputJPanel.removeAll();dataQueryOutputPanelConstraints.gridy = 0;int ind = 0;while (ind < finds.size()) {return1JLabel = new JLabel((String) (finds.elementAt(ind).elementAt(0)));return2JLabel = new JLabel((String) (finds.elementAt(ind).elementAt(1)));return3JLabel = new JLabel((String) (finds.elementAt(ind).elementAt(2)));return4JLabel = new JLabel((String) (finds.elementAt(ind).elementAt(3)));return5JLabel = new JLabel((String) (finds.elementAt(ind).elementAt(4)));returnJPanel = new JPanel(new GridBagLayout());returnJPanel.setBorder(new LineBorder(Color.BLACK, 1));returnPanelConstraints.gridy = 0;returnJPanel.add(return1JLabel, returnPanelConstraints);returnPanelConstraints.gridy = 1;returnJPanel.add(return2JLabel, returnPanelConstraints);returnPanelConstraints.gridy = 2;returnJPanel.add(return3JLabel, returnPanelConstraints);returnPanelConstraints.gridy = 3;returnJPanel.add(return4JLabel, returnPanelConstraints);returnPanelConstraints.gridy = 4;returnJPanel.add(return5JLabel, returnPanelConstraints);dataQueryOutputJPanel.add(returnJPanel, dataQueryOutputPanelConstraints);dataQueryOutputPanelConstraints.gridy++;ind++;}validate();repaint();}private void closeTreatmentAnalysis(String costAnalysisOrTreatmentEffectCurveOrDecisionModel) {if (costAnalysisOrTreatmentEffectCurveOrDecisionModel.equals("costAnalysis")) {clearTreatmentAnalysis("costAnalysis");costAnalysisScrollPaneJPanel.setVisible(false);addTalkbackText("Cost analysis, \"" + costAnalysisNameJLabel.getText() + ",\" closed.", null, true);} else if (costAnalysisOrTreatmentEffectCurveOrDecisionModel.equals("treatmentEffect")) {treatmentEffectAnalysisScrollPaneJPanel.setVisible(false);addTalkbackText("Treatment effect analysis, \"" + treatmentEffectAnalysisHeaderPanelNameJLabel.getText() + ",\" closed.", null, true);} else if (costAnalysisOrTreatmentEffectCurveOrDecisionModel.equals("decisionModels")) {decisionModelsJPanel.setVisible(false);addTalkbackText("Decision model, \"" + decisionModelsNameJLabel.getText() + ",\" closed.", null, true);}}public void newCostAnalysis() {int ind = 0;String newCostAnalysisName = newTreatmentAnalysisNameJTextField.getText();if (costAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText("Please close the open cost analysis.", null, true);} else {if (saveCostAnalysis(newCostAnalysisName, true)) {costAnalysisNameJLabel.setText(newCostAnalysisName);Calendar calendar = Calendar.getInstance();String monthString = null;int monthInt = calendar.get(Calendar.MONTH);if (monthInt == 2) {monthString = "May";} else {monthString = month[calendar.get(Calendar.MONTH)].substring(0, 3) + ". ";}String date = monthString + calendar.get(Calendar.DAY_OF_MONTH) + ", " + calendar.get(Calendar.YEAR);costAnalysisDateCreatedJLabel.setText("Created: " + date);costAnalysisGraphHeaderDateGraphLastModifiedJLabel.setText("Last modified: " + costAnalysisDateCreatedJLabel.getText().substring(9, costAnalysisDateCreatedJLabel.getText().length()));costAnalysisGraphHeaderUserIDJLabel.setText("by " + Access.loggedOnUserID);setCostAnalysisQALY(false);costAnalysisScrollPaneJPanel.setVisible(true);addTalkbackText("Cost analysis, \"" + newCostAnalysisName + ",\" created.", null, true);}}if (!keepNewTreatmentAnalysisPopupMenuOpenForTreatmentEffect) {newTreatmentAnalysisJPopupMenu.setVisible(false);} else {keepNewTreatmentAnalysisPopupMenuOpenForTreatmentEffect = false;}}public void newTreatmentEffectAnalysis() {String newTreatmentAnalysisNameTextFieldText = newTreatmentAnalysisNameJTextField.getText();if (!treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {if (true) {fillTreatmentAnalysisHeaderPanel(treatmentEffectAnalysisPaperPanelHeaderJPanel, newTreatmentAnalysisNameTextFieldText);treatmentEffectAnalysisScrollPaneJPanel.setVisible(true);addTalkbackText("New treatment effect analysis, \"" + newTreatmentAnalysisNameTextFieldText + ",\" created.", null, true);}} else {addTalkbackText("Please close the open treatment analysis.", null, true);}if (!keepNewTreatmentAnalysisPopupMenuOpenForCostAnalysis) {newTreatmentAnalysisJPopupMenu.setVisible(false);} else {keepNewTreatmentAnalysisPopupMenuOpenForCostAnalysis = false;}}private void clearTreatmentAnalysis(String analysisType) {if (analysisType.equals("costAnalysis")) {costPointsJPanel.removeAll();firstPageCostAnalysisICERValuesJPanel.removeAll();costAnalysisPaperJPanel.remove(costAnalysisGraphPanel);int ind = 1;while (ind < costAnalysisBaseJPanel.getComponentCount() - 1) {costAnalysisBaseJPanel.remove(ind);ind++;}costAnalysisGraphPanel = new CostAnalysisGraph("Effectiveness", null, null, null);costAnalysisPaperJPanel.add(costAnalysisGraphPanel, costAnalysisPaperPanelConstraints);setCostAnalysisQALY(false);}validate();repaint();}public void factorReductionOfMortalitiesWithTalkback() {System.out.println("factorReductionOfMortalitiesWithTalkback called");JTextField infallibilityFactorJTextField = null;JTextField proceduralCompletenessFactorJTextField = null;Vector<Double> proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases = new Vector<Double>();Vector<Vector<Double>> optimizedLifeExpectancies = new Vector<Vector<Double>>();boolean modifiedMortalityRatesCalculated = false;Vector<Double> deaths = LifeExpectancy1Panels.deathsByRaceAndSex(raceAndSexLifeTableName);modifiedMortalityRatesCalculated = calculateMortalityRateReductionsDueToSelectedDiseaseTreatments(deaths, proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases);int patientAge = 0;Vector patientIndexInformation = ((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(Integer.parseInt(ChartingWindow.openChartID))));String birthdateCalendarString = (String) (((Vector) (patientIndexInformation.elementAt(7))).elementAt(0));Calendar patientBirthTimeAndDate = Calendar.getInstance();if (null != birthdateCalendarString) {patientBirthTimeAndDate.setTimeInMillis(Long.parseLong(birthdateCalendarString));patientAge = Calendar.getInstance().get(Calendar.YEAR) - patientBirthTimeAndDate.get(Calendar.YEAR);}optimizedLifeExpectancies = calculateOptimizedLifeExpectancies(deaths, modifiedMortalityRatesCalculated, proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases, modifiedMortalityRatesCalculated);if (modifiedMortalityRatesCalculated) {if (includeAverageIncreasePerYearJToggleButton.isSelected()) {optimizedLifeExpectancyGraphPanelHeaderCardLayout.show(optimizedLifeExpectancyGraphPanelHeaderCardedJPanel, "optimizedLifeExpectancyGraphPanelActuarialOnlyHeaderJPanel");} else {optimizedLifeExpectancyGraphPanelHeaderCardLayout.show(optimizedLifeExpectancyGraphPanelHeaderCardedJPanel, "optimizedLifeExpectancyGraphPanelNonOptimizedHeaderJPanel");}} else if (includeAverageIncreasePerYearJToggleButton.isSelected()) {optimizedLifeExpectancyGraphPanelHeaderCardLayout.show(optimizedLifeExpectancyGraphPanelHeaderCardedJPanel, "optimizedLifeExpectancyGraphPanelOptimizedHeaderJPanel");}optimizedLifeExpectancyPaperJPanel.removeAll();optimizedLifeExpectancyGraphJPanel = new LifeExpectancy2Panels(optimizedLifeExpectancies, "Optimized life expectancy", "Age", patientAge);fillTreatmentAnalysisHeaderPanel(optimizedLifeExpectancyGraphHeaderJPanel, null);optimizedLifeExpectancyPaperHeaderJPanel.setOpaque(false);optimizedLifeExpectancyPaperPanelConstraints.gridy = 0;optimizedLifeExpectancyPaperPanelConstraints.gridx = 0;optimizedLifeExpectancyPaperHeaderPanelConstraints.insets = new Insets(0, 0, 0, 4);optimizedLifeExpectancyPaperHeaderPanelConstraints.gridx = 0;optimizedLifeExpectancyPaperHeaderJPanel.add(optimizedLifeExpectancyGraphHeaderJPanel, optimizedLifeExpectancyPaperHeaderPanelConstraints);optimizedLifeExpectancyPaperHeaderPanelConstraints.gridx = 1;optimizedLifeExpectancyPaperHeaderPanelConstraints.insets = new Insets(0, 4, 0, 0);optimizedLifeExpectancyPaperHeaderJPanel.add(optimizedLifeExpectancyGraphPanelHeaderCardedJPanel, optimizedLifeExpectancyPaperHeaderPanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.gridwidth = 2;optimizedLifeExpectancyPaperPanelConstraints.gridy = 0;optimizedLifeExpectancyPaperPanelConstraints.gridx = 0;optimizedLifeExpectancyPaperJPanel.add(optimizedLifeExpectancyPaperHeaderJPanel, optimizedLifeExpectancyPaperPanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.gridwidth = 1;optimizedLifeExpectancyPaperPanelConstraints.gridx = 0;optimizedLifeExpectancyPaperPanelConstraints.gridy = 1;optimizedLifeExpectancyPaperJPanel.add(optimizedLifeExpectancyGraphJPanel, optimizedLifeExpectancyPaperPanelConstraints);optimizedLifeExpectancyPaperPanelConstraints.gridx = 1;optimizedLifeExpectancyGraphJPanel.add(diseasesWithModifiedMortalitiesLegendPanel);validate();repaint();}public Vector<Vector<Double>> calculateOptimizedLifeExpectancies(Vector<Double> deaths, boolean proportionOfMortalityRateDueToSelectedDiseasesCalculated, Vector<Double> proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases, boolean optimizationsCalculated) {Vector<Vector<Double>> optimizedLifeExpectancies = new Vector<Vector<Double>>();double modifiedDeathSum = 0.0;double deathsModified = 0.0;double averageIncreasePerYear = 0.0;double mortality = 0.0;double mortalityModified = 0.0;double qx = -1;double qxModified = -1;double qxAtPreviousAge = -1;double qxAtPreviousAgeModified = -1;double lx = -1;double lxAtPreviousAge = 0.0;double l0 = 100000.0;double Tx = -1;double TxModified = -1;double Lx;double combinedRemainingLx = -0.0;double combinedRemainingLxModified = -0.0;double LxModified = -1;double lxModifiedNext = -1;double lxModified = -1;double lxAtPreviousAgeModified = -1;Vector<Double> modifiedMortalities = new Vector<Double>();optimizedLifeExpectancies.add(new Vector<Double>());if (includeAverageIncreasePerYearJToggleButton.isSelected()) {optimizedLifeExpectancies.add(new Vector<Double>());}if (optimizationsCalculated) {optimizedLifeExpectancies.add(new Vector<Double>());}if (includeAverageIncreasePerYearJToggleButton.isSelected()) {System.out.println("name: " + "lifeExpectancyAtBirthOverLastFortyYears " + raceAndSexLifeTableName);averageIncreasePerYear = LifeExpectancy1Panels.leastSquaresRegressionLine(LifeExpectancy1Panels.lifeTable("lifeExpectancyAtBirthOverLastFortyYears " + raceAndSexLifeTableName), null)[1];}int age = 0;while (age < deaths.size()) {lx = lxAtPreviousAge;qx = qxAtPreviousAge;Tx = 0;if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {lxModified = lxAtPreviousAgeModified;qxModified = qxAtPreviousAgeModified;TxModified = 0;}int ind = age;while (ind < deaths.size()) {if (ind == 0) {lx = l0;qx = sepTable("q0", raceAndSexLifeTableName, null);Lx = sepTable("L0", raceAndSexLifeTableName, null);mortality = deaths.elementAt(ind) / Lx;if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {lxModified = l0;qxModified = sepTable("q0", raceAndSexLifeTableName, proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(ind));LxModified = sepTable("L0", raceAndSexLifeTableName, proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(ind));mortalityModified = mortality * (1 - proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(ind));deathsModified = mortalityModified * LxModified;if (age == 0) {modifiedDeathSum = modifiedDeathSum + deathsModified;}}} else if (ind < deaths.size() - 1) {lx = lx * (1 - qx);Lx = (lx + (lx - deaths.elementAt(ind))) / 2;mortality = deaths.elementAt(ind) / Lx;qx = mortality / (1 + mortality / 2);if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {lxModified = lxModified * (1 - qxModified);mortalityModified = mortality * (1 - proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(ind));qxModified = mortalityModified / (1 + mortalityModified / 2);lxModifiedNext = lxModified * (1 - qxModified);LxModified = (lxModified + lxModifiedNext) / 2;deathsModified = mortalityModified * LxModified;if (age == 0) {modifiedDeathSum = modifiedDeathSum + deathsModified;}}if (age == 0 && ind > 84) {modifiedMortalities.add(mortalityModified);}} else {lx = deaths.elementAt(ind);if (combinedRemainingLx == -0.0) {combinedRemainingLx = LifeExpectancy1Panels.personYearsCombinedForAges100AndOver(raceAndSexLifeTableName);if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {combinedRemainingLxModified = combinedRemainingLxModified(modifiedMortalities, lxModified);}}Lx = combinedRemainingLx;if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {LxModified = combinedRemainingLxModified;lxModified = 100000 - modifiedDeathSum;}}if (ind == age) {lxAtPreviousAge = lx;qxAtPreviousAge = qx;lxAtPreviousAgeModified = lxModified;qxAtPreviousAgeModified = qxModified;}Tx = Tx + Lx;if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {TxModified = TxModified + LxModified;}ind++;}optimizedLifeExpectancies.elementAt(0).add(Tx / lxAtPreviousAge);if (proportionOfMortalityRateDueToSelectedDiseasesCalculated) {System.out.println("adding optimal expectency 1: " + TxModified / lxAtPreviousAgeModified);optimizedLifeExpectancies.elementAt(1).add(TxModified / lxAtPreviousAgeModified);if (includeAverageIncreasePerYearJToggleButton.isSelected()) {optimizedLifeExpectancies.elementAt(2).add(TxModified / lxAtPreviousAgeModified + ((deaths.size() - age) * averageIncreasePerYear * (1 - proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(age))));}} else if (includeAverageIncreasePerYearJToggleButton.isSelected()) {optimizedLifeExpectancies.elementAt(1).add(Tx / lxAtPreviousAge + ((deaths.size() - age) * averageIncreasePerYear * (1 - proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(age))));System.out.println("adding optimal expectency 3: " + Tx / lxAtPreviousAge + ((deaths.size() - age) * averageIncreasePerYear * (1 - proportionOfMortalityRatesAtEachAgeDueToSelectedDiseases.elementAt(age))));}age++;}return optimizedLifeExpectancies;}public boolean calculateMortalityRateReductionsDueToSelectedDiseaseTreatments(Vector<Double> deaths, Vector<Double> proportionOfMortalityRateDueToSelectedDiseases) {double mortalityRateDueToTreatableDiseases = 0;double infallibilityFactor;double proceduralCompletenessFactor;boolean proportionOfMortalityRateDueToSelectedDiseasesCalculated = false;String leadingCauseOfDisease;String ageGroup = null;String diseaseName = null;JTextField infallibilityFactorJTextField;JTextField completenessFactorJTextField;JPanel mortalityRateModificationJPanel = null;int age = 0;while (age < deaths.size()) {ageGroup = getAgeGroup(age);mortalityRateDueToTreatableDiseases = 0;int ind = 6;while (ind < optimizedLifeExpectancyTextFieldsJPanel.getComponentCount()) {infallibilityFactorJTextField = (JTextField) (optimizedLifeExpectancyTextFieldsJPanel.getComponent(ind));completenessFactorJTextField = (JTextField) (optimizedLifeExpectancyTextFieldsJPanel.getComponent(ind + 1));if (!infallibilityFactorJTextField.getText().equals("") && !completenessFactorJTextField.getText().equals("")) {proportionOfMortalityRateDueToSelectedDiseasesCalculated = true;infallibilityFactor = Double.parseDouble(infallibilityFactorJTextField.getText());proceduralCompletenessFactor = Double.parseDouble(completenessFactorJTextField.getText());diseaseName = infallibilityFactorJTextField.getName().substring(6, infallibilityFactorJTextField.getName().length() - 20);mortalityRateDueToTreatableDiseases = mortalityRateDueToTreatableDiseases + infallibilityFactor * proceduralCompletenessFactor * LifeExpectancy1Panels.mortalityRateForCauseOfDeathInAgeGroup(diseaseName, ageGroup);int panelInd = 0;while (null == mortalityRateModificationJPanel && panelInd < diseasesWithModifiedMortalitiesLegendPanel.getComponentCount()) {if (null != (diseasesWithModifiedMortalitiesLegendPanel.getComponent(panelInd)).getName() && (diseasesWithModifiedMortalitiesLegendPanel.getComponent(panelInd)).getName().equals(diseaseName)) {mortalityRateModificationJPanel = (JPanel) (diseasesWithModifiedMortalitiesLegendPanel.getComponent(panelInd));mortalityRateModificationJPanel.setVisible(true);}panelInd++;}}ind = ind + 3;}proportionOfMortalityRateDueToSelectedDiseases.add(mortalityRateDueToTreatableDiseases);age++;}return proportionOfMortalityRateDueToSelectedDiseasesCalculated;}public String getAgeGroup(int age) {String ageGroup = "all ages";if (age == 0) {ageGroup = "0";} else if (age > 0 && age < 5) {ageGroup = "1 to 4";} else if (age > 4 && age < 15) {ageGroup = "5 to 14";} else if (age > 14 && age < 25) {ageGroup = "15 to 24";} else if (age > 24 && age < 45) {ageGroup = "25 to 44";} else if (age > 44 && age < 65) {ageGroup = "45 to 64";} else if (age >= 65) {ageGroup = "65 years and older";}return ageGroup;}public void addAdjustedMortalityRateToMortalityRateModificationPanel(JLabel jLabel, Vector<Double> pMortalityRateAdjustmentsToAddToMortalityRateModificationPanel) {String percentString = jLabel.getText();String returnString = "";int ind = 0;while (ind < pMortalityRateAdjustmentsToAddToMortalityRateModificationPanel.size()) {String percent = String.valueOf(((double) (Math.round(1000 * pMortalityRateAdjustmentsToAddToMortalityRateModificationPanel.elementAt(ind)))) / 10);if (ind == 0) {if (!percent.equals("0.0")) {returnString = percent + "% for ages 0 to 1";}} else if (ind == 1) {if (!percent.equals("0.0")) {returnString = ", " + percent + "% for ages 1 to 4";}} else if (ind == 2) {if (!percent.equals("0.0")) {returnString = ", " + percent + "% for ages 5 to 14";}} else if (ind == 3) {if (!percent.equals("0.0")) {returnString = ", " + percent + "% for ages 15 to 24";}} else if (ind == 4) {if (!percent.equals("0.0")) {returnString = ", " + percent + "% for ages 25 to 44";}} else if (ind == 5) {if (!percent.equals("0.0")) {returnString = ", " + percent + "% for ages 45 to 64";}} else if (ind == 6) {if (!percent.equals("0.0")) {returnString = ", " + percent + "% for ages 65 and over";}}returnString = returnString + ".";ind++;}jLabel.setText(returnString);}public double combinedRemainingLxModified(Vector<Double> mortalities, double lxAt99) {Vector<Double> years = new Vector<Double>();double[] interceptAndSlope;double predictedMortality;double predictedMortalityNext;double predictedMortalityPrevious;double lna;double B;Vector<Double> Y = new Vector<Double>();double qx;double qxPrevious;double age = 100 - mortalities.size();double lx = lxAt99;double qxNext;double lxNext;double Lx = 2;double combinedLx = 0.0;int ind = 0;while (ind < mortalities.size()) {years.add(age);age++;Y.add(Math.log(mortalities.elementAt(ind) / (1 - mortalities.elementAt(ind))));ind++;}interceptAndSlope = LifeExpectancy1Panels.leastSquaresRegressionLine(Y, years);lna = interceptAndSlope[0];B = interceptAndSlope[1];ind = 100;while (ind < 150) {predictedMortalityPrevious = Math.exp(lna + B * (ind - 1)) / (1 + Math.exp(lna + B * (ind - 1)));predictedMortality = Math.exp(lna + B * ind) / (1 + Math.exp(lna + B * ind));predictedMortalityNext = Math.exp(lna + B * (ind + 1)) / (1 + Math.exp(lna + B * (ind + 1)));qx = predictedMortality / (1 + predictedMortality / 2);qxPrevious = predictedMortalityPrevious / (1 + predictedMortalityPrevious / 2);qxNext = predictedMortalityNext / (1 + predictedMortalityNext / 2);lx = lx * (1 - qxPrevious);lxNext = lx * (1 - qxNext);Lx = (lx + lxNext) / 2;combinedLx = combinedLx + Lx;ind++;}return combinedLx;}public double sepTable(String termIdentifier, String cohort, Double proportionOfMortalityRateDueToSelectedDiseases) {System.out.println("sepTable(" + termIdentifier + ", " + cohort + ", " + proportionOfMortalityRateDueToSelectedDiseases + ")");double births0 = 0;double births1 = 0;double deaths0 = 0;double deaths1 = 0;double l0 = 100000;double l1 = 0;if (cohort.equals("all races U")) {cohort = "total population";}if (cohort.equals("total population")) {births0 = 4316233;births1 = 4247694;deaths0 = 3589;deaths1 = 24470;} else if (cohort.equals("males")) {births0 = 2208071;births1 = 2173389;deaths0 = 2041;deaths1 = 13628;} else if (cohort.equals("females")) {births0 = 2108791;births1 = 2074305;deaths0 = 1548;deaths1 = 10842;} else if (cohort.equals("white population")) {births0 = 3336626;births1 = 3274163;deaths0 = 2306;deaths1 = 15858;} else if (cohort.equals("white males")) {births0 = 1708315;births1 = 1676718;deaths0 = 1313;deaths1 = 8838;} else if (cohort.equals("white females")) {births0 = 1628311;births1 = 1597445;deaths0 = 993;deaths1 = 7020;} else if (termIdentifier.equals("black population")) {births0 = 675676;births1 = 670809;deaths0 = 1081;deaths1 = 7462;} else if (cohort.equals("black males")) {births0 = 343297;births1 = 340885;deaths0 = 599;deaths1 = 4149;} else if (cohort.equals("black females")) {births0 = 332397;births1 = 329924;deaths0 = 482;deaths1 = 3313;} else if (cohort.equals("Hispanic population")) {births0 = 1062779;births1 = 1041239;deaths0 = 739;deaths1 = 5082;} else if (cohort.equals("Hispanic males")) {births0 = 542174;births1 = 531999;deaths0 = 411;deaths1 = 2823;} else if (cohort.equals("Hispanic females")) {births0 = 520605;births1 = 509240;deaths0 = 329;deaths1 = 2258;} else if (cohort.equals("non-Hispanic white population")) {births0 = 2310333;births1 = 2267817;deaths0 = 1601;deaths1 = 10908;} else if (cohort.equals("non-Hispanic white males")) {births0 = 1184634;births1 = 1162622;deaths0 = 916;deaths1 = 6077;} else if (cohort.equals("non-Hispanic white females")) {births0 = 1125699;births1 = 1105195;deaths0 = 678;deaths1 = 4838;} else if (cohort.equals("non-Hispanic black population")) {births0 = 627191;births1 = 623031;deaths0 = 1010;deaths1 = 6884;} else if (cohort.equals("non-Hispanic black males")) {births0 = 318692;births1 = 316447;deaths0 = 561;deaths1 = 3855;} else if (cohort.equals("non-Hispanic black females")) {births0 = 308499;births1 = 306584;deaths0 = 445;deaths1 = 3033;} else {System.out.println("Critical error in sepTable(...): cohort string not recognized");}if (null != proportionOfMortalityRateDueToSelectedDiseases) {deaths0 = deaths0 - proportionOfMortalityRateDueToSelectedDiseases * deaths0;deaths1 = deaths1 - proportionOfMortalityRateDueToSelectedDiseases * deaths1;}if (termIdentifier.equals("q0")) {return (deaths0 + deaths1) * (1 - (deaths0 / (deaths0 + deaths1))) / births1 + (deaths0 + deaths1) * ((deaths0 / (deaths0 + deaths1))) / births0;} else if (termIdentifier.equals("L0")) {l1 = l0 * (1 - sepTable("q0", cohort, proportionOfMortalityRateDueToSelectedDiseases));return (deaths0 / (deaths0 + deaths1)) * l0 + (1 - (deaths0 / (deaths0 + deaths1))) * l1;} else {return 0;}}public void addCostAnalysisGraphPoint() {String errorMessage = null;int numPoints = costPointsJPanel.getComponentCount() + 2;String treatmentNameTextFieldText = costAnalysisTreatmentNameJTextField.getText();String treatmentCostTextFieldText = costAnalysisTreatmentCostJTextField.getText();String treatmentEffectivenessTextFieldText = costAnalysisTreatmentEffectivenessJTextField.getText();String utilityOrEffectiveness;String[] costEffectivenessTreatmentPointNames = new String[numPoints];double[] costPointsForXAxis = new double[numPoints];double[] effectivenessPointsForYAxis = new double[numPoints];costEffectivenessTreatmentPointNames[0] = null;costPointsForXAxis[0] = -1;effectivenessPointsForYAxis[0] = -1;try {if (null != treatmentEffectivenessTextFieldText && !treatmentEffectivenessTextFieldText.equals("")) {effectivenessPointsForYAxis[1] = Double.valueOf(treatmentEffectivenessTextFieldText);costAnalysisTreatmentEffectivenessJTextField.setText(String.valueOf(effectivenessPointsForYAxis[1]));} else {errorMessage = "Please enter the point's effectiveness/utility value.";}} catch (Exception e) {System.out.println("Please enter the point's effectiveness/utility value.");e.printStackTrace();errorMessage = "Please enter the point's effectiveness/utility value.";}try {if (null != treatmentCostTextFieldText && !treatmentCostTextFieldText.equals("")) {costPointsForXAxis[1] = Double.valueOf(treatmentCostTextFieldText);costAnalysisTreatmentCostJTextField.setText(String.valueOf(costPointsForXAxis[1]));} else {errorMessage = "Please enter a valid treatment cost.";}} catch (Exception e) {System.out.println("Please enter a valid treatment cost.");e.printStackTrace();errorMessage = "Please enter a valid treatment cost.";}if (null != treatmentNameTextFieldText || !treatmentNameTextFieldText.equals("")) {costEffectivenessTreatmentPointNames[1] = treatmentNameTextFieldText;} else {errorMessage = "Please enter the point's treatment name.";}if (null == errorMessage) {JPanel treatmentCostPointTreatmentNameJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointCostJPanel = new JPanel(new GridBagLayout());JPanel treatmentCostPointEffectivenessJPanel = new JPanel(new GridBagLayout());JPanel costPointJPanel = new JPanel(new GridBagLayout());GridBagConstraints treatmentCostPointTreatmentNamePanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointCostPanelConstraints = new GridBagConstraints();GridBagConstraints treatmentCostPointEffectivenessPanelConstraints = new GridBagConstraints();GridBagConstraints costPointPanelConstraints = new GridBagConstraints();JLabel newTreatmentCostPointTreatmentNameJLabel = new JLabel(costEffectivenessTreatmentPointNames[1]);JLabel newTreatmentCostPointCostJLabel = new JLabel(String.valueOf(costPointsForXAxis[1]));JLabel newTreatmentCostPointEffectivenessJLabel = new JLabel(String.valueOf(effectivenessPointsForYAxis[1]));treatmentCostPointCostHeaderJPanel.add(treatmentCostPointCostHeaderJLabel, treatmentCostPointCostHeaderPanelConstraints);treatmentCostPointEffectivenessHeaderJPanel.add(treatmentCostPointEffectivenessHeaderJLabel, treatmentCostPointEffectivenessHeaderPanelConstraints);treatmentCostPointCostJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setPreferredSize(costPointsCellPanelDimension);treatmentCostPointCostJPanel.setSize(costPointsCellPanelDimension);treatmentCostPointEffectivenessJPanel.setSize(costPointsCellPanelDimension);newTreatmentCostPointTreatmentNameJLabel.setFont(treatmentAnalysisDataFont);newTreatmentCostPointCostJLabel.setFont(treatmentAnalysisDataFont);newTreatmentCostPointEffectivenessJLabel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));treatmentCostPointCostJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));treatmentCostPointEffectivenessJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));treatmentCostPointTreatmentNameJPanel.setOpaque(false);treatmentCostPointCostJPanel.setOpaque(false);treatmentCostPointEffectivenessJPanel.setOpaque(false);treatmentCostPointTreatmentNameJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointCostJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointEffectivenessJPanel.setFont(treatmentAnalysisDataFont);treatmentCostPointTreatmentNameJPanel.add(newTreatmentCostPointTreatmentNameJLabel, treatmentCostPointTreatmentNamePanelConstraints);treatmentCostPointCostJPanel.add(newTreatmentCostPointCostJLabel, treatmentCostPointCostPanelConstraints);treatmentCostPointEffectivenessJPanel.add(newTreatmentCostPointEffectivenessJLabel, treatmentCostPointEffectivenessPanelConstraints);costPointJPanel.setBackground(Color.WHITE);costPointPanelConstraints.gridy = 0;costPointPanelConstraints.gridx = 0;costPointPanelConstraints.weightx = 1;costPointPanelConstraints.fill = GridBagConstraints.BOTH;costPointPanelConstraints.gridwidth = 2;costPointJPanel.add(treatmentCostPointTreatmentNameJPanel, costPointPanelConstraints);costPointPanelConstraints.gridy = 1;costPointPanelConstraints.gridwidth = 1;costPointPanelConstraints.gridx = 0;costPointJPanel.add(treatmentCostPointCostJPanel, costPointPanelConstraints);costPointPanelConstraints.gridx = 1;costPointJPanel.add(treatmentCostPointEffectivenessJPanel, costPointPanelConstraints);costPointsPanelConstraints.gridy++;costPointsJPanel.add(costPointJPanel, costPointsPanelConstraints);if (qualityAdjustedLifeYearsYesJToggleButton.isSelected()) {utilityOrEffectiveness = "Utility";} else {utilityOrEffectiveness = "Effectiveness";}int pointInd = 0;while (pointInd < numPoints - 1) {costEffectivenessTreatmentPointNames[pointInd + 1] = ((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(0))).getComponent(0))).getText();costPointsForXAxis[pointInd + 1] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());effectivenessPointsForYAxis[pointInd + 1] = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());pointInd++;}costAnalysisPaperJPanel.remove(costAnalysisGraphPanel);costAnalysisGraphPanel = new CostAnalysisGraph(utilityOrEffectiveness, costEffectivenessTreatmentPointNames, costPointsForXAxis, effectivenessPointsForYAxis);costAnalysisPaperJPanel.add(costAnalysisGraphPanel, costAnalysisPaperPanelConstraints);calculateCostAnalysisICERs();isCostAnalysisUnsaved = true;costAnalysisTreatmentNameJTextField.setText("");costAnalysisTreatmentCostJTextField.setText("");costAnalysisTreatmentEffectivenessJTextField.setText("");addTalkbackText("Added cost-" + utilityOrEffectiveness.toLowerCase() + " point, \"" + treatmentNameTextFieldText + ".\"", null, true);repaint();} else {addTalkbackText(errorMessage, null, true);}}public void calculateCostAnalysisICERs() {Vector<JPanel> iCERDisplayPanels = createICERDisplayPanels();GridBagConstraints firstPageCostAnalysisiCERValuesPanelConstraints = new GridBagConstraints();firstPageCostAnalysisiCERValuesPanelConstraints.weightx = 1;firstPageCostAnalysisiCERValuesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;firstPageCostAnalysisiCERValuesPanelConstraints.insets = new Insets(6, 0, 0, 0);costAnalysisBasePanelConstraints.gridy = 1;firstPageCostAnalysisICERValuesJPanel.removeAll();int componentInd = 1;while (componentInd < costAnalysisBaseJPanel.getComponentCount() - 1) {costAnalysisBaseJPanel.remove(componentInd);componentInd++;}int iCERDisplayPanelNumber = 0;int totalInd = 0;while (totalInd < 7 && totalInd < iCERDisplayPanels.size()) {firstPageCostAnalysisiCERValuesPanelConstraints.gridy++;firstPageCostAnalysisICERValuesJPanel.add(iCERDisplayPanels.elementAt(totalInd), firstPageCostAnalysisiCERValuesPanelConstraints);totalInd++;}int itemOnPageInd;int pageInd = 1;while (totalInd < iCERDisplayPanels.size()) {JPanel newCostAnalysisICERPaperJPanel = new JPanel(new GridBagLayout());JPanel newCostAnalysisPaperPusherJPanel = new JPanel(new GridBagLayout());JLabel pageNumberJLabel = new JLabel(String.valueOf(costAnalysisBaseJPanel.getComponentCount() - 1));GridBagConstraints newCostAnalysisICERPaperPanelConstraints = new GridBagConstraints();newCostAnalysisPaperPusherJPanel.setOpaque(false);newCostAnalysisICERPaperJPanel.setPreferredSize(landscapePaperSizeDimension);newCostAnalysisICERPaperJPanel.setName("newCostAnalysisICERPaperJPanel");newCostAnalysisICERPaperJPanel.setBackground(Color.WHITE);newCostAnalysisICERPaperJPanel.setBorder(SystemWindow.paperBorder);costAnalysisBaseJPanel.add(newCostAnalysisICERPaperJPanel, costAnalysisBasePanelConstraints);costAnalysisBasePanelConstraints.gridy++;newCostAnalysisICERPaperPanelConstraints.gridx = 0;newCostAnalysisICERPaperPanelConstraints.gridy = 1;newCostAnalysisICERPaperPanelConstraints.gridwidth = 2;newCostAnalysisICERPaperPanelConstraints.insets = new Insets(0, paperMargin, paperMargin, paperMargin);newCostAnalysisICERPaperPanelConstraints.weighty = 1;newCostAnalysisICERPaperPanelConstraints.anchor = GridBagConstraints.SOUTH;newCostAnalysisICERPaperJPanel.add(pageNumberJLabel, newCostAnalysisICERPaperPanelConstraints);newCostAnalysisICERPaperPanelConstraints.gridy = 0;newCostAnalysisICERPaperPanelConstraints.gridx = 5;newCostAnalysisICERPaperPanelConstraints.gridwidth = 1;newCostAnalysisICERPaperPanelConstraints.insets = new Insets(0, 0, 0, 0);newCostAnalysisICERPaperPanelConstraints.weightx = 1;newCostAnalysisICERPaperJPanel.add(newCostAnalysisPaperPusherJPanel, newCostAnalysisICERPaperPanelConstraints);newCostAnalysisICERPaperPanelConstraints.gridx = 0;newCostAnalysisICERPaperPanelConstraints.insets = new Insets(paperMargin, paperMargin, 4, paperMargin);newCostAnalysisICERPaperPanelConstraints.anchor = GridBagConstraints.NORTHWEST;newCostAnalysisICERPaperPanelConstraints.weightx = 0;pageInd++;itemOnPageInd = 0;while (itemOnPageInd < 60 && totalInd < iCERDisplayPanels.size()) {JPanel newCostAnalysisICERValuesJPanel = new JPanel(new GridBagLayout());JPanel newICERValuesBaseJPanel = new JPanel(new GridBagLayout());JPanel newPageCostAnalysisICERValuesJPanel = new JPanel(new GridBagLayout());JPanel newICERValuesPanelPusherJPanel = new JPanel(new GridBagLayout());GridBagConstraints newPageCostAnalysisICERValuesPanelConstraints = new GridBagConstraints();GridBagConstraints newCostAnalysisICERValuesPanelConstraints = new GridBagConstraints();GridBagConstraints newICERValuesBasePanelConstraints = new GridBagConstraints();newPageCostAnalysisICERValuesPanelConstraints.weightx = 1;newPageCostAnalysisICERValuesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;newPageCostAnalysisICERValuesPanelConstraints.insets = new Insets(6, 0, 0, 0);newPageCostAnalysisICERValuesJPanel.setOpaque(false);newICERValuesBasePanelConstraints.gridy = 0;newICERValuesBasePanelConstraints.weighty = 0;newICERValuesBasePanelConstraints.weightx = 1;newICERValuesBasePanelConstraints.fill = GridBagConstraints.BOTH;newICERValuesBaseJPanel.setBackground(Color.WHITE);newICERValuesBaseJPanel.setBorder(new LineBorder(Color.GRAY, 1));newICERValuesBaseJPanel.add(newICERHeaderPanel(), newICERValuesBasePanelConstraints);newICERValuesBasePanelConstraints.gridy = 1;newICERValuesBaseJPanel.add(newPageCostAnalysisICERValuesJPanel, newICERValuesBasePanelConstraints);newICERValuesBasePanelConstraints.gridy = 2;newICERValuesBasePanelConstraints.weighty = 1;newICERValuesPanelPusherJPanel.setOpaque(false);newICERValuesBaseJPanel.add(newICERValuesPanelPusherJPanel, newICERValuesBasePanelConstraints);newCostAnalysisICERValuesJPanel.add(newICERValuesBaseJPanel, newCostAnalysisICERValuesPanelConstraints);newCostAnalysisICERPaperJPanel.add(newCostAnalysisICERValuesJPanel, newCostAnalysisICERPaperPanelConstraints);newCostAnalysisICERPaperPanelConstraints.gridx++;int itemOnICERPanelInd = 0;iCERDisplayPanelNumber++;while (itemOnICERPanelInd < 11 && totalInd < iCERDisplayPanels.size()) {newPageCostAnalysisICERValuesPanelConstraints.gridy++;newPageCostAnalysisICERValuesJPanel.add(iCERDisplayPanels.elementAt(totalInd), newPageCostAnalysisICERValuesPanelConstraints);totalInd++;itemOnPageInd++;itemOnICERPanelInd++;}}}}public Vector<JPanel> createICERDisplayPanels() {Vector<JPanel> iCERPanels = new Vector<JPanel>();int numPoints = costPointsJPanel.getComponentCount();JPanel iCERValuesDataJPanel;JPanel costOfTreatmentBJPanel;JPanel costOfTreatmentAJPanel;JPanel effectivenessOfTreatmentBJPanel;JPanel effectivenessOfTreatmentAJPanel;JPanel iCERValueJPanel;JPanel treatmentBTreatmentANamesJPanel;GridBagConstraints iCERValuesDataPanelConstraints;JLabel costOfTreatmentBJLabel;JLabel costOfTreatmentAJLabel;JLabel effectivenessOfTreatmentBJLabel;JLabel effectivenessOfTreatmentAJLabel;JLabel iCERValueJLabel;JLabel treatmentCostsAnalysisTreatmentBTreatmentAJLabel;String iCERValue;String treatmentBName;double costOfTreatmentB;double effectivenessOfTreatmentB;double costOfTreatmentA;double effectivenessOfTreatmentA;String treatmentAName;int pointBInd = 0;int pointAInd;GridBagConstraints panelConstraints;while (pointBInd < numPoints) {treatmentBName = ((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointBInd))).getComponent(0))).getComponent(0))).getText();costOfTreatmentB = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointBInd))).getComponent(1))).getComponent(0))).getText());effectivenessOfTreatmentB = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointBInd))).getComponent(2))).getComponent(0))).getText());pointAInd = pointBInd + 1;while (pointAInd < numPoints) {treatmentAName = ((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointAInd))).getComponent(0))).getComponent(0))).getText();costOfTreatmentA = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointAInd))).getComponent(1))).getComponent(0))).getText());effectivenessOfTreatmentA = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointAInd))).getComponent(2))).getComponent(0))).getText());iCERValueJLabel = new JLabel();if (effectivenessOfTreatmentB == effectivenessOfTreatmentA) {iCERValue = "\u221E";iCERValueJLabel.setFont(new Font("serif", Font.PLAIN, 18));} else {iCERValue = String.valueOf((costOfTreatmentB - costOfTreatmentA) / (effectivenessOfTreatmentB - effectivenessOfTreatmentA));iCERValueJLabel.setFont(iCERNormalPlainFont);}iCERValueJLabel.setText(iCERValue);iCERValuesDataJPanel = new JPanel(new GridBagLayout());costOfTreatmentBJPanel = new JPanel(new GridBagLayout());effectivenessOfTreatmentBJPanel = new JPanel(new GridBagLayout());costOfTreatmentAJPanel = new JPanel(new GridBagLayout());effectivenessOfTreatmentAJPanel = new JPanel(new GridBagLayout());iCERValueJPanel = new JPanel(new GridBagLayout());treatmentBTreatmentANamesJPanel = new JPanel(new GridBagLayout());iCERValuesDataPanelConstraints = new GridBagConstraints();panelConstraints = new GridBagConstraints();panelConstraints.weightx = 1;treatmentCostsAnalysisTreatmentBTreatmentAJLabel = new JLabel(treatmentBName + ", " + treatmentAName);costOfTreatmentBJLabel = new JLabel(String.valueOf(costOfTreatmentB));costOfTreatmentAJLabel = new JLabel(String.valueOf(costOfTreatmentA));effectivenessOfTreatmentBJLabel = new JLabel(String.valueOf(effectivenessOfTreatmentB));effectivenessOfTreatmentAJLabel = new JLabel(String.valueOf(effectivenessOfTreatmentA));costOfTreatmentBJLabel.setFont(treatmentAnalysisDataFont);costOfTreatmentAJLabel.setFont(treatmentAnalysisDataFont);effectivenessOfTreatmentBJLabel.setFont(treatmentAnalysisDataFont);effectivenessOfTreatmentAJLabel.setFont(treatmentAnalysisDataFont);costOfTreatmentBJLabel.setOpaque(false);costOfTreatmentAJLabel.setOpaque(false);effectivenessOfTreatmentBJLabel.setOpaque(false);effectivenessOfTreatmentAJLabel.setOpaque(false);iCERValueJLabel.setOpaque(false);treatmentBTreatmentANamesJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));costOfTreatmentBJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));costOfTreatmentAJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));effectivenessOfTreatmentBJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));effectivenessOfTreatmentAJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));iCERValueJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));costOfTreatmentBJPanel.setOpaque(false);costOfTreatmentAJPanel.setOpaque(false);effectivenessOfTreatmentBJPanel.setOpaque(false);effectivenessOfTreatmentAJPanel.setOpaque(false);iCERValueJPanel.setOpaque(false);treatmentBTreatmentANamesJPanel.setOpaque(false);costOfTreatmentBJPanel.add(costOfTreatmentBJLabel, panelConstraints);costOfTreatmentAJPanel.add(costOfTreatmentAJLabel, panelConstraints);effectivenessOfTreatmentBJPanel.add(effectivenessOfTreatmentBJLabel, panelConstraints);effectivenessOfTreatmentAJPanel.add(effectivenessOfTreatmentAJLabel, panelConstraints);iCERValueJPanel.add(iCERValueJLabel, panelConstraints);treatmentBTreatmentANamesJPanel.add(treatmentCostsAnalysisTreatmentBTreatmentAJLabel, panelConstraints);iCERValuesDataJPanel.setBackground(Color.WHITE);iCERValuesDataPanelConstraints.gridy = 0;iCERValuesDataPanelConstraints.gridx = 0;iCERValuesDataPanelConstraints.gridwidth = 5;iCERValuesDataPanelConstraints.weightx = 1;iCERValuesDataPanelConstraints.fill = GridBagConstraints.BOTH;iCERValuesDataPanelConstraints.insets = new Insets(0, 0, 0, 0);iCERValuesDataJPanel.add(treatmentBTreatmentANamesJPanel, iCERValuesDataPanelConstraints);iCERValuesDataPanelConstraints.gridwidth = 1;iCERValuesDataPanelConstraints.gridy = 1;iCERValuesDataPanelConstraints.gridx = 0;iCERValuesDataJPanel.add(costOfTreatmentBJPanel, iCERValuesDataPanelConstraints);iCERValuesDataPanelConstraints.gridx = 1;iCERValuesDataJPanel.add(costOfTreatmentAJPanel, iCERValuesDataPanelConstraints);iCERValuesDataPanelConstraints.gridx = 2;iCERValuesDataJPanel.add(effectivenessOfTreatmentBJPanel, iCERValuesDataPanelConstraints);iCERValuesDataPanelConstraints.gridx = 3;iCERValuesDataJPanel.add(effectivenessOfTreatmentAJPanel, iCERValuesDataPanelConstraints);iCERValuesDataPanelConstraints.gridx = 4;iCERValuesDataJPanel.add(iCERValueJPanel, iCERValuesDataPanelConstraints);iCERPanels.add(iCERValuesDataJPanel);pointAInd++;}pointBInd++;}return iCERPanels;}public Component newICERHeaderPanel() {JLabel costOfTreatmentAAJLabel = new JLabel("A");JLabel costOfTreatmentBCJLabel = new JLabel("C");JLabel costOfTreatmentBBJLabel = new JLabel("B");JLabel costOfTreatmentACJLabel = new JLabel("C");JLabel effectivenessOfTreatmentBEJLabel = new JLabel("E");JLabel effectivenessOfTreatmentBBJLabel = new JLabel("B");JPanel iCERValuesHeaderJPanel = new JPanel(new GridBagLayout());JLabel iCERRatioJLabel = new JLabel("ICER");JPanel iCERValuesTreatmentBTreatmentANamesHeaderJPanel = new JPanel(new GridBagLayout());JLabel iCERValuesTreatmentBTreatmentANamesHeaderJLabel = new JLabel("Treatment B, Treatment A");JPanel iCERValuesCostOfTreatmentBHeaderJPanel = new JPanel(new GridBagLayout());JPanel iCERValuesCostOfTreatmentAHeaderJPanel = new JPanel(new GridBagLayout());JPanel iCERValuesOfTreatmentBHeaderJPanel = new JPanel(new GridBagLayout());JPanel iCERValuesOfTreatmentAHeaderJPanel = new JPanel(new GridBagLayout());JLabel effectivenessOfTreatmentAEJLabel = new JLabel("E");JLabel effectivenessOfTreatmentAAJLabel = new JLabel("A");JPanel iCERValuesRatioHeaderJPanel = new JPanel(new GridBagLayout());iCERRatioJLabel.setFont(treatmentAnalysisDataFont);effectivenessOfTreatmentAEJLabel.setFont(iCERNormalItalicsFont);effectivenessOfTreatmentAAJLabel.setFont(iCERSmallItalicsFont);effectivenessOfTreatmentBEJLabel.setFont(iCERNormalItalicsFont);effectivenessOfTreatmentBBJLabel.setFont(iCERSmallItalicsFont);costOfTreatmentBCJLabel.setFont(iCERNormalItalicsFont);costOfTreatmentBBJLabel.setFont(iCERSmallItalicsFont);costOfTreatmentACJLabel.setFont(iCERNormalItalicsFont);costOfTreatmentAAJLabel.setFont(iCERSmallItalicsFont);GridBagConstraints iCERValuesHeaderPanelConstraints = new GridBagConstraints();iCERValuesCostOfTreatmentBHeaderJPanel.setOpaque(false);statisticsCostOfTreatmentBPanelConstraints.gridx = 0;statisticsCostOfTreatmentBPanelConstraints.ipadx = 3;iCERValuesCostOfTreatmentBHeaderJPanel.add(costOfTreatmentBCJLabel, statisticsCostOfTreatmentBPanelConstraints);statisticsCostOfTreatmentBPanelConstraints.gridx = 1;statisticsCostOfTreatmentBPanelConstraints.insets = new Insets(7, 0, 0, 0);iCERValuesCostOfTreatmentBHeaderJPanel.add(costOfTreatmentBBJLabel, statisticsCostOfTreatmentBPanelConstraints);iCERValuesCostOfTreatmentAHeaderJPanel.setOpaque(false);statisticsCostOfTreatmentAPanelConstraints.gridx = 0;statisticsCostOfTreatmentAPanelConstraints.ipadx = 3;iCERValuesCostOfTreatmentAHeaderJPanel.add(costOfTreatmentACJLabel, statisticsCostOfTreatmentAPanelConstraints);statisticsCostOfTreatmentAPanelConstraints.gridx = 1;statisticsCostOfTreatmentAPanelConstraints.insets = new Insets(7, 0, 0, 0);iCERValuesCostOfTreatmentAHeaderJPanel.add(costOfTreatmentAAJLabel, statisticsCostOfTreatmentAPanelConstraints);iCERValuesOfTreatmentBHeaderJPanel.setOpaque(false);statisticsEffectivenessOfTreatmentBPanelConstraints.gridx = 0;statisticsEffectivenessOfTreatmentBPanelConstraints.ipadx = 3;iCERValuesOfTreatmentBHeaderJPanel.add(effectivenessOfTreatmentBEJLabel, statisticsEffectivenessOfTreatmentBPanelConstraints);statisticsEffectivenessOfTreatmentBPanelConstraints.gridx = 1;statisticsEffectivenessOfTreatmentBPanelConstraints.insets = new Insets(7, 0, 0, 0);iCERValuesOfTreatmentBHeaderJPanel.add(effectivenessOfTreatmentBBJLabel, statisticsEffectivenessOfTreatmentBPanelConstraints);iCERValuesOfTreatmentAHeaderJPanel.setOpaque(false);statisticsEffectivenessOfTreatmentAPanelConstraints.gridx = 0;statisticsEffectivenessOfTreatmentAPanelConstraints.ipadx = 3;iCERValuesOfTreatmentAHeaderJPanel.add(effectivenessOfTreatmentAEJLabel, statisticsEffectivenessOfTreatmentAPanelConstraints);statisticsEffectivenessOfTreatmentAPanelConstraints.gridx = 1;statisticsEffectivenessOfTreatmentAPanelConstraints.insets = new Insets(7, 0, 0, 0);iCERValuesOfTreatmentAHeaderJPanel.add(effectivenessOfTreatmentAAJLabel, statisticsEffectivenessOfTreatmentAPanelConstraints);iCERValuesTreatmentBTreatmentANamesHeaderJLabel.setFont(treatmentAnalysisDataFont);iCERValuesTreatmentBTreatmentANamesHeaderJPanel.setOpaque(false);iCERValuesTreatmentBTreatmentANamesHeaderJPanel.add(iCERValuesTreatmentBTreatmentANamesHeaderJLabel, treatmentCostsAnalysisTreatmentBTreatmentAHeaderPanelConstraints);iCERValuesRatioHeaderJPanel.setOpaque(false);iCERValuesRatioHeaderJPanel.add(iCERRatioJLabel, iCERRatioPanelConstraints);iCERValuesTreatmentBTreatmentANamesHeaderJPanel.setBorder(new MatteBorder(1, 1, 1, 1, Color.BLACK));iCERValuesCostOfTreatmentBHeaderJPanel.setBorder(new MatteBorder(0, 1, 1, 1, Color.BLACK));iCERValuesCostOfTreatmentAHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));iCERValuesOfTreatmentBHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));iCERValuesOfTreatmentAHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));iCERValuesRatioHeaderJPanel.setBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK));iCERValuesCostOfTreatmentBHeaderJPanel.setPreferredSize(iCERCellDimension);iCERValuesCostOfTreatmentAHeaderJPanel.setPreferredSize(iCERCellDimension);iCERValuesOfTreatmentBHeaderJPanel.setPreferredSize(iCERCellDimension);iCERValuesOfTreatmentAHeaderJPanel.setPreferredSize(iCERCellDimension);iCERValuesRatioHeaderJPanel.setPreferredSize(iCERCellDimension);iCERValuesCostOfTreatmentBHeaderJPanel.setSize(iCERCellDimension);iCERValuesCostOfTreatmentAHeaderJPanel.setSize(iCERCellDimension);iCERValuesOfTreatmentBHeaderJPanel.setSize(iCERCellDimension);iCERValuesOfTreatmentAHeaderJPanel.setSize(iCERCellDimension);iCERValuesRatioHeaderJPanel.setSize(iCERCellDimension);iCERValuesHeaderJPanel.setOpaque(false);iCERValuesHeaderPanelConstraints.gridy = 0;iCERValuesHeaderPanelConstraints.gridx = 0;iCERValuesHeaderPanelConstraints.gridwidth = 6;iCERValuesHeaderPanelConstraints.weightx = 1;iCERValuesHeaderPanelConstraints.fill = GridBagConstraints.BOTH;iCERValuesHeaderPanelConstraints.insets = new Insets(0, 0, 0, 0);iCERValuesHeaderJPanel.add(iCERValuesTreatmentBTreatmentANamesHeaderJPanel, iCERValuesHeaderPanelConstraints);iCERValuesHeaderPanelConstraints.gridwidth = 1;iCERValuesHeaderPanelConstraints.gridy = 1;iCERValuesHeaderPanelConstraints.gridx = 0;iCERValuesHeaderJPanel.add(iCERValuesCostOfTreatmentBHeaderJPanel, iCERValuesHeaderPanelConstraints);iCERValuesHeaderPanelConstraints.gridx = 1;iCERValuesHeaderJPanel.add(iCERValuesCostOfTreatmentAHeaderJPanel, iCERValuesHeaderPanelConstraints);iCERValuesHeaderPanelConstraints.gridx = 2;iCERValuesHeaderJPanel.add(iCERValuesOfTreatmentBHeaderJPanel, iCERValuesHeaderPanelConstraints);iCERValuesHeaderPanelConstraints.gridx = 3;iCERValuesHeaderJPanel.add(iCERValuesOfTreatmentAHeaderJPanel, iCERValuesHeaderPanelConstraints);iCERValuesHeaderPanelConstraints.gridx = 4;iCERValuesHeaderJPanel.add(iCERValuesRatioHeaderJPanel, iCERValuesHeaderPanelConstraints);iCERValuesHeaderPanelConstraints.insets = new Insets(0, 0, 4, 0);return iCERValuesHeaderJPanel;}public boolean saveCostAnalysis(String saveAsName, boolean isNew) {String analysisName;boolean isSaved = false;if (!costAnalysisScrollPaneJPanel.isVisible() && !isNew) {addTalkbackText("There is no open cost analysis to save.", null, true);} else if (null == saveAsName || !saveAsName.equals("")) {Vector costAnalyses = ((Vector) (((Vector) (((Vector) (Access.individualUserData.elementAt(4))).elementAt(3))).elementAt(0)));if (null == saveAsName) {analysisName = costAnalysisNameJLabel.getText();} else {analysisName = saveAsName;}boolean costAnalysisNameFound = false;int analysisInd = 0;while (!costAnalysisNameFound && analysisInd < costAnalyses.size()) {if (((String) (((Vector) (((Vector) (costAnalyses.elementAt(analysisInd))).elementAt(0))).elementAt(0))).equals(analysisName)) {costAnalysisNameFound = true;}analysisInd++;}if (null != saveAsName) {if (!costAnalysisNameFound) {costAnalyses.add(deriveCostAnalysisVector(analysisName));addTalkbackText("Cost analysis, \"" + analysisName + ",\" saved.", null, true);isSaved = true;} else {addTalkbackText("Cost analysis, \"" + analysisName + ",\" already exists.", null, true);}} else {if (costAnalysisNameFound) {costAnalyses.setElementAt(deriveCostAnalysisVector(analysisName), analysisInd - 1);addTalkbackText("Cost analysis, \"" + analysisName + ",\" saved.", null, true);isSaved = true;}}} else {addTalkbackText("Please enter a valid analysis name.", null, true);keepNewTreatmentAnalysisPopupMenuOpenForCostAnalysis = true;}isCostAnalysisUnsaved = !isSaved;return isSaved;}private Vector<Object> deriveCostAnalysisVector(String analysisName) {Vector<Object> vector = new Vector<Object>();vector.add(new Vector());(((Vector) (vector.lastElement()))).add(analysisName);(((Vector) (vector.lastElement()))).add(qualityAdjustedLifeYearsYesJToggleButton.isSelected());(((Vector) (vector.lastElement()))).add(costAnalysisDateCreatedJLabel.getText());Calendar calendar = Calendar.getInstance();String date = month[calendar.get(Calendar.MONTH)].substring(0, 3) + ". " + calendar.get(Calendar.DAY_OF_MONTH) + ", " + calendar.get(Calendar.YEAR);(((Vector) (vector.lastElement()))).add(date);(((Vector) (vector.lastElement()))).add(costAnalysisGraphHeaderUserIDJLabel.getText());int pointInd = 0;while (pointInd < costPointsJPanel.getComponentCount()) {String treatmentName = ((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(0))).getComponent(0))).getText();double treatmentCost = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());double treatmentEffectiveness = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());vector.add(new Vector());(((Vector) (vector.lastElement()))).add(treatmentName);(((Vector) (vector.lastElement()))).add(treatmentCost);(((Vector) (vector.lastElement()))).add(treatmentEffectiveness);pointInd++;}return vector;}public boolean saveTreatmentAnalysis(String decisionAnalysisName, boolean isQALY, boolean isSaveAs) {String analysisType = null;boolean saved = false;JLabel treatmentAnalysisGraphHeaderGraphNameJLabel = null;int treatmentAnalysesVectorIndice = 0;if (costAnalysisJToggleButton.isSelected()) {if (costAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText("Please close the open cost analysis.", null, true);} else {analysisType = "Cost analysis, \"";treatmentAnalysesVectorIndice = 0;treatmentAnalysisGraphHeaderGraphNameJLabel = costAnalysisNameJLabel;openTreatmentAnalysisHeaderJLabel.setText("Open Cost-Analysis:");openTreatmentAnalysisOkJButton.setName("costAnalysis");fillOpenTreatmentAnalysisChoicesJPanel();openTreatmentAnalysisJPopupMenu.show(openTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);}} else if (treatmentEffectJToggleButton.isSelected()) {if (treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText("Please close the open treatment effect analysis.", null, true);} else {analysisType = "Treatment effect analysis, \"";treatmentAnalysesVectorIndice = 1;treatmentAnalysisGraphHeaderGraphNameJLabel = treatmentEffectAnalysisHeaderPanelNameJLabel;openTreatmentAnalysisHeaderJLabel.setText("Open effect-Analysis:");openTreatmentAnalysisOkJButton.setName("costAnalysis");fillOpenTreatmentAnalysisChoicesJPanel();}if (treatmentEffectAnalysisScrollPaneJPanel.isVisible()) {addTalkbackText("Please close the open treatment effect analysis.", null, true);} else {analysisType = "Treatment effect analysis, \"";treatmentAnalysesVectorIndice = 1;treatmentAnalysisGraphHeaderGraphNameJLabel = treatmentEffectAnalysisHeaderPanelNameJLabel;openTreatmentAnalysisHeaderJLabel.setText("Open Cost-Analysis:");openTreatmentAnalysisOkJButton.setName("costAnalysis");fillOpenTreatmentAnalysisChoicesJPanel();openTreatmentAnalysisJPopupMenu.show(openTreatmentAnalysisJButton, 0, menuJPanel.getHeight() - 8);}} else if (decisionModelsJToggleButton.isSelected()) {analysisType = "Decision model, \"";treatmentAnalysesVectorIndice = 2;treatmentAnalysisGraphHeaderGraphNameJLabel = decisionModelsNameJLabel;} else {}if (null == decisionAnalysisName) {decisionAnalysisName = treatmentAnalysisGraphHeaderGraphNameJLabel.getText().substring(treatmentAnalysisGraphHeaderGraphNameJLabel.getText().indexOf(": ") + 1);}Vector userTreatmentAnalyses = ((Vector) (((Vector) (((Vector) (Access.individualUserData.elementAt(4))).elementAt(3))).elementAt(treatmentAnalysesVectorIndice)));boolean treatmentAnalysisNameAlreadyExists = false;int analysisInd = 1;while (!treatmentAnalysisNameAlreadyExists && analysisInd < userTreatmentAnalyses.size()) {if (((String) (((Vector) (userTreatmentAnalyses.elementAt(analysisInd))).elementAt(0))).equals(decisionAnalysisName)) {if (!isSaveAs) {userTreatmentAnalyses.remove(analysisInd);}treatmentAnalysisNameAlreadyExists = true;}analysisInd++;}if (treatmentAnalysisNameAlreadyExists && isSaveAs) {addTalkbackText(decisionAnalysisName + " already exists.", null, true);} else {try {userTreatmentAnalyses.add(new Vector<Object>());((Vector) (userTreatmentAnalyses.lastElement())).add(decisionAnalysisName);if (costAnalysisJToggleButton.isSelected()) {String treatmentName;double treatmentCost;double treatmentEffectivenessOrUtility;int pointInd = 0;while (pointInd < costPointsJPanel.getComponentCount()) {treatmentName = ((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(0))).getComponent(0))).getText();treatmentCost = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(1))).getComponent(0))).getText());treatmentEffectivenessOrUtility = Double.parseDouble(((JLabel) (((JPanel) (((JPanel) (costPointsJPanel.getComponent(pointInd))).getComponent(2))).getComponent(0))).getText());((Vector) (userTreatmentAnalyses.lastElement())).add(new Vector());((Vector) (((Vector) (userTreatmentAnalyses.lastElement())).lastElement())).add(treatmentName);((Vector) (((Vector) (userTreatmentAnalyses.lastElement())).lastElement())).add(treatmentCost);((Vector) (((Vector) (userTreatmentAnalyses.lastElement())).lastElement())).add(treatmentEffectivenessOrUtility);((Vector) (((Vector) (userTreatmentAnalyses.lastElement())).lastElement())).add(qualityAdjustedLifeYearsYesJToggleButton.isSelected());pointInd++;}}Io.out("sys", Access.rootAdministrator, "system_vitality.dat", Device.device.workspace.raw);Io.out("usr", Access.user, Access.shortUserID(Access.loggedOnUserID) + "_vitality.dat", Device.device.workspace.systemWindow.makeRawFromPassword(Access.getUser(Access.loggedOnUserID, "password").toCharArray()));addTalkbackText(analysisType + decisionAnalysisName + "\" saved.", null, true);saved = true;} catch (Exception e1) {System.out.println("Critical error writing out rootStruct or userStruct when adding ICERValues in decisionSupportFrame.saveTreatmentAnalysis(...");addTalkbackText("Could not save " + decisionAnalysisName, null, true);e1.printStackTrace();}}isCostAnalysisUnsaved = !saved;return saved;}private void statisticsOutput(String string) {Vector<Vector<Object>> statisticsGroup = generateGroupValuesFromStatisticsEntries();int statisticsGroupSizeMinusNulls = statisticsGroup.size();if (!statisticsGroup.isEmpty()) {if (string.equals("statisticsMeanAverageJButton")) {double average;double sum = 0;int ind = 0;while (ind < statisticsGroup.size()) {if (null != statisticsGroup.elementAt(ind).elementAt(0)) {try {sum = sum + Double.valueOf((String) (statisticsGroup.elementAt(ind).elementAt(0)));} catch (Exception e) {statisticsGroupSizeMinusNulls--;}} else {statisticsGroupSizeMinusNulls--;}ind++;}average = sum / statisticsGroupSizeMinusNulls;statisticsMeanAverageJTextField.setText(String.valueOf(average));statisticsAveragePanelCardLayout.show(statisticsAverageJPanel, "statisticsMeanAverageJPanel");}}}public Vector<Vector<Object>> generateGroupValuesFromStatisticsEntries() {String pCodeSetIdentifier = null;String codeElementNumber = null;Vector<String> codeSetAndAtomicElementNumbers = new Vector<String>();int medicalCodeButtonInd = 0;while (medicalCodeButtonInd < statisticsMedicalCodeBaseJPanel.getComponentCount()) {if (statisticsMedicalCodeBaseJPanel.getComponentCount() != 0) {String name = statisticsMedicalCodeBaseJPanel.getComponent(medicalCodeButtonInd).getName();int ind1 = name.indexOf("|");String nameParse1 = name.substring(ind1 + 1);int ind2 = nameParse1.indexOf("|");String nameParse2 = nameParse1.substring(ind2 + 1);int ind3 = nameParse2.indexOf("|");String nameParse3 = nameParse2.substring(ind3 + 1);int ind4 = nameParse3.indexOf("|");String nameParse4 = nameParse3.substring(ind4 + 1);String buttonIdentifier = name.substring(0, name.indexOf("|"));pCodeSetIdentifier = nameParse1.substring(0, nameParse1.indexOf("|"));codeElementNumber = nameParse2.substring(0, nameParse2.indexOf("|"));String subComponentNumber = nameParse3;String subSubComponentNumber = nameParse4;codeSetAndAtomicElementNumbers.add(nameParse2);medicalCodeButtonInd = medicalCodeButtonInd + 2;}}int ind = 0;while (ind < codeSetAndAtomicElementNumbers.size()) {System.out.println("codeSetAndAtomicElementNumbers.elementAt(" + ind + "): " + codeSetAndAtomicElementNumbers.elementAt(ind));ind++;}return find(null, codeSetAndAtomicElementNumbers, null, null, null, null);}private Vector<Vector<Object>> find(String query, Vector<String> codeSetAndAtomicElementNumbers, String chartID, Integer chartSection, Double fromTime, Double toTime) {Vector<Vector<Object>> chartASectionAPageAItemACodeIdentifierACodeValue = new Vector<Vector<Object>>();Vector patientChart = null;Vector dataCell;Vector patientIndex = (Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0));String chartIDInPatientIndex;int numSections;int chartIDInd = 1;int sectionInd;int numCharts = patientIndex.size();int numPages;int pageInd;if (null != chartID) {chartIDInd = Integer.parseInt(chartID);numCharts = chartIDInd + 1;}System.out.println(" ");while (chartIDInd < numCharts) {numSections = 5;sectionInd = 1;if (null != chartSection) {sectionInd = chartSection;numSections = chartSection + 1;}chartIDInPatientIndex = (String) (((Vector) (((Vector) (patientIndex.elementAt(chartIDInd))).elementAt(0))).elementAt(0));System.out.println(" Integer.parseInt(chartIDInPatientIndex): " + Integer.parseInt(chartIDInPatientIndex));System.out.println(" chartIDInd: " + chartIDInd);if (Integer.parseInt(chartIDInPatientIndex) == chartIDInd) {try {patientChart = ((Vector) (Io.chart(chartIDInPatientIndex, Device.device.raw).elementAt(1)));System.out.println(" read patient chart " + chartIDInd);} catch (Exception e) {addTalkbackText("Error reading patient chart " + chartIDInPatientIndex, null, true);System.out.println("Chart " + chartIDInd + " not found");e.printStackTrace();}while (sectionInd < numSections) {if (null != ((Vector) (patientChart.elementAt(sectionInd)))) {numPages = ((Vector) (patientChart.elementAt(sectionInd))).size() - 1;pageInd = 1;while (pageInd <= numPages) {int numItems = ((Vector) (((Vector) (patientChart.elementAt(sectionInd))).elementAt(pageInd))).size() - 1;int itemNumberInd = 1;while (itemNumberInd <= numItems) {dataCell = ((Vector) (((Vector) (((Vector) (patientChart.elementAt(sectionInd))).elementAt(pageInd))).elementAt(itemNumberInd)));int buttonInd = 0;while (buttonInd < codeSetAndAtomicElementNumbers.size()) {if (((String) (((Vector) (dataCell.elementAt(1))).elementAt(2))).startsWith(codeSetAndAtomicElementNumbers.elementAt(buttonInd))) {chartASectionAPageAItemACodeIdentifierACodeValue.add(new Vector<Object>());chartASectionAPageAItemACodeIdentifierACodeValue.lastElement().add((dataCell.elementAt(0)));chartASectionAPageAItemACodeIdentifierACodeValue.lastElement().add(((((Vector) (dataCell.elementAt(1))).elementAt(6))));chartASectionAPageAItemACodeIdentifierACodeValue.lastElement().add(chartIDInd);chartASectionAPageAItemACodeIdentifierACodeValue.lastElement().add(sectionInd);chartASectionAPageAItemACodeIdentifierACodeValue.lastElement().add(pageInd);chartASectionAPageAItemACodeIdentifierACodeValue.lastElement().add(itemNumberInd);}buttonInd++;}itemNumberInd++;}pageInd++;}}sectionInd++;}} else {addTalkbackText("Stored (String)chartInd does not match (int)chartInd.", null, true);System.out.println("Error in DecisionSupport find(...): stored (String)chartInd does not match (int)chartInd.");}chartIDInd++;}return chartASectionAPageAItemACodeIdentifierACodeValue;}private boolean syncStatisticsFromOrToCalendarWithTalkback(String calendarIsFromOrTo, String statisticsField, String statisticsFieldText) {boolean valideChange = false;Calendar statisticsFromOrToCalendar;JTextField monthJTextField;JTextField dayOfMonthJTextField;JTextField yearJTextField;JTextField hourJTextField;JTextField minuteJTextField;JTextField amPmJTextField;if (calendarIsFromOrTo.equals("To")) {statisticsFromOrToCalendar = statisticsToCalendar;monthJTextField = statisticsTimeRangeToMonthJTextField;dayOfMonthJTextField = statisticsTimeRangeToDayOfMonthJTextField;yearJTextField = statisticsTimeRangeToYearJTextField;hourJTextField = statisticsTimeRangeToHourJTextField;minuteJTextField = statisticsTimeRangeToMinuteJTextField;amPmJTextField = statisticsTimeRangeToAmPmJTextField;} else {statisticsFromOrToCalendar = statisticsFromCalendar;monthJTextField = statisticsTimeRangeFromMonthJTextField;dayOfMonthJTextField = statisticsTimeRangeFromDayOfMonthJTextField;yearJTextField = statisticsTimeRangeFromYearJTextField;hourJTextField = statisticsTimeRangeFromHourJTextField;minuteJTextField = statisticsTimeRangeFromMinuteJTextField;amPmJTextField = statisticsTimeRangeFromAmPmJTextField;}if (statisticsField.equals("MONTH_FIELD")) {int monthOrdinal = 0;while (!valideChange && monthOrdinal < 12) {if (month[monthOrdinal].toUpperCase().startsWith(statisticsFieldText.toUpperCase())) {statisticsFromOrToCalendar.roll(Calendar.MONTH, monthOrdinal - statisticsFromOrToCalendar.get(Calendar.MONTH));monthJTextField.setBackground(Color.WHITE);valideChange = true;}monthOrdinal++;}if (!valideChange) {monthJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid month.", null, true);}} else if (statisticsField.equals("DAY_OF_MONTH_FIELD")) {try {if (0 < Integer.parseInt(statisticsFieldText) && Integer.parseInt(statisticsFieldText) < statisticsFromOrToCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1) {statisticsFromOrToCalendar.roll(Calendar.DAY_OF_YEAR, Integer.parseInt(statisticsFieldText) - statisticsFromOrToCalendar.get(Calendar.DAY_OF_MONTH));dayOfMonthJTextField.setBackground(Color.WHITE);valideChange = true;} else if (Integer.parseInt(statisticsFieldText) > statisticsFromOrToCalendar.getActualMaximum(Calendar.DAY_OF_MONTH)) {addTalkbackText("The day of month is to large for " + month[statisticsFromOrToCalendar.get(Calendar.MONTH)], null, true);}} catch (Exception ert) {dayOfMonthJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid day of the month", null, true);}} else if (statisticsField.equals("YEAR_FIELD")) {try {if (2011 < Integer.parseInt(statisticsFieldText) && Integer.parseInt(statisticsFieldText) < 2063) {statisticsFromOrToCalendar.add(Calendar.YEAR, Integer.parseInt(statisticsFieldText) - statisticsFromOrToCalendar.get(Calendar.YEAR));yearJTextField.setBackground(Color.WHITE);valideChange = true;}} catch (Exception ert) {yearJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid year", null, true);}} else if (statisticsField.equals("HOUR_FIELD")) {try {if (amPmJTextField.getText().equals("AM") || amPmJTextField.getText().equals("PM")) {if (-1 < Integer.parseInt(statisticsFieldText) && Integer.parseInt(statisticsFieldText) < 13) {if (Integer.parseInt(statisticsFieldText) == 12) {statisticsFromOrToCalendar.set(Calendar.HOUR, 0);} else {statisticsFromOrToCalendar.set(Calendar.HOUR, Integer.parseInt(statisticsFieldText));}monthJTextField.setBackground(Color.WHITE);valideChange = true;} else {hourJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid from 0 to 12", null, true);}} else if (-1 < Integer.parseInt(statisticsFieldText) && Integer.parseInt(statisticsFieldText) < 25) {statisticsFromOrToCalendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(statisticsFieldText));hourJTextField.setBackground(Color.WHITE);valideChange = true;} else {hourJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid 24-hour time in the hour field", null, true);}} catch (Exception ert) {hourJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid hour", null, true);}} else if (statisticsField.equals("MINUTE_FIELD")) {try {if (-1 < Integer.parseInt(statisticsFieldText) && Integer.parseInt(statisticsFieldText) < 60) {statisticsFromOrToCalendar.set(Calendar.MINUTE, Integer.parseInt(statisticsFieldText));minuteJTextField.setBackground(Color.WHITE);valideChange = true;} else {minuteJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid minute (0 to 59)", null, true);}} catch (Exception ert) {minuteJTextField.setBackground(invalidePinkFieldColor);addTalkbackText("Please enter a valid minute (0 to 59)", null, true);}} else if (statisticsField.equals("AM_PM_FIELD")) {if (statisticsFieldText.equals("AM")) {statisticsFromOrToCalendar.set(Calendar.AM_PM, 0);valideChange = true;} else if (statisticsFieldText.equals("PM")) {statisticsFromOrToCalendar.set(Calendar.AM_PM, 1);valideChange = true;}}if (valideChange) {fillStatisticsTimeRangeCalendar(calendarIsFromOrTo);}return valideChange;}public void createStatisticsMedicalCodeEntry(String statisticsMedicalCodeGroupText, Vector<Vector<String>> pCodeSetRecordPlusHeaderVector, String medicalCodeComponentSubType) {String givenMedicalCodeElementIdentifier = null;JPanel promptJPanel = null;String uniqueCompositeMedicalCodeIdentifier;String medicalCodeElementDatatype = null;Vector<Vector<String>> exactMedicalCode = new Vector<Vector<String>>();exactMedicalCode.add(new Vector<String>());if (null == pCodeSetRecordPlusHeaderVector) {try {statisticsMedicalCodeJTextField.setText(givenMedicalCodeElementIdentifier);exactMedicalCode.lastElement().add(givenMedicalCodeElementIdentifier);pCodeSetRecordPlusHeaderVector = PracticeWindow.tokenizeDatabase(Io.databaseRecords("exact medical code", codeSetIdentifier, exactMedicalCode), codeSetIdentifier);} catch (Exception e) {System.out.println("Error in DecisionSupport createStatisticsMedicalCodeEntry CHECKING TO SEE IF CODE EXISTS");e.printStackTrace();}}if (null != pCodeSetRecordPlusHeaderVector) {if (null == medicalCodeComponentSubType) {medicalCodeElementDatatype = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(1));promptJPanel = Device.device.workspace.systemWindow.promptForComponentOrSubComponents("DecisionSupport", medicalCodeElementDatatype);if (null != promptJPanel) {codeSetRecordPlusHeaderVector = pCodeSetRecordPlusHeaderVector;promptForComponentOrSubComponentsPanelJPopupMenu.removeAll();promptForComponentOrSubComponentsPanelJPopupMenu.add(promptJPanel);promptForComponentOrSubComponentsPanelJPopupMenu.show(statisticsAddMedicalCodeGroupOkJTextField, -6, statisticsAddMedicalCodeGroupOkJTextField.getHeight());} else {codeSetRecordPlusHeaderVector = null;}}} else {addTalkbackText(codeSetIdentifier + " " + givenMedicalCodeElementIdentifier + " was not found.", null, true);}if (null != pCodeSetRecordPlusHeaderVector && null == promptJPanel) {String medicalCodeElementNumber = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(0));String medicalCodeElementName = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(2));String statisticsCodeDetailsReference = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(4));if (null == medicalCodeComponentSubType) {medicalCodeComponentSubType = "";} else {medicalCodeComponentSubType = "|" + medicalCodeComponentSubType;}uniqueCompositeMedicalCodeIdentifier = codeSetIdentifier + "|" + medicalCodeElementNumber + "|" + medicalCodeElementDatatype + medicalCodeComponentSubType;JLabel statisticsCodeSetIdentifierJLabel = new JLabel();JButton statisticsMedicalCodeEntryJButton = new JButton();JButton statisticsMedicalCodeEntryDeleteJButton = new JButton(" Delete ");JLabel statisticsFieldNameJLabel = new JLabel();JLabel statisticsMedicalCodeElementNumberJLabel = new JLabel();JLabel statisticsMedicalCodeDescriptionJLabel = new JLabel();JLabel statisticsCodeDetailsAtomicDataTypeJLabel = new JLabel();JLabel statisticsCodeDetailsReferenceJTextField = new JLabel();LineBorder boxBorder = new LineBorder(Color.BLACK, 1);GridBagConstraints statisticsMedicalCodeEntryPanelConstraints = new GridBagConstraints();statisticsMedicalCodeEntryJButton.setBackground(veryLightGrayColor);statisticsMedicalCodeEntryJButton.setBorder(new LineBorder(Color.GRAY, 1));statisticsMedicalCodeEntryJButton.setFont(SystemWindow.systemFont);statisticsMedicalCodeEntryDeleteJButton.addActionListener(this);statisticsMedicalCodeEntryDeleteJButton.setActionCommand("statisticsMedicalCodeEntryDeleteJButton");statisticsMedicalCodeEntryDeleteJButton.setBorder(new LineBorder(Color.GRAY, 1));statisticsMedicalCodeEntryDeleteJButton.setBackground(veryLightGrayColor);statisticsFieldNameJLabel.setBorder(boxBorder);statisticsMedicalCodeElementNumberJLabel.setBorder(boxBorder);statisticsMedicalCodeDescriptionJLabel.setBorder(boxBorder);statisticsCodeDetailsAtomicDataTypeJLabel.setBorder(boxBorder);statisticsCodeDetailsReferenceJTextField.setBorder(boxBorder);medicalCodeElementDatatype = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(1));medicalCodeElementNumber = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(0));medicalCodeElementName = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(2));statisticsCodeDetailsReference = (String) (((Vector) (pCodeSetRecordPlusHeaderVector.elementAt(1))).elementAt(4));statisticsCodeSetIdentifierJLabel.setText(codeSetIdentifier);statisticsFieldNameJLabel.setText(" " + medicalCodeElementName + ": ");statisticsMedicalCodeElementNumberJLabel.setText(" " + medicalCodeElementNumber + " ");statisticsMedicalCodeDescriptionJLabel.setText(" - ");if (codeSetIdentifier.equals("HL7_2.3.1")) {statisticsCodeDetailsAtomicDataTypeJLabel.setText(" " + medicalCodeElementDatatype + " ");} else if (codeSetIdentifier.equals("CPT2009")) {statisticsCodeDetailsAtomicDataTypeJLabel.setText(" - ");}statisticsMedicalCodeEntryJButton.addMouseListener(this);statisticsMedicalCodeEntryJButton.addActionListener(this);statisticsMedicalCodeEntryJButton.setActionCommand(codeSetIdentifier + "|" + medicalCodeElementNumber + "|" + medicalCodeElementDatatype);statisticsMedicalCodeEntryJButton.setName("statisticsMedicalCodeEntryJButton" + "|" + statisticsCodeDetailsReference + "|" + uniqueCompositeMedicalCodeIdentifier);statisticsMedicalCodeEntryDeleteJButton.setName("statisticsMedicalCodeEntryJButton" + "|" + statisticsCodeDetailsReference + "|" + uniqueCompositeMedicalCodeIdentifier);statisticsMedicalCodeEntryJButton.setLayout(new GridBagLayout());statisticsMedicalCodeEntryPanelConstraints.insets = new Insets(4, 4, 4, 4);statisticsMedicalCodeEntryPanelConstraints.gridx = 0;statisticsMedicalCodeEntryJButton.add(statisticsCodeSetIdentifierJLabel, statisticsMedicalCodeEntryPanelConstraints);statisticsMedicalCodeEntryPanelConstraints.gridx = 1;statisticsMedicalCodeEntryJButton.add(statisticsMedicalCodeElementNumberJLabel, statisticsMedicalCodeEntryPanelConstraints);statisticsMedicalCodeEntryPanelConstraints.gridx = 2;statisticsMedicalCodeEntryJButton.add(statisticsFieldNameJLabel, statisticsMedicalCodeEntryPanelConstraints);statisticsMedicalCodeEntryPanelConstraints.gridx = 3;statisticsMedicalCodeEntryJButton.add(statisticsMedicalCodeDescriptionJLabel, statisticsMedicalCodeEntryPanelConstraints);statisticsMedicalCodeEntryPanelConstraints.gridx = 4;statisticsMedicalCodeEntryJButton.add(statisticsCodeDetailsAtomicDataTypeJLabel, statisticsMedicalCodeEntryPanelConstraints);statisticsMedicalCodeEntryPanelConstraints.gridx = 5;statisticsMedicalCodeBasePanelConstraints.gridx = 0;statisticsMedicalCodeBasePanelConstraints.weighty = 1;statisticsMedicalCodeBasePanelConstraints.weightx = 1;statisticsMedicalCodeBasePanelConstraints.fill = GridBagConstraints.BOTH;statisticsMedicalCodeBaseJPanel.add(statisticsMedicalCodeEntryJButton, statisticsMedicalCodeBasePanelConstraints);statisticsMedicalCodeBasePanelConstraints.gridx = 1;statisticsMedicalCodeBaseJPanel.add(statisticsMedicalCodeEntryDeleteJButton, statisticsMedicalCodeBasePanelConstraints);statisticsMedicalCodeBasePanelConstraints.gridy++;}}public boolean createStatisticsPatientChartEntry() {Vector patientIndexInformation = null;String chartIDString = statisticsPatientChartIDJTextField.getText();int chartID;String patientNamePrefix = statisticsPatientChartIDJTextField.getText();String patientNameGivenName = statisticsPatientChartIDJTextField.getText();String patientNameMiddleInitialOrName = statisticsPatientChartIDJTextField.getText();String patientNameLastNamePrefix = statisticsPatientChartIDJTextField.getText();String patientNameFamilyName = statisticsPatientChartIDJTextField.getText();try {chartID = Integer.parseInt(chartIDString);System.out.println(" First chartID: " + chartID);patientIndexInformation = ((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartID)));patientNamePrefix = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(6));patientNameGivenName = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(3));patientNameMiddleInitialOrName = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(4));patientNameLastNamePrefix = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(2));patientNameFamilyName = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(1));System.out.println("patientIndexInformation elements not null but blank?");System.out.println("    patientNameFamilyName: " + patientNameFamilyName);} catch (Exception e) {addTalkbackText("Chart ID not found.", null, true);return false;}if (null == patientIndexInformation) {chartID = getChartIDFromPatientName(patientNamePrefix, patientNameGivenName, patientNameMiddleInitialOrName, patientNameLastNamePrefix, patientNameFamilyName);System.out.println(" Second chartID: " + chartID);patientIndexInformation = ((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartID)));patientNamePrefix = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(6));patientNameGivenName = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(3));patientNameMiddleInitialOrName = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(4));patientNameLastNamePrefix = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(2));patientNameFamilyName = (String) (((Vector) (patientIndexInformation.elementAt(1))).elementAt(1));}if (chartID != -2 && null != patientIndexInformation) {JLabel chartIDJLabel = new JLabel(" " + String.valueOf(chartID) + " ");JLabel patientNamePrefixJLabel = new JLabel(" " + patientNamePrefix + " ");JLabel patientNameGivenNameJLabel = new JLabel(" " + patientNameGivenName + " ");JLabel patientNameMiddleInitialOrNameJLabel = new JLabel(" " + patientNameMiddleInitialOrName + " ");JLabel patientNameLastNamePrefixJLabel = new JLabel(" " + patientNameLastNamePrefix + " ");JLabel patientNameFamilyNameJLabel = new JLabel(" " + patientNameFamilyName + " ");GridBagConstraints statisticsPatientChartEntryPanelConstraints = new GridBagConstraints();JButton statisticsPatientChartEntryJButton = new JButton();JButton statisticsPatientChartEntryDeleteJButton = new JButton(" Delete ");statisticsPatientChartEntryDeleteJButton.addActionListener(this);statisticsPatientChartEntryDeleteJButton.setActionCommand("statisticsPatientChartEntryDeleteJButton");statisticsPatientChartEntryDeleteJButton.setBackground(veryLightGrayColor);statisticsPatientChartEntryDeleteJButton.setBorder(new LineBorder(Color.GRAY, 1));LineBorder boxBorder = new LineBorder(Color.LIGHT_GRAY, 1);statisticsPatientChartEntryJButton.setBackground(veryLightGrayColor);statisticsPatientChartEntryJButton.setBorder(new LineBorder(Color.GRAY, 1));statisticsPatientChartEntryJButton.setFont(SystemWindow.systemFont);chartIDJLabel.setBorder(boxBorder);patientNamePrefixJLabel.setBorder(boxBorder);patientNameGivenNameJLabel.setBorder(boxBorder);patientNameMiddleInitialOrNameJLabel.setBorder(boxBorder);patientNameLastNamePrefixJLabel.setBorder(boxBorder);patientNameFamilyNameJLabel.setBorder(boxBorder);statisticsPatientChartEntryJButton.addMouseListener(this);statisticsPatientChartEntryJButton.setName("statisticsNewPatientChartJButton|" + String.valueOf(chartID));statisticsPatientChartEntryDeleteJButton.setName("statisticsNewPatientChartJButton|" + String.valueOf(chartID));statisticsPatientChartEntryJButton.setLayout(new GridBagLayout());statisticsPatientChartEntryPanelConstraints.insets = new Insets(4, 4, 4, 4);statisticsPatientChartEntryPanelConstraints.gridx = 0;statisticsPatientChartEntryJButton.add(chartIDJLabel, statisticsPatientChartEntryPanelConstraints);statisticsPatientChartEntryPanelConstraints.gridx = 1;statisticsPatientChartEntryJButton.add(patientNamePrefixJLabel, statisticsPatientChartEntryPanelConstraints);statisticsPatientChartEntryPanelConstraints.gridx = 2;statisticsPatientChartEntryJButton.add(patientNameGivenNameJLabel, statisticsPatientChartEntryPanelConstraints);statisticsPatientChartEntryPanelConstraints.gridx = 3;statisticsPatientChartEntryJButton.add(patientNameMiddleInitialOrNameJLabel, statisticsPatientChartEntryPanelConstraints);statisticsPatientChartEntryPanelConstraints.gridx = 4;statisticsPatientChartEntryJButton.add(patientNameLastNamePrefixJLabel, statisticsPatientChartEntryPanelConstraints);statisticsPatientChartEntryPanelConstraints.gridx = 5;statisticsPatientChartEntryJButton.add(patientNameFamilyNameJLabel, statisticsPatientChartEntryPanelConstraints);statisticsPatientChartBasePanelConstraints.gridx = 0;statisticsPatientChartBasePanelConstraints.weighty = 1;statisticsPatientChartBasePanelConstraints.weightx = 1;statisticsPatientChartBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;statisticsPatientChartBaseJPanel.add(statisticsPatientChartEntryJButton, statisticsPatientChartBasePanelConstraints);statisticsPatientChartBasePanelConstraints.gridx = 1;statisticsPatientChartBaseJPanel.add(statisticsPatientChartEntryDeleteJButton, statisticsPatientChartBasePanelConstraints);statisticsPatientChartBasePanelConstraints.gridy++;addTalkbackText("Patient chart ID found.", null, true);return true;} else {addTalkbackText("Patient chart not found.", null, true);return false;}}private void createStatisticsTimeRangeEntry() {if (syncStatisticsFromOrToCalendarWithTalkback("From", "DAY_OF_MONTH_FIELD", statisticsTimeRangeFromDayOfMonthJTextField.getText()) && syncStatisticsFromOrToCalendarWithTalkback("To", "DAY_OF_MONTH_FIELD", statisticsTimeRangeToDayOfMonthJTextField.getText())) {JButton newTimeRangeJButton = new JButton();JButton statisticsTimeRangeEntryDeleteJButton = new JButton(" Delete ");statisticsTimeRangeEntryDeleteJButton.addActionListener(this);statisticsTimeRangeEntryDeleteJButton.setActionCommand("statisticsTimeRangeEntryDeleteJButton");statisticsTimeRangeEntryDeleteJButton.setBackground(veryLightGrayColor);statisticsTimeRangeEntryDeleteJButton.setBorder(new LineBorder(Color.GRAY, 1));newTimeRangeJButton.setLayout(new GridBagLayout());GridBagConstraints newTimeRangePanelConstraints = new GridBagConstraints();String fromDate = dayOfWeek[statisticsFromCalendar.get(Calendar.DAY_OF_WEEK) - 1] + ", " + month[statisticsFromCalendar.get(Calendar.MONTH)] + " " + statisticsFromCalendar.get(Calendar.DAY_OF_MONTH) + ", " + statisticsFromCalendar.get(Calendar.YEAR);String toDate = dayOfWeek[statisticsToCalendar.get(Calendar.DAY_OF_WEEK) - 1] + ", " + month[statisticsToCalendar.get(Calendar.MONTH)] + " " + statisticsToCalendar.get(Calendar.DAY_OF_MONTH) + ", " + statisticsToCalendar.get(Calendar.YEAR);String fromTime = statisticsFromCalendar.get(Calendar.HOUR) + ":" + statisticsFromCalendar.get(Calendar.MINUTE) + " " + aMPM[statisticsFromCalendar.get(Calendar.AM_PM)];String toTime = statisticsToCalendar.get(Calendar.HOUR) + ":" + statisticsToCalendar.get(Calendar.MINUTE) + " " + aMPM[statisticsToCalendar.get(Calendar.AM_PM)];JLabel timeRangeFromJLabel = new JLabel("From " + fromDate + ", " + fromTime);JLabel timeRangeToJLabel = new JLabel("To " + toDate + ", " + toTime);newTimeRangeJButton.addActionListener(this);newTimeRangeJButton.setActionCommand("statisticsPatientChartEntryDeleteJButton");newTimeRangeJButton.setBackground(veryLightGrayColor);newTimeRangeJButton.setBorder(new LineBorder(Color.GRAY, 1));newTimeRangeJButton.setName(fromDate + fromTime + toDate + toTime);statisticsTimeRangeEntryDeleteJButton.setName(fromDate + fromTime + toDate + toTime);newTimeRangeJButton.add(timeRangeFromJLabel, newTimeRangePanelConstraints);newTimeRangePanelConstraints.gridy = 1;newTimeRangeJButton.add(timeRangeToJLabel, newTimeRangePanelConstraints);statisticsTimeRangeBasePanelConstraints.gridx = 0;statisticsTimeRangeBaseJPanel.add(newTimeRangeJButton, statisticsTimeRangeBasePanelConstraints);statisticsTimeRangeBasePanelConstraints.gridx = 1;statisticsTimeRangeBaseJPanel.add(statisticsTimeRangeEntryDeleteJButton, statisticsTimeRangeBasePanelConstraints);statisticsTimeRangeBasePanelConstraints.gridy++;}}private void fillStatisticsTimeRangeCalendar(String calendarIsFromOrTo) {Calendar statisticsCalendar;JTextField monthJTextField;JTextField dayOfWeekJTextField;JTextField dayOfMonthJTextField;JTextField yearJTextField;JTextField hourJTextField;JTextField minuteJTextField;JTextField amPmJTextField;if (calendarIsFromOrTo.equals("To")) {statisticsCalendar = statisticsToCalendar;monthJTextField = statisticsTimeRangeToMonthJTextField;dayOfWeekJTextField = statisticsTimeRangeToDayOfWeekJTextField;dayOfMonthJTextField = statisticsTimeRangeToDayOfMonthJTextField;yearJTextField = statisticsTimeRangeToYearJTextField;hourJTextField = statisticsTimeRangeToHourJTextField;minuteJTextField = statisticsTimeRangeToMinuteJTextField;amPmJTextField = statisticsTimeRangeToAmPmJTextField;} else {statisticsCalendar = statisticsFromCalendar;monthJTextField = statisticsTimeRangeFromMonthJTextField;dayOfWeekJTextField = statisticsTimeRangeFromDayOfWeekJTextField;dayOfMonthJTextField = statisticsTimeRangeFromDayOfMonthJTextField;yearJTextField = statisticsTimeRangeFromYearJTextField;hourJTextField = statisticsTimeRangeFromHourJTextField;minuteJTextField = statisticsTimeRangeFromMinuteJTextField;amPmJTextField = statisticsTimeRangeFromAmPmJTextField;}dayOfWeekJTextField.setText(dayOfWeek[statisticsCalendar.get(Calendar.DAY_OF_WEEK) - 1]);monthJTextField.setText(month[statisticsCalendar.get(Calendar.MONTH)]);dayOfMonthJTextField.setText(String.valueOf(statisticsCalendar.get(Calendar.DAY_OF_MONTH)));yearJTextField.setText(String.valueOf(statisticsCalendar.get(Calendar.YEAR)));if (statisticsCalendar.get(Calendar.HOUR) == 0) {hourJTextField.setText("12");} else {if (String.valueOf(statisticsCalendar.get(Calendar.MINUTE)).length() < 2) {hourJTextField.setText(" " + String.valueOf(statisticsCalendar.get(Calendar.HOUR)));} else {hourJTextField.setText(String.valueOf(statisticsCalendar.get(Calendar.HOUR)));}}if (String.valueOf(statisticsCalendar.get(Calendar.MINUTE)).length() < 2) {minuteJTextField.setText("0" + String.valueOf(statisticsCalendar.get(Calendar.MINUTE)));} else {minuteJTextField.setText(String.valueOf(statisticsCalendar.get(Calendar.MINUTE)));}amPmJTextField.setText(aMPM[statisticsCalendar.get(Calendar.AM_PM)]);if (monthJTextField.getBackground().equals(invalidePinkFieldColor)) {monthJTextField.setBackground(Color.WHITE);addTalkbackText("The incorrect month field was changed back to it's original value.", null, true);} else if (dayOfMonthJTextField.getBackground().equals(invalidePinkFieldColor)) {dayOfMonthJTextField.setBackground(Color.WHITE);addTalkbackText("The incorrect day of the month was changed back to it's original value.", null, true);} else if (yearJTextField.getBackground().equals(invalidePinkFieldColor)) {yearJTextField.setBackground(Color.WHITE);addTalkbackText("The incorrect year field was changed back to it's original value.", null, true);} else if (hourJTextField.getBackground().equals(invalidePinkFieldColor)) {hourJTextField.setBackground(Color.WHITE);addTalkbackText("The incorrect hour field was changed back to it's original value.", null, true);} else if (minuteJTextField.getBackground().equals(invalidePinkFieldColor)) {minuteJTextField.setBackground(Color.WHITE);addTalkbackText("The incorrect minute field was changed back to it's original value", null, true);}validate();repaint();}private void fillStatisticsGroupsScrollPane(String groupType) {Vector<Vector<Object>> rootDecisionSupportStatisticsGroups = null;JScrollPane statisticsGroupsJScrollPane = null;JPanel statisticsGroupsJPanel = null;JButton statisticsGroupJButton;if (groupType.equals("MEDICAL_CODE_GROUPS")) {statisticsGroupsJScrollPane = statisticsMedicalCodeGroupsJScrollPane;statisticsGroupsJPanel = statisticsMedicalCodeGroupsJPanel;rootDecisionSupportStatisticsGroups = (Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(0));} else if (groupType.equals("PATIENT_CHART_GROUPS")) {statisticsGroupsJScrollPane = statisticsMedicalCodeGroupsJScrollPane;statisticsGroupsJPanel = statisticsMedicalCodeGroupsJPanel;rootDecisionSupportStatisticsGroups = (Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(1));} else if (groupType.equals("TIME_RANGE_GROUPS")) {statisticsGroupsJScrollPane = statisticsMedicalCodeGroupsJScrollPane;statisticsGroupsJPanel = statisticsMedicalCodeGroupsJPanel;rootDecisionSupportStatisticsGroups = (Vector<Vector<Object>>) (((Vector) (Access.rootAdministrator.elementAt(2))).elementAt(2));} else {System.out.println("Critical error: unrecognized groupType in DecisionSupport fillStatisticsGroupsScrollPane(");}int groupInd = 0;while (groupInd < rootDecisionSupportStatisticsGroups.size()) {statisticsGroupJButton = new JButton((String) (rootDecisionSupportStatisticsGroups.elementAt(groupInd).elementAt(0)));statisticsGroupJButton.addActionListener(this);statisticsGroupJButton.setActionCommand("statisticsGroupButton");statisticsGroupJButton.setBackground(SystemWindow.buttonColor);statisticsGroupJButton.setBorder(SystemWindow.buttonBorder);statisticsPatientChartGroupsPanelConstraints.gridy++;statisticsGroupsJPanel.add(statisticsGroupJButton, statisticsPatientChartGroupsPanelConstraints);groupInd++;}}private int getChartIDFromPatientName(String pPatientNamePrefix, String pPatientNameGivenName, String pPatientNameMiddleInitialOrName, String pPatientNameLastNamePrefix, String pPatientNameFamilyName) {int numCharts = ((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).size();int chartInd = 1;while (chartInd < numCharts) {if (null == pPatientNameFamilyName || pPatientNameFamilyName.equals("") || pPatientNameFamilyName.equals((((Vector) (((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartInd))).elementAt(1))).elementAt(1)))) {if (null == pPatientNameGivenName || pPatientNameGivenName.equals("") || pPatientNameFamilyName.equals((((Vector) (((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartInd))).elementAt(1))).elementAt(3)))) {if (null == pPatientNameMiddleInitialOrName || pPatientNameMiddleInitialOrName.equals("") || pPatientNameFamilyName.equals((((Vector) (((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartInd))).elementAt(1))).elementAt(4)))) {if (null == pPatientNamePrefix || pPatientNamePrefix.equals("") || pPatientNameFamilyName.equals((((Vector) (((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartInd))).elementAt(1))).elementAt(6)))) {if (null == pPatientNameLastNamePrefix || pPatientNameFamilyName.equals((((Vector) (((Vector) (((Vector) (((Vector) (Access.rootAdministrator.elementAt(1))).elementAt(0))).elementAt(chartInd))).elementAt(1))).elementAt(2)))) {return chartInd;}}}}}chartInd++;}return -2;}void openMolecularAssembler(int indice) {molecularNetworksPanel.newGraphics = true;MolecularAssemblerQueryJTextArea.setText((String) (((Vector) ((Vector) ((Vector) Access.user.elementAt(2)).elementAt(4)).elementAt(indice)).elementAt(0)));molecularNetworksPanel.primaryNetworksGraphicsPolylines = (Vector<Vector<Integer>>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(1));System.out.println("s biomoietyNetworksPanel.primaryNetworksGraphicsPolylines.elementAt(0).elementAt(0): " + molecularNetworksPanel.primaryNetworksGraphicsPolylines.elementAt(0).elementAt(0));molecularNetworksPanel.primaryNetworksRootLocationPoints = (Vector<Point>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(2));System.out.println("s biomoietyNetworksPanel.primaryNetworksRootLocationPoints.elementAt(0): " + molecularNetworksPanel.primaryNetworksRootLocationPoints.elementAt(0));MolecularAssembler.tertiaryNetworksPolyLinePointsX = (Vector<int[]>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(3));System.out.println("s MolecularAssembler.tertiaryNetworksPolyLinePointsX.elementAt(0): " + MolecularAssembler.tertiaryNetworksPolyLinePointsX.elementAt(0));MolecularAssembler.tertiaryNetworksPolyLinePointsY = (Vector<int[]>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(4));System.out.println("s MolecularAssembler.tertiaryNetworksPolyLinePointsY.elementAt(0): " + MolecularAssembler.tertiaryNetworksPolyLinePointsY.elementAt(0));molecularNetworksPanel.secondaryNetworksBiomoietyButtonsPrimitives = (Vector<Vector<Vector<String>>>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(5));System.out.println("s biomoietyNetworksPanel.secondaryNetworksBiomoietyButtonsPrimitives.size(): " + molecularNetworksPanel.secondaryNetworksBiomoietyButtonsPrimitives.size());molecularNetworksPanel.primaryNetworksBiomoietyButtonsPrimitives = (Vector<Vector<Vector<String>>>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(6));System.out.println("s biomoietyNetworksPanel.primaryNetworksBiomoietyButtonsPrimitives.size(): " + molecularNetworksPanel.primaryNetworksBiomoietyButtonsPrimitives.size());molecularNetworksPanel.topmostPrimaryNetworksPixelY = (Integer) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(7));System.out.println("s biomoietyNetworksPanel.topmostPrimaryNetworksPixelY: " + molecularNetworksPanel.topmostPrimaryNetworksPixelY);molecularNetworksPanel.bottommostPrimaryNetworksPixelY = (Integer) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(8));System.out.println("s biomoietyNetworksPanel.bottommostPrimaryNetworksPixelY: " + molecularNetworksPanel.bottommostPrimaryNetworksPixelY);molecularNetworksPanel.rightmostPrimaryNetworksPixelX = (Integer) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(9));System.out.println("s biomoietyNetworksPanel.rightmostPrimaryNetworksPixelX: " + molecularNetworksPanel.rightmostPrimaryNetworksPixelX);molecularNetworksPanel.leftmostPrimaryNetworksPixelX = (Integer) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(10));System.out.println("s biomoietyNetworksPanel.leftmostPrimaryNetworksPixelX: " + molecularNetworksPanel.leftmostPrimaryNetworksPixelX);MolecularAssembler.referencePublications = (Vector<String[]>) (((Vector) ((Vector) ((Vector) (Access.user.elementAt(2))).elementAt(4)).elementAt(indice)).elementAt(11));molecularNetworksPanel.repaint();repaint();}Object getButtonPrimitives(Vector buttons, String primaryOrSecondaryButtons) {Vector returnButtonsAsPrimitives;if (primaryOrSecondaryButtons.equals("primary")) {returnButtonsAsPrimitives = new Vector<JButton>();int outerInd = 0;while (outerInd < buttons.size()) {returnButtonsAsPrimitives.add(new Vector(6));((Vector) (returnButtonsAsPrimitives.lastElement())).add(((JButton) (buttons.elementAt(outerInd))).getText());((Vector) (returnButtonsAsPrimitives.lastElement())).add(((JButton) (buttons.elementAt(outerInd))).getActionCommand());((Vector) (returnButtonsAsPrimitives.lastElement())).add(((JButton) (buttons.elementAt(outerInd))).getBounds().x);((Vector) (returnButtonsAsPrimitives.lastElement())).add(((JButton) (buttons.elementAt(outerInd))).getBounds().y);((Vector) (returnButtonsAsPrimitives.lastElement())).add(((JButton) (buttons.elementAt(outerInd))).getBounds().width);((Vector) (returnButtonsAsPrimitives.lastElement())).add(((JButton) (buttons.elementAt(outerInd))).getBounds().height);outerInd++;}} else {returnButtonsAsPrimitives = new Vector<Vector<JButton>>();int outerInd = 0;int innerInd = 0;while (outerInd < buttons.size()) {returnButtonsAsPrimitives.add(new Vector(6));innerInd = 0;while (innerInd < ((Vector) (buttons.elementAt(outerInd))).size()) {returnButtonsAsPrimitives.add(new Vector(6));((Vector) (returnButtonsAsPrimitives.lastElement())).add(((Vector<JButton>) (buttons.elementAt(outerInd))).elementAt(outerInd).getText());((Vector) (returnButtonsAsPrimitives.lastElement())).add(((Vector<JButton>) (buttons.elementAt(outerInd))).elementAt(outerInd).getActionCommand());((Vector) (returnButtonsAsPrimitives.lastElement())).add(((Vector<JButton>) (buttons.elementAt(outerInd))).elementAt(outerInd).getBounds().x);((Vector) (returnButtonsAsPrimitives.lastElement())).add(((Vector<JButton>) (buttons.elementAt(outerInd))).elementAt(outerInd).getBounds().y);((Vector) (returnButtonsAsPrimitives.lastElement())).add(((Vector<JButton>) (buttons.elementAt(outerInd))).elementAt(outerInd).getBounds().width);((Vector) (returnButtonsAsPrimitives.lastElement())).add(((Vector<JButton>) (buttons.elementAt(outerInd))).elementAt(outerInd).getBounds().height);innerInd++;}outerInd++;}}return returnButtonsAsPrimitives;}private Image bufferedImageToImage(BufferedImage pBufferedImage) {BufferedImage bufferedImageOut = new BufferedImage(pBufferedImage.getWidth(), pBufferedImage.getHeight(), 0);bufferedImageOut.getGraphics().drawImage(pBufferedImage, 0, 0, null);return bufferedImageOut;}private void findQueryAssociatedMolecularNetworks(String pRecentActivitiesJTextAreaText) {findQueryAssociatedMolecularNetworksJToggleButton.setSelected(true);cycleClinicalTrialsShowAllJToggleButton.setSelected(false);parsedQuery = MolecularAssembler.parseQuery(pRecentActivitiesJTextAreaText);MolecularAssemblerPossibleInterventionStrategiesButtonsPanelHeaderJLabel.setText("0 network-associated trials found");MolecularAssembler.overRidePubMedRetrievalWithLocalFiles = true;MolecularAssembler.referencePublications = new Vector<String[]>();Vector<Vector<String[]>> MolecularAssemblerGetArticlesWithBiomoietiesFromRecentActivitiesJTextAreaGottenText = MolecularAssembler.getPublicationsAndTagTheBiomoieties(parsedQuery);if (MolecularAssemblerGetArticlesWithBiomoietiesFromRecentActivitiesJTextAreaGottenText != null) {MolecularAssembler.primaryNetworksBiomoietyGridLoci = MolecularAssembler.translateArticleSentencesWithMoreThanOneBiomoietyToGridVector(MolecularAssembler.translateArticlesWithBiomoietiesToArticleSentencesWithMoreThanOneBiomoiety(MolecularAssemblerGetArticlesWithBiomoietiesFromRecentActivitiesJTextAreaGottenText));addTalkbackText("Drawing pathways...", null, true);molecularNetworksPanel.calculatePrimaryNetworks(MolecularAssembler.primaryNetworksBiomoietyGridLoci, copyStructureForLocations(MolecularAssembler.primaryNetworksBiomoietyGridLoci), null, 0);MolecularAssembler.calculateSecondaryNetworks = true;parsedQuery = MolecularAssembler.parseQuery(null);if (!parsedQuery.equals("NO_QUERY_TERMS_FOUND")) {Vector<Vector<String[]>> MolecularAssemblerGetArticlesWithBiomoietiesFromParsedQuery = MolecularAssembler.getPublicationsAndTagTheBiomoieties(parsedQuery);if (MolecularAssemblerGetArticlesWithBiomoietiesFromParsedQuery != null) {MolecularAssembler.secondaryNetworksBiomoietyGridLoci = MolecularAssembler.translateArticleSentencesWithMoreThanOneBiomoietyToGridVector(MolecularAssembler.translateArticlesWithBiomoietiesToArticleSentencesWithMoreThanOneBiomoiety(MolecularAssemblerGetArticlesWithBiomoietiesFromParsedQuery));molecularNetworksPanel.calculateSecondaryNetworks(MolecularAssembler.secondaryNetworksBiomoietyGridLoci, copyStructureForLocations(MolecularAssembler.secondaryNetworksBiomoietyGridLoci), null, 0);}MolecularAssembler.calculateIntersectingTertiaryNetworksGraphicPrimitives();} else {addTalkbackText("No networks found.", null, true);}}int numTertiaryNetworks = MolecularAssembler.tertiaryNetworksPolyLinePointsX.size() - 1;if (numTertiaryNetworks > 0) {MolecularAssemblerNetworkNumberPromptJLabel.setEnabled(true);MolecularAssemblerNetworkNumberJTextField.setEnabled(true);cycleClinicalTrialsShowAllJToggleButton.setEnabled(true);cycleClinicalTrialsUpJButton.setEnabled(true);cycleClinicalTrialsDownJButton.setEnabled(true);MolecularAssemblerNetworkNumberJTextField.setText("");} else {MolecularAssemblerNetworkNumberPromptJLabel.setEnabled(false);cycleClinicalTrialsShowAllJToggleButton.setEnabled(false);cycleClinicalTrialsUpJButton.setEnabled(false);cycleClinicalTrialsDownJButton.setEnabled(false);MolecularAssemblerNetworkNumberJTextField.setEnabled(false);}MolecularAssemblerPossibleInterventionStrategiesButtonsPanelHeaderJLabel.setText(MolecularAssembler.tertiaryNetworksPolyLinePointsX.size() - 1 + " trials");repaint();}private void zoomBiomoietyNetworksDisplayPanelInDecisionSupport(String string) {}private boolean statisticsFor(String statisticsFieldAgentXJTextFieldGottonText, String statisticsFieldAgentYJTextFieldGottonText) {boolean statisticsFor = true;return statisticsFor;}public void setViewPositionOnBiomoietyNetworksPanel() {int centerPH2NetworkX = (molecularNetworksPanel.rightmostTertiaryNetworksPixelX + molecularNetworksPanel.leftmostTertiaryNetworksPixelX) / 2;int centerPH2NetworkY = (molecularNetworksPanel.bottommostTertiaryNetworksPixelY + molecularNetworksPanel.topmostTertiaryNetworksPixelY) / 2;int positionX = centerPH2NetworkX - biomoietyNetworksJScrollPane.getWidth() / 2 + 18;int positionY = centerPH2NetworkY - biomoietyNetworksJScrollPane.getHeight() / 2 + 18;if (positionX > molecularNetworksPanel.getWidth() - biomoietyNetworksJScrollPane.getWidth()) {positionX = molecularNetworksPanel.getWidth() - biomoietyNetworksJScrollPane.getWidth();}if (positionY > molecularNetworksPanel.getHeight() - biomoietyNetworksJScrollPane.getHeight()) {positionY = molecularNetworksPanel.getHeight() - biomoietyNetworksJScrollPane.getHeight();}biomoietyNetworksJScrollPane.getViewport().setViewPosition(new Point(positionX, positionY));molecularNetworksPanel.repaint();}Vector copyStructureForLocations(Vector<Vector<Vector<String[]>>> vector) {Vector vectorCopy = new Vector();int ind = 0;while (ind < vector.size()) {if (vector.elementAt(ind) instanceof Vector) {vectorCopy.add(copyStructureForLocations((Vector) (vector.elementAt(ind))));}ind++;}return vectorCopy;}public void reSize() {validate();pack();repaint();}public void mouseClicked(MouseEvent m) {if (((Component) (m.getSource())).getName().equals("mortalityGraphPanel") || ((Component) (m.getSource())).getName().equals("lifeExpectancyGraphPanel")) {showMortalityAndOrLifeExpectancyJPopupMenu.show(this, 0, 0);} else if (((Component) (m.getSource())).getName().startsWith("statisticsMedicalCodeEntryJButton")) {if (m.getButton() == 3) {String name = ((Component) (m.getSource())).getName();int ind1 = name.indexOf("|");String nameParse1 = name.substring(ind1 + 1);int ind2 = nameParse1.indexOf("|");String nameParse2 = nameParse1.substring(ind2 + 1);String buttonIdentifier = name.substring(0, name.indexOf("|"));String codeReference = nameParse1.substring(0, nameParse1.indexOf("|"));JLabel referenceJLabel = new JLabel(codeReference);JPopupMenu codeReferenceJPopupMenu = new JPopupMenu();codeReferenceJPopupMenu.add(referenceJLabel);codeReferenceJPopupMenu.show(((JButton) (m.getSource())), 0, ImageObserver.HEIGHT);}} else if (((Component) (m.getSource())).getName().equals("titleBarBaseJPanel") && m.getClickCount() > 1) {if (browserIsOn) {}}super.mouseClicked(m);}public void mousePressed(MouseEvent m) {super.mousePressed(m);}public void mouseReleased(MouseEvent m) {if (m.getComponent().getName().equals("clinicalTrialsPanelHorizontalJScrollbar") || m.getComponent().getName().equals("clinicalTrialsPanelVerticalJScrollbar") || m.getComponent().getName().equals("MolecularAssemblerResultsJSplitPane.getComponent(2)")) {if (MolecularAssemblerJPanel.isShowing()) {int boxPanelWidth = Math.round(biomoietyNetworksJScrollPane.getViewport().getWidth() / 10);int boxPanelHeight = Math.round(biomoietyNetworksJScrollPane.getViewport().getHeight() / 10);int yAdjustment = 1;int xAdjustment = 0;biomoietyNetworksPanelViewRadarPanel.setBounds(Math.round(biomoietyNetworksJScrollPane.getViewport().getViewPosition().x / 10) + xAdjustment, Math.round(biomoietyNetworksJScrollPane.getViewport().getViewPosition().y / 10) + yAdjustment, boxPanelWidth, boxPanelHeight);repaint();}}super.mouseReleased(m);}public void mouseEntered(MouseEvent m) {if (m.getComponent().getName().equals("primaryBiomoietyJButton") || m.getComponent().getName().startsWith("secondaryBiomoietyJButton")) {String[] referenceArticle = MolecularAssembler.referencePublications.elementAt(Integer.parseInt(((JButton) (m.getSource())).getActionCommand().substring(0, ((JButton) (m.getSource())).getActionCommand().indexOf("|"))));Vector<String[]> biomoietyAttributes = molecularNetworksPanel.biomoietyAttributes.elementAt(Integer.parseInt(((JButton) (m.getSource())).getActionCommand().substring(((JButton) (m.getSource())).getActionCommand().indexOf("|") + 1)));String hUGOID = referenceArticle[2];int startIndiceInAbstract = Integer.parseInt(biomoietyAttributes.elementAt(0)[3]);int endIndiceInAbstract = Integer.parseInt(biomoietyAttributes.elementAt(0)[4]);datePublishedJLabel.setText(referenceArticle[2]);setTitleJPanel(referenceArticle[3]);authorsJLabel.setText(referenceArticle[7]);setAbstractTextJPanel(referenceArticle[4], startIndiceInAbstract, endIndiceInAbstract, ((JButton) (m.getSource())).getText());journalJLabel.setText(referenceArticle[6]);citationJLabel.setText(referenceArticle[8]);abstractReferenceJPanel.validate();abstractReferenceJPanel.repaint();}}public void mouseExited(MouseEvent m) {}public void setAbstractTextJPanel(String abstractText, int termStartIndiceInAbstract, int termEndIndiceInAbstract, String term) {abstractTextJPanel.removeAll();JPanel lineJPanel;Color biomoietyTermColor = new Color(170, 100, 25);GridBagConstraints abstractTextPanelConstraints = new GridBagConstraints();GridBagConstraints lineJPanelConstraints = new GridBagConstraints();abstractTextPanelConstraints.gridy = 0;abstractTextPanelConstraints.anchor = GridBagConstraints.WEST;int lineNum = 1;int lineEndIndice;JLabel fullLineJLabel;JLabel biomoietyLineBeforeTermJLabel = new JLabel("");JLabel biomoietyTermJLabel = new JLabel(abstractText.substring(termStartIndiceInAbstract, termEndIndiceInAbstract + 1));JLabel biomoietyLineAfterTermJLabel = new JLabel("");int lastCharProcessed = 0;biomoietyLineBeforeTermJLabel.setFont(new Font("serif", Font.BOLD, 17));biomoietyLineAfterTermJLabel.setFont(new Font("serif", Font.BOLD, 17));biomoietyTermJLabel.setFont(new Font("serif", Font.BOLD, 17));biomoietyTermJLabel.setForeground(biomoietyTermColor);biomoietyTermJLabel.setBackground(new Color(210, 191, 255));boolean termLineProcessed = false;boolean termLineProcessedOnThisLine = false;while (lastCharProcessed < abstractText.length()) {lineJPanel = new JPanel(new GridBagLayout());termLineProcessedOnThisLine = false;if (lineNum * 80 > abstractText.length()) {lineEndIndice = abstractText.length();} else {lineEndIndice = lineNum * 80 - 1;}lineNum++;if (!termLineProcessed) {if (termStartIndiceInAbstract < lineEndIndice) {biomoietyLineBeforeTermJLabel.setText(abstractText.substring(lastCharProcessed, termStartIndiceInAbstract));lastCharProcessed = lastCharProcessed + biomoietyLineBeforeTermJLabel.getText().length();lastCharProcessed = lastCharProcessed + biomoietyTermJLabel.getText().length();if (lastCharProcessed < lineEndIndice) {biomoietyLineAfterTermJLabel.setText(abstractText.substring(termEndIndiceInAbstract + 1, lineEndIndice));lastCharProcessed = lastCharProcessed + biomoietyLineAfterTermJLabel.getText().length();}lineJPanel.add(biomoietyLineBeforeTermJLabel, lineJPanelConstraints);lineJPanelConstraints.gridx = 1;lineJPanel.add(biomoietyTermJLabel, lineJPanelConstraints);lineJPanelConstraints.gridx = 2;lineJPanel.add(biomoietyLineAfterTermJLabel, lineJPanelConstraints);abstractTextJPanel.add(lineJPanel, abstractTextPanelConstraints);termLineProcessed = true;termLineProcessedOnThisLine = true;}}if (!termLineProcessedOnThisLine) {if (lastCharProcessed < lineEndIndice) {fullLineJLabel = new JLabel(abstractText.substring(lastCharProcessed, lineEndIndice));fullLineJLabel.setFont(new Font("serif", Font.BOLD, 17));lineJPanel.add(fullLineJLabel, lineJPanelConstraints);abstractTextJPanel.add(lineJPanel, abstractTextPanelConstraints);lastCharProcessed = lineEndIndice;}}abstractTextPanelConstraints.gridy = abstractTextPanelConstraints.gridy + 1;}abstractTextJPanel.validate();}private void setTitleJPanel(String title) {titleJPanel.removeAll();int endLineInd = 59;boolean stop = false;GridBagConstraints titlePanelConstraints = new GridBagConstraints();titlePanelConstraints.gridy = 0;JLabel label;System.out.println(" ");while (!stop) {if (title.length() > 60) {label = new JLabel(title.substring(0, 59));label.setForeground(referenceAbstractLabelsColor);label.setFont(new Font("serif", Font.BOLD, 19));label.setOpaque(false);title = title.substring(60, title.length() - 1);} else {label = new JLabel(title);label.setForeground(referenceAbstractLabelsColor);label.setFont(new Font("serif", Font.BOLD, 19));label.setOpaque(false);stop = true;}titleJPanel.add(label, titlePanelConstraints);titlePanelConstraints.gridy = titlePanelConstraints.gridy + 1;}}public void focusGained(FocusEvent arg0) {}public void focusLost(FocusEvent e) {if (e.getComponent().getName().endsWith("|infallibilityFactor") || e.getComponent().getName().endsWith("|treatmentProcedural")) {System.out.println("focusLost");if (!(((JTextField) (e.getSource())).getText().equals("")) && isValidTreatmentFactorWithTalkback((JTextField) (e.getSource()))) {System.out.println("isValidTreatmentFactorWithTalkback() is true");factorReductionOfMortalitiesWithTalkback();}} else if (e.getComponent().getName().equals("statisticsTimeRangeToDayOfMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "DAY_OF_MONTH_FIELD", statisticsTimeRangeToDayOfMonthJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeToMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "MONTH_FIELD", statisticsTimeRangeToMonthJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeToYearJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "YEAR_FIELD", statisticsTimeRangeToYearJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeToHourJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "HOUR_FIELD", statisticsTimeRangeToHourJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeToMinuteJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "MINUTE_FIELD", statisticsTimeRangeToMinuteJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeToAmPmJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("To", "AM_PM_FIELD", statisticsTimeRangeToAmPmJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeFromDayOfMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "DAY_OF_MONTH_FIELD", statisticsTimeRangeFromDayOfMonthJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeFromMonthJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "MONTH_FIELD", statisticsTimeRangeFromMonthJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeFromYearJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "YEAR_FIELD", statisticsTimeRangeFromYearJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeFromHourJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "HOUR_FIELD", statisticsTimeRangeFromHourJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeFromMinuteJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "MINUTE_FIELD", statisticsTimeRangeFromMinuteJTextField.getText());} else if (e.getComponent().getName().equals("statisticsTimeRangeFromAmPmJTextField")) {syncStatisticsFromOrToCalendarWithTalkback("From", "AM_PM_FIELD", statisticsTimeRangeFromAmPmJTextField.getText());}}public class BiomoietyNetworksRadarPanel extends JPanel {public BiomoietyNetworksRadarPanel() {setLayout(null);setBackground(Color.BLACK);setOpaque(true);setPreferredSize(new Dimension(1, 80));setSize(1, 80);}public void paintComponent(Graphics can) {super.paintComponent(can);if (molecularNetworksPanel.newGraphics) {can = molecularNetworksPanel.paintBiomoietyNetworksPanel(can, "biomoietyNetworksRadarPanel");}}}}// EOF