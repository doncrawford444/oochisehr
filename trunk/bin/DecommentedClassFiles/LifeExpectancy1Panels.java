/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.util.Vector;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.border.LineBorder;import javax.swing.border.MatteBorder;public class LifeExpectancy1Panels extends JPanel implements ActionListener, MouseListener {public static final long serialVersionUID = 1L;JPanel titleJPanel = new JPanel(new GridBagLayout());JLabel titleJLabel = new JLabel();JLabel survivalJLabel = new JLabel("");JLabel timeJLabel = new JLabel("");static int originX = 50;static int originY = 80;static int graphHeight = 320;static int graphWidth = 320;Color lifeExtensionLifeExpectancyLineColor = new Color(0, 128, 128);Color lifeExtensionColor = new Color(192, 32, 32);int[] lifeExtensionCurvePointsX;int[] lifeExtensionCurvePointsY;Vector<String> pGraphNames;Vector<double[]> leastSquaresRegressionLine = new Vector<double[]>();Vector<Vector<Double>> pGraphPointsY = new Vector<Vector<Double>>();Vector<Vector<Double>> graphPointsY = new Vector<Vector<Double>>();JPanel lowestXTicTextOnHorizontalAxisJPanel = new JPanel(new GridBagLayout());JPanel middleXTicTextOnHorizontalAxisJPanel = new JPanel(new GridBagLayout());JPanel highestXTicTextOnHorizontalAxisJPanel = new JPanel(new GridBagLayout());JPanel lowestYTicTextOnVerticalAxisJPanel = new JPanel(new GridBagLayout());JPanel middleYTicTextOnVerticalAxisJPanel = new JPanel(new GridBagLayout());JPanel highestYTicTextOnVerticalAxisJPanel = new JPanel(new GridBagLayout());JPanel lowestYTicTextOnVerticalAxisPusherJPanel = new JPanel(new GridBagLayout());JPanel middleYTicTextOnVerticalAxisPusherJPanel = new JPanel(new GridBagLayout());JPanel highestYTicTextOnVerticalAxisPusherJPanel = new JPanel(new GridBagLayout());JLabel lowestXTicTextOnHorizontalAxisJLabel = new JLabel();JLabel middleXTicTextOnHorizontalAxisJLabel = new JLabel();JLabel highestXTicTextOnHorizontalAxisJLabel = new JLabel();JLabel lowestYTicTextOnVerticalAxisJLabel = new JLabel();JLabel middleYTicTextOnVerticalAxisJLabel = new JLabel();JLabel highestYTicTextOnVerticalAxisJLabel = new JLabel();JButton dotJButton;JLabel buttonJLabel1;JLabel buttonJLabel2;JLabel legendJLabel;JPanel legendJPanel;Color whiteMalesColor = new Color(139, 137, 137);Color whiteFemalesColor = new Color(128, 138, 170);Color blackMalesColor = new Color(60, 140, 210);Color hispanicMalesColor = new Color(190, 120, 50);Color hispanicFemalesColor = new Color(210, 180, 140);Color nonHispanicWhiteMalesColor = new Color(63, 174, 130);Color nonHispanicWhiteFemalesColor = new Color(130, 145, 90);Color nonHispanicBlackMalesColor = new Color(186, 85, 211);Color nonHispanicBlackFemalesColor = new Color(255, 128, 128);Color blackFemalesColor = new Color(219, 112, 147);String dotButtonText;int xStretch;int ind;int highestYInnerInd;int highestYInd;int lowestYInnerInd;int lowestYInd;int highestXInnerInd;int highestXInd;int lowestXInnerInd;int lowestXInd;double largestY = 0;double smallestY = 100000;Color buttonColor;int highestY = 0;int lowestY = 100000;int highestX = 0;int lowestX = 100000;int outerInd;int middleX;int yH;int y;int x;Dimension lifeTabelPanelSizeDimension = new Dimension(550, 450);GridBagConstraints dotButtonConstraints = new GridBagConstraints();GridBagConstraints titlePanelConstraints = new GridBagConstraints();GridBagConstraints legendPanelConstraints = new GridBagConstraints();GridBagConstraints ticTextOnAxesPanelConstraints = new GridBagConstraints();LifeExpectancy1Panels(Vector<String> graphNames, int startAge) {survivalJLabel.setBounds(originX - 10, originY - 25, 160, 30);timeJLabel.setBounds((graphWidth + originX + 180) / 2 - 80, graphHeight + originY + 10, 160, 30);add(survivalJLabel);add(timeJLabel);setLayout(null);titleJPanel.add(titleJLabel, titlePanelConstraints);titleJPanel.setOpaque(false);titleJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));titleJPanel.setBounds(10, 0, graphWidth + originX + 160, 40);setBorder(SystemWindow.paperBorder);if (!graphNames.isEmpty()) {pGraphNames = graphNames;ind = 0;while (ind < graphNames.size()) {pGraphPointsY.add(lifeTable(graphNames.elementAt(ind)));graphPointsY.add(lifeTable(graphNames.elementAt(ind)));ind++;}outerInd = 0;while (outerInd < pGraphPointsY.size()) {ind = 0;while (ind < pGraphPointsY.elementAt(outerInd).size()) {if (largestY < pGraphPointsY.elementAt(outerInd).elementAt(ind)) {largestY = pGraphPointsY.elementAt(outerInd).elementAt(ind);}if (smallestY > pGraphPointsY.elementAt(outerInd).elementAt(ind)) {smallestY = pGraphPointsY.elementAt(outerInd).elementAt(ind);}legendJLabel = new JLabel(pGraphNames.elementAt(outerInd).replace("lifeExpectancyAtBirthOverLastFortyYears", ""));legendJPanel = new JPanel(new GridBagLayout());legendJPanel.setBorder(new LineBorder(Color.BLACK, 1));legendJPanel.add(legendJLabel, legendPanelConstraints);if (graphNames.elementAt(outerInd).contains("AtBirthOverLastFortyYears")) {pGraphPointsY.elementAt(outerInd).setElementAt(((double) (10 * (pGraphPointsY.elementAt(outerInd).elementAt(ind) - 60))), ind);titleJLabel.setText("Life expectancy at birth over the last forty years");dotButtonText = "In ";survivalJLabel.setText("Age");timeJLabel.setText("(Year)");xStretch = 7;} else {titleJLabel.setText("Life expectancy per year to 100");dotButtonText = "At age ";survivalJLabel.setText("Expected years of life remaining");timeJLabel.setText("Age");pGraphPointsY.elementAt(outerInd).setElementAt(((double) (3 * pGraphPointsY.elementAt(outerInd).elementAt(ind))), ind);xStretch = 3;}if (pGraphNames.elementAt(outerInd).equals("white males")) {buttonColor = whiteMalesColor;legendJPanel.setBounds(220, 75, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("white females")) {buttonColor = whiteFemalesColor;legendJPanel.setBounds(385, 75, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("black males")) {buttonColor = blackMalesColor;legendJPanel.setBounds(220, 115, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("black females")) {buttonColor = blackFemalesColor;legendJPanel.setBounds(385, 115, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("Hispanic males")) {buttonColor = hispanicMalesColor;legendJPanel.setBounds(220, 155, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("Hispanic females")) {buttonColor = hispanicFemalesColor;legendJPanel.setBounds(385, 155, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("non Hisp white males")) {buttonColor = nonHispanicWhiteMalesColor;legendJPanel.setBounds(220, 155, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("non Hisp white fem")) {buttonColor = nonHispanicWhiteFemalesColor;legendJPanel.setBounds(385, 195, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("non Hisp black fem")) {buttonColor = nonHispanicBlackFemalesColor;legendJPanel.setBounds(385, 235, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("non Hisp black males")) {buttonColor = nonHispanicBlackMalesColor;legendJPanel.setBounds(385, 275, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears white males")) {buttonColor = hispanicMalesColor;legendJPanel.setBounds(385, 75, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears white females")) {buttonColor = whiteFemalesColor;legendJPanel.setBounds(385, 115, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears black males")) {buttonColor = nonHispanicBlackFemalesColor;legendJPanel.setBounds(385, 155, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears black females")) {buttonColor = Color.GRAY;legendJPanel.setBounds(385, 195, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears all races, both sexes")) {buttonColor = nonHispanicBlackMalesColor;legendJPanel.setBounds(385, 235, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears all races, males")) {buttonColor = nonHispanicBlackMalesColor;legendJPanel.setBounds(385, 275, 160, 30);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears all races, females")) {buttonColor = hispanicFemalesColor;legendJPanel.setBounds(385, 315, 160, 30);}legendJPanel.setBackground(buttonColor);add(titleJPanel);add(legendJPanel);y = -(int) Math.round(((double) pGraphPointsY.elementAt(outerInd).elementAt(ind))) + graphHeight + originY;x = xStretch * ind + originX;if (highestY < y) {highestY = y;highestYInnerInd = outerInd;highestYInd = ind;}if (lowestY > y) {lowestY = y;lowestYInnerInd = outerInd;lowestYInd = ind;}if (highestX < x) {highestX = x;highestXInnerInd = outerInd;highestXInd = ind;}if (lowestX > x) {lowestX = x;lowestXInnerInd = outerInd;lowestXInd = ind;}dotJButton = new JButton();dotJButton.setLayout(new GridBagLayout());buttonJLabel1 = new JLabel(pGraphNames.elementAt(outerInd).replace("lifeExpectancyAtBirthOverLastFortyYears", ""));buttonJLabel2 = new JLabel(dotButtonText + ind + " the average mean life expectancy was " + graphPointsY.elementAt(outerInd).elementAt(ind));dotButtonConstraints.insets = new Insets(0, 4, 0, 4);dotButtonConstraints.gridy = 0;dotJButton.add(buttonJLabel1, dotButtonConstraints);dotButtonConstraints.gridy = 1;dotJButton.add(buttonJLabel2, dotButtonConstraints);dotJButton.setBorder(new LineBorder(buttonColor, 1));dotJButton.addMouseListener(this);dotJButton.setName(pGraphNames.elementAt(outerInd) + "|" + "(" + String.valueOf(x) + ", " + String.valueOf(y) + ")");dotJButton.setBounds(x, y, 4, 4);if (startAge <= ind) {add(dotJButton);}ind++;}leastSquaresRegressionLine.add(leastSquaresRegressionLine(pGraphPointsY.elementAt(outerInd), null));outerInd++;}if (graphNames.elementAt(0).contains("AtBirthOverLastFortyYears")) {middleX = (int) (((xStretch * highestXInd + xStretch * lowestXInd) / 2) + originX);lowestXTicTextOnHorizontalAxisJLabel.setText(String.valueOf(2008 - highestXInd + lowestXInd));middleXTicTextOnHorizontalAxisJLabel.setText(String.valueOf(2008 - (int) ((highestXInd - lowestXInd) / 2)));highestXTicTextOnHorizontalAxisJLabel.setText("2008");} else {middleX = (int) (((xStretch * highestXInd + xStretch * lowestXInd) / 2) + originX);lowestXTicTextOnHorizontalAxisJLabel.setText(String.valueOf(lowestXInd));middleXTicTextOnHorizontalAxisJLabel.setText(String.valueOf((highestXInd - lowestXInd) / 2));highestXTicTextOnHorizontalAxisJLabel.setText(String.valueOf(highestXInd));}lowestYTicTextOnVerticalAxisJLabel.setText(String.valueOf(Double.parseDouble(String.valueOf((int) (10 * largestY))) / 10));middleYTicTextOnVerticalAxisJLabel.setText(String.valueOf(Double.parseDouble(String.valueOf((int) (10 * (largestY + smallestY) / 2))) / 10));highestYTicTextOnVerticalAxisJLabel.setText(String.valueOf(Double.parseDouble(String.valueOf((int) (10 * smallestY))) / 10));lowestXTicTextOnHorizontalAxisJPanel.setOpaque(false);middleXTicTextOnHorizontalAxisJPanel.setOpaque(false);highestXTicTextOnHorizontalAxisJPanel.setOpaque(false);lowestYTicTextOnVerticalAxisJPanel.setOpaque(false);middleYTicTextOnVerticalAxisJPanel.setOpaque(false);highestYTicTextOnVerticalAxisJPanel.setOpaque(false);lowestYTicTextOnVerticalAxisPusherJPanel.setOpaque(false);middleYTicTextOnVerticalAxisPusherJPanel.setOpaque(false);highestYTicTextOnVerticalAxisPusherJPanel.setOpaque(false);lowestXTicTextOnHorizontalAxisJPanel.add(lowestXTicTextOnHorizontalAxisJLabel, ticTextOnAxesPanelConstraints);middleXTicTextOnHorizontalAxisJPanel.add(middleXTicTextOnHorizontalAxisJLabel, ticTextOnAxesPanelConstraints);highestXTicTextOnHorizontalAxisJPanel.add(highestXTicTextOnHorizontalAxisJLabel, ticTextOnAxesPanelConstraints);lowestYTicTextOnVerticalAxisJPanel.add(lowestYTicTextOnVerticalAxisJLabel, ticTextOnAxesPanelConstraints);middleYTicTextOnVerticalAxisJPanel.add(middleYTicTextOnVerticalAxisJLabel, ticTextOnAxesPanelConstraints);highestYTicTextOnVerticalAxisJPanel.add(highestYTicTextOnVerticalAxisJLabel, ticTextOnAxesPanelConstraints);ticTextOnAxesPanelConstraints.weightx = 1;ticTextOnAxesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;lowestYTicTextOnVerticalAxisJPanel.add(lowestYTicTextOnVerticalAxisPusherJPanel, ticTextOnAxesPanelConstraints);middleYTicTextOnVerticalAxisJPanel.add(middleYTicTextOnVerticalAxisPusherJPanel, ticTextOnAxesPanelConstraints);highestYTicTextOnVerticalAxisJPanel.add(highestYTicTextOnVerticalAxisPusherJPanel, ticTextOnAxesPanelConstraints);add(lowestXTicTextOnHorizontalAxisJPanel);add(middleXTicTextOnHorizontalAxisJPanel);add(highestXTicTextOnHorizontalAxisJPanel);add(lowestYTicTextOnVerticalAxisJPanel);add(middleYTicTextOnVerticalAxisJPanel);add(highestYTicTextOnVerticalAxisJPanel);lowestXTicTextOnHorizontalAxisJPanel.setBounds(lowestX - 60, graphHeight + originY - 4, 120, 30);middleXTicTextOnHorizontalAxisJPanel.setBounds(middleX - 60, graphHeight + originY - 4, 120, 30);highestXTicTextOnHorizontalAxisJPanel.setBounds(highestX - 60, graphHeight + originY - 4, 120, 30);lowestYTicTextOnVerticalAxisJPanel.setBounds(4, lowestY - 15, 120, 30);middleYTicTextOnVerticalAxisJPanel.setBounds(4, (int) ((highestY + lowestY) / 2) - 15, 120, 30);highestYTicTextOnVerticalAxisJPanel.setBounds(4, highestY - 15, 120, 30);}setBackground(Color.WHITE);setPreferredSize(lifeTabelPanelSizeDimension);}@Overridepublic void paintComponent(Graphics can) {super.paintComponent(can);can.setColor(Color.DARK_GRAY);can.drawLine(originX, originY, originX, graphHeight + originY);can.drawLine(originX + 1, originY, originX + 1, graphHeight + originY);can.drawLine(originX, graphHeight + originY, graphWidth + originX, graphHeight + originY);can.drawLine(originX, graphHeight + originY + 1, graphWidth + originX, graphHeight + originY + 1);if (null != pGraphNames) {can.drawLine(lowestX, graphHeight + originY - 4, lowestX, graphHeight + originY + 4);can.drawLine(middleX, graphHeight + originY - 4, middleX, graphHeight + originY + 4);can.drawLine(highestX, graphHeight + originY - 4, highestX, graphHeight + originY + 4);can.drawLine(originX - 4, lowestY, originX + 4, lowestY);can.drawLine(originX - 4, (int) ((highestY + lowestY) / 2), originX + 4, (int) ((highestY + lowestY) / 2));can.drawLine(originX - 4, highestY, originX + 4, highestY);outerInd = 0;if (pGraphNames.elementAt(outerInd).contains("AtBirthOverLastFortyYears")) {while (outerInd < pGraphPointsY.size()) {if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears white males")) {can.setColor(Color.DARK_GRAY);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears white females")) {can.setColor(whiteFemalesColor);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears black males")) {can.setColor(Color.BLACK);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears black females")) {can.setColor(Color.GRAY);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears all races, both sexes")) {can.setColor(Color.BLUE);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears all races, males")) {can.setColor(Color.BLACK);} else if (pGraphNames.elementAt(outerInd).equals("lifeExpectancyAtBirthOverLastFortyYears all races, females")) {can.setColor(Color.DARK_GRAY);}yH = (int) (-leastSquaresRegressionLine.elementAt(outerInd)[0] - leastSquaresRegressionLine.elementAt(outerInd)[1] * pGraphPointsY.elementAt(outerInd).size() + originY + graphHeight);can.drawLine(originX, -(int) leastSquaresRegressionLine.elementAt(outerInd)[0] + originY + graphHeight, xStretch * pGraphPointsY.elementAt(outerInd).size() + originX, yH);can.drawLine(originX, -(int) leastSquaresRegressionLine.elementAt(outerInd)[0] + originY + graphHeight + 1, xStretch * pGraphPointsY.elementAt(outerInd).size() + originX, yH + 1);outerInd++;}}}}@Overridepublic void actionPerformed(ActionEvent e) {}@Overridepublic void mouseClicked(MouseEvent m) {}@Overridepublic void mouseEntered(MouseEvent m) {m.getComponent().setBounds(m.getComponent().getX(), m.getComponent().getY(), 380, 80);validate();m.getComponent().validate();m.getComponent().repaint();}@Overridepublic void mouseExited(MouseEvent m) {m.getComponent().setBounds(m.getComponent().getX(), m.getComponent().getY(), 4, 4);m.getComponent().repaint();}@Overridepublic void mousePressed(MouseEvent m) {}@Overridepublic void mouseReleased(MouseEvent m) {}static double[] leastSquaresRegressionLine(Vector<Double> doublesy, Vector<Double> doublesx) {double[] leastSquaresRegressionLine = new double[2];double numeratorSum = 0;double denominatorSum = 0;double sumX = 0;double sumY = 0;double averageX;double averageY;int ind = 0;if (null == doublesx) {doublesx = new Vector<Double>();while (ind < doublesy.size()) {doublesx.add((double) ind);ind++;}}ind = 0;while (ind < doublesx.size()) {sumX = sumX + doublesx.elementAt(ind);sumY = sumY + doublesy.elementAt(ind);ind++;}averageX = sumX / ind;averageY = sumY / ind;ind = 0;while (ind < doublesy.size()) {numeratorSum = numeratorSum + (doublesx.elementAt(ind) - averageX) * (doublesy.elementAt(ind) - averageY);denominatorSum = denominatorSum + (doublesx.elementAt(ind) - averageX) * (doublesx.elementAt(ind) - averageX);ind++;}leastSquaresRegressionLine[0] = averageY - (numeratorSum / denominatorSum) * averageX;leastSquaresRegressionLine[1] = numeratorSum / denominatorSum;return leastSquaresRegressionLine;}static Vector<Double> survivors(String groupName) {Vector<Double> survivors = new Vector<Double>();if (groupName.equals("total population")) {survivors.add(100000.0);survivors.add(99341.0);survivors.add(99295.0);survivors.add(99267.0);survivors.add(99245.0);survivors.add(99228.0);survivors.add(99213.0);survivors.add(99199.0);survivors.add(99187.0);survivors.add(99176.0);survivors.add(99167.0);survivors.add(99158.0);survivors.add(99150.0);survivors.add(99138.0);survivors.add(99118.0);survivors.add(99089.0);survivors.add(99050.0);survivors.add(99002.0);survivors.add(98944.0);survivors.add(98878.0);survivors.add(98804.0);survivors.add(98722.0);survivors.add(98632.0);survivors.add(98536.0);survivors.add(98438.0);survivors.add(98341.0);survivors.add(98245.0);survivors.add(98150.0);survivors.add(98056.0);survivors.add(97960.0);survivors.add(97863.0);survivors.add(97763.0);survivors.add(97660.0);survivors.add(97554.0);survivors.add(97443.0);survivors.add(97328.0);survivors.add(97207.0);survivors.add(97080.0);survivors.add(96944.0);survivors.add(96798.0);survivors.add(96639.0);survivors.add(96468.0);survivors.add(96281.0);survivors.add(96076.0);survivors.add(95850.0);survivors.add(95602.0);survivors.add(95331.0);survivors.add(95038.0);survivors.add(94719.0);survivors.add(94374.0);survivors.add(93999.0);survivors.add(93592.0);survivors.add(93151.0);survivors.add(92678.0);survivors.add(92173.0);survivors.add(91635.0);survivors.add(91062.0);survivors.add(90453.0);survivors.add(89801.0);survivors.add(89104.0);survivors.add(88356.0);survivors.add(87552.0);survivors.add(86690.0);survivors.add(85766.0);survivors.add(84777.0);survivors.add(83720.0);survivors.add(82585.0);survivors.add(81364.0);survivors.add(80052.0);survivors.add(78649.0);survivors.add(77153.0);survivors.add(75563.0);survivors.add(73865.0);survivors.add(72043.0);survivors.add(70090.0);survivors.add(68006.0);survivors.add(65792.0);survivors.add(63449.0);survivors.add(60970.0);survivors.add(58343.0);survivors.add(55562.0);survivors.add(52644.0);survivors.add(49607.0);survivors.add(46454.0);survivors.add(43176.0);survivors.add(39797.0);survivors.add(36341.0);survivors.add(32823.0);survivors.add(29284.0);survivors.add(25774.0);survivors.add(22347.0);survivors.add(19062.0);survivors.add(15971.0);survivors.add(13123.0);survivors.add(10557.0);survivors.add(8303.0);survivors.add(6373.0);survivors.add(4766.0);survivors.add(3467.0);survivors.add(2451.0);survivors.add(1680.0);} else if (groupName.equals("males")) {survivors.add(100000.0);survivors.add(99280.0);survivors.add(99230.0);survivors.add(99199.0);survivors.add(99174.0);survivors.add(99155.0);survivors.add(99138.0);survivors.add(99123.0);survivors.add(99109.0);survivors.add(99097.0);survivors.add(99088.0);survivors.add(99081.0);survivors.add(99073.0);survivors.add(99060.0);survivors.add(99036.0);survivors.add(98998.0);survivors.add(98945.0);survivors.add(98878.0);survivors.add(98798.0);survivors.add(98704.0);survivors.add(98598.0);survivors.add(98477.0);survivors.add(98343.0);survivors.add(98201.0);survivors.add(98056.0);survivors.add(97915.0);survivors.add(97777.0);survivors.add(97643.0);survivors.add(97511.0);survivors.add(97379.0);survivors.add(97246.0);survivors.add(97110.0);survivors.add(96971.0);survivors.add(96829.0);survivors.add(96684.0);survivors.add(96534.0);survivors.add(96378.0);survivors.add(96216.0);survivors.add(96044.0);survivors.add(95862.0);survivors.add(95666.0);survivors.add(95455.0);survivors.add(95228.0);survivors.add(94979.0);survivors.add(94705.0);survivors.add(94404.0);survivors.add(94076.0);survivors.add(93719.0);survivors.add(93332.0);survivors.add(92910.0);survivors.add(92449.0);survivors.add(91947.0);survivors.add(91403.0);survivors.add(90816.0);survivors.add(90187.0);survivors.add(89516.0);survivors.add(88802.0);survivors.add(88040.0);survivors.add(87228.0);survivors.add(86364.0);survivors.add(85447.0);survivors.add(84471.0);survivors.add(83435.0);survivors.add(82333.0);survivors.add(81160.0);survivors.add(79912.0);survivors.add(78578.0);survivors.add(77149.0);survivors.add(75622.0);survivors.add(73998.0);survivors.add(72277.0);survivors.add(70460.0);survivors.add(68536.0);survivors.add(66485.0);survivors.add(64299.0);survivors.add(61980.0);survivors.add(59531.0);survivors.add(56962.0);survivors.add(54268.0);survivors.add(51437.0);survivors.add(48469.0);survivors.add(45390.0);survivors.add(42227.0);survivors.add(38994.0);survivors.add(35694.0);survivors.add(32360.0);survivors.add(28996.0);survivors.add(25650.0);survivors.add(22372.0);survivors.add(19213.0);survivors.add(16223.0);survivors.add(13448.0);survivors.add(10928.0);survivors.add(8691.0);survivors.add(6754.0);survivors.add(5122.0);survivors.add(3783.0);survivors.add(2719.0);survivors.add(1898.0);survivors.add(1286.0);survivors.add(844.0);} else if (groupName.equals("females")) {survivors.add(100000.0);survivors.add(99404.0);survivors.add(99363.0);survivors.add(99339.0);survivors.add(99320.0);survivors.add(99305.0);survivors.add(99291.0);survivors.add(99279.0);survivors.add(99268.0);survivors.add(99258.0);survivors.add(99249.0);survivors.add(99240.0);survivors.add(99231.0);survivors.add(99219.0);survivors.add(99205.0);survivors.add(99185.0);survivors.add(99160.0);survivors.add(99131.0);survivors.add(99097.0);survivors.add(99061.0);survivors.add(99022.0);survivors.add(98981.0);survivors.add(98937.0);survivors.add(98891.0);survivors.add(98843.0);survivors.add(98794.0);survivors.add(98742.0);survivors.add(98689.0);survivors.add(98634.0);survivors.add(98578.0);survivors.add(98519.0);survivors.add(98457.0);survivors.add(98392.0);survivors.add(98323.0);survivors.add(98248.0);survivors.add(98169.0);survivors.add(98084.0);survivors.add(97993.0);survivors.add(97893.0);survivors.add(97785.0);survivors.add(97665.0);survivors.add(97533.0);survivors.add(97388.0);survivors.add(97229.0);survivors.add(97052.0);survivors.add(96857.0);survivors.add(96644.0);survivors.add(96414.0);survivors.add(96164.0);survivors.add(95896.0);survivors.add(95606.0);survivors.add(95294.0);survivors.add(94958.0);survivors.add(94599.0);survivors.add(94216.0);survivors.add(93810.0);survivors.add(93380.0);survivors.add(92921.0);survivors.add(92429.0);survivors.add(91897.0);survivors.add(91317.0);survivors.add(90684.0);survivors.add(89994.0);survivors.add(89247.0);survivors.add(88440.0);survivors.add(87571.0);survivors.add(86632.0);survivors.add(85612.0);survivors.add(84508.0);survivors.add(83319.0);survivors.add(82039.0);survivors.add(80666.0);survivors.add(79184.0);survivors.add(77579.0);survivors.add(75843.0);survivors.add(73974.0);survivors.add(71973.0);survivors.add(69831.0);survivors.add(67539.0);survivors.add(65080.0);survivors.add(62448.0);survivors.add(59647.0);survivors.add(56688.0);survivors.add(53563.0);survivors.add(50253.0);survivors.add(46782.0);survivors.add(43166.0);survivors.add(39414.0);survivors.add(35567.0);survivors.add(31677.0);survivors.add(27805.0);survivors.add(24017.0);survivors.add(20380.0);survivors.add(16962.0);survivors.add(13821.0);survivors.add(11006.0);survivors.add(8549.0);survivors.add(6467.0);survivors.add(4754.0);survivors.add(3392.0);survivors.add(2345.0);} else if (groupName.equals("white population")) {survivors.add(100000.0);survivors.add(99447.0);survivors.add(99404.0);survivors.add(99378.0);survivors.add(99359.0);survivors.add(99343.0);survivors.add(99329.0);survivors.add(99316.0);survivors.add(99305.0);survivors.add(99295.0);survivors.add(99286.0);survivors.add(99279.0);survivors.add(99271.0);survivors.add(99260.0);survivors.add(99242.0);survivors.add(99214.0);survivors.add(99178.0);survivors.add(99132.0);survivors.add(99078.0);survivors.add(99016.0);survivors.add(98947.0);survivors.add(98869.0);survivors.add(98784.0);survivors.add(98694.0);survivors.add(98602.0);survivors.add(98510.0);survivors.add(98420.0);survivors.add(98331.0);survivors.add(98242.0);survivors.add(98153.0);survivors.add(98061.0);survivors.add(97968.0);survivors.add(97871.0);survivors.add(97771.0);survivors.add(97667.0);survivors.add(97558.0);survivors.add(97444.0);survivors.add(97322.0);survivors.add(97193.0);survivors.add(97055.0);survivors.add(96904.0);survivors.add(96742.0);survivors.add(96565.0);survivors.add(96371.0);survivors.add(96157.0);survivors.add(95921.0);survivors.add(95663.0);survivors.add(95382.0);survivors.add(95078.0);survivors.add(94750.0);survivors.add(94394.0);survivors.add(94008.0);survivors.add(93592.0);survivors.add(93145.0);survivors.add(92667.0);survivors.add(92160.0);survivors.add(91620.0);survivors.add(91044.0);survivors.add(90427.0);survivors.add(89763.0);survivors.add(89047.0);survivors.add(88272.0);survivors.add(87437.0);survivors.add(86540.0);survivors.add(85578.0);survivors.add(84547.0);survivors.add(83438.0);survivors.add(82241.0);survivors.add(80952.0);survivors.add(79569.0);survivors.add(78090.0);survivors.add(76513.0);survivors.add(74822.0);survivors.add(73001.0);survivors.add(71044.0);survivors.add(68951.0);survivors.add(66726.0);survivors.add(64368.0);survivors.add(61868.0);survivors.add(59214.0);survivors.add(56398.0);survivors.add(53437.0);survivors.add(50352.0);survivors.add(47145.0);survivors.add(43811.0);survivors.add(40370.0);survivors.add(36845.0);survivors.add(33273.0);survivors.add(29670.0);survivors.add(26091.0);survivors.add(22594.0);survivors.add(19237.0);survivors.add(16079.0);survivors.add(13172.0);survivors.add(10557.0);survivors.add(8265.0);survivors.add(6309.0);survivors.add(4688.0);survivors.add(3385.0);survivors.add(2373.0);survivors.add(1612.0);} else if (groupName.equals("white males")) {survivors.add(100000.0);survivors.add(99396.0);survivors.add(99350.0);survivors.add(99320.0);survivors.add(99297.0);survivors.add(99280.0);survivors.add(99265.0);survivors.add(99251.0);survivors.add(99239.0);survivors.add(99228.0);survivors.add(99220.0);survivors.add(99213.0);survivors.add(99205.0);survivors.add(99193.0);survivors.add(99171.0);survivors.add(99136.0);survivors.add(99088.0);survivors.add(99026.0);survivors.add(98952.0);survivors.add(98866.0);survivors.add(98766.0);survivors.add(98653.0);survivors.add(98527.0);survivors.add(98393.0);survivors.add(98258.0);survivors.add(98125.0);survivors.add(97995.0);survivors.add(97869.0);survivors.add(97745.0);survivors.add(97621.0);survivors.add(97495.0);survivors.add(97367.0);survivors.add(97237.0);survivors.add(97104.0);survivors.add(96966.0);survivors.add(96825.0);survivors.add(96677.0);survivors.add(96522.0);survivors.add(96358.0);survivors.add(96184.0);survivors.add(95996.0);survivors.add(95795.0);survivors.add(95578.0);survivors.add(95340.0);survivors.add(95078.0);survivors.add(94789.0);survivors.add(94473.0);survivors.add(94129.0);survivors.add(93756.0);survivors.add(93351.0);survivors.add(92911.0);survivors.add(92432.0);survivors.add(91913.0);survivors.add(91356.0);survivors.add(90759.0);survivors.add(90125.0);survivors.add(89450.0);survivors.add(88732.0);survivors.add(87965.0);survivors.add(87145.0);survivors.add(86269.0);survivors.add(85331.0);survivors.add(84329.0);survivors.add(83260.0);survivors.add(82121.0);survivors.add(80906.0);survivors.add(79606.0);survivors.add(78211.0);survivors.add(76715.0);survivors.add(75119.0);survivors.add(73420.0);survivors.add(71619.0);survivors.add(69701.0);survivors.add(67649.0);survivors.add(65454.0);survivors.add(63120.0);survivors.add(60654.0);survivors.add(58064.0);survivors.add(55341.0);survivors.add(52477.0);survivors.add(49467.0);survivors.add(46335.0);survivors.add(43112.0);survivors.add(39813.0);survivors.add(36442.0);survivors.add(33026.0);survivors.add(29587.0);survivors.add(26159.0);survivors.add(22795.0);survivors.add(19550.0);survivors.add(16478.0);survivors.add(13627.0);survivors.add(11040.0);survivors.add(8748.0);survivors.add(6768.0);survivors.add(5105.0);survivors.add(3748.0);survivors.add(2674.0);survivors.add(1852.0);survivors.add(1243.0);survivors.add(808.0);} else if (groupName.equals("white females")) {survivors.add(100000.0);survivors.add(99500.0);survivors.add(99461.0);survivors.add(99439.0);survivors.add(99423.0);survivors.add(99409.0);survivors.add(99397.0);survivors.add(99385.0);survivors.add(99375.0);survivors.add(99365.0);survivors.add(99356.0);survivors.add(99348.0);survivors.add(99340.0);survivors.add(99329.0);survivors.add(99315.0);survivors.add(99297.0);survivors.add(99273.0);survivors.add(99244.0);survivors.add(99211.0);survivors.add(99175.0);survivors.add(99138.0);survivors.add(99098.0);survivors.add(99057.0);survivors.add(99013.0);survivors.add(98969.0);survivors.add(98922.0);survivors.add(98875.0);survivors.add(98826.0);survivors.add(98775.0);survivors.add(98723.0);survivors.add(98668.0);survivors.add(98611.0);survivors.add(98551.0);survivors.add(98487.0);survivors.add(98418.0);survivors.add(98345.0);survivors.add(98266.0);survivors.add(98181.0);survivors.add(98088.0);survivors.add(97987.0);survivors.add(97876.0);survivors.add(97754.0);survivors.add(97620.0);survivors.add(97472.0);survivors.add(97307.0);survivors.add(97126.0);survivors.add(96928.0);survivors.add(96712.0);survivors.add(96479.0);survivors.add(96229.0);survivors.add(95959.0);survivors.add(95669.0);survivors.add(95357.0);survivors.add(95023.0);survivors.add(94667.0);survivors.add(94288.0);survivors.add(93885.0);survivors.add(93454.0);survivors.add(92990.0);survivors.add(92484.0);survivors.add(91930.0);survivors.add(91321.0);survivors.add(90655.0);survivors.add(89930.0);survivors.add(89146.0);survivors.add(88299.0);survivors.add(87380.0);survivors.add(86379.0);survivors.add(85292.0);survivors.add(84117.0);survivors.add(82852.0);survivors.add(81492.0);survivors.add(80018.0);survivors.add(78417.0);survivors.add(76683.0);survivors.add(74814.0);survivors.add(72808.0);survivors.add(70658.0);survivors.add(68352.0);survivors.add(65875.0);survivors.add(63215.0);survivors.add(60378.0);survivors.add(57378.0);survivors.add(54207.0);survivors.add(50851.0);survivors.add(47327.0);survivors.add(43651.0);survivors.add(39857.0);survivors.add(35956.0);survivors.add(32004.0);survivors.add(28063.0);survivors.add(24203.0);survivors.add(20495.0);survivors.add(17011.0);survivors.add(13813.0);survivors.add(10951.0);survivors.add(8463.0);survivors.add(6361.0);survivors.add(4643.0);survivors.add(3285.0);survivors.add(2250.0);} else if (groupName.equals("black population")) {survivors.add(100000.0);survivors.add(98728.0);survivors.add(98663.0);survivors.add(98622.0);survivors.add(98589.0);survivors.add(98564.0);survivors.add(98541.0);survivors.add(98521.0);survivors.add(98502.0);survivors.add(98487.0);survivors.add(98474.0);survivors.add(98463.0);survivors.add(98451.0);survivors.add(98435.0);survivors.add(98408.0);survivors.add(98368.0);survivors.add(98314.0);survivors.add(98247.0);survivors.add(98169.0);survivors.add(98078.0);survivors.add(97977.0);survivors.add(97863.0);survivors.add(97737.0);survivors.add(97601.0);survivors.add(97461.0);survivors.add(97321.0);survivors.add(97182.0);survivors.add(97043.0);survivors.add(96903.0);survivors.add(96760.0);survivors.add(96611.0);survivors.add(96457.0);survivors.add(96295.0);survivors.add(96125.0);survivors.add(95950.0);survivors.add(95768.0);survivors.add(95580.0);survivors.add(95382.0);survivors.add(95173.0);survivors.add(94948.0);survivors.add(94704.0);survivors.add(94439.0);survivors.add(94151.0);survivors.add(93837.0);survivors.add(93495.0);survivors.add(93122.0);survivors.add(92718.0);survivors.add(92281.0);survivors.add(91807.0);survivors.add(91288.0);survivors.add(90718.0);survivors.add(90092.0);survivors.add(89409.0);survivors.add(88670.0);survivors.add(87877.0);survivors.add(87031.0);survivors.add(86129.0);survivors.add(85167.0);survivors.add(84149.0);survivors.add(83078.0);survivors.add(81954.0);survivors.add(80776.0);survivors.add(79537.0);survivors.add(78229.0);survivors.add(76847.0);survivors.add(75388.0);survivors.add(73849.0);survivors.add(72227.0);survivors.add(70531.0);survivors.add(68766.0);survivors.add(66938.0);survivors.add(65056.0);survivors.add(63119.0);survivors.add(61108.0);survivors.add(59006.0);survivors.add(56803.0);survivors.add(54490.0);survivors.add(52091.0);survivors.add(49598.0);survivors.add(47012.0);survivors.add(44371.0);survivors.add(41676.0);survivors.add(38945.0);survivors.add(36185.0);survivors.add(33368.0);survivors.add(30546.0);survivors.add(27733.0);survivors.add(24957.0);survivors.add(22243.0);survivors.add(19619.0);survivors.add(17113.0);survivors.add(14748.0);survivors.add(12548.0);survivors.add(10530.0);survivors.add(8707.0);survivors.add(7088.0);survivors.add(5676.0);survivors.add(4465.0);survivors.add(3448.0);survivors.add(2612.0);survivors.add(1938.0);} else if (groupName.equals("black males")) {survivors.add(100000.0);survivors.add(98608.0);survivors.add(98533.0);survivors.add(98487.0);survivors.add(98453.0);survivors.add(98422.0);survivors.add(98396.0);survivors.add(98371.0);survivors.add(98349.0);survivors.add(98330.0);survivors.add(98316.0);survivors.add(98307.0);survivors.add(98298.0);survivors.add(98282.0);survivors.add(98249.0);survivors.add(98194.0);survivors.add(98115.0);survivors.add(98016.0);survivors.add(97898.0);survivors.add(97762.0);survivors.add(97608.0);survivors.add(97436.0);survivors.add(97245.0);survivors.add(97039.0);survivors.add(96829.0);survivors.add(96621.0);survivors.add(96416.0);survivors.add(96215.0);survivors.add(96014.0);survivors.add(95811.0);survivors.add(95603.0);survivors.add(95387.0);survivors.add(95163.0);survivors.add(94930.0);survivors.add(94695.0);survivors.add(94455.0);survivors.add(94210.0);survivors.add(93957.0);survivors.add(93693.0);survivors.add(93414.0);survivors.add(93116.0);survivors.add(92795.0);survivors.add(92449.0);survivors.add(92076.0);survivors.add(91671.0);survivors.add(91232.0);survivors.add(90758.0);survivors.add(90247.0);survivors.add(89690.0);survivors.add(89074.0);survivors.add(88389.0);survivors.add(87630.0);survivors.add(86797.0);survivors.add(85887.0);survivors.add(84900.0);survivors.add(83838.0);survivors.add(82692.0);survivors.add(81462.0);survivors.add(80157.0);survivors.add(78790.0);survivors.add(77374.0);survivors.add(75908.0);survivors.add(74385.0);survivors.add(72795.0);survivors.add(71122.0);survivors.add(69359.0);survivors.add(67499.0);survivors.add(65547.0);survivors.add(63520.0);survivors.add(61436.0);survivors.add(59311.0);survivors.add(57163.0);survivors.add(54988.0);survivors.add(52759.0);survivors.add(50463.0);survivors.add(48077.0);survivors.add(45591.0);survivors.add(43032.0);survivors.add(40404.0);survivors.add(37720.0);survivors.add(35008.0);survivors.add(32288.0);survivors.add(29592.0);survivors.add(26915.0);survivors.add(24280.0);survivors.add(21709.0);survivors.add(19227.0);survivors.add(16856.0);survivors.add(14616.0);survivors.add(12526.0);survivors.add(10603.0);survivors.add(8856.0);survivors.add(7293.0);survivors.add(5917.0);survivors.add(4726.0);survivors.add(3712.0);survivors.add(2865.0);survivors.add(2171.0);survivors.add(1614.0);survivors.add(1176.0);survivors.add(839.0);} else if (groupName.equals("black females")) {survivors.add(100000.0);survivors.add(98851.0);survivors.add(98797.0);survivors.add(98762.0);survivors.add(98730.0);survivors.add(98710.0);survivors.add(98691.0);survivors.add(98675.0);survivors.add(98662.0);survivors.add(98649.0);survivors.add(98637.0);survivors.add(98624.0);survivors.add(98610.0);survivors.add(98593.0);survivors.add(98573.0);survivors.add(98549.0);survivors.add(98520.0);survivors.add(98486.0);survivors.add(98448.0);survivors.add(98406.0);survivors.add(98359.0);survivors.add(98306.0);survivors.add(98247.0);survivors.add(98184.0);survivors.add(98116.0);survivors.add(98045.0);survivors.add(97972.0);survivors.add(97896.0);survivors.add(97817.0);survivors.add(97733.0);survivors.add(97643.0);survivors.add(97548.0);survivors.add(97444.0);survivors.add(97332.0);survivors.add(97212.0);survivors.add(97085.0);survivors.add(96948.0);survivors.add(96802.0);survivors.add(96642.0);survivors.add(96467.0);survivors.add(96273.0);survivors.add(96059.0);survivors.add(95823.0);survivors.add(95564.0);survivors.add(95278.0);survivors.add(94965.0);survivors.add(94623.0);survivors.add(94254.0);survivors.add(93856.0);survivors.add(93423.0);survivors.add(92955.0);survivors.add(92448.0);survivors.add(91901.0);survivors.add(91316.0);survivors.add(90696.0);survivors.add(90043.0);survivors.add(89357.0);survivors.add(88633.0);survivors.add(87870.0);survivors.add(87060.0);survivors.add(86197.0);survivors.add(85275.0);survivors.add(84287.0);survivors.add(83229.0);survivors.add(82105.0);survivors.add(80914.0);survivors.add(79655.0);survivors.add(78323.0);survivors.add(76916.0);survivors.add(75432.0);survivors.add(73866.0);survivors.add(72223.0);survivors.add(70504.0);survivors.add(68689.0);survivors.add(66764.0);survivors.add(64721.0);survivors.add(62558.0);survivors.add(60290.0);survivors.add(57902.0);survivors.add(55385.0);survivors.add(52784.0);survivors.add(50085.0);survivors.add(47287.0);survivors.add(44405.0);survivors.add(41391.0);survivors.add(38294.0);survivors.add(35144.0);survivors.add(31977.0);survivors.add(28823.0);survivors.add(25717.0);survivors.add(22692.0);survivors.add(19784.0);survivors.add(17026.0);survivors.add(14450.0);survivors.add(12080.0);survivors.add(9938.0);survivors.add(8037.0);survivors.add(6382.0);survivors.add(4970.0);survivors.add(3792.0);survivors.add(2832.0);} else if (groupName.equals("Hispanic population")) {survivors.add(100000.0);survivors.add(99442.0);survivors.add(99402.0);survivors.add(99378.0);survivors.add(99361.0);survivors.add(99345.0);survivors.add(99332.0);survivors.add(99320.0);survivors.add(99309.0);survivors.add(99300.0);survivors.add(99292.0);survivors.add(99285.0);survivors.add(99277.0);survivors.add(99266.0);survivors.add(99249.0);survivors.add(99224.0);survivors.add(99190.0);survivors.add(99147.0);survivors.add(99096.0);survivors.add(99037.0);survivors.add(98971.0);survivors.add(98897.0);survivors.add(98815.0);survivors.add(98729.0);survivors.add(98643.0);survivors.add(98559.0);survivors.add(98477.0);survivors.add(98398.0);survivors.add(98321.0);survivors.add(98245.0);survivors.add(98169.0);survivors.add(98093.0);survivors.add(98018.0);survivors.add(97942.0);survivors.add(97862.0);survivors.add(97778.0);survivors.add(97688.0);survivors.add(97593.0);survivors.add(97490.0);survivors.add(97379.0);survivors.add(97257.0);survivors.add(97124.0);survivors.add(96979.0);survivors.add(96821.0);survivors.add(96650.0);survivors.add(96464.0);survivors.add(96262.0);survivors.add(96045.0);survivors.add(95809.0);survivors.add(95554.0);survivors.add(95276.0);survivors.add(94974.0);survivors.add(94646.0);survivors.add(94290.0);survivors.add(93904.0);survivors.add(93488.0);survivors.add(93039.0);survivors.add(92554.0);survivors.add(92032.0);survivors.add(91475.0);survivors.add(90883.0);survivors.add(90253.0);survivors.add(89581.0);survivors.add(88861.0);survivors.add(88084.0);survivors.add(87241.0);survivors.add(86322.0);survivors.add(85322.0);survivors.add(84236.0);survivors.add(83068.0);survivors.add(81817.0);survivors.add(80486.0);survivors.add(79071.0);survivors.add(77560.0);survivors.add(75938.0);survivors.add(74193.0);survivors.add(72323.0);survivors.add(70330.0);survivors.add(68203.0);survivors.add(65928.0);survivors.add(63488.0);survivors.add(60880.0);survivors.add(58108.0);survivors.add(55189.0);survivors.add(52107.0);survivors.add(48872.0);survivors.add(45494.0);survivors.add(41998.0);survivors.add(38387.0);survivors.add(34702.0);survivors.add(30991.0);survivors.add(27309.0);survivors.add(23712.0);survivors.add(20261.0);survivors.add(17012.0);survivors.add(14016.0);survivors.add(11315.0);survivors.add(8937.0);survivors.add(6897.0);survivors.add(5194.0);survivors.add(3812.0);} else if (groupName.equals("Hispanic males")) {survivors.add(100000.0);survivors.add(99394.0);survivors.add(99350.0);survivors.add(99321.0);survivors.add(99302.0);survivors.add(99285.0);survivors.add(99270.0);survivors.add(99258.0);survivors.add(99247.0);survivors.add(99237.0);survivors.add(99231.0);survivors.add(99225.0);survivors.add(99220.0);survivors.add(99210.0);survivors.add(99191.0);survivors.add(99158.0);survivors.add(99111.0);survivors.add(99050.0);survivors.add(98975.0);survivors.add(98887.0);survivors.add(98786.0);survivors.add(98672.0);survivors.add(98546.0);survivors.add(98413.0);survivors.add(98280.0);survivors.add(98154.0);survivors.add(98034.0);survivors.add(97920.0);survivors.add(97810.0);survivors.add(97702.0);survivors.add(97595.0);survivors.add(97488.0);survivors.add(97382.0);survivors.add(97277.0);survivors.add(97166.0);survivors.add(97052.0);survivors.add(96933.0);survivors.add(96807.0);survivors.add(96674.0);survivors.add(96530.0);survivors.add(96373.0);survivors.add(96202.0);survivors.add(96015.0);survivors.add(95812.0);survivors.add(95594.0);survivors.add(95360.0);survivors.add(95110.0);survivors.add(94841.0);survivors.add(94552.0);survivors.add(94239.0);survivors.add(93899.0);survivors.add(93528.0);survivors.add(93125.0);survivors.add(92686.0);survivors.add(92207.0);survivors.add(91686.0);survivors.add(91116.0);survivors.add(90496.0);survivors.add(89827.0);survivors.add(89115.0);survivors.add(88364.0);survivors.add(87574.0);survivors.add(86740.0);survivors.add(85853.0);survivors.add(84901.0);survivors.add(83870.0);survivors.add(82750.0);survivors.add(81537.0);survivors.add(80227.0);survivors.add(78824.0);survivors.add(77331.0);survivors.add(75753.0);survivors.add(74087.0);survivors.add(72328.0);survivors.add(70464.0);survivors.add(68486.0);survivors.add(66399.0);survivors.add(64200.0);survivors.add(61872.0);survivors.add(59392.0);survivors.add(56739.0);survivors.add(53913.0);survivors.add(50923.0);survivors.add(47814.0);survivors.add(44580.0);survivors.add(41239.0);survivors.add(37798.0);survivors.add(34285.0);survivors.add(30743.0);survivors.add(27219.0);survivors.add(23767.0);survivors.add(20441.0);survivors.add(17292.0);survivors.add(14370.0);survivors.add(11714.0);survivors.add(9354.0);survivors.add(7308.0);survivors.add(5578.0);survivors.add(4154.0);survivors.add(3016.0);survivors.add(2132.0);} else if (groupName.equals("Hispanic females")) {survivors.add(100000.0);survivors.add(99493.0);survivors.add(99457.0);survivors.add(99438.0);survivors.add(99422.0);survivors.add(99408.0);survivors.add(99396.0);survivors.add(99385.0);survivors.add(99375.0);survivors.add(99366.0);survivors.add(99356.0);survivors.add(99347.0);survivors.add(99337.0);survivors.add(99325.0);survivors.add(99311.0);survivors.add(99294.0);survivors.add(99273.0);survivors.add(99250.0);survivors.add(99224.0);survivors.add(99195.0);survivors.add(99166.0);survivors.add(99136.0);survivors.add(99104.0);survivors.add(99072.0);survivors.add(99038.0);survivors.add(99003.0);survivors.add(98968.0);survivors.add(98931.0);survivors.add(98895.0);survivors.add(98857.0);survivors.add(98820.0);survivors.add(98783.0);survivors.add(98745.0);survivors.add(98706.0);survivors.add(98662.0);survivors.add(98614.0);survivors.add(98560.0);survivors.add(98499.0);survivors.add(98433.0);survivors.add(98359.0);survivors.add(98279.0);survivors.add(98191.0);survivors.add(98094.0);survivors.add(97987.0);survivors.add(97868.0);survivors.add(97736.0);survivors.add(97590.0);survivors.add(97428.0);survivors.add(97251.0);survivors.add(97058.0);survivors.add(96847.0);survivors.add(96616.0);survivors.add(96365.0);survivors.add(96094.0);survivors.add(95803.0);survivors.add(95495.0);survivors.add(95166.0);survivors.add(94816.0);survivors.add(94441.0);survivors.add(94037.0);survivors.add(93600.0);survivors.add(93125.0);survivors.add(92609.0);survivors.add(92048.0);survivors.add(91436.0);survivors.add(90768.0);survivors.add(90035.0);survivors.add(89230.0);survivors.add(88349.0);survivors.add(87391.0);survivors.add(86356.0);survivors.add(85244.0);survivors.add(84047.0);survivors.add(82751.0);survivors.add(81336.0);survivors.add(79783.0);survivors.add(78090.0);survivors.add(76261.0);survivors.add(74291.0);survivors.add(72166.0);survivors.add(69870.0);survivors.add(67398.0);survivors.add(64745.0);survivors.add(61906.0);survivors.add(58857.0);survivors.add(55605.0);survivors.add(52152.0);survivors.add(48519.0);survivors.add(44701.0);survivors.add(40735.0);survivors.add(36672.0);survivors.add(32569.0);survivors.add(28494.0);survivors.add(24519.0);survivors.add(20719.0);survivors.add(17163.0);survivors.add(13915.0);survivors.add(11023.0);survivors.add(8517.0);survivors.add(6409.0);survivors.add(4689.0);} else if (groupName.equals("non-Hispanic white population")) {survivors.add(100000.0);survivors.add(99450.0);survivors.add(99407.0);survivors.add(99382.0);survivors.add(99362.0);survivors.add(99347.0);survivors.add(99333.0);survivors.add(99320.0);survivors.add(99308.0);survivors.add(99298.0);survivors.add(99290.0);survivors.add(99282.0);survivors.add(99275.0);survivors.add(99264.0);survivors.add(99245.0);survivors.add(99218.0);survivors.add(99182.0);survivors.add(99136.0);survivors.add(99083.0);survivors.add(99021.0);survivors.add(98952.0);survivors.add(98875.0);survivors.add(98791.0);survivors.add(98702.0);survivors.add(98610.0);survivors.add(98518.0);survivors.add(98427.0);survivors.add(98336.0);survivors.add(98244.0);survivors.add(98151.0);survivors.add(98056.0);survivors.add(97957.0);survivors.add(97854.0);survivors.add(97747.0);survivors.add(97636.0);survivors.add(97520.0);survivors.add(97399.0);survivors.add(97272.0);survivors.add(97136.0);survivors.add(96991.0);survivors.add(96835.0);survivors.add(96666.0);survivors.add(96483.0);survivors.add(96283.0);survivors.add(96062.0);survivors.add(95818.0);survivors.add(95552.0);survivors.add(95263.0);survivors.add(94951.0);survivors.add(94614.0);survivors.add(94250.0);survivors.add(93856.0);survivors.add(93432.0);survivors.add(92977.0);survivors.add(92493.0);survivors.add(91979.0);survivors.add(91435.0);survivors.add(90856.0);survivors.add(90236.0);survivors.add(89569.0);survivors.add(88849.0);survivors.add(88070.0);survivors.add(87230.0);survivors.add(86326.0);survivors.add(85357.0);survivors.add(84318.0);survivors.add(83200.0);survivors.add(81993.0);survivors.add(80693.0);survivors.add(79299.0);survivors.add(77810.0);survivors.add(76221.0);survivors.add(74519.0);survivors.add(72686.0);survivors.add(70717.0);survivors.add(68614.0);survivors.add(66380.0);survivors.add(64015.0);survivors.add(61509.0);survivors.add(58851.0);survivors.add(56033.0);survivors.add(53072.0);survivors.add(49990.0);survivors.add(46789.0);survivors.add(43464.0);survivors.add(40034.0);survivors.add(36523.0);survivors.add(32968.0);survivors.add(29387.0);survivors.add(25831.0);survivors.add(22359.0);survivors.add(19030.0);survivors.add(15901.0);survivors.add(13021.0);survivors.add(10433.0);survivors.add(8166.0);survivors.add(6232.0);survivors.add(4630.0);survivors.add(3344.0);survivors.add(2344.0);survivors.add(1592.0);} else if (groupName.equals("non-Hispanic white males")) {survivors.add(100000.0);survivors.add(99400.0);survivors.add(99355.0);survivors.add(99325.0);survivors.add(99301.0);survivors.add(99285.0);survivors.add(99269.0);survivors.add(99255.0);survivors.add(99243.0);survivors.add(99232.0);survivors.add(99224.0);survivors.add(99217.0);survivors.add(99209.0);survivors.add(99196.0);survivors.add(99174.0);survivors.add(99139.0);survivors.add(99091.0);survivors.add(99031.0);survivors.add(98959.0);survivors.add(98874.0);survivors.add(98776.0);survivors.add(98665.0);survivors.add(98542.0);survivors.add(98410.0);survivors.add(98276.0);survivors.add(98143.0);survivors.add(98012.0);survivors.add(97883.0);survivors.add(97756.0);survivors.add(97627.0);survivors.add(97497.0);survivors.add(97363.0);survivors.add(97225.0);survivors.add(97083.0);survivors.add(96937.0);survivors.add(96787.0);survivors.add(96631.0);survivors.add(96468.0);survivors.add(96297.0);survivors.add(96116.0);survivors.add(95922.0);survivors.add(95715.0);survivors.add(95491.0);survivors.add(95247.0);survivors.add(94978.0);survivors.add(94681.0);survivors.add(94356.0);survivors.add(94004.0);survivors.add(93622.0);survivors.add(93208.0);survivors.add(92758.0);survivors.add(92269.0);survivors.add(91741.0);survivors.add(91175.0);survivors.add(90572.0);survivors.add(89932.0);survivors.add(89254.0);survivors.add(88533.0);survivors.add(87766.0);survivors.add(86946.0);survivors.add(86069.0);survivors.add(85131.0);survivors.add(84127.0);survivors.add(83056.0);survivors.add(81914.0);survivors.add(80695.0);survivors.add(79388.0);survivors.add(77985.0);survivors.add(76479.0);survivors.add(74873.0);survivors.add(73164.0);survivors.add(71353.0);survivors.add(69425.0);survivors.add(67361.0);survivors.add(65155.0);survivors.add(62811.0);survivors.add(60336.0);survivors.add(57739.0);survivors.add(55011.0);survivors.add(52143.0);survivors.add(49131.0);survivors.add(46000.0);survivors.add(42780.0);survivors.add(39488.0);survivors.add(36125.0);survivors.add(32720.0);survivors.add(29293.0);survivors.add(25883.0);survivors.add(22540.0);survivors.add(19319.0);survivors.add(16273.0);survivors.add(13450.0);survivors.add(10890.0);survivors.add(8625.0);survivors.add(6670.0);survivors.add(5029.0);survivors.add(3691.0);survivors.add(2633.0);survivors.add(1824.0);survivors.add(1224.0);survivors.add(796.0);} else if (groupName.equals("non-Hispanic white females")) {survivors.add(100000.0);survivors.add(99502.0);survivors.add(99463.0);survivors.add(99441.0);survivors.add(99425.0);survivors.add(99411.0);survivors.add(99399.0);survivors.add(99388.0);survivors.add(99377.0);survivors.add(99368.0);survivors.add(99359.0);survivors.add(99352.0);survivors.add(99344.0);survivors.add(99334.0);survivors.add(99321.0);survivors.add(99302.0);survivors.add(99277.0);survivors.add(99247.0);survivors.add(99214.0);survivors.add(99177.0);survivors.add(99138.0);survivors.add(99098.0);survivors.add(99055.0);survivors.add(99010.0);survivors.add(98963.0);survivors.add(98915.0);survivors.add(98865.0);survivors.add(98813.0);survivors.add(98759.0);survivors.add(98702.0);survivors.add(98643.0);survivors.add(98581.0);survivors.add(98514.0);survivors.add(98442.0);survivors.add(98366.0);survivors.add(98286.0);survivors.add(98200.0);survivors.add(98109.0);survivors.add(98010.0);survivors.add(97903.0);survivors.add(97785.0);survivors.add(97656.0);survivors.add(97514.0);survivors.add(97358.0);survivors.add(97186.0);survivors.add(96996.0);survivors.add(96789.0);survivors.add(96565.0);survivors.add(96324.0);survivors.add(96066.0);survivors.add(95789.0);survivors.add(95491.0);survivors.add(95172.0);survivors.add(94830.0);survivors.add(94468.0);survivors.add(94083.0);survivors.add(93674.0);survivors.add(93239.0);survivors.add(92770.0);survivors.add(92259.0);survivors.add(91697.0);survivors.add(91081.0);survivors.add(90406.0);survivors.add(89672.0);survivors.add(88878.0);survivors.add(88021.0);survivors.add(87092.0);survivors.add(86081.0);survivors.add(84983.0);survivors.add(83799.0);survivors.add(82524.0);survivors.add(81153.0);survivors.add(79668.0);survivors.add(78057.0);survivors.add(76313.0);survivors.add(74434.0);survivors.add(72420.0);survivors.add(70264.0);survivors.add(67954.0);survivors.add(65473.0);survivors.add(62810.0);survivors.add(59974.0);survivors.add(56978.0);survivors.add(53813.0);survivors.add(50466.0);survivors.add(46953.0);survivors.add(43293.0);survivors.add(39517.0);survivors.add(35639.0);survivors.add(31712.0);survivors.add(27798.0);survivors.add(23967.0);survivors.add(20290.0);survivors.add(16836.0);survivors.add(13667.0);survivors.add(10834.0);survivors.add(8371.0);survivors.add(6292.0);survivors.add(4592.0);survivors.add(3249.0);survivors.add(2226.0);} else if (groupName.equals("non-Hispanic black population")) {survivors.add(100000.0);survivors.add(98734.0);survivors.add(98663.0);survivors.add(98619.0);survivors.add(98584.0);survivors.add(98556.0);survivors.add(98532.0);survivors.add(98511.0);survivors.add(98492.0);survivors.add(98475.0);survivors.add(98461.0);survivors.add(98449.0);survivors.add(98437.0);survivors.add(98419.0);survivors.add(98391.0);survivors.add(98348.0);survivors.add(98292.0);survivors.add(98223.0);survivors.add(98142.0);survivors.add(98049.0);survivors.add(97945.0);survivors.add(97828.0);survivors.add(97697.0);survivors.add(97558.0);survivors.add(97413.0);survivors.add(97268.0);survivors.add(97123.0);survivors.add(96979.0);survivors.add(96833.0);survivors.add(96683.0);survivors.add(96528.0);survivors.add(96367.0);survivors.add(96198.0);survivors.add(96020.0);survivors.add(95836.0);survivors.add(95646.0);survivors.add(95448.0);survivors.add(95241.0);survivors.add(95022.0);survivors.add(94786.0);survivors.add(94531.0);survivors.add(94255.0);survivors.add(93954.0);survivors.add(93628.0);survivors.add(93273.0);survivors.add(92887.0);survivors.add(92471.0);survivors.add(92022.0);survivors.add(91536.0);survivors.add(91005.0);survivors.add(90421.0);survivors.add(89781.0);survivors.add(89084.0);survivors.add(88330.0);survivors.add(87518.0);survivors.add(86650.0);survivors.add(85721.0);survivors.add(84729.0);survivors.add(83678.0);survivors.add(82571.0);survivors.add(81411.0);survivors.add(80196.0);survivors.add(78918.0);survivors.add(77572.0);survivors.add(76154.0);survivors.add(74662.0);survivors.add(73095.0);survivors.add(71451.0);survivors.add(69737.0);survivors.add(67957.0);survivors.add(66116.0);survivors.add(64222.0);survivors.add(62276.0);survivors.add(60256.0);survivors.add(58150.0);survivors.add(55945.0);survivors.add(53635.0);survivors.add(51242.0);survivors.add(48759.0);survivors.add(46188.0);survivors.add(43566.0);survivors.add(40894.0);survivors.add(38192.0);survivors.add(35463.0);survivors.add(32683.0);survivors.add(29900.0);survivors.add(27130.0);survivors.add(24399.0);survivors.add(21733.0);survivors.add(19159.0);survivors.add(16702.0);survivors.add(14387.0);survivors.add(12235.0);survivors.add(10263.0);survivors.add(8484.0);survivors.add(6905.0);survivors.add(5527.0);survivors.add(4348.0);survivors.add(3358.0);survivors.add(2544.0);survivors.add(1888.0);} else if (groupName.equals("non-Hispanic black males")) {survivors.add(100000.0);survivors.add(98606.0);survivors.add(98526.0);survivors.add(98477.0);survivors.add(98441.0);survivors.add(98409.0);survivors.add(98382.0);survivors.add(98356.0);survivors.add(98333.0);survivors.add(98313.0);survivors.add(98299.0);survivors.add(98289.0);survivors.add(98280.0);survivors.add(98263.0);survivors.add(98229.0);survivors.add(98171.0);survivors.add(98090.0);survivors.add(97987.0);survivors.add(97864.0);survivors.add(97723.0);survivors.add(97565.0);survivors.add(97387.0);survivors.add(97190.0);survivors.add(96978.0);survivors.add(96762.0);survivors.add(96546.0);survivors.add(96334.0);survivors.add(96124.0);survivors.add(95915.0);survivors.add(95703.0);survivors.add(95486.0);survivors.add(95260.0);survivors.add(95027.0);survivors.add(94784.0);survivors.add(94537.0);survivors.add(94286.0);survivors.add(94029.0);survivors.add(93763.0);survivors.add(93485.0);survivors.add(93193.0);survivors.add(92881.0);survivors.add(92546.0);survivors.add(92186.0);survivors.add(91798.0);survivors.add(91377.0);survivors.add(90920.0);survivors.add(90428.0);survivors.add(89898.0);survivors.add(89319.0);survivors.add(88681.0);survivors.add(87973.0);survivors.add(87189.0);survivors.add(86328.0);survivors.add(85389.0);survivors.add(84371.0);survivors.add(83273.0);survivors.add(82090.0);survivors.add(80819.0);survivors.add(79470.0);survivors.add(78059.0);survivors.add(76596.0);survivors.add(75082.0);survivors.add(73510.0);survivors.add(71872.0);survivors.add(70157.0);survivors.add(68361.0);survivors.add(66480.0);survivors.add(64519.0);survivors.add(62491.0);survivors.add(60413.0);survivors.add(58296.0);survivors.add(56157.0);survivors.add(53994.0);survivors.add(51777.0);survivors.add(49495.0);survivors.add(47123.0);survivors.add(44651.0);survivors.add(42108.0);survivors.add(39499.0);survivors.add(36840.0);survivors.add(34158.0);survivors.add(31475.0);survivors.add(28822.0);survivors.add(26193.0);survivors.add(23608.0);survivors.add(21090.0);survivors.add(18663.0);survivors.add(16348.0);survivors.add(14164.0);survivors.add(12130.0);survivors.add(10260.0);survivors.add(8564.0);survivors.add(7049.0);survivors.add(5716.0);survivors.add(4563.0);survivors.add(3583.0);survivors.add(2765.0);survivors.add(2095.0);survivors.add(1558.0);survivors.add(1135.0);survivors.add(811.0);} else if (groupName.equals("non-Hispanic black females")) {survivors.add(100000.0);survivors.add(98866.0);survivors.add(98808.0);survivors.add(98771.0);survivors.add(98737.0);survivors.add(98715.0);survivors.add(98696.0);survivors.add(98679.0);survivors.add(98665.0);survivors.add(98652.0);survivors.add(98639.0);survivors.add(98626.0);survivors.add(98611.0);survivors.add(98594.0);survivors.add(98573.0);survivors.add(98547.0);survivors.add(98518.0);survivors.add(98483.0);survivors.add(98445.0);survivors.add(98402.0);survivors.add(98353.0);survivors.add(98299.0);survivors.add(98239.0);survivors.add(98173.0);survivors.add(98103.0);survivors.add(98030.0);survivors.add(97954.0);survivors.add(97874.0);survivors.add(97790.0);survivors.add(97702.0);survivors.add(97609.0);survivors.add(97508.0);survivors.add(97399.0);survivors.add(97281.0);survivors.add(97155.0);survivors.add(97021.0);survivors.add(96878.0);survivors.add(96725.0);survivors.add(96559.0);survivors.add(96376.0);survivors.add(96174.0);survivors.add(95950.0);survivors.add(95704.0);survivors.add(95433.0);survivors.add(95138.0);survivors.add(94816.0);survivors.add(94468.0);survivors.add(94093.0);survivors.add(93690.0);survivors.add(93253.0);survivors.add(92780.0);survivors.add(92269.0);survivors.add(91717.0);survivors.add(91127.0);survivors.add(90498.0);survivors.add(89834.0);survivors.add(89131.0);survivors.add(88386.0);survivors.add(87598.0);survivors.add(86761.0);survivors.add(85872.0);survivors.add(84922.0);survivors.add(83906.0);survivors.add(82820.0);survivors.add(81665.0);survivors.add(80444.0);survivors.add(79155.0);survivors.add(77792.0);survivors.add(76356.0);survivors.add(74844.0);survivors.add(73250.0);survivors.add(71579.0);survivors.add(69833.0);survivors.add(67995.0);survivors.add(66050.0);survivors.add(63994.0);survivors.add(61823.0);survivors.add(59553.0);survivors.add(57169.0);survivors.add(54660.0);survivors.add(52070.0);survivors.add(49386.0);survivors.add(46605.0);survivors.add(43745.0);survivors.add(40755.0);survivors.add(37687.0);survivors.add(34570.0);survivors.add(31438.0);survivors.add(28323.0);survivors.add(25258.0);survivors.add(22276.0);survivors.add(19413.0);survivors.add(16700.0);survivors.add(14168.0);survivors.add(11841.0);survivors.add(9739.0);survivors.add(7875.0);survivors.add(6252.0);survivors.add(4869.0);survivors.add(3716.0);survivors.add(2775.0);}return survivors;}static Vector<Double> mortality(String groupName) {Vector<Double> reverseOrderedPGraphPointsY = new Vector<Double>();Vector<Double> lifeTable = new Vector<Double>();if (groupName.equals("white males")) {lifeTable.add(0.006040);lifeTable.add(0.000464);lifeTable.add(0.000299);lifeTable.add(0.000234);lifeTable.add(0.000167);lifeTable.add(0.000157);lifeTable.add(0.000140);lifeTable.add(0.000125);lifeTable.add(0.000106);lifeTable.add(0.000084);lifeTable.add(0.000068);lifeTable.add(0.000076);lifeTable.add(0.000124);lifeTable.add(0.000222);lifeTable.add(0.000353);lifeTable.add(0.000489);lifeTable.add(0.000617);lifeTable.add(0.000747);lifeTable.add(0.000877);lifeTable.add(0.001007);lifeTable.add(0.001145);lifeTable.add(0.001274);lifeTable.add(0.001358);lifeTable.add(0.001380);lifeTable.add(0.001356);lifeTable.add(0.001317);lifeTable.add(0.001288);lifeTable.add(0.001269);lifeTable.add(0.001269);lifeTable.add(0.001286);lifeTable.add(0.001311);lifeTable.add(0.001338);lifeTable.add(0.001371);lifeTable.add(0.001415);lifeTable.add(0.001464);lifeTable.add(0.001526);lifeTable.add(0.001604);lifeTable.add(0.001697);lifeTable.add(0.001809);lifeTable.add(0.001945);lifeTable.add(0.002096);lifeTable.add(0.002271);lifeTable.add(0.002488);lifeTable.add(0.002749);lifeTable.add(0.003039);lifeTable.add(0.003335);lifeTable.add(0.003636);lifeTable.add(0.003961);lifeTable.add(0.004322);lifeTable.add(0.004720);lifeTable.add(0.005155);lifeTable.add(0.005608);lifeTable.add(0.006068);lifeTable.add(0.006524);lifeTable.add(0.006990);lifeTable.add(0.007486);lifeTable.add(0.008035);lifeTable.add(0.008642);lifeTable.add(0.009318);lifeTable.add(0.010059);lifeTable.add(0.010870);lifeTable.add(0.011744);lifeTable.add(0.012677);lifeTable.add(0.013681);lifeTable.add(0.014789);lifeTable.add(0.016069);lifeTable.add(0.017526);lifeTable.add(0.019123);lifeTable.add(0.020811);lifeTable.add(0.022610);lifeTable.add(0.024538);lifeTable.add(0.026769);lifeTable.add(0.029448);lifeTable.add(0.032446);lifeTable.add(0.035662);lifeTable.add(0.039058);lifeTable.add(0.042701);lifeTable.add(0.046896);lifeTable.add(0.051757);lifeTable.add(0.057367);lifeTable.add(0.063309);lifeTable.add(0.069561);lifeTable.add(0.076512);lifeTable.add(0.084685);lifeTable.add(0.093731);lifeTable.add(0.104141);lifeTable.add(0.115853);lifeTable.add(0.128581);lifeTable.add(0.142346);lifeTable.add(0.157154);lifeTable.add(0.172995);lifeTable.add(0.189837);lifeTable.add(0.207629);lifeTable.add(0.245746);lifeTable.add(0.265856);lifeTable.add(0.286493);lifeTable.add(0.307502);lifeTable.add(0.328719);lifeTable.add(0.349975);lifeTable.add(1.000000);} else if (groupName.equals("white females")) {lifeTable.add(0.005005);lifeTable.add(0.000392);lifeTable.add(0.000217);lifeTable.add(0.000158);lifeTable.add(0.000143);lifeTable.add(0.000125);lifeTable.add(0.000114);lifeTable.add(0.000105);lifeTable.add(0.000097);lifeTable.add(0.000088);lifeTable.add(0.000082);lifeTable.add(0.000085);lifeTable.add(0.000104);lifeTable.add(0.000141);lifeTable.add(0.000189);lifeTable.add(0.000242);lifeTable.add(0.000291);lifeTable.add(0.000331);lifeTable.add(0.000359);lifeTable.add(0.000378);lifeTable.add(0.000398);lifeTable.add(0.000419);lifeTable.add(0.000438);lifeTable.add(0.000454);lifeTable.add(0.000467);lifeTable.add(0.000481);lifeTable.add(0.000497);lifeTable.add(0.000512);lifeTable.add(0.000529);lifeTable.add(0.000550);lifeTable.add(0.000577);lifeTable.add(0.000611);lifeTable.add(0.000651);lifeTable.add(0.000697);lifeTable.add(0.000747);lifeTable.add(0.000803);lifeTable.add(0.000867);lifeTable.add(0.000942);lifeTable.add(0.001031);lifeTable.add(0.001135);lifeTable.add(0.001248);lifeTable.add(0.001372);lifeTable.add(0.001518);lifeTable.add(0.001684);lifeTable.add(0.001863);lifeTable.add(0.002044);lifeTable.add(0.002224);lifeTable.add(0.002407);lifeTable.add(0.002597);lifeTable.add(0.002800);lifeTable.add(0.003024);lifeTable.add(0.003263);lifeTable.add(0.003506);lifeTable.add(0.003749);lifeTable.add(0.004003);lifeTable.add(0.004272);lifeTable.add(0.004584);lifeTable.add(0.004967);lifeTable.add(0.005442);lifeTable.add(0.005997);lifeTable.add(0.006623);lifeTable.add(0.007294);lifeTable.add(0.007995);lifeTable.add(0.008724);lifeTable.add(0.009501);lifeTable.add(0.010408);lifeTable.add(0.011453);lifeTable.add(0.012585);lifeTable.add(0.013768);lifeTable.add(0.015039);lifeTable.add(0.016423);lifeTable.add(0.018087);lifeTable.add(0.019998);lifeTable.add(0.022115);lifeTable.add(0.024382);lifeTable.add(0.026808);lifeTable.add(0.029536);lifeTable.add(0.032623);lifeTable.add(0.036241);lifeTable.add(0.040391);lifeTable.add(0.044871);lifeTable.add(0.049684);lifeTable.add(0.055265);lifeTable.add(0.061913);lifeTable.add(0.069306);lifeTable.add(0.077663);lifeTable.add(0.086926);lifeTable.add(0.097865);lifeTable.add(0.109920);lifeTable.add(0.123139);lifeTable.add(0.137554);lifeTable.add(0.153182);lifeTable.add(0.170014);lifeTable.add(0.207135);lifeTable.add(0.227271);lifeTable.add(0.248308);lifeTable.add(0.270095);lifeTable.add(0.292457);lifeTable.add(0.315199);lifeTable.add(1.000000);} else if (groupName.equals("black males")) {lifeTable.add(0.013918);lifeTable.add(0.000764);lifeTable.add(0.000463);lifeTable.add(0.000347);lifeTable.add(0.000311);lifeTable.add(0.000270);lifeTable.add(0.000252);lifeTable.add(0.000230);lifeTable.add(0.000191);lifeTable.add(0.000140);lifeTable.add(0.000095);lifeTable.add(0.000090);lifeTable.add(0.000165);lifeTable.add(0.000334);lifeTable.add(0.000562);lifeTable.add(0.000798);lifeTable.add(0.001010);lifeTable.add(0.001207);lifeTable.add(0.001391);lifeTable.add(0.001568);lifeTable.add(0.001767);lifeTable.add(0.001965);lifeTable.add(0.002109);lifeTable.add(0.002165);lifeTable.add(0.002153);lifeTable.add(0.002115);lifeTable.add(0.002090);lifeTable.add(0.002083);lifeTable.add(0.002114);lifeTable.add(0.002178);lifeTable.add(0.002260);lifeTable.add(0.002342);lifeTable.add(0.002448);lifeTable.add(0.002482);lifeTable.add(0.002534);lifeTable.add(0.002595);lifeTable.add(0.002685);lifeTable.add(0.002808);lifeTable.add(0.002978);lifeTable.add(0.003195);lifeTable.add(0.003444);lifeTable.add(0.003723);lifeTable.add(0.004041);lifeTable.add(0.004398);lifeTable.add(0.004791);lifeTable.add(0.005192);lifeTable.add(0.005631);lifeTable.add(0.006174);lifeTable.add(0.006865);lifeTable.add(0.007687);lifeTable.add(0.008585);lifeTable.add(0.009511);lifeTable.add(0.010484);lifeTable.add(0.011486);lifeTable.add(0.012520);lifeTable.add(0.013662);lifeTable.add(0.014876);lifeTable.add(0.016025);lifeTable.add(0.017043);lifeTable.add(0.017981);lifeTable.add(0.018943);lifeTable.add(0.020060);lifeTable.add(0.021384);lifeTable.add(0.022975);lifeTable.add(0.024792);lifeTable.add(0.026815);lifeTable.add(0.028913);lifeTable.add(0.030936);lifeTable.add(0.032808);lifeTable.add(0.034586);lifeTable.add(0.036216);lifeTable.add(0.038044);lifeTable.add(0.040536);lifeTable.add(0.043518);lifeTable.add(0.047282);lifeTable.add(0.051712);lifeTable.add(0.056127);lifeTable.add(0.061077);lifeTable.add(0.066419);lifeTable.add(0.071903);lifeTable.add(0.077689);lifeTable.add(0.083498);lifeTable.add(0.090466);lifeTable.add(0.097918);lifeTable.add(0.105872);lifeTable.add(0.114341);lifeTable.add(0.123339);lifeTable.add(0.132875);lifeTable.add(0.142954);lifeTable.add(0.153577);lifeTable.add(0.164742);lifeTable.add(0.176439);lifeTable.add(0.188655);lifeTable.add(0.201369);lifeTable.add(0.214555);lifeTable.add(0.228181);lifeTable.add(0.242209);lifeTable.add(0.256594);lifeTable.add(0.271288);lifeTable.add(0.286237);lifeTable.add(1.000000);} else if (groupName.equals("black females")) {lifeTable.add(0.011492);lifeTable.add(0.000548);lifeTable.add(0.000350);lifeTable.add(0.000322);lifeTable.add(0.000207);lifeTable.add(0.000190);lifeTable.add(0.000159);lifeTable.add(0.000138);lifeTable.add(0.000127);lifeTable.add(0.000123);lifeTable.add(0.000129);lifeTable.add(0.000144);lifeTable.add(0.000170);lifeTable.add(0.000206);lifeTable.add(0.000249);lifeTable.add(0.000294);lifeTable.add(0.000339);lifeTable.add(0.000384);lifeTable.add(0.000430);lifeTable.add(0.000480);lifeTable.add(0.000537);lifeTable.add(0.000597);lifeTable.add(0.000650);lifeTable.add(0.000690);lifeTable.add(0.000718);lifeTable.add(0.000745);lifeTable.add(0.000777);lifeTable.add(0.000814);lifeTable.add(0.000858);lifeTable.add(0.000913);lifeTable.add(0.000981);lifeTable.add(0.001060);lifeTable.add(0.001149);lifeTable.add(0.001230);lifeTable.add(0.001315);lifeTable.add(0.001406);lifeTable.add(0.001513);lifeTable.add(0.001645);lifeTable.add(0.001812);lifeTable.add(0.002011);lifeTable.add(0.002225);lifeTable.add(0.002453);lifeTable.add(0.002708);lifeTable.add(0.002991);lifeTable.add(0.003290);lifeTable.add(0.003592);lifeTable.add(0.003900);lifeTable.add(0.004232);lifeTable.add(0.004604);lifeTable.add(0.005013);lifeTable.add(0.005459);lifeTable.add(0.005917);lifeTable.add(0.006367);lifeTable.add(0.006789);lifeTable.add(0.007196);lifeTable.add(0.007622);lifeTable.add(0.008094);lifeTable.add(0.008618);lifeTable.add(0.009217);lifeTable.add(0.009907);lifeTable.add(0.010701);lifeTable.add(0.011589);lifeTable.add(0.012543);lifeTable.add(0.013515);lifeTable.add(0.014498);lifeTable.add(0.015556);lifeTable.add(0.016729);lifeTable.add(0.017968);lifeTable.add(0.019294);lifeTable.add(0.020749);lifeTable.add(0.022247);lifeTable.add(0.023808);lifeTable.add(0.025736);lifeTable.add(0.028023);lifeTable.add(0.030602);lifeTable.add(0.033418);lifeTable.add(0.036264);lifeTable.add(0.039609);lifeTable.add(0.043469);lifeTable.add(0.046965);lifeTable.add(0.051123);lifeTable.add(0.055872);lifeTable.add(0.060939);lifeTable.add(0.067889);lifeTable.add(0.074821);lifeTable.add(0.082239);lifeTable.add(0.090119);lifeTable.add(0.098628);lifeTable.add(0.107789);lifeTable.add(0.117626);lifeTable.add(0.128154);lifeTable.add(0.139385);lifeTable.add(0.151323);lifeTable.add(0.163967);lifeTable.add(0.177303);lifeTable.add(0.191312);lifeTable.add(0.205961);lifeTable.add(0.221210);lifeTable.add(0.237007);lifeTable.add(0.253291);lifeTable.add(1.000000);} else if (groupName.equals("Hispanic males")) {lifeTable.add(0.006064);lifeTable.add(0.000442);lifeTable.add(0.000285);lifeTable.add(0.000193);lifeTable.add(0.000172);lifeTable.add(0.000147);lifeTable.add(0.000129);lifeTable.add(0.000112);lifeTable.add(0.000092);lifeTable.add(0.000069);lifeTable.add(0.000052);lifeTable.add(0.000056);lifeTable.add(0.000100);lifeTable.add(0.000195);lifeTable.add(0.000329);lifeTable.add(0.000475);lifeTable.add(0.000616);lifeTable.add(0.000755);lifeTable.add(0.000890);lifeTable.add(0.001018);lifeTable.add(0.001155);lifeTable.add(0.001282);lifeTable.add(0.001352);lifeTable.add(0.001345);lifeTable.add(0.001288);lifeTable.add(0.001218);lifeTable.add(0.001163);lifeTable.add(0.001122);lifeTable.add(0.001101);lifeTable.add(0.001097);lifeTable.add(0.001095);lifeTable.add(0.001093);lifeTable.add(0.001081);lifeTable.add(0.001133);lifeTable.add(0.001177);lifeTable.add(0.001229);lifeTable.add(0.001293);lifeTable.add(0.001378);lifeTable.add(0.001490);lifeTable.add(0.001624);lifeTable.add(0.001778);lifeTable.add(0.001943);lifeTable.add(0.002112);lifeTable.add(0.002278);lifeTable.add(0.002445);lifeTable.add(0.002623);lifeTable.add(0.002823);lifeTable.add(0.003049);lifeTable.add(0.003311);lifeTable.add(0.003613);lifeTable.add(0.003946);lifeTable.add(0.004309);lifeTable.add(0.004715);lifeTable.add(0.005166);lifeTable.add(0.005657);lifeTable.add(0.006211);lifeTable.add(0.006807);lifeTable.add(0.007390);lifeTable.add(0.007925);lifeTable.add(0.008428);lifeTable.add(0.008940);lifeTable.add(0.009524);lifeTable.add(0.010223);lifeTable.add(0.011095);lifeTable.add(0.012147);lifeTable.add(0.013348);lifeTable.add(0.014660);lifeTable.add(0.016063);lifeTable.add(0.017492);lifeTable.add(0.018934);lifeTable.add(0.020407);lifeTable.add(0.021992);lifeTable.add(0.023751);lifeTable.add(0.025774);lifeTable.add(0.028067);lifeTable.add(0.030466);lifeTable.add(0.033122);lifeTable.add(0.036268);lifeTable.add(0.040082);lifeTable.add(0.044661);lifeTable.add(0.049813);lifeTable.add(0.055465);lifeTable.add(0.061044);lifeTable.add(0.067633);lifeTable.add(0.074957);lifeTable.add(0.083424);lifeTable.add(0.092938);lifeTable.add(0.103324);lifeTable.add(0.114611);lifeTable.add(0.126821);lifeTable.add(0.139962);lifeTable.add(0.154028);lifeTable.add(0.168995);lifeTable.add(0.184821);lifeTable.add(0.201448);lifeTable.add(0.218792);lifeTable.add(0.236757);lifeTable.add(0.255223);lifeTable.add(0.274060);lifeTable.add(0.293124);lifeTable.add(1.000000);} else if (groupName.equals("Hispanic females")) {lifeTable.add(0.005066);lifeTable.add(0.000370);lifeTable.add(0.000189);lifeTable.add(0.000162);lifeTable.add(0.000138);lifeTable.add(0.000120);lifeTable.add(0.000108);lifeTable.add(0.000100);lifeTable.add(0.000095);lifeTable.add(0.000094);lifeTable.add(0.000096);lifeTable.add(0.000103);lifeTable.add(0.000119);lifeTable.add(0.000142);lifeTable.add(0.000172);lifeTable.add(0.000205);lifeTable.add(0.000238);lifeTable.add(0.000264);lifeTable.add(0.000283);lifeTable.add(0.000295);lifeTable.add(0.000306);lifeTable.add(0.000319);lifeTable.add(0.000330);lifeTable.add(0.000340);lifeTable.add(0.000349);lifeTable.add(0.000358);lifeTable.add(0.000367);lifeTable.add(0.000373);lifeTable.add(0.000375);lifeTable.add(0.000376);lifeTable.add(0.000377);lifeTable.add(0.000384);lifeTable.add(0.000399);lifeTable.add(0.000440);lifeTable.add(0.000490);lifeTable.add(0.000549);lifeTable.add(0.000612);lifeTable.add(0.000677);lifeTable.add(0.000745);lifeTable.add(0.000817);lifeTable.add(0.000896);lifeTable.add(0.000985);lifeTable.add(0.001090);lifeTable.add(0.001213);lifeTable.add(0.001352);lifeTable.add(0.001500);lifeTable.add(0.001655);lifeTable.add(0.001817);lifeTable.add(0.001989);lifeTable.add(0.002173);lifeTable.add(0.002378);lifeTable.add(0.002597);lifeTable.add(0.002816);lifeTable.add(0.003024);lifeTable.add(0.003225);lifeTable.add(0.003437);lifeTable.add(0.003678);lifeTable.add(0.003955);lifeTable.add(0.004278);lifeTable.add(0.004652);lifeTable.add(0.005072);lifeTable.add(0.005537);lifeTable.add(0.006059);lifeTable.add(0.006646);lifeTable.add(0.007308);lifeTable.add(0.008073);lifeTable.add(0.008940);lifeTable.add(0.009875);lifeTable.add(0.010843);lifeTable.add(0.011846);lifeTable.add(0.012883);lifeTable.add(0.014039);lifeTable.add(0.015416);lifeTable.add(0.017104);lifeTable.add(0.019087);lifeTable.add(0.021225);lifeTable.add(0.023419);lifeTable.add(0.025836);lifeTable.add(0.028605);lifeTable.add(0.031814);lifeTable.add(0.035384);lifeTable.add(0.039356);lifeTable.add(0.043855);lifeTable.add(0.049241);lifeTable.add(0.055260);lifeTable.add(0.062089);lifeTable.add(0.069671);lifeTable.add(0.078700);lifeTable.add(0.088709);lifeTable.add(0.099753);lifeTable.add(0.111879);lifeTable.add(0.125121);lifeTable.add(0.139495);lifeTable.add(0.154998);lifeTable.add(0.171601);lifeTable.add(0.189252);lifeTable.add(0.207868);lifeTable.add(0.227339);lifeTable.add(0.247527);lifeTable.add(0.268271);lifeTable.add(0.000000);} else if (groupName.equals("non Hisp white males")) {lifeTable.add(0.006000);lifeTable.add(0.000455);lifeTable.add(0.000296);lifeTable.add(0.000243);lifeTable.add(0.000164);lifeTable.add(0.000157);lifeTable.add(0.000141);lifeTable.add(0.000126);lifeTable.add(0.000107);lifeTable.add(0.000086);lifeTable.add(0.000070);lifeTable.add(0.000078);lifeTable.add(0.000127);lifeTable.add(0.000224);lifeTable.add(0.000352);lifeTable.add(0.000484);lifeTable.add(0.000607);lifeTable.add(0.000732);lifeTable.add(0.000859);lifeTable.add(0.000986);lifeTable.add(0.001123);lifeTable.add(0.001250);lifeTable.add(0.001337);lifeTable.add(0.001367);lifeTable.add(0.001355);lifeTable.add(0.001329);lifeTable.add(0.001313);lifeTable.add(0.001304);lifeTable.add(0.001314);lifeTable.add(0.001339);lifeTable.add(0.001374);lifeTable.add(0.001413);lifeTable.add(0.001465);lifeTable.add(0.001501);lifeTable.add(0.001548);lifeTable.add(0.001608);lifeTable.add(0.001685);lifeTable.add(0.001776);lifeTable.add(0.001884);lifeTable.add(0.002016);lifeTable.add(0.002162);lifeTable.add(0.002334);lifeTable.add(0.002555);lifeTable.add(0.002826);lifeTable.add(0.003127);lifeTable.add(0.003429);lifeTable.add(0.003733);lifeTable.add(0.004061);lifeTable.add(0.004426);lifeTable.add(0.004829);lifeTable.add(0.005268);lifeTable.add(0.005721);lifeTable.add(0.006174);lifeTable.add(0.006618);lifeTable.add(0.007066);lifeTable.add(0.007541);lifeTable.add(0.008070);lifeTable.add(0.008665);lifeTable.add(0.009339);lifeTable.add(0.010087);lifeTable.add(0.010906);lifeTable.add(0.011788);lifeTable.add(0.012732);lifeTable.add(0.013751);lifeTable.add(0.014881);lifeTable.add(0.016192);lifeTable.add(0.017680);lifeTable.add(0.019303);lifeTable.add(0.021008);lifeTable.add(0.022817);lifeTable.add(0.024760);lifeTable.add(0.027017);lifeTable.add(0.029726);lifeTable.add(0.032751);lifeTable.add(0.035986);lifeTable.add(0.039392);lifeTable.add(0.043042);lifeTable.add(0.047250);lifeTable.add(0.052133);lifeTable.add(0.057772);lifeTable.add(0.063732);lifeTable.add(0.069993);lifeTable.add(0.076960);lifeTable.add(0.085164);lifeTable.add(0.094254);lifeTable.add(0.104721);lifeTable.add(0.116432);lifeTable.add(0.129152);lifeTable.add(0.142900);lifeTable.add(0.157682);lifeTable.add(0.173488);lifeTable.add(0.190285);lifeTable.add(0.208022);lifeTable.add(0.226627);lifeTable.add(0.246002);lifeTable.add(0.266033);lifeTable.add(0.286584);lifeTable.add(0.307504);lifeTable.add(0.328630);lifeTable.add(0.349794);lifeTable.add(1.000000);} else if (groupName.equals("non Hisp white fem")) {lifeTable.add(0.004980);lifeTable.add(0.000392);lifeTable.add(0.000220);lifeTable.add(0.000158);lifeTable.add(0.000142);lifeTable.add(0.000125);lifeTable.add(0.000114);lifeTable.add(0.000106);lifeTable.add(0.000096);lifeTable.add(0.000085);lifeTable.add(0.000077);lifeTable.add(0.000078);lifeTable.add(0.000097);lifeTable.add(0.000137);lifeTable.add(0.000190);lifeTable.add(0.000247);lifeTable.add(0.000299);lifeTable.add(0.000341);lifeTable.add(0.000370);lifeTable.add(0.000390);lifeTable.add(0.000409);lifeTable.add(0.000432);lifeTable.add(0.000452);lifeTable.add(0.000471);lifeTable.add(0.000489);lifeTable.add(0.000507);lifeTable.add(0.000527);lifeTable.add(0.000548);lifeTable.add(0.000571);lifeTable.add(0.000598);lifeTable.add(0.000634);lifeTable.add(0.000678);lifeTable.add(0.000726);lifeTable.add(0.000772);lifeTable.add(0.000818);lifeTable.add(0.000869);lifeTable.add(0.000931);lifeTable.add(0.001005);lifeTable.add(0.001096);lifeTable.add(0.001206);lifeTable.add(0.001323);lifeTable.add(0.001450);lifeTable.add(0.001600);lifeTable.add(0.001771);lifeTable.add(0.001951);lifeTable.add(0.002133);lifeTable.add(0.002312);lifeTable.add(0.002493);lifeTable.add(0.002683);lifeTable.add(0.002885);lifeTable.add(0.003108);lifeTable.add(0.003346);lifeTable.add(0.003587);lifeTable.add(0.003825);lifeTable.add(0.004074);lifeTable.add(0.004339);lifeTable.add(0.004647);lifeTable.add(0.005031);lifeTable.add(0.005514);lifeTable.add(0.006082);lifeTable.add(0.006723);lifeTable.add(0.007407);lifeTable.add(0.008119);lifeTable.add(0.008854);lifeTable.add(0.009641);lifeTable.add(0.010558);lifeTable.add(0.011613);lifeTable.add(0.012751);lifeTable.add(0.013939);lifeTable.add(0.015214);lifeTable.add(0.016610);lifeTable.add(0.018292);lifeTable.add(0.020221);lifeTable.add(0.022351);lifeTable.add(0.024624);lifeTable.add(0.027048);lifeTable.add(0.029777);lifeTable.add(0.032873);lifeTable.add(0.036506);lifeTable.add(0.040671);lifeTable.add(0.045155);lifeTable.add(0.049963);lifeTable.add(0.055543);lifeTable.add(0.062198);lifeTable.add(0.069603);lifeTable.add(0.077965);lifeTable.add(0.087203);lifeTable.add(0.098144);lifeTable.add(0.110197);lifeTable.add(0.123409);lifeTable.add(0.137812);lifeTable.add(0.153422);lifeTable.add(0.170231);lifeTable.add(0.188205);lifeTable.add(0.207286);lifeTable.add(0.227381);lifeTable.add(0.248371);lifeTable.add(0.270108);lifeTable.add(0.292417);lifeTable.add(0.315104);lifeTable.add(1.000000);} else if (groupName.equals("non Hisp black males")) {lifeTable.add(0.013942);lifeTable.add(0.000812);lifeTable.add(0.000493);lifeTable.add(0.000368);lifeTable.add(0.000321);lifeTable.add(0.000280);lifeTable.add(0.000261);lifeTable.add(0.000238);lifeTable.add(0.000198);lifeTable.add(0.000145);lifeTable.add(0.000098);lifeTable.add(0.000094);lifeTable.add(0.000173);lifeTable.add(0.000350);lifeTable.add(0.000587);lifeTable.add(0.000831);lifeTable.add(0.001049);lifeTable.add(0.001252);lifeTable.add(0.001440);lifeTable.add(0.001621);lifeTable.add(0.001822);lifeTable.add(0.002025);lifeTable.add(0.002173);lifeTable.add(0.002235);lifeTable.add(0.002228);lifeTable.add(0.002196);lifeTable.add(0.002177);lifeTable.add(0.002175);lifeTable.add(0.002209);lifeTable.add(0.002276);lifeTable.add(0.002361);lifeTable.add(0.002447);lifeTable.add(0.002563);lifeTable.add(0.002599);lifeTable.add(0.002659);lifeTable.add(0.002729);lifeTable.add(0.002827);lifeTable.add(0.002957);lifeTable.add(0.003131);lifeTable.add(0.003350);lifeTable.add(0.003603);lifeTable.add(0.003887);lifeTable.add(0.004214);lifeTable.add(0.004585);lifeTable.add(0.004995);lifeTable.add(0.005413);lifeTable.add(0.005868);lifeTable.add(0.006431);lifeTable.add(0.007143);lifeTable.add(0.007990);lifeTable.add(0.008914);lifeTable.add(0.009869);lifeTable.add(0.010877);lifeTable.add(0.011924);lifeTable.add(0.013010);lifeTable.add(0.014210);lifeTable.add(0.015482);lifeTable.add(0.016687);lifeTable.add(0.017757);lifeTable.add(0.018744);lifeTable.add(0.019763);lifeTable.add(0.020938);lifeTable.add(0.022288);lifeTable.add(0.023855);lifeTable.add(0.025601);lifeTable.add(0.027522);lifeTable.add(0.029498);lifeTable.add(0.031428);lifeTable.add(0.033261);lifeTable.add(0.035043);lifeTable.add(0.036686);lifeTable.add(0.038524);lifeTable.add(0.041047);lifeTable.add(0.044085);lifeTable.add(0.047923);lifeTable.add(0.052445);lifeTable.add(0.056951);lifeTable.add(0.061966);lifeTable.add(0.067329);lifeTable.add(0.072797);lifeTable.add(0.078550);lifeTable.add(0.084271);lifeTable.add(0.091240);lifeTable.add(0.098688);lifeTable.add(0.106631);lifeTable.add(0.115085);lifeTable.add(0.124060);lifeTable.add(0.133565);lifeTable.add(0.143606);lifeTable.add(0.154183);lifeTable.add(0.165294);lifeTable.add(0.176928);lifeTable.add(0.189073);lifeTable.add(0.201708);lifeTable.add(0.214807);lifeTable.add(0.228340);lifeTable.add(0.242267);lifeTable.add(0.256547);lifeTable.add(0.271132);lifeTable.add(0.285967);lifeTable.add(1.000000);} else if (groupName.equals("non Hisp black fem")) {lifeTable.add(0.011335);lifeTable.add(0.000588);lifeTable.add(0.000380);lifeTable.add(0.000343);lifeTable.add(0.000218);lifeTable.add(0.000200);lifeTable.add(0.000166);lifeTable.add(0.000144);lifeTable.add(0.000132);lifeTable.add(0.000129);lifeTable.add(0.000135);lifeTable.add(0.000151);lifeTable.add(0.000178);lifeTable.add(0.000214);lifeTable.add(0.000257);lifeTable.add(0.000301);lifeTable.add(0.000346);lifeTable.add(0.000392);lifeTable.add(0.000439);lifeTable.add(0.000491);lifeTable.add(0.000551);lifeTable.add(0.000614);lifeTable.add(0.000671);lifeTable.add(0.000714);lifeTable.add(0.000745);lifeTable.add(0.000776);lifeTable.add(0.000812);lifeTable.add(0.000853);lifeTable.add(0.000901);lifeTable.add(0.000959);lifeTable.add(0.001032);lifeTable.add(0.001116);lifeTable.add(0.001211);lifeTable.add(0.001294);lifeTable.add(0.001382);lifeTable.add(0.001473);lifeTable.add(0.001582);lifeTable.add(0.001718);lifeTable.add(0.001892);lifeTable.add(0.002101);lifeTable.add(0.002328);lifeTable.add(0.002564);lifeTable.add(0.002822);lifeTable.add(0.003098);lifeTable.add(0.003384);lifeTable.add(0.003671);lifeTable.add(0.003966);lifeTable.add(0.004290);lifeTable.add(0.004658);lifeTable.add(0.005069);lifeTable.add(0.005515);lifeTable.add(0.005976);lifeTable.add(0.006440);lifeTable.add(0.006894);lifeTable.add(0.007346);lifeTable.add(0.007826);lifeTable.add(0.008352);lifeTable.add(0.008921);lifeTable.add(0.009549);lifeTable.add(0.010253);lifeTable.add(0.011060);lifeTable.add(0.011967);lifeTable.add(0.012942);lifeTable.add(0.013939);lifeTable.add(0.014949);lifeTable.add(0.016032);lifeTable.add(0.017212);lifeTable.add(0.018462);lifeTable.add(0.019808);lifeTable.add(0.021287);lifeTable.add(0.022813);lifeTable.add(0.024396);lifeTable.add(0.026328);lifeTable.add(0.028596);lifeTable.add(0.031138);lifeTable.add(0.033910);lifeTable.add(0.036717);lifeTable.add(0.040036);lifeTable.add(0.043888);lifeTable.add(0.047390);lifeTable.add(0.051552);lifeTable.add(0.056299);lifeTable.add(0.061373);lifeTable.add(0.068340);lifeTable.add(0.075295);lifeTable.add(0.082708);lifeTable.add(0.090584);lifeTable.add(0.099083);lifeTable.add(0.108229);lifeTable.add(0.118043);lifeTable.add(0.128543);lifeTable.add(0.139739);lifeTable.add(0.151635);lifeTable.add(0.164228);lifeTable.add(0.177507);lifeTable.add(0.191450);lifeTable.add(0.206028);lifeTable.add(0.221198);lifeTable.add(0.236911);lifeTable.add(0.253106);lifeTable.add(1.000000);}int indice = lifeTable.size() - 1;while (indice != -1) {reverseOrderedPGraphPointsY.add(lifeTable.elementAt(indice));indice--;}if (groupName.contains("AtBirthOverLastFortyYears")) {return reverseOrderedPGraphPointsY;} else {return lifeTable;}}static public double separationFactor(String cohort) {double separationFactor = -1;if (cohort.equals("white population")) {separationFactor = 0.127;} else if (cohort.equals("white males")) {separationFactor = 0.129;} else if (cohort.equals("white females")) {separationFactor = 0.124;} else if (cohort.equals("black population")) {separationFactor = 0.127;} else if (cohort.equals("black males")) {separationFactor = 0.126;} else if (cohort.equals("black females")) {separationFactor = 0.127;} else if (cohort.equals("Hispanic population")) {separationFactor = 0.127;} else if (cohort.equals("Hispanic males")) {separationFactor = 0.127;} else if (cohort.equals("Hispanic females")) {separationFactor = 0.127;} else if (cohort.equals("non-Hispanic white population")) {separationFactor = 0.128;} else if (cohort.equals("non-Hispanic white males")) {separationFactor = 0.131;} else if (cohort.equals("non-Hispanic white females")) {separationFactor = 0.123;} else if (cohort.equals("non-Hispanic black population")) {separationFactor = 0.128;} else if (cohort.equals("non-Hispanic black males")) {separationFactor = 0.127;} else if (cohort.equals("non-Hispanic black females")) {separationFactor = 0.128;}return separationFactor;}static public double personYearsCombinedForAges100AndOver(String cohort) {int personYears = -1;if (cohort.equals("white population")) {personYears = 3502;} else if (cohort.equals("white males")) {personYears = 1623;} else if (cohort.equals("white females")) {personYears = 4927;} else if (cohort.equals("black population")) {personYears = 5368;} else if (cohort.equals("black males")) {personYears = 2129;} else if (cohort.equals("black females")) {personYears = 7881;} else if (cohort.equals("Hispanic population")) {personYears = 9954;} else if (cohort.equals("Hispanic males")) {personYears = 5133;} else if (cohort.equals("Hispanic females")) {personYears = 11992;} else if (cohort.equals("non-Hispanic white population")) {personYears = 3462;} else if (cohort.equals("non-Hispanic white males")) {personYears = 1600;} else if (cohort.equals("non-Hispanic white females")) {personYears = 4877;} else if (cohort.equals("non-Hispanic black population")) {personYears = 5238;} else if (cohort.equals("non-Hispanic black males")) {personYears = 2060;} else if (cohort.equals("non-Hispanic black females")) {personYears = 7735;}return personYears;}static Vector<Double> lifeTable(String lifeTableName) {Vector<Double> reverseOrderedPGraphPointsY = new Vector<Double>();Vector<Double> lifeTable = new Vector<Double>();if (lifeTableName.contains("lifeExpectancyAtBirthOverLastFortyYears Hispanic females")) {lifeTableName = "lifeExpectancyAtBirthOverLastFortyYears all races, females";} else if (lifeTableName.contains("lifeExpectancyAtBirthOverLastFortyYears Hispanic males")) {lifeTableName = "lifeExpectancyAtBirthOverLastFortyYears all races, males";} else if (lifeTableName.contains("lifeExpectancyAtBirthOverLastFortyYears Hispanic")) {lifeTableName = "lifeExpectancyAtBirthOverLastFortyYears all races, both sexes";} else if (lifeTableName.contains("lifeExpectancyAtBirthOverLastFortyYears all races U")) {lifeTableName = "lifeExpectancyAtBirthOverLastFortyYears all races, both sexes";}if (lifeTableName.equals("all races U")) {lifeTable.add(78.1238861083984);lifeTable.add(77.6415023803711);lifeTable.add(76.6770782470703);lifeTable.add(75.6984634399414);lifeTable.add(74.7148971557617);lifeTable.add(73.727653503418);lifeTable.add(72.7389907836914);lifeTable.add(71.7490539550781);lifeTable.add(70.7580184936523);lifeTable.add(69.765754699707);lifeTable.add(68.7722015380859);lifeTable.add(67.7777557373047);lifeTable.add(66.783576965332);lifeTable.add(65.7917098999023);lifeTable.add(64.8044815063477);lifeTable.add(63.8233222961426);lifeTable.add(62.8483543395996);lifeTable.add(61.8789329528809);lifeTable.add(60.9146003723145);lifeTable.add(59.9548454284668);lifeTable.add(58.9992332458496);lifeTable.add(58.0479431152344);lifeTable.add(57.1006126403809);lifeTable.add(56.1556625366211);lifeTable.add(55.2109718322754);lifeTable.add(54.2650337219238);lifeTable.add(53.3174362182617);lifeTable.add(52.3685111999512);lifeTable.add(51.4185676574707);lifeTable.add(50.4681701660156);lifeTable.add(49.5178527832031);lifeTable.add(48.5679206848145);lifeTable.add(47.6185417175293);lifeTable.add(46.6698799133301);lifeTable.add(45.7223052978516);lifeTable.add(44.7758865356445);lifeTable.add(43.8309440612793);lifeTable.add(42.887939453125);lifeTable.add(41.947380065918);lifeTable.add(41.0099220275879);lifeTable.add(40.0762596130371);lifeTable.add(39.1467132568359);lifeTable.add(38.2217178344727);lifeTable.add(37.3021507263184);lifeTable.add(36.3887825012207);lifeTable.add(35.4819221496582);lifeTable.add(34.581298828125);lifeTable.add(33.6866607666016);lifeTable.add(32.798210144043);lifeTable.add(31.916431427002);lifeTable.add(31.0417861938477);lifeTable.add(30.1746368408203);lifeTable.add(29.3148536682129);lifeTable.add(28.4619827270508);lifeTable.add(27.6153469085693);lifeTable.add(26.7745552062988);lifeTable.add(25.9396533966064);lifeTable.add(25.1111526489258);lifeTable.add(24.2896423339844);lifeTable.add(23.4758720397949);lifeTable.add(22.6704406738281);lifeTable.add(21.8739109039307);lifeTable.add(21.0865306854248);lifeTable.add(20.3083171844482);lifeTable.add(19.539249420166);lifeTable.add(18.7796630859375);lifeTable.add(18.0308742523193);lifeTable.add(17.2940711975098);lifeTable.add(16.5693607330322);lifeTable.add(15.8560094833374);lifeTable.add(15.1536874771118);lifeTable.add(14.4621086120605);lifeTable.add(13.7830438613892);lifeTable.add(13.1188516616821);lifeTable.add(12.4704513549805);lifeTable.add(11.8373889923096);lifeTable.add(11.2188444137573);lifeTable.add(10.6146154403687);lifeTable.add(10.0258722305298);lifeTable.add(9.45493984222412);lifeTable.add(8.90307903289795);lifeTable.add(8.36882209777832);lifeTable.add(7.85053110122681);lifeTable.add(7.34949970245361);lifeTable.add(6.86951923370361);lifeTable.add(6.41024160385132);lifeTable.add(5.97238922119141);lifeTable.add(5.55886030197144);lifeTable.add(5.17032527923584);lifeTable.add(4.80640745162964);lifeTable.add(4.46661329269409);lifeTable.add(4.1503381729126);lifeTable.add(3.85687661170959);lifeTable.add(3.58542776107788);lifeTable.add(3.33511233329773);lifeTable.add(3.1049816608429);lifeTable.add(2.89403247833252);lifeTable.add(2.70122194290161);lifeTable.add(2.52548098564148);lifeTable.add(2.36572766304016);lifeTable.add(2.22087979316711);} else if (lifeTableName.equals("white males")) {lifeTable.add(76.1);lifeTable.add(75.5);lifeTable.add(74.5);lifeTable.add(73.6);lifeTable.add(72.6);lifeTable.add(71.6);lifeTable.add(70.6);lifeTable.add(69.6);lifeTable.add(68.6);lifeTable.add(67.6);lifeTable.add(66.6);lifeTable.add(65.6);lifeTable.add(64.7);lifeTable.add(63.7);lifeTable.add(62.7);lifeTable.add(61.7);lifeTable.add(60.7);lifeTable.add(59.8);lifeTable.add(58.8);lifeTable.add(57.9);lifeTable.add(56.9);lifeTable.add(56.0);lifeTable.add(55.1);lifeTable.add(54.1);lifeTable.add(53.2);lifeTable.add(52.3);lifeTable.add(51.3);lifeTable.add(50.4);lifeTable.add(49.5);lifeTable.add(48.5);lifeTable.add(47.6);lifeTable.add(46.7);lifeTable.add(45.7);lifeTable.add(44.8);lifeTable.add(43.8);lifeTable.add(42.9);lifeTable.add(42.0);lifeTable.add(41.0);lifeTable.add(40.1);lifeTable.add(39.2);lifeTable.add(38.3);lifeTable.add(37.3);lifeTable.add(36.4);lifeTable.add(35.5);lifeTable.add(34.6);lifeTable.add(33.7);lifeTable.add(32.8);lifeTable.add(31.9);lifeTable.add(31.1);lifeTable.add(30.2);lifeTable.add(29.3);lifeTable.add(28.5);lifeTable.add(27.6);lifeTable.add(26.8);lifeTable.add(26.0);lifeTable.add(25.2);lifeTable.add(24.3);lifeTable.add(23.5);lifeTable.add(22.7);lifeTable.add(21.9);lifeTable.add(21.2);lifeTable.add(20.4);lifeTable.add(19.6);lifeTable.add(18.9);lifeTable.add(18.1);lifeTable.add(17.4);lifeTable.add(16.7);lifeTable.add(16.0);lifeTable.add(15.3);lifeTable.add(14.6);lifeTable.add(13.9);lifeTable.add(13.2);lifeTable.add(12.6);lifeTable.add(12.0);lifeTable.add(11.3);lifeTable.add(10.7);lifeTable.add(10.2);lifeTable.add(9.6);lifeTable.add(9.0);lifeTable.add(8.5);lifeTable.add(8.0);lifeTable.add(7.5);lifeTable.add(7.0);lifeTable.add(6.5);lifeTable.add(6.1);lifeTable.add(5.7);lifeTable.add(5.3);lifeTable.add(4.9);lifeTable.add(4.6);lifeTable.add(4.2);lifeTable.add(3.9);lifeTable.add(3.7);lifeTable.add(3.4);lifeTable.add(3.2);lifeTable.add(3.0);lifeTable.add(2.8);lifeTable.add(2.6);lifeTable.add(2.4);lifeTable.add(2.3);lifeTable.add(2.1);lifeTable.add(2.0);} else if (lifeTableName.equals("white females")) {lifeTable.add(80.9);lifeTable.add(80.3);lifeTable.add(79.3);lifeTable.add(78.4);lifeTable.add(77.4);lifeTable.add(76.4);lifeTable.add(75.4);lifeTable.add(74.4);lifeTable.add(73.4);lifeTable.add(72.4);lifeTable.add(71.4);lifeTable.add(70.4);lifeTable.add(69.4);lifeTable.add(68.4);lifeTable.add(67.4);lifeTable.add(66.5);lifeTable.add(65.5);lifeTable.add(64.5);lifeTable.add(63.5);lifeTable.add(62.5);lifeTable.add(61.6);lifeTable.add(60.6);lifeTable.add(59.6);lifeTable.add(58.6);lifeTable.add(57.7);lifeTable.add(56.7);lifeTable.add(55.7);lifeTable.add(54.7);lifeTable.add(53.8);lifeTable.add(52.8);lifeTable.add(51.8);lifeTable.add(50.9);lifeTable.add(49.9);lifeTable.add(48.9);lifeTable.add(48.0);lifeTable.add(47.0);lifeTable.add(46.0);lifeTable.add(45.1);lifeTable.add(44.1);lifeTable.add(43.2);lifeTable.add(42.2);lifeTable.add(41.3);lifeTable.add(40.3);lifeTable.add(39.4);lifeTable.add(38.4);lifeTable.add(37.5);lifeTable.add(36.6);lifeTable.add(35.7);lifeTable.add(34.8);lifeTable.add(33.8);lifeTable.add(32.9);lifeTable.add(32.0);lifeTable.add(31.1);lifeTable.add(30.2);lifeTable.add(29.4);lifeTable.add(28.5);lifeTable.add(27.6);lifeTable.add(26.7);lifeTable.add(25.8);lifeTable.add(25.0);lifeTable.add(24.1);lifeTable.add(23.3);lifeTable.add(22.5);lifeTable.add(21.6);lifeTable.add(20.8);lifeTable.add(20.0);lifeTable.add(19.2);lifeTable.add(18.4);lifeTable.add(17.7);lifeTable.add(16.9);lifeTable.add(16.2);lifeTable.add(15.4);lifeTable.add(14.7);lifeTable.add(14.0);lifeTable.add(13.3);lifeTable.add(12.6);lifeTable.add(11.9);lifeTable.add(11.3);lifeTable.add(10.7);lifeTable.add(10.0);lifeTable.add(9.4);lifeTable.add(8.9);lifeTable.add(8.3);lifeTable.add(7.7);lifeTable.add(7.2);lifeTable.add(6.7);lifeTable.add(6.3);lifeTable.add(5.8);lifeTable.add(5.4);lifeTable.add(5.0);lifeTable.add(4.6);lifeTable.add(4.3);lifeTable.add(3.9);lifeTable.add(3.6);lifeTable.add(3.4);lifeTable.add(3.1);lifeTable.add(2.9);lifeTable.add(2.7);lifeTable.add(2.5);lifeTable.add(2.3);lifeTable.add(2.2);} else if (lifeTableName.equals("black males")) {lifeTable.add(70.6);lifeTable.add(70.6);lifeTable.add(69.6);lifeTable.add(68.6);lifeTable.add(67.7);lifeTable.add(66.7);lifeTable.add(65.7);lifeTable.add(64.7);lifeTable.add(63.7);lifeTable.add(62.7);lifeTable.add(61.8);lifeTable.add(60.8);lifeTable.add(59.8);lifeTable.add(58.8);lifeTable.add(57.8);lifeTable.add(56.8);lifeTable.add(55.9);lifeTable.add(54.9);lifeTable.add(54.0);lifeTable.add(53.1);lifeTable.add(52.2);lifeTable.add(51.2);lifeTable.add(50.3);lifeTable.add(49.4);lifeTable.add(48.6);lifeTable.add(47.7);lifeTable.add(46.8);lifeTable.add(45.9);lifeTable.add(45.0);lifeTable.add(44.0);lifeTable.add(43.1);lifeTable.add(42.2);lifeTable.add(41.3);lifeTable.add(40.4);lifeTable.add(39.5);lifeTable.add(38.6);lifeTable.add(37.7);lifeTable.add(36.8);lifeTable.add(35.9);lifeTable.add(35.0);lifeTable.add(34.2);lifeTable.add(33.3);lifeTable.add(32.4);lifeTable.add(31.5);lifeTable.add(30.7);lifeTable.add(29.0);lifeTable.add(28.1);lifeTable.add(27.3);lifeTable.add(26.5);lifeTable.add(25.7);lifeTable.add(24.9);lifeTable.add(24.1);lifeTable.add(23.4);lifeTable.add(22.6);lifeTable.add(21.9);lifeTable.add(21.2);lifeTable.add(20.5);lifeTable.add(19.9);lifeTable.add(19.2);lifeTable.add(18.5);lifeTable.add(17.9);lifeTable.add(17.2);lifeTable.add(16.6);lifeTable.add(16.0);lifeTable.add(15.4);lifeTable.add(14.8);lifeTable.add(14.2);lifeTable.add(13.7);lifeTable.add(13.1);lifeTable.add(12.6);lifeTable.add(12.0);lifeTable.add(11.5);lifeTable.add(10.9);lifeTable.add(10.4);lifeTable.add(9.9);lifeTable.add(9.4);lifeTable.add(8.9);lifeTable.add(8.5);lifeTable.add(8.0);lifeTable.add(7.6);lifeTable.add(7.2);lifeTable.add(6.8);lifeTable.add(6.5);lifeTable.add(6.1);lifeTable.add(5.8);lifeTable.add(5.5);lifeTable.add(5.2);lifeTable.add(4.9);lifeTable.add(4.6);lifeTable.add(4.4);lifeTable.add(4.1);lifeTable.add(3.9);lifeTable.add(3.7);lifeTable.add(3.5);lifeTable.add(3.3);lifeTable.add(3.1);lifeTable.add(3.0);lifeTable.add(2.8);lifeTable.add(2.7);lifeTable.add(2.5);} else if (lifeTableName.equals("black females")) {lifeTable.add(77.2);lifeTable.add(77.1);lifeTable.add(76.1);lifeTable.add(75.1);lifeTable.add(74.2);lifeTable.add(73.2);lifeTable.add(72.2);lifeTable.add(71.2);lifeTable.add(70.2);lifeTable.add(69.2);lifeTable.add(68.2);lifeTable.add(67.2);lifeTable.add(66.2);lifeTable.add(65.3);lifeTable.add(64.3);lifeTable.add(63.3);lifeTable.add(62.3);lifeTable.add(61.3);lifeTable.add(60.4);lifeTable.add(59.4);lifeTable.add(58.4);lifeTable.add(57.4);lifeTable.add(56.5);lifeTable.add(55.5);lifeTable.add(54.5);lifeTable.add(53.6);lifeTable.add(52.6);lifeTable.add(51.7);lifeTable.add(50.7);lifeTable.add(49.7);lifeTable.add(48.8);lifeTable.add(47.8);lifeTable.add(46.9);lifeTable.add(45.9);lifeTable.add(45.0);lifeTable.add(44.1);lifeTable.add(43.1);lifeTable.add(42.2);lifeTable.add(41.3);lifeTable.add(40.3);lifeTable.add(39.4);lifeTable.add(38.5);lifeTable.add(37.6);lifeTable.add(36.7);lifeTable.add(35.8);lifeTable.add(34.9);lifeTable.add(34.0);lifeTable.add(33.2);lifeTable.add(32.3);lifeTable.add(31.5);lifeTable.add(30.6);lifeTable.add(29.8);lifeTable.add(28.9);lifeTable.add(28.1);lifeTable.add(27.3);lifeTable.add(26.5);lifeTable.add(25.7);lifeTable.add(24.9);lifeTable.add(24.1);lifeTable.add(23.4);lifeTable.add(22.6);lifeTable.add(21.8);lifeTable.add(21.1);lifeTable.add(20.3);lifeTable.add(19.6);lifeTable.add(18.9);lifeTable.add(18.2);lifeTable.add(17.5);lifeTable.add(16.8);lifeTable.add(16.1);lifeTable.add(15.4);lifeTable.add(14.8);lifeTable.add(14.1);lifeTable.add(13.5);lifeTable.add(12.9);lifeTable.add(12.3);lifeTable.add(11.7);lifeTable.add(11.1);lifeTable.add(10.5);lifeTable.add(10.0);lifeTable.add(9.4);lifeTable.add(8.9);lifeTable.add(8.4);lifeTable.add(7.9);lifeTable.add(7.5);lifeTable.add(7.0);lifeTable.add(6.6);lifeTable.add(6.2);lifeTable.add(5.8);lifeTable.add(5.5);lifeTable.add(5.2);lifeTable.add(4.8);lifeTable.add(4.5);lifeTable.add(4.3);lifeTable.add(4.0);lifeTable.add(3.8);lifeTable.add(3.5);lifeTable.add(3.3);lifeTable.add(3.1);lifeTable.add(3.0);lifeTable.add(2.8);} else if (lifeTableName.equals("Hispanic males")) {lifeTable.add(78.4);lifeTable.add(77.9);lifeTable.add(76.9);lifeTable.add(75.9);lifeTable.add(74.9);lifeTable.add(74.0);lifeTable.add(73.0);lifeTable.add(72.0);lifeTable.add(71.0);lifeTable.add(70.0);lifeTable.add(69.0);lifeTable.add(68.0);lifeTable.add(67.0);lifeTable.add(66.0);lifeTable.add(65.0);lifeTable.add(64.0);lifeTable.add(63.1);lifeTable.add(62.1);lifeTable.add(61.2);lifeTable.add(60.2);lifeTable.add(59.3);lifeTable.add(58.3);lifeTable.add(57.4);lifeTable.add(56.5);lifeTable.add(55.6);lifeTable.add(54.6);lifeTable.add(53.7);lifeTable.add(52.8);lifeTable.add(51.8);lifeTable.add(50.9);lifeTable.add(49.9);lifeTable.add(49.0);lifeTable.add(48.0);lifeTable.add(47.1);lifeTable.add(46.1);lifeTable.add(45.2);lifeTable.add(44.3);lifeTable.add(43.3);lifeTable.add(42.4);lifeTable.add(41.4);lifeTable.add(40.5);lifeTable.add(39.6);lifeTable.add(38.6);lifeTable.add(37.7);lifeTable.add(36.8);lifeTable.add(35.9);lifeTable.add(35.0);lifeTable.add(34.1);lifeTable.add(33.2);lifeTable.add(32.3);lifeTable.add(31.4);lifeTable.add(30.5);lifeTable.add(29.7);lifeTable.add(28.8);lifeTable.add(28.0);lifeTable.add(27.1);lifeTable.add(26.3);lifeTable.add(25.5);lifeTable.add(24.6);lifeTable.add(23.8);lifeTable.add(23.0);lifeTable.add(22.2);lifeTable.add(21.4);lifeTable.add(20.7);lifeTable.add(19.9);lifeTable.add(19.1);lifeTable.add(18.4);lifeTable.add(17.6);lifeTable.add(16.9);lifeTable.add(16.2);lifeTable.add(15.5);lifeTable.add(14.8);lifeTable.add(14.2);lifeTable.add(13.5);lifeTable.add(12.8);lifeTable.add(12.2);lifeTable.add(11.6);lifeTable.add(10.9);lifeTable.add(10.3);lifeTable.add(9.7);lifeTable.add(9.2);lifeTable.add(8.6);lifeTable.add(8.1);lifeTable.add(7.6);lifeTable.add(7.1);lifeTable.add(6.6);lifeTable.add(6.2);lifeTable.add(5.8);lifeTable.add(5.4);lifeTable.add(5.0);lifeTable.add(4.7);lifeTable.add(4.4);lifeTable.add(4.1);lifeTable.add(3.8);lifeTable.add(3.5);lifeTable.add(3.3);lifeTable.add(3.1);lifeTable.add(2.9);lifeTable.add(2.7);lifeTable.add(2.6);lifeTable.add(2.4);} else if (lifeTableName.equals("Hispanic females")) {lifeTable.add(83.8);lifeTable.add(82.8);lifeTable.add(81.8);lifeTable.add(80.8);lifeTable.add(79.8);lifeTable.add(78.8);lifeTable.add(77.9);lifeTable.add(76.9);lifeTable.add(75.9);lifeTable.add(74.9);lifeTable.add(73.9);lifeTable.add(72.9);lifeTable.add(71.9);lifeTable.add(70.9);lifeTable.add(69.9);lifeTable.add(68.9);lifeTable.add(67.9);lifeTable.add(67.0);lifeTable.add(66.0);lifeTable.add(65.0);lifeTable.add(64.0);lifeTable.add(63.0);lifeTable.add(62.0);lifeTable.add(61.1);lifeTable.add(60.1);lifeTable.add(59.1);lifeTable.add(58.1);lifeTable.add(57.2);lifeTable.add(56.2);lifeTable.add(55.2);lifeTable.add(54.2);lifeTable.add(53.2);lifeTable.add(52.3);lifeTable.add(51.3);lifeTable.add(50.3);lifeTable.add(49.3);lifeTable.add(48.4);lifeTable.add(47.4);lifeTable.add(46.4);lifeTable.add(45.4);lifeTable.add(44.5);lifeTable.add(43.5);lifeTable.add(42.6);lifeTable.add(41.6);lifeTable.add(40.7);lifeTable.add(39.7);lifeTable.add(38.8);lifeTable.add(37.8);lifeTable.add(36.9);lifeTable.add(36.0);lifeTable.add(35.1);lifeTable.add(34.1);lifeTable.add(33.2);lifeTable.add(32.3);lifeTable.add(31.4);lifeTable.add(30.5);lifeTable.add(29.6);lifeTable.add(28.7);lifeTable.add(27.8);lifeTable.add(27.0);lifeTable.add(26.1);lifeTable.add(25.2);lifeTable.add(24.3);lifeTable.add(23.5);lifeTable.add(22.6);lifeTable.add(21.8);lifeTable.add(21.0);lifeTable.add(20.2);lifeTable.add(19.4);lifeTable.add(18.6);lifeTable.add(17.8);lifeTable.add(17.0);lifeTable.add(16.2);lifeTable.add(15.5);lifeTable.add(14.8);lifeTable.add(14.0);lifeTable.add(13.3);lifeTable.add(12.6);lifeTable.add(12.0);lifeTable.add(11.3);lifeTable.add(10.6);lifeTable.add(10.0);lifeTable.add(9.4);lifeTable.add(8.8);lifeTable.add(8.2);lifeTable.add(7.7);lifeTable.add(7.2);lifeTable.add(6.7);lifeTable.add(6.2);lifeTable.add(5.8);lifeTable.add(5.3);lifeTable.add(5.0);lifeTable.add(4.6);lifeTable.add(4.3);lifeTable.add(3.9);lifeTable.add(3.7);lifeTable.add(3.4);lifeTable.add(3.2);lifeTable.add(2.9);lifeTable.add(2.7);lifeTable.add(2.6);} else if (lifeTableName.equals("non Hisp white males")) {lifeTable.add(75.9);lifeTable.add(75.4);lifeTable.add(74.4);lifeTable.add(73.4);lifeTable.add(72.5);lifeTable.add(71.5);lifeTable.add(70.5);lifeTable.add(69.5);lifeTable.add(68.5);lifeTable.add(67.5);lifeTable.add(66.5);lifeTable.add(65.5);lifeTable.add(64.5);lifeTable.add(63.5);lifeTable.add(62.5);lifeTable.add(61.6);lifeTable.add(60.6);lifeTable.add(59.6);lifeTable.add(58.7);lifeTable.add(57.7);lifeTable.add(56.8);lifeTable.add(55.8);lifeTable.add(54.9);lifeTable.add(54.0);lifeTable.add(53.1);lifeTable.add(52.1);lifeTable.add(51.2);lifeTable.add(50.3);lifeTable.add(49.3);lifeTable.add(48.4);lifeTable.add(47.5);lifeTable.add(46.5);lifeTable.add(45.6);lifeTable.add(44.7);lifeTable.add(43.7);lifeTable.add(42.8);lifeTable.add(41.9);lifeTable.add(40.9);lifeTable.add(40.0);lifeTable.add(39.1);lifeTable.add(38.2);lifeTable.add(37.2);lifeTable.add(36.3);lifeTable.add(35.4);lifeTable.add(34.5);lifeTable.add(33.6);lifeTable.add(32.7);lifeTable.add(31.9);lifeTable.add(31.0);lifeTable.add(30.1);lifeTable.add(29.3);lifeTable.add(28.4);lifeTable.add(27.6);lifeTable.add(26.7);lifeTable.add(25.9);lifeTable.add(25.1);lifeTable.add(24.3);lifeTable.add(23.5);lifeTable.add(22.7);lifeTable.add(21.9);lifeTable.add(21.1);lifeTable.add(20.3);lifeTable.add(19.6);lifeTable.add(18.8);lifeTable.add(18.1);lifeTable.add(17.3);lifeTable.add(16.6);lifeTable.add(15.9);lifeTable.add(15.2);lifeTable.add(14.5);lifeTable.add(13.9);lifeTable.add(13.2);lifeTable.add(12.5);lifeTable.add(11.9);lifeTable.add(11.3);lifeTable.add(10.7);lifeTable.add(10.1);lifeTable.add(9.6);lifeTable.add(9.0);lifeTable.add(8.5);lifeTable.add(8.0);lifeTable.add(7.5);lifeTable.add(7.0);lifeTable.add(6.5);lifeTable.add(6.1);lifeTable.add(5.7);lifeTable.add(5.3);lifeTable.add(4.9);lifeTable.add(4.6);lifeTable.add(4.2);lifeTable.add(3.9);lifeTable.add(3.7);lifeTable.add(3.4);lifeTable.add(3.2);lifeTable.add(3.0);lifeTable.add(2.8);lifeTable.add(2.6);lifeTable.add(2.4);lifeTable.add(2.3);lifeTable.add(2.1);lifeTable.add(2.0);} else if (lifeTableName.equals("non Hisp white fem")) {lifeTable.add(80.7);lifeTable.add(80.2);lifeTable.add(79.2);lifeTable.add(78.2);lifeTable.add(77.2);lifeTable.add(76.2);lifeTable.add(75.2);lifeTable.add(74.2);lifeTable.add(73.3);lifeTable.add(72.3);lifeTable.add(71.3);lifeTable.add(70.3);lifeTable.add(93.3);lifeTable.add(68.3);lifeTable.add(67.3);lifeTable.add(66.3);lifeTable.add(65.3);lifeTable.add(64.3);lifeTable.add(63.4);lifeTable.add(62.4);lifeTable.add(61.4);lifeTable.add(60.4);lifeTable.add(59.5);lifeTable.add(58.5);lifeTable.add(57.5);lifeTable.add(56.5);lifeTable.add(55.6);lifeTable.add(54.6);lifeTable.add(53.6);lifeTable.add(52.7);lifeTable.add(51.7);lifeTable.add(51.7);lifeTable.add(50.7);lifeTable.add(49.8);lifeTable.add(48.8);lifeTable.add(47.8);lifeTable.add(46.9);lifeTable.add(45.9);lifeTable.add(44.9);lifeTable.add(44.0);lifeTable.add(43.0);lifeTable.add(42.1);lifeTable.add(41.1);lifeTable.add(40.2);lifeTable.add(39.3);lifeTable.add(38.3);lifeTable.add(37.4);lifeTable.add(36.5);lifeTable.add(35.6);lifeTable.add(34.7);lifeTable.add(33.8);lifeTable.add(32.9);lifeTable.add(32.0);lifeTable.add(31.1);lifeTable.add(30.2);lifeTable.add(29.3);lifeTable.add(28.4);lifeTable.add(27.5);lifeTable.add(26.6);lifeTable.add(25.8);lifeTable.add(24.9);lifeTable.add(24.1);lifeTable.add(23.2);lifeTable.add(22.4);lifeTable.add(21.6);lifeTable.add(20.8);lifeTable.add(20.0);lifeTable.add(19.2);lifeTable.add(18.4);lifeTable.add(17.6);lifeTable.add(16.9);lifeTable.add(16.1);lifeTable.add(15.4);lifeTable.add(14.7);lifeTable.add(14.0);lifeTable.add(13.3);lifeTable.add(12.6);lifeTable.add(11.9);lifeTable.add(11.3);lifeTable.add(10.6);lifeTable.add(10.0);lifeTable.add(9.4);lifeTable.add(8.8);lifeTable.add(8.3);lifeTable.add(7.7);lifeTable.add(7.2);lifeTable.add(6.7);lifeTable.add(6.2);lifeTable.add(5.8);lifeTable.add(5.4);lifeTable.add(5.0);lifeTable.add(4.6);lifeTable.add(4.3);lifeTable.add(3.9);lifeTable.add(3.6);lifeTable.add(3.4);lifeTable.add(3.1);lifeTable.add(2.9);lifeTable.add(2.7);lifeTable.add(2.5);lifeTable.add(2.3);lifeTable.add(2.2);} else if (lifeTableName.equals("non Hisp black males")) {lifeTable.add(70.2);lifeTable.add(70.2);lifeTable.add(69.2);lifeTable.add(68.3);lifeTable.add(67.3);lifeTable.add(66.3);lifeTable.add(65.3);lifeTable.add(64.3);lifeTable.add(63.4);lifeTable.add(62.4);lifeTable.add(61.4);lifeTable.add(60.4);lifeTable.add(59.4);lifeTable.add(58.4);lifeTable.add(57.4);lifeTable.add(56.5);lifeTable.add(55.5);lifeTable.add(54.6);lifeTable.add(53.6);lifeTable.add(52.7);lifeTable.add(51.8);lifeTable.add(50.9);lifeTable.add(50.0);lifeTable.add(49.1);lifeTable.add(48.2);lifeTable.add(47.3);lifeTable.add(46.4);lifeTable.add(45.5);lifeTable.add(44.6);lifeTable.add(43.7);lifeTable.add(42.8);lifeTable.add(41.9);lifeTable.add(41.0);lifeTable.add(40.1);lifeTable.add(39.2);lifeTable.add(28.3);lifeTable.add(37.4);lifeTable.add(36.5);lifeTable.add(35.6);lifeTable.add(34.7);lifeTable.add(33.9);lifeTable.add(33.0);lifeTable.add(32.1);lifeTable.add(31.2);lifeTable.add(30.4);lifeTable.add(29.5);lifeTable.add(28.7);lifeTable.add(27.9);lifeTable.add(27.0);lifeTable.add(26.2);lifeTable.add(25.4);lifeTable.add(24.7);lifeTable.add(23.9);lifeTable.add(23.1);lifeTable.add(22.4);lifeTable.add(21.7);lifeTable.add(21.0);lifeTable.add(20.3);lifeTable.add(19.7);lifeTable.add(18.4);lifeTable.add(17.7);lifeTable.add(17.1);lifeTable.add(16.5);lifeTable.add(15.9);lifeTable.add(15.3);lifeTable.add(14.7);lifeTable.add(14.1);lifeTable.add(13.6);lifeTable.add(13.0);lifeTable.add(12.5);lifeTable.add(11.9);lifeTable.add(11.4);lifeTable.add(10.9);lifeTable.add(10.3);lifeTable.add(9.8);lifeTable.add(9.3);lifeTable.add(8.9);lifeTable.add(8.4);lifeTable.add(8.);lifeTable.add(7.6);lifeTable.add(7.2);lifeTable.add(6.8);lifeTable.add(6.4);lifeTable.add(6.1);lifeTable.add(5.8);lifeTable.add(5.5);lifeTable.add(5.2);lifeTable.add(4.9);lifeTable.add(4.6);lifeTable.add(4.3);lifeTable.add(4.1);lifeTable.add(3.9);lifeTable.add(3.7);lifeTable.add(3.5);lifeTable.add(3.3);lifeTable.add(3.1);lifeTable.add(3.0);lifeTable.add(2.8);lifeTable.add(2.7);lifeTable.add(2.5);} else if (lifeTableName.equals("non Hisp black fem")) {lifeTable.add(76.9);lifeTable.add(76.8);lifeTable.add(75.9);lifeTable.add(74.9);lifeTable.add(73.9);lifeTable.add(2.9);lifeTable.add(71.9);lifeTable.add(71.0);lifeTable.add(70.0);lifeTable.add(69.0);lifeTable.add(68.0);lifeTable.add(67.0);lifeTable.add(66.0);lifeTable.add(65.0);lifeTable.add(64.0);lifeTable.add(63.0);lifeTable.add(62.1);lifeTable.add(62.1);lifeTable.add(61.1);lifeTable.add(60.1);lifeTable.add(59.1);lifeTable.add(58.2);lifeTable.add(57.2);lifeTable.add(56.2);lifeTable.add(55.3);lifeTable.add(54.3);lifeTable.add(53.3);lifeTable.add(52.4);lifeTable.add(51.4);lifeTable.add(50.5);lifeTable.add(49.5);lifeTable.add(48.6);lifeTable.add(47.6);lifeTable.add(45.7);lifeTable.add(44.8);lifeTable.add(43.8);lifeTable.add(42.9);lifeTable.add(42.0);lifeTable.add(41.0);lifeTable.add(40.1);lifeTable.add(39.2);lifeTable.add(38.3);lifeTable.add(37.4);lifeTable.add(36.5);lifeTable.add(35.6);lifeTable.add(34.7);lifeTable.add(33.9);lifeTable.add(33.0);lifeTable.add(32.1);lifeTable.add(31.3);lifeTable.add(30.4);lifeTable.add(29.6);lifeTable.add(28.8);lifeTable.add(27.1);lifeTable.add(26.3);lifeTable.add(25.5);lifeTable.add(24.8);lifeTable.add(24.0);lifeTable.add(23.2);lifeTable.add(22.4);lifeTable.add(21.7);lifeTable.add(20.9);lifeTable.add(20.2);lifeTable.add(19.5);lifeTable.add(18.8);lifeTable.add(18.1);lifeTable.add(17.4);lifeTable.add(16.7);lifeTable.add(16.0);lifeTable.add(15.4);lifeTable.add(14.7);lifeTable.add(14.1);lifeTable.add(13.4);lifeTable.add(12.8);lifeTable.add(12.2);lifeTable.add(11.6);lifeTable.add(11.0);lifeTable.add(10.5);lifeTable.add(9.9);lifeTable.add(9.4);lifeTable.add(8.9);lifeTable.add(8.4);lifeTable.add(7.9);lifeTable.add(7.4);lifeTable.add(7.0);lifeTable.add(6.6);lifeTable.add(6.2);lifeTable.add(5.8);lifeTable.add(5.5);lifeTable.add(5.2);lifeTable.add(4.8);lifeTable.add(4.5);lifeTable.add(4.3);lifeTable.add(4.0);lifeTable.add(3.8);lifeTable.add(3.5);lifeTable.add(3.3);lifeTable.add(3.1);lifeTable.add(3.0);lifeTable.add(2.8);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears all races, both sexes")) {lifeTable.add(78.1);lifeTable.add(77.9);lifeTable.add(77.7);lifeTable.add(77.4);lifeTable.add(77.5);lifeTable.add(77.1);lifeTable.add(76.9);lifeTable.add(76.9);lifeTable.add(76.8);lifeTable.add(76.7);lifeTable.add(76.7);lifeTable.add(76.5);lifeTable.add(76.1);lifeTable.add(75.8);lifeTable.add(75.7);lifeTable.add(75.5);lifeTable.add(75.8);lifeTable.add(75.5);lifeTable.add(75.4);lifeTable.add(75.1);lifeTable.add(74.9);lifeTable.add(74.9);lifeTable.add(74.7);lifeTable.add(74.7);lifeTable.add(74.7);lifeTable.add(74.6);lifeTable.add(74.5);lifeTable.add(74.1);lifeTable.add(73.7);lifeTable.add(73.9);lifeTable.add(73.5);lifeTable.add(73.3);lifeTable.add(72.9);lifeTable.add(72.6);lifeTable.add(72.0);lifeTable.add(71.4);lifeTable.add(71.2);lifeTable.add(71.1);lifeTable.add(70.8);lifeTable.add(70.5);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears all races, males")) {lifeTable.add(75.6);lifeTable.add(75.4);lifeTable.add(75.1);lifeTable.add(74.9);lifeTable.add(74.9);lifeTable.add(74.5);lifeTable.add(74.3);lifeTable.add(74.2);lifeTable.add(74.1);lifeTable.add(73.9);lifeTable.add(73.8);lifeTable.add(73.6);lifeTable.add(73.1);lifeTable.add(72.5);lifeTable.add(72.4);lifeTable.add(72.2);lifeTable.add(72.3);lifeTable.add(72.0);lifeTable.add(71.8);lifeTable.add(71.7);lifeTable.add(71.4);lifeTable.add(71.4);lifeTable.add(71.2);lifeTable.add(71.1);lifeTable.add(71.1);lifeTable.add(71.0);lifeTable.add(70.8);lifeTable.add(70.4);lifeTable.add(70.0);lifeTable.add(70.0);lifeTable.add(69.6);lifeTable.add(69.5);lifeTable.add(69.1);lifeTable.add(68.8);lifeTable.add(68.2);lifeTable.add(67.6);lifeTable.add(67.4);lifeTable.add(67.4);lifeTable.add(67.1);lifeTable.add(66.8);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears all races, females")) {lifeTable.add(80.6);lifeTable.add(80.4);lifeTable.add(80.2);lifeTable.add(79.9);lifeTable.add(79.9);lifeTable.add(79.6);lifeTable.add(79.5);lifeTable.add(79.4);lifeTable.add(79.3);lifeTable.add(79.4);lifeTable.add(79.5);lifeTable.add(79.4);lifeTable.add(79.1);lifeTable.add(78.9);lifeTable.add(79.0);lifeTable.add(78.8);lifeTable.add(79.1);lifeTable.add(78.9);lifeTable.add(78.8);lifeTable.add(78.5);lifeTable.add(78.3);lifeTable.add(78.3);lifeTable.add(78.2);lifeTable.add(78.2);lifeTable.add(78.2);lifeTable.add(78.1);lifeTable.add(78.1);lifeTable.add(77.8);lifeTable.add(77.4);lifeTable.add(77.8);lifeTable.add(77.3);lifeTable.add(77.2);lifeTable.add(76.8);lifeTable.add(76.6);lifeTable.add(75.9);lifeTable.add(75.3);lifeTable.add(75.1);lifeTable.add(75.0);lifeTable.add(74.7);lifeTable.add(74.4);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears white males")) {lifeTable.add(76.1);lifeTable.add(75.9);lifeTable.add(75.7);lifeTable.add(75.4);lifeTable.add(75.4);lifeTable.add(75.0);lifeTable.add(74.9);lifeTable.add(74.8);lifeTable.add(74.7);lifeTable.add(74.6);lifeTable.add(74.5);lifeTable.add(74.3);lifeTable.add(73.9);lifeTable.add(73.4);lifeTable.add(73.3);lifeTable.add(73.1);lifeTable.add(73.2);lifeTable.add(72.9);lifeTable.add(72.7);lifeTable.add(72.5);lifeTable.add(72.2);lifeTable.add(72.1);lifeTable.add(71.9);lifeTable.add(71.8);lifeTable.add(71.8);lifeTable.add(71.6);lifeTable.add(71.5);lifeTable.add(71.1);lifeTable.add(70.7);lifeTable.add(70.8);lifeTable.add(70.4);lifeTable.add(70.2);lifeTable.add(69.9);lifeTable.add(69.5);lifeTable.add(69.0);lifeTable.add(68.5);lifeTable.add(68.3);lifeTable.add(68.3);lifeTable.add(68.0);lifeTable.add(67.7);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears white females")) {lifeTable.add(80.9);lifeTable.add(80.8);lifeTable.add(80.6);lifeTable.add(80.4);lifeTable.add(80.4);lifeTable.add(80.0);lifeTable.add(79.9);lifeTable.add(79.9);lifeTable.add(79.9);lifeTable.add(79.9);lifeTable.add(80.0);lifeTable.add(79.9);lifeTable.add(79.7);lifeTable.add(79.6);lifeTable.add(79.6);lifeTable.add(79.5);lifeTable.add(79.8);lifeTable.add(79.6);lifeTable.add(79.4);lifeTable.add(79.2);lifeTable.add(78.9);lifeTable.add(78.9);lifeTable.add(78.8);lifeTable.add(78.7);lifeTable.add(78.7);lifeTable.add(78.7);lifeTable.add(78.7);lifeTable.add(78.4);lifeTable.add(78.1);lifeTable.add(78.4);lifeTable.add(78.0);lifeTable.add(77.9);lifeTable.add(77.5);lifeTable.add(77.3);lifeTable.add(76.7);lifeTable.add(76.1);lifeTable.add(75.9);lifeTable.add(75.8);lifeTable.add(75.6);lifeTable.add(75.3);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears black males")) {lifeTable.add(70.6);lifeTable.add(70.0);lifeTable.add(69.7);lifeTable.add(69.3);lifeTable.add(69.3);lifeTable.add(68.8);lifeTable.add(68.6);lifeTable.add(68.4);lifeTable.add(68.2);lifeTable.add(67.8);lifeTable.add(67.6);lifeTable.add(67.2);lifeTable.add(66.1);lifeTable.add(65.2);lifeTable.add(64.9);lifeTable.add(64.6);lifeTable.add(65.0);lifeTable.add(64.6);lifeTable.add(64.5);lifeTable.add(64.3);lifeTable.add(64.4);lifeTable.add(64.7);lifeTable.add(64.8);lifeTable.add(65.0);lifeTable.add(65.3);lifeTable.add(65.2);lifeTable.add(65.1);lifeTable.add(64.5);lifeTable.add(63.8);lifeTable.add(64.0);lifeTable.add(63.7);lifeTable.add(63.4);lifeTable.add(62.9);lifeTable.add(62.4);lifeTable.add(61.7);lifeTable.add(60.9);lifeTable.add(60.4);lifeTable.add(60.5);lifeTable.add(60.0);lifeTable.add(60.6);} else if (lifeTableName.equals("lifeExpectancyAtBirthOverLastFortyYears black females")) {lifeTable.add(77.2);lifeTable.add(76.8);lifeTable.add(76.5);lifeTable.add(76.1);lifeTable.add(76.0);lifeTable.add(75.6);lifeTable.add(75.4);lifeTable.add(75.2);lifeTable.add(75.1);lifeTable.add(74.7);lifeTable.add(74.8);lifeTable.add(74.7);lifeTable.add(74.2);lifeTable.add(73.9);lifeTable.add(73.9);lifeTable.add(73.7);lifeTable.add(73.9);lifeTable.add(73.8);lifeTable.add(73.6);lifeTable.add(73.3);lifeTable.add(73.2);lifeTable.add(73.4);lifeTable.add(73.4);lifeTable.add(73.4);lifeTable.add(73.6);lifeTable.add(73.5);lifeTable.add(73.6);lifeTable.add(73.2);lifeTable.add(72.5);lifeTable.add(72.9);lifeTable.add(72.4);lifeTable.add(72.0);lifeTable.add(71.6);lifeTable.add(71.3);lifeTable.add(70.3);lifeTable.add(69.3);lifeTable.add(69.1);lifeTable.add(68.9);lifeTable.add(68.3);lifeTable.add(68.6);}if (lifeTableName.contains("AtBirthOverLastFortyYears")) {int indice = lifeTable.size() - 1;while (indice != -1) {reverseOrderedPGraphPointsY.add(lifeTable.elementAt(indice));indice--;}return reverseOrderedPGraphPointsY;} else {return lifeTable;}}static public double mortalityRateForCauseOfDeathInAgeGroup(String causeOfDeath, String ageGroup) {double rate = 0.0;double allCauses = 0.0;if (ageGroup.equals("all ages")) {allCauses = 806.5;if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 191.4;} else if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 184.6;} else if (causeOfDeath.equals("Chronic lower respiratory diseases (J40-J47)")) {rate = 46.6;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 41.4;} else if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 60.5;} else if (causeOfDeath.equals("Alzheimer's disease (G30)")) {rate = 27.2;} else if (causeOfDeath.equals("Diabetes mellitus (E10-E14)")) {rate = 23.5;} else if (causeOfDeath.equals("Influenza and pneumonia (J09-J18)")) {rate = 17.2;} else if (causeOfDeath.equals("Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)")) {rate = 14.7;} else if (causeOfDeath.equals("Intentional self-harm (suicide) (*U03,X60-X84,Y87.0)")) {rate = 12.3;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 208.8;}} else if (ageGroup.equals("0")) {allCauses = 604.7;if (causeOfDeath.equals("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)")) {rate = 126.1;} else if (causeOfDeath.equals("Disorders related to short gestation and low birth weight, not elsewhere classified (P07)")) {rate = 104.1;} else if (causeOfDeath.equals("Sudden infant death syndrome (R95)")) {rate = 43.3;} else if (causeOfDeath.equals("Newborn affected by maternal complications of pregnancy (P01)")) {rate = 39.9;} else if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59)")) {rate = 27.5;} else if (causeOfDeath.equals("Newborn affected by complications of placenta, cord and membranes (P02)")) {rate = 25.1;} else if (causeOfDeath.equals("Bacterial sepsis of newborn (P36)")) {rate = 13.3;} else if (causeOfDeath.equals("Respiratory distress of newborn (P22)")) {rate = 13.0;} else if (causeOfDeath.equals("Diseases of the circulatory system (I00-I99)")) {rate = 12.5;} else if (causeOfDeath.equals("Neonatal hemorrhage (P50-P52, P54)")) {rate = 11.2;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 188.6;}} else if (ageGroup.equals("1 to 4")) {allCauses = 26.1;if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 8.3;} else if (causeOfDeath.equals("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)")) {rate = 3.0;} else if (causeOfDeath.equals("Assault (homocide) (U01-U02,X85-Y09,Y87.1)")) {rate = 2.3;} else if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 2.2;} else if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 1.0;} else if (causeOfDeath.equals("Influenza and pneumonia (J09-J18)")) {rate = 0.6;} else if (causeOfDeath.equals("Septicemia (A40-A41)")) {rate = 0.4;} else if (causeOfDeath.equals("Chronic lower respiratory diseases (J40-J47)")) {rate = 0.3;} else if (causeOfDeath.equals("In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)")) {rate = 0.3;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 0.3;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 7.5;}} else if (ageGroup.equals("5 to 14")) {allCauses = 13.1;if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 7.8;} else if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 2.1;} else if (causeOfDeath.equals("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)")) {rate = 0.9;} else if (causeOfDeath.equals("Intentional self harm (suicide) (U03,X60-X84,Y87.0)")) {rate = 0.7;} else if (causeOfDeath.equals("Assault (homocide) (U01-U02,X85-Y09,Y87.1)")) {rate = 0.7;} else if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 0.5;} else if (causeOfDeath.equals("Chronic lower respiratory diseases (J40-J47)")) {rate = 0.3;} else if (causeOfDeath.equals("Influenza and pneumonia (J09-J18)")) {rate = 0.3;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 0.2;} else if (causeOfDeath.equals("In situ neoplasms, benign neoplasms, and neoplasms of uncertain or unknown behavior (D00-D48)")) {rate = 0.2;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 7.5;}} else if (ageGroup.equals("15 to 24")) {allCauses = 67.6;if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 27.5;} else if (causeOfDeath.equals("Intentional self harm (suicide) (U03,X60-X84,Y87.0)")) {rate = 10.7;} else if (causeOfDeath.equals("Assault (homocide) (U01-U02,X85-Y09,Y87.1)")) {rate = 10.3;} else if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 3.7;} else if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 2.2;} else if (causeOfDeath.equals("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)")) {rate = 1.0;} else if (causeOfDeath.equals("Influenza and pneumonia (J09-J18)")) {rate = 0.5;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 0.4;} else if (causeOfDeath.equals("Pregnancy, child birth, and the puerperium (O00-O99)")) {rate = 0.4;} else if (causeOfDeath.equals("Chronic lower respiratory diseases (J40-J47")) {rate = 0.4;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 10.7;}} else if (ageGroup.equals("25 to 44")) {allCauses = 137.5;if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 35.7;} else if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 18.5;} else if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 16.4;} else if (causeOfDeath.equals("Intentional self harm (suicide) (I00-I09,I11,I13,I20-I51)")) {rate = 14.9;} else if (causeOfDeath.equals("Assault (homocide) (U01-U02,X85-Y09,Y87.1)")) {rate = 8.1;} else if (causeOfDeath.equals("Chronic liver disease and cirrhosis (K70,K73-K74)")) {rate = 3.5;} else if (causeOfDeath.equals("Diabetes mellitus (E10-E14)")) {rate = 3.0;} else if (causeOfDeath.equals("Human immunodeficiency virus (HIV) disease (B20-B24)")) {rate = 2.7;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 2.7;} else if (causeOfDeath.equals("Influenza and pneumonia (J09-J18)")) {rate = 1.6;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 30.4;}} else if (ageGroup.equals("45 to 64")) {allCauses = 610.9;if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 194.6;} else if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 126.9;} else if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 30.1;} else if (causeOfDeath.equals("Chronic lower respiratory diseases (J40-J47)")) {rate = 23.7;} else if (causeOfDeath.equals("Chronic liver disease and cirrhosis (K70,K73-K74)")) {rate = 23.6;} else if (causeOfDeath.equals("Diabetes mellitus (E10-E14)")) {rate = 22.4;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 20.4;} else if (causeOfDeath.equals("Intentional self harm (suicide) (U03,X60-X84,Y87.0)")) {rate = 17.9;} else if (causeOfDeath.equals("Septicemia (A40-A41)")) {rate = 8.9;} else if (causeOfDeath.equals("Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)")) {rate = 8.2;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 122.6;}} else if (ageGroup.equals("65 years and older")) {allCauses = 4422.3;if (causeOfDeath.equals("Diseases of heart (I00-I09,I11,I13,I20-I51)")) {rate = 1150.5;} else if (causeOfDeath.equals("Malignant neoplasms (C00-C97)")) {rate = 957.0;} else if (causeOfDeath.equals("Chronic lower respiratory diseases (J40-J47)")) {rate = 295.6;} else if (causeOfDeath.equals("Cerebrovascular diseases (I60-I69)")) {rate = 264.3;} else if (causeOfDeath.equals("Alzheimer's disease (G30)")) {rate = 202.3;} else if (causeOfDeath.equals("Diabetes mellitus (E10-E14)")) {rate = 125.8;} else if (causeOfDeath.equals("Influenza and pneumonia (J09-J18)")) {rate = 109.5;} else if (causeOfDeath.equals("Accidents (unintentional injuries) (V01-X59,Y85-Y86)")) {rate = 103.0;} else if (causeOfDeath.equals("Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)")) {rate = 91.6;} else if (causeOfDeath.equals("Septicemia (A40-A41)")) {rate = 64.3;} else if (causeOfDeath.equals("All other causes (residual)")) {rate = 1058.5;}}return rate / allCauses;}static public Vector<Double> deathsByRaceAndSex(String cohort) {Vector<Double> deaths = new Vector<Double>();if (cohort.equals("all races U")) {deaths.add(659.266784667969);deaths.add(45.7860374450684);deaths.add(27.8665752410889);deaths.add(21.6964836120605);deaths.add(17.059720993042);deaths.add(15.3616180419922);deaths.add(13.8098087310791);deaths.add(12.4734210968018);deaths.add(10.9196081161499);deaths.add(9.23056221008301);deaths.add(8.06092929840088);deaths.add(8.58392238616943);deaths.add(12.1592540740967);deaths.add(19.3938732147217);deaths.add(29.0320930480957);deaths.add(39.1577606201172);deaths.add(48.5536193847656);deaths.add(57.5032844543457);deaths.add(65.8668746948242);deaths.add(73.7631912231445);deaths.add(82.1966094970703);deaths.add(90.2833709716797);deaths.add(95.837890625);deaths.add(97.8206024169922);deaths.add(97.1820678710938);deaths.add(95.7529220581055);deaths.add(94.914680480957);deaths.add(94.6274871826172);deaths.add(95.4341201782227);deaths.add(97.2953262329102);deaths.add(99.8520889282227);deaths.add(102.854400634766);deaths.add(106.29907989502);deaths.add(110.638458251953);deaths.add(115.319854736328);deaths.add(120.87801361084);deaths.add(127.695877075195);deaths.add(135.945022583008);deaths.add(146.062072753906);deaths.add(158.259185791016);deaths.add(171.730880737305);deaths.add(186.854309082031);deaths.add(204.855590820312);deaths.add(225.629196166992);deaths.add(248.105560302734);deaths.add(270.817718505859);deaths.add(293.803894042969);deaths.add(318.372528076172);deaths.add(345.434204101562);deaths.add(375.061828613281);deaths.add(407.111389160156);deaths.add(440.148803710938);deaths.add(473.213195800781);deaths.add(505.543762207031);deaths.add(538.027770996094);deaths.add(572.200744628906);deaths.add(609.775817871094);deaths.add(651.281005859375);deaths.add(697.515869140625);deaths.add(748.232299804688);deaths.add(803.508239746094);deaths.add(862.361145019531);deaths.add(923.985168457031);deaths.add(988.364868164062);deaths.add(1057.15246582031);deaths.add(1134.93395996094);deaths.add(1221.54772949219);deaths.add(1312.20568847656);deaths.add(1402.94970703125);deaths.add(1495.6142578125);deaths.add(1590.39208984375);deaths.add(1697.87084960938);deaths.add(1821.33056640625);deaths.add(1952.92785644531);deaths.add(2084.62719726562);deaths.add(2213.62231445312);deaths.add(2342.74365234375);deaths.add(2479.03955078125);deaths.add(2627.88037109375);deaths.add(2780.52954101562);deaths.add(2917.8212890625);deaths.add(3036.83056640625);deaths.add(3153.38232421875);deaths.add(3277.95581054688);deaths.add(3378.49584960938);deaths.add(3456.5380859375);deaths.add(3517.646484375);deaths.add(3539.53149414062);deaths.add(3510.26245117188);deaths.add(3426.04174804688);deaths.add(3285.68237304688);deaths.add(3091.17797851562);deaths.add(2848.02783203125);deaths.add(2565.19116210938);deaths.add(2254.60522460938);deaths.add(1930.24731445312);deaths.add(1606.83898925781);deaths.add(1298.36291503906);deaths.add(1016.64196777344);deaths.add(770.235534667969);deaths.add(1680.46069335938);} else if (cohort.equals("total population")) {deaths.add(659.0);deaths.add(46.0);deaths.add(28.0);deaths.add(22.0);deaths.add(17.0);deaths.add(15.0);deaths.add(14.0);deaths.add(12.0);deaths.add(11.0);deaths.add(9.0);deaths.add(8.0);deaths.add(9.0);deaths.add(12.0);deaths.add(19.0);deaths.add(29.0);deaths.add(39.0);deaths.add(49.0);deaths.add(58.0);deaths.add(66.0);deaths.add(74.0);deaths.add(82.0);deaths.add(90.0);deaths.add(96.0);deaths.add(98.0);deaths.add(97.0);deaths.add(96.0);deaths.add(95.0);deaths.add(95.0);deaths.add(95.0);deaths.add(97.0);deaths.add(100.0);deaths.add(103.0);deaths.add(106.0);deaths.add(111.0);deaths.add(115.0);deaths.add(121.0);deaths.add(128.0);deaths.add(136.0);deaths.add(146.0);deaths.add(158.0);deaths.add(172.0);deaths.add(187.0);deaths.add(205.0);deaths.add(226.0);deaths.add(248.0);deaths.add(271.0);deaths.add(294.0);deaths.add(318.0);deaths.add(345.0);deaths.add(375.0);deaths.add(407.0);deaths.add(440.0);deaths.add(473.0);deaths.add(506.0);deaths.add(538.0);deaths.add(572.0);deaths.add(610.0);deaths.add(651.0);deaths.add(698.0);deaths.add(748.0);deaths.add(804.0);deaths.add(862.0);deaths.add(924.0);deaths.add(988.0);deaths.add(1057.0);deaths.add(1135.0);deaths.add(1222.0);deaths.add(1312.0);deaths.add(1403.0);deaths.add(1496.0);deaths.add(1590.0);deaths.add(1698.0);deaths.add(1821.0);deaths.add(1953.0);deaths.add(2085.0);deaths.add(2214.0);deaths.add(2343.0);deaths.add(2479.0);deaths.add(2628.0);deaths.add(2781.0);deaths.add(2918.0);deaths.add(3037.0);deaths.add(3153.0);deaths.add(3278.0);deaths.add(3378.0);deaths.add(3457.0);deaths.add(3518.0);deaths.add(3540.0);deaths.add(3510.0);deaths.add(3426.0);deaths.add(3286.0);deaths.add(3091.0);deaths.add(2848.0);deaths.add(2565.0);deaths.add(2255.0);deaths.add(1930.0);deaths.add(1607.0);deaths.add(1298.0);deaths.add(1017.0);deaths.add(770.0);deaths.add(1680.0);} else if (cohort.equals("males")) {deaths.add(720.0);deaths.add(50.0);deaths.add(32.0);deaths.add(25.0);deaths.add(19.0);deaths.add(17.0);deaths.add(15.0);deaths.add(14.0);deaths.add(12.0);deaths.add(9.0);deaths.add(7.0);deaths.add(8.0);deaths.add(13.0);deaths.add(24.0);deaths.add(38.0);deaths.add(53.0);deaths.add(67.0);deaths.add(80.0);deaths.add(94.0);deaths.add(107.0);deaths.add(121.0);deaths.add(134.0);deaths.add(142.0);deaths.add(144.0);deaths.add(142.0);deaths.add(137.0);deaths.add(134.0);deaths.add(132.0);deaths.add(132.0);deaths.add(134.0);deaths.add(136.0);deaths.add(139.0);deaths.add(142.0);deaths.add(146.0);deaths.add(150.0);deaths.add(156.0);deaths.add(163.0);deaths.add(171.0);deaths.add(182.0);deaths.add(196.0);deaths.add(211.0);deaths.add(228.0);deaths.add(249.0);deaths.add(274.0);deaths.add(301.0);deaths.add(328.0);deaths.add(356.0);deaths.add(387.0);deaths.add(422.0);deaths.add(461.0);deaths.add(502.0);deaths.add(545.0);deaths.add(587.0);deaths.add(629.0);deaths.add(671.0);deaths.add(715.0);deaths.add(762.0);deaths.add(812.0);deaths.add(863.0);deaths.add(918.0);deaths.add(975.0);deaths.add(1037.0);deaths.add(1102.0);deaths.add(1172.0);deaths.add(1248.0);deaths.add(1334.0);deaths.add(1429.0);deaths.add(1527.0);deaths.add(1624.0);deaths.add(1720.0);deaths.add(1817.0);deaths.add(1924.0);deaths.add(2051.0);deaths.add(2186.0);deaths.add(2319.0);deaths.add(2449.0);deaths.add(2569.0);deaths.add(2695.0);deaths.add(2830.0);deaths.add(2968.0);deaths.add(3079.0);deaths.add(3163.0);deaths.add(3234.0);deaths.add(3299.0);deaths.add(3334.0);deaths.add(3364.0);deaths.add(3346.0);deaths.add(3278.0);deaths.add(3159.0);deaths.add(2990.0);deaths.add(2775.0);deaths.add(2520.0);deaths.add(2237.0);deaths.add(1937.0);deaths.add(1633.0);deaths.add(1338.0);deaths.add(1065.0);deaths.add(821.0);deaths.add(612.0);deaths.add(442.0);deaths.add(844.0);} else if (cohort.equals("females")) {deaths.add(596.0);deaths.add(41.0);deaths.add(24.0);deaths.add(19.0);deaths.add(15.0);deaths.add(14.0);deaths.add(12.0);deaths.add(11.0);deaths.add(10.0);deaths.add(9.0);deaths.add(9.0);deaths.add(9.0);deaths.add(11.0);deaths.add(15.0);deaths.add(20.0);deaths.add(25.0);deaths.add(29.0);deaths.add(33.0);deaths.add(36.0);deaths.add(39.0);deaths.add(41.0);deaths.add(44.0);deaths.add(46.0);deaths.add(48.0);deaths.add(50.0);deaths.add(51.0);deaths.add(53.0);deaths.add(55.0);deaths.add(57.0);deaths.add(59.0);deaths.add(62.0);deaths.add(65.0);deaths.add(69.0);deaths.add(74.0);deaths.add(79.0);deaths.add(85.0);deaths.add(92.0);deaths.add(99.0);deaths.add(109.0);deaths.add(120.0);deaths.add(132.0);deaths.add(145.0);deaths.add(160.0);deaths.add(177.0);deaths.add(195.0);deaths.add(213.0);deaths.add(231.0);deaths.add(249.0);deaths.add(269.0);deaths.add(289.0);deaths.add(312.0);deaths.add(336.0);deaths.add(359.0);deaths.add(383.0);deaths.add(406.0);deaths.add(431.0);deaths.add(459.0);deaths.add(492.0);deaths.add(533.0);deaths.add(580.0);deaths.add(633.0);deaths.add(689.0);deaths.add(747.0);deaths.add(807.0);deaths.add(869.0);deaths.add(940.0);deaths.add(1020.0);deaths.add(1104.0);deaths.add(1190.0);deaths.add(1279.0);deaths.add(1373.0);deaths.add(1482.0);deaths.add(1605.0);deaths.add(1736.0);deaths.add(1869.0);deaths.add(2001.0);deaths.add(2142.0);deaths.add(2292.0);deaths.add(2459.0);deaths.add(2633.0);deaths.add(2801.0);deaths.add(2959.0);deaths.add(3125.0);deaths.add(3309.0);deaths.add(3472.0);deaths.add(3615.0);deaths.add(3752.0);deaths.add(3847.0);deaths.add(3890.0);deaths.add(3872.0);deaths.add(3788.0);deaths.add(3636.0);deaths.add(3418.0);deaths.add(3141.0);deaths.add(2815.0);deaths.add(2457.0);deaths.add(2083.0);deaths.add(1712.0);deaths.add(1362.0);deaths.add(1047.0);deaths.add(2345.0);} else if (cohort.equals("white population")) {deaths.add(553.0);deaths.add(43.0);deaths.add(26.0);deaths.add(20.0);deaths.add(15.0);deaths.add(14.0);deaths.add(13.0);deaths.add(11.0);deaths.add(10.0);deaths.add(9.0);deaths.add(7.0);deaths.add(8.0);deaths.add(11.0);deaths.add(18.0);deaths.add(27.0);deaths.add(37.0);deaths.add(45.0);deaths.add(54.0);deaths.add(62.0);deaths.add(70.0);deaths.add(78.0);deaths.add(85.0);deaths.add(90.0);deaths.add(92.0);deaths.add(91.0);deaths.add(90.0);deaths.add(89.0);deaths.add(89.0);deaths.add(90.0);deaths.add(91.0);deaths.add(94.0);deaths.add(97.0);deaths.add(100.0);deaths.add(104.0);deaths.add(109.0);deaths.add(114.0);deaths.add(121.0);deaths.add(129.0);deaths.add(139.0);deaths.add(150.0);deaths.add(163.0);deaths.add(177.0);deaths.add(194.0);deaths.add(214.0);deaths.add(236.0);deaths.add(258.0);deaths.add(280.0);deaths.add(304.0);deaths.add(329.0);deaths.add(356.0);deaths.add(386.0);deaths.add(416.0);deaths.add(447.0);deaths.add(477.0);deaths.add(508.0);deaths.add(540.0);deaths.add(576.0);deaths.add(617.0);deaths.add(664.0);deaths.add(717.0);deaths.add(774.0);deaths.add(835.0);deaths.add(898.0);deaths.add(962.0);deaths.add(1031.0);deaths.add(1109.0);deaths.add(1197.0);deaths.add(1289.0);deaths.add(1383.0);deaths.add(1479.0);deaths.add(1577.0);deaths.add(1691.0);deaths.add(1821.0);deaths.add(1957.0);deaths.add(2093.0);deaths.add(2225.0);deaths.add(2358.0);deaths.add(2500.0);deaths.add(2654.0);deaths.add(2815.0);deaths.add(2961.0);deaths.add(3086.0);deaths.add(3207.0);deaths.add(3334.0);deaths.add(3441.0);deaths.add(3524.0);deaths.add(3572.0);deaths.add(3603.0);deaths.add(3579.0);deaths.add(3498.0);deaths.add(3357.0);deaths.add(3158.0);deaths.add(2908.0);deaths.add(2615.0);deaths.add(2293.0);deaths.add(1956.0);deaths.add(1621.0);deaths.add(1302.0);deaths.add(1013.0);deaths.add(761.0);deaths.add(1612.0);} else if (cohort.equals("white males")) {deaths.add(604.0);deaths.add(46.0);deaths.add(30.0);deaths.add(23.0);deaths.add(17.0);deaths.add(16.0);deaths.add(14.0);deaths.add(12.0);deaths.add(10.0);deaths.add(8.0);deaths.add(7.0);deaths.add(8.0);deaths.add(12.0);deaths.add(22.0);deaths.add(35.0);deaths.add(49.0);deaths.add(61.0);deaths.add(74.0);deaths.add(87.0);deaths.add(100.0);deaths.add(113.0);deaths.add(126.0);deaths.add(134.0);deaths.add(136.0);deaths.add(133.0);deaths.add(129.0);deaths.add(126.0);deaths.add(124.0);deaths.add(124.0);deaths.add(126.0);deaths.add(128.0);deaths.add(130.0);deaths.add(133.0);deaths.add(137.0);deaths.add(142.0);deaths.add(148.0);deaths.add(155.0);deaths.add(164.0);deaths.add(174.0);deaths.add(187.0);deaths.add(201.0);deaths.add(218.0);deaths.add(238.0);deaths.add(262.0);deaths.add(289.0);deaths.add(316.0);deaths.add(343.0);deaths.add(373.0);deaths.add(405.0);deaths.add(441.0);deaths.add(479.0);deaths.add(518.0);deaths.add(558.0);deaths.add(596.0);deaths.add(634.0);deaths.add(675.0);deaths.add(719.0);deaths.add(767.0);deaths.add(820.0);deaths.add(877.0);deaths.add(938.0);deaths.add(1002.0);deaths.add(1069.0);deaths.add(1139.0);deaths.add(1215.0);deaths.add(1300.0);deaths.add(1395.0);deaths.add(1496.0);deaths.add(1597.0);deaths.add(1698.0);deaths.add(1802.0);deaths.add(1917.0);deaths.add(2053.0);deaths.add(2195.0);deaths.add(2334.0);deaths.add(2465.0);deaths.add(2590.0);deaths.add(2723.0);deaths.add(2864.0);deaths.add(3010.0);deaths.add(3132.0);deaths.add(3223.0);deaths.add(3299.0);deaths.add(3372.0);deaths.add(3416.0);deaths.add(3439.0);deaths.add(3428.0);deaths.add(3364.0);deaths.add(3245.0);deaths.add(3072.0);deaths.add(2851.0);deaths.add(2587.0);deaths.add(2292.0);deaths.add(1980.0);deaths.add(1663.0);deaths.add(1357.0);deaths.add(1074.0);deaths.add(822.0);deaths.add(609.0);deaths.add(435.0);deaths.add(808.0);} else if (cohort.equals("white females")) {deaths.add(500.0);deaths.add(39.0);deaths.add(22.0);deaths.add(16.0);deaths.add(14.0);deaths.add(12.0);deaths.add(11.0);deaths.add(10.0);deaths.add(10.0);deaths.add(9.0);deaths.add(8.0);deaths.add(8.0);deaths.add(10.0);deaths.add(14.0);deaths.add(19.0);deaths.add(24.0);deaths.add(29.0);deaths.add(33.0);deaths.add(36.0);deaths.add(38.0);deaths.add(39.0);deaths.add(42.0);deaths.add(43.0);deaths.add(45.0);deaths.add(46.0);deaths.add(48.0);deaths.add(49.0);deaths.add(51.0);deaths.add(52.0);deaths.add(54.0);deaths.add(57.0);deaths.add(60.0);deaths.add(64.0);deaths.add(69.0);deaths.add(74.0);deaths.add(79.0);deaths.add(85.0);deaths.add(92.0);deaths.add(101.0);deaths.add(111.0);deaths.add(122.0);deaths.add(134.0);deaths.add(148.0);deaths.add(164.0);deaths.add(181.0);deaths.add(198.0);deaths.add(216.0);deaths.add(233.0);deaths.add(251.0);deaths.add(269.0);deaths.add(290.0);deaths.add(312.0);deaths.add(334.0);deaths.add(356.0);deaths.add(379.0);deaths.add(403.0);deaths.add(430.0);deaths.add(464.0);deaths.add(506.0);deaths.add(555.0);deaths.add(609.0);deaths.add(666.0);deaths.add(725.0);deaths.add(784.0);deaths.add(847.0);deaths.add(919.0);deaths.add(1001.0);deaths.add(1087.0);deaths.add(1174.0);deaths.add(1265.0);deaths.add(1361.0);deaths.add(1474.0);deaths.add(1600.0);deaths.add(1734.0);deaths.add(1870.0);deaths.add(2006.0);deaths.add(2150.0);deaths.add(2305.0);deaths.add(2477.0);deaths.add(2661.0);deaths.add(2836.0);deaths.add(3000.0);deaths.add(3171.0);deaths.add(3356.0);deaths.add(3524.0);deaths.add(3676.0);deaths.add(3794.0);deaths.add(3901.0);deaths.add(3952.0);deaths.add(3941.0);deaths.add(3860.0);deaths.add(3707.0);deaths.add(3484.0);deaths.add(3198.0);deaths.add(2861.0);deaths.add(2489.0);deaths.add(2101.0);deaths.add(1718.0);deaths.add(1358.0);deaths.add(1035.0);deaths.add(2250.0);} else if (cohort.equals("black population")) {deaths.add(1272.0);deaths.add(65.0);deaths.add(40.0);deaths.add(33.0);deaths.add(26.0);deaths.add(23.0);deaths.add(20.0);deaths.add(18.0);deaths.add(16.0);deaths.add(13.0);deaths.add(11.0);deaths.add(11.0);deaths.add(16.0);deaths.add(27.0);deaths.add(40.0);deaths.add(54.0);deaths.add(67.0);deaths.add(79.0);deaths.add(90.0);deaths.add(101.0);deaths.add(114.0);deaths.add(126.0);deaths.add(136.0);deaths.add(140.0);deaths.add(140.0);deaths.add(139.0);deaths.add(139.0);deaths.add(140.0);deaths.add(143.0);deaths.add(148.0);deaths.add(155.0);deaths.add(162.0);deaths.add(170.0);deaths.add(175.0);deaths.add(182.0);deaths.add(189.0);deaths.add(198.0);deaths.add(209.0);deaths.add(225.0);deaths.add(244.0);deaths.add(265.0);deaths.add(288.0);deaths.add(314.0);deaths.add(343.0);deaths.add(373.0);deaths.add(404.0);deaths.add(436.0);deaths.add(474.0);deaths.add(519.0);deaths.add(571.0);deaths.add(626.0);deaths.add(682.0);deaths.add(739.0);deaths.add(793.0);deaths.add(846.0);deaths.add(902.0);deaths.add(962.0);deaths.add(1018.0);deaths.add(1071.0);deaths.add(1123.0);deaths.add(1178.0);deaths.add(1240.0);deaths.add(1308.0);deaths.add(1382.0);deaths.add(1459.0);deaths.add(1539.0);deaths.add(1621.0);deaths.add(1697.0);deaths.add(1765.0);deaths.add(1828.0);deaths.add(1882.0);deaths.add(1936.0);deaths.add(2012.0);deaths.add(2101.0);deaths.add(2204.0);deaths.add(2312.0);deaths.add(2400.0);deaths.add(2493.0);deaths.add(2586.0);deaths.add(2642.0);deaths.add(2695.0);deaths.add(2730.0);deaths.add(2760.0);deaths.add(2816.0);deaths.add(2822.0);deaths.add(2813.0);deaths.add(2777.0);deaths.add(2714.0);deaths.add(2623.0);deaths.add(2506.0);deaths.add(2364.0);deaths.add(2200.0);deaths.add(2018.0);deaths.add(1823.0);deaths.add(1619.0);deaths.add(1413.0);deaths.add(1210.0);deaths.add(1017.0);deaths.add(837.0);deaths.add(674.0);deaths.add(1938.0);} else if (cohort.equals("black males")) {deaths.add(1392.0);deaths.add(75.0);deaths.add(46.0);deaths.add(34.0);deaths.add(31.0);deaths.add(27.0);deaths.add(25.0);deaths.add(23.0);deaths.add(19.0);deaths.add(14.0);deaths.add(9.0);deaths.add(9.0);deaths.add(16.0);deaths.add(33.0);deaths.add(55.0);deaths.add(78.0);deaths.add(99.0);deaths.add(118.0);deaths.add(136.0);deaths.add(153.0);deaths.add(172.0);deaths.add(191.0);deaths.add(205.0);deaths.add(210.0);deaths.add(209.0);deaths.add(204.0);deaths.add(202.0);deaths.add(200.0);deaths.add(203.0);deaths.add(209.0);deaths.add(216.0);deaths.add(223.0);deaths.add(233.0);deaths.add(236.0);deaths.add(240.0);deaths.add(245.0);deaths.add(253.0);deaths.add(264.0);deaths.add(279.0);deaths.add(298.0);deaths.add(321.0);deaths.add(345.0);deaths.add(374.0);deaths.add(405.0);deaths.add(439.0);deaths.add(474.0);deaths.add(511.0);deaths.add(557.0);deaths.add(616.0);deaths.add(685.0);deaths.add(759.0);deaths.add(833.0);deaths.add(910.0);deaths.add(987.0);deaths.add(1063.0);deaths.add(1145.0);deaths.add(1230.0);deaths.add(1305.0);deaths.add(1366.0);deaths.add(1417.0);deaths.add(1466.0);deaths.add(1523.0);deaths.add(1591.0);deaths.add(1672.0);deaths.add(1763.0);deaths.add(1860.0);deaths.add(1952.0);deaths.add(2028.0);deaths.add(2084.0);deaths.add(2125.0);deaths.add(2148.0);deaths.add(2175.0);deaths.add(2229.0);deaths.add(2296.0);deaths.add(2386.0);deaths.add(2486.0);deaths.add(2559.0);deaths.add(2628.0);deaths.add(2684.0);deaths.add(2712.0);deaths.add(2720.0);deaths.add(2696.0);deaths.add(2677.0);deaths.add(2636.0);deaths.add(2571.0);deaths.add(2482.0);deaths.add(2371.0);deaths.add(2240.0);deaths.add(2089.0);deaths.add(1924.0);deaths.add(1747.0);deaths.add(1563.0);deaths.add(1376.0);deaths.add(1192.0);deaths.add(1014.0);deaths.add(847.0);deaths.add(694.0);deaths.add(557.0);deaths.add(438.0);deaths.add(337.0);deaths.add(839.0);} else if (cohort.equals("black females")) {deaths.add(1149.0);deaths.add(54.0);deaths.add(35.0);deaths.add(32.0);deaths.add(20.0);deaths.add(19.0);deaths.add(16.0);deaths.add(14.0);deaths.add(12.0);deaths.add(12.0);deaths.add(13.0);deaths.add(14.0);deaths.add(17.0);deaths.add(20.0);deaths.add(25.0);deaths.add(29.0);deaths.add(33.0);deaths.add(38.0);deaths.add(42.0);deaths.add(47.0);deaths.add(53.0);deaths.add(59.0);deaths.add(64.0);deaths.add(68.0);deaths.add(70.0);deaths.add(73.0);deaths.add(76.0);deaths.add(80.0);deaths.add(84.0);deaths.add(89.0);deaths.add(96.0);deaths.add(103.0);deaths.add(112.0);deaths.add(120.0);deaths.add(128.0);deaths.add(136.0);deaths.add(147.0);deaths.add(159.0);deaths.add(175.0);deaths.add(194.0);deaths.add(214.0);deaths.add(236.0);deaths.add(260.0);deaths.add(286.0);deaths.add(314.0);deaths.add(341.0);deaths.add(369.0);deaths.add(399.0);deaths.add(432.0);deaths.add(468.0);deaths.add(507.0);deaths.add(547.0);deaths.add(585.0);deaths.add(620.0);deaths.add(653.0);deaths.add(686.0);deaths.add(723.0);deaths.add(764.0);deaths.add(810.0);deaths.add(862.0);deaths.add(922.0);deaths.add(988.0);deaths.add(1057.0);deaths.add(1125.0);deaths.add(1190.0);deaths.add(1259.0);deaths.add(1333.0);deaths.add(1407.0);deaths.add(1484.0);deaths.add(1565.0);deaths.add(1643.0);deaths.add(1720.0);deaths.add(1814.0);deaths.add(1925.0);deaths.add(2043.0);deaths.add(2163.0);deaths.add(2269.0);deaths.add(2388.0);deaths.add(2517.0);deaths.add(2601.0);deaths.add(2698.0);deaths.add(2798.0);deaths.add(2882.0);deaths.add(3015.0);deaths.add(3097.0);deaths.add(3149.0);deaths.add(3167.0);deaths.add(3154.0);deaths.add(3107.0);deaths.add(3025.0);deaths.add(2908.0);deaths.add(2758.0);deaths.add(2576.0);deaths.add(2369.0);deaths.add(2142.0);deaths.add(1901.0);deaths.add(1655.0);deaths.add(1412.0);deaths.add(1178.0);deaths.add(961.0);deaths.add(2832.0);} else if (cohort.equals("Hispanic population")) {deaths.add(558.0);deaths.add(40.0);deaths.add(24.0);deaths.add(18.0);deaths.add(15.0);deaths.add(13.0);deaths.add(12.0);deaths.add(11.0);deaths.add(9.0);deaths.add(8.0);deaths.add(7.0);deaths.add(8.0);deaths.add(11.0);deaths.add(17.0);deaths.add(25.0);deaths.add(34.0);deaths.add(43.0);deaths.add(51.0);deaths.add(59.0);deaths.add(66.0);deaths.add(74.0);deaths.add(81.0);deaths.add(86.0);deaths.add(86.0);deaths.add(84.0);deaths.add(81.0);deaths.add(79.0);deaths.add(77.0);deaths.add(76.0);deaths.add(76.0);deaths.add(76.0);deaths.add(76.0);deaths.add(76.0);deaths.add(80.0);deaths.add(84.0);deaths.add(90.0);deaths.add(95.0);deaths.add(103.0);deaths.add(111.0);deaths.add(121.0);deaths.add(133.0);deaths.add(145.0);deaths.add(158.0);deaths.add(172.0);deaths.add(186.0);deaths.add(201.0);deaths.add(218.0);deaths.add(235.0);deaths.add(255.0);deaths.add(278.0);deaths.add(302.0);deaths.add(328.0);deaths.add(356.0);deaths.add(386.0);deaths.add(416.0);deaths.add(449.0);deaths.add(485.0);deaths.add(521.0);deaths.add(557.0);deaths.add(593.0);deaths.add(630.0);deaths.add(672.0);deaths.add(720.0);deaths.add(777.0);deaths.add(844.0);deaths.add(919.0);deaths.add(1000.0);deaths.add(1085.0);deaths.add(1169.0);deaths.add(1251.0);deaths.add(1331.0);deaths.add(1416.0);deaths.add(1511.0);deaths.add(1622.0);deaths.add(1746.0);deaths.add(1870.0);deaths.add(1993.0);deaths.add(2126.0);deaths.add(2275.0);deaths.add(2441.0);deaths.add(2608.0);deaths.add(2772.0);deaths.add(2919.0);deaths.add(3082.0);deaths.add(3235.0);deaths.add(3378.0);deaths.add(3496.0);deaths.add(3611.0);deaths.add(3685.0);deaths.add(3711.0);deaths.add(3683.0);deaths.add(3597.0);deaths.add(3451.0);deaths.add(3249.0);deaths.add(2996.0);deaths.add(2701.0);deaths.add(2378.0);deaths.add(2040.0);deaths.add(1703.0);deaths.add(1382.0);deaths.add(3812.0);} else if (cohort.equals("Hispanic males")) {deaths.add(606.0);deaths.add(44.0);deaths.add(28.0);deaths.add(19.0);deaths.add(17.0);deaths.add(15.0);deaths.add(13.0);deaths.add(11.0);deaths.add(9.0);deaths.add(7.0);deaths.add(5.0);deaths.add(6.0);deaths.add(10.0);deaths.add(19.0);deaths.add(33.0);deaths.add(47.0);deaths.add(61.0);deaths.add(75.0);deaths.add(88.0);deaths.add(101.0);deaths.add(114.0);deaths.add(126.0);deaths.add(133.0);deaths.add(132.0);deaths.add(127.0);deaths.add(120.0);deaths.add(114.0);deaths.add(110.0);deaths.add(108.0);deaths.add(107.0);deaths.add(107.0);deaths.add(107.0);deaths.add(105.0);deaths.add(110.0);deaths.add(114.0);deaths.add(119.0);deaths.add(125.0);deaths.add(133.0);deaths.add(144.0);deaths.add(157.0);deaths.add(171.0);deaths.add(187.0);deaths.add(203.0);deaths.add(218.0);deaths.add(234.0);deaths.add(250.0);deaths.add(268.0);deaths.add(289.0);deaths.add(313.0);deaths.add(340.0);deaths.add(371.0);deaths.add(403.0);deaths.add(439.0);deaths.add(479.0);deaths.add(522.0);deaths.add(569.0);deaths.add(620.0);deaths.add(669.0);deaths.add(712.0);deaths.add(751.0);deaths.add(790.0);deaths.add(834.0);deaths.add(887.0);deaths.add(953.0);deaths.add(1031.0);deaths.add(1120.0);deaths.add(1213.0);deaths.add(1310.0);deaths.add(1403.0);deaths.add(1492.0);deaths.add(1578.0);deaths.add(1666.0);deaths.add(1760.0);deaths.add(1864.0);deaths.add(1978.0);deaths.add(2087.0);deaths.add(2199.0);deaths.add(2328.0);deaths.add(2480.0);deaths.add(2653.0);deaths.add(2826.0);deaths.add(2990.0);deaths.add(3109.0);deaths.add(3234.0);deaths.add(3342.0);deaths.add(3440.0);deaths.add(3513.0);deaths.add(3543.0);deaths.add(3523.0);deaths.add(3452.0);deaths.add(3327.0);deaths.add(3148.0);deaths.add(2922.0);deaths.add(2656.0);deaths.add(2360.0);deaths.add(2047.0);deaths.add(1730.0);deaths.add(1424.0);deaths.add(1138.0);deaths.add(884.0);deaths.add(2132.0);} else if (cohort.equals("Hispanic females")) {deaths.add(507.0);deaths.add(37.0);deaths.add(19.0);deaths.add(16.0);deaths.add(14.0);deaths.add(12.0);deaths.add(11.0);deaths.add(10.0);deaths.add(9.0);deaths.add(9.0);deaths.add(10.0);deaths.add(10.0);deaths.add(12.0);deaths.add(14.0);deaths.add(17.0);deaths.add(20.0);deaths.add(24.0);deaths.add(26.0);deaths.add(28.0);deaths.add(29.0);deaths.add(30.0);deaths.add(32.0);deaths.add(33.0);deaths.add(34.0);deaths.add(35.0);deaths.add(35.0);deaths.add(36.0);deaths.add(37.0);deaths.add(37.0);deaths.add(37.0);deaths.add(37.0);deaths.add(38.0);deaths.add(39.0);deaths.add(43.0);deaths.add(48.0);deaths.add(54.0);deaths.add(60.0);deaths.add(67.0);deaths.add(73.0);deaths.add(80.0);deaths.add(88.0);deaths.add(97.0);deaths.add(107.0);deaths.add(119.0);deaths.add(132.0);deaths.add(147.0);deaths.add(161.0);deaths.add(177.0);deaths.add(193.0);deaths.add(211.0);deaths.add(230.0);deaths.add(251.0);deaths.add(271.0);deaths.add(291.0);deaths.add(309.0);deaths.add(328.0);deaths.add(350.0);deaths.add(375.0);deaths.add(404.0);deaths.add(438.0);deaths.add(475.0);deaths.add(516.0);deaths.add(561.0);deaths.add(612.0);deaths.add(668.0);deaths.add(733.0);deaths.add(805.0);deaths.add(881.0);deaths.add(958.0);deaths.add(1035.0);deaths.add(1113.0);deaths.add(1197.0);deaths.add(1296.0);deaths.add(1415.0);deaths.add(1552.0);deaths.add(1693.0);deaths.add(1829.0);deaths.add(1970.0);deaths.add(2125.0);deaths.add(2296.0);deaths.add(2472.0);deaths.add(2653.0);deaths.add(2839.0);deaths.add(3048.0);deaths.add(3252.0);deaths.add(3452.0);deaths.add(3633.0);deaths.add(3818.0);deaths.add(3965.0);deaths.add(4063.0);deaths.add(4103.0);deaths.add(4075.0);deaths.add(3975.0);deaths.add(3800.0);deaths.add(3555.0);deaths.add(3248.0);deaths.add(2893.0);deaths.add(2506.0);deaths.add(2108.0);deaths.add(1719.0);deaths.add(4689.0);} else if (cohort.equals("non-Hispanic white population")) {deaths.add(550.0);deaths.add(42.0);deaths.add(26.0);deaths.add(20.0);deaths.add(15.0);deaths.add(14.0);deaths.add(13.0);deaths.add(12.0);deaths.add(10.0);deaths.add(8.0);deaths.add(7.0);deaths.add(8.0);deaths.add(11.0);deaths.add(18.0);deaths.add(27.0);deaths.add(37.0);deaths.add(45.0);deaths.add(54.0);deaths.add(62.0);deaths.add(69.0);deaths.add(77.0);deaths.add(84.0);deaths.add(90.0);deaths.add(92.0);deaths.add(92.0);deaths.add(91.0);deaths.add(91.0);deaths.add(92.0);deaths.add(93.0);deaths.add(95.0);deaths.add(99.0);deaths.add(103.0);deaths.add(107.0);deaths.add(111.0);deaths.add(116.0);deaths.add(121.0);deaths.add(128.0);deaths.add(135.0);deaths.add(145.0);deaths.add(156.0);deaths.add(169.0);deaths.add(183.0);deaths.add(200.0);deaths.add(221.0);deaths.add(244.0);deaths.add(266.0);deaths.add(289.0);deaths.add(312.0);deaths.add(337.0);deaths.add(364.0);deaths.add(394.0);deaths.add(425.0);deaths.add(455.0);deaths.add(484.0);deaths.add(514.0);deaths.add(544.0);deaths.add(579.0);deaths.add(619.0);deaths.add(667.0);deaths.add(720.0);deaths.add(779.0);deaths.add(840.0);deaths.add(904.0);deaths.add(969.0);deaths.add(1039.0);deaths.add(1118.0);deaths.add(1207.0);deaths.add(1300.0);deaths.add(1394.0);deaths.add(1489.0);deaths.add(1588.0);deaths.add(1702.0);deaths.add(1832.0);deaths.add(1969.0);deaths.add(2104.0);deaths.add(2234.0);deaths.add(2365.0);deaths.add(2506.0);deaths.add(2658.0);deaths.add(2818.0);deaths.add(2961.0);deaths.add(3082.0);deaths.add(3200.0);deaths.add(3325.0);deaths.add(3430.0);deaths.add(3511.0);deaths.add(3555.0);deaths.add(3582.0);deaths.add(3555.0);deaths.add(3472.0);deaths.add(3329.0);deaths.add(3130.0);deaths.add(2880.0);deaths.add(2588.0);deaths.add(2268.0);deaths.add(1934.0);deaths.add(1602.0);deaths.add(1286.0);deaths.add(1000.0);deaths.add(752.0);deaths.add(1592.0);} else if (cohort.equals("non-Hispanic white males")) {deaths.add(600.0);deaths.add(45.0);deaths.add(29.0);deaths.add(24.0);deaths.add(16.0);deaths.add(16.0);deaths.add(14.0);deaths.add(13.0);deaths.add(11.0);deaths.add(8.0);deaths.add(7.0);deaths.add(8.0);deaths.add(13.0);deaths.add(22.0);deaths.add(35.0);deaths.add(48.0);deaths.add(60.0);deaths.add(72.0);deaths.add(85.0);deaths.add(98.0);deaths.add(111.0);deaths.add(123.0);deaths.add(132.0);deaths.add(134.0);deaths.add(133.0);deaths.add(130.0);deaths.add(129.0);deaths.add(128.0);deaths.add(128.0);deaths.add(131.0);deaths.add(134.0);deaths.add(138.0);deaths.add(142.0);deaths.add(146.0);deaths.add(150.0);deaths.add(156.0);deaths.add(163.0);deaths.add(171.0);deaths.add(181.0);deaths.add(194.0);deaths.add(207.0);deaths.add(223.0);deaths.add(244.0);deaths.add(269.0);deaths.add(297.0);deaths.add(325.0);deaths.add(352.0);deaths.add(382.0);deaths.add(414.0);deaths.add(450.0);deaths.add(489.0);deaths.add(528.0);deaths.add(566.0);deaths.add(603.0);deaths.add(640.0);deaths.add(678.0);deaths.add(720.0);deaths.add(767.0);deaths.add(820.0);deaths.add(877.0);deaths.add(939.0);deaths.add(1004.0);deaths.add(1071.0);deaths.add(1142.0);deaths.add(1219.0);deaths.add(1307.0);deaths.add(1404.0);deaths.add(1505.0);deaths.add(1607.0);deaths.add(1708.0);deaths.add(1812.0);deaths.add(1928.0);deaths.add(2064.0);deaths.add(2206.0);deaths.add(2345.0);deaths.add(2474.0);deaths.add(2597.0);deaths.add(2728.0);deaths.add(2868.0);deaths.add(3012.0);deaths.add(3131.0);deaths.add(3220.0);deaths.add(3292.0);deaths.add(3363.0);deaths.add(3405.0);deaths.add(3426.0);deaths.add(3411.0);deaths.add(3343.0);deaths.add(3221.0);deaths.add(3046.0);deaths.add(2823.0);deaths.add(2559.0);deaths.add(2265.0);deaths.add(1955.0);deaths.add(1641.0);deaths.add(1338.0);deaths.add(1058.0);deaths.add(810.0);deaths.add(599.0);deaths.add(428.0);deaths.add(796.0);} else if (cohort.equals("non-Hispanic white females")) {deaths.add(498.0);deaths.add(39.0);deaths.add(22.0);deaths.add(16.0);deaths.add(14.0);deaths.add(12.0);deaths.add(11.0);deaths.add(10.0);deaths.add(9.0);deaths.add(8.0);deaths.add(8.0);deaths.add(8.0);deaths.add(10.0);deaths.add(14.0);deaths.add(19.0);deaths.add(25.0);deaths.add(30.0);deaths.add(34.0);deaths.add(37.0);deaths.add(39.0);deaths.add(41.0);deaths.add(43.0);deaths.add(45.0);deaths.add(47.0);deaths.add(48.0);deaths.add(50.0);deaths.add(52.0);deaths.add(54.0);deaths.add(56.0);deaths.add(59.0);deaths.add(63.0);deaths.add(67.0);deaths.add(71.0);deaths.add(76.0);deaths.add(80.0);deaths.add(85.0);deaths.add(91.0);deaths.add(99.0);deaths.add(107.0);deaths.add(118.0);deaths.add(129.0);deaths.add(142.0);deaths.add(156.0);deaths.add(172.0);deaths.add(190.0);deaths.add(207.0);deaths.add(224.0);deaths.add(241.0);deaths.add(258.0);deaths.add(277.0);deaths.add(298.0);deaths.add(320.0);deaths.add(341.0);deaths.add(363.0);deaths.add(385.0);deaths.add(408.0);deaths.add(435.0);deaths.add(469.0);deaths.add(511.0);deaths.add(561.0);deaths.add(616.0);deaths.add(675.0);deaths.add(734.0);deaths.add(794.0);deaths.add(857.0);deaths.add(929.0);deaths.add(1011.0);deaths.add(1098.0);deaths.add(1185.0);deaths.add(1275.0);deaths.add(1371.0);deaths.add(1484.0);deaths.add(1611.0);deaths.add(1745.0);deaths.add(1879.0);deaths.add(2013.0);deaths.add(2156.0);deaths.add(2310.0);deaths.add(2481.0);deaths.add(2663.0);deaths.add(2836.0);deaths.add(2996.0);deaths.add(3165.0);deaths.add(3347.0);deaths.add(3513.0);deaths.add(3661.0);deaths.add(3775.0);deaths.add(3878.0);deaths.add(3927.0);deaths.add(3913.0);deaths.add(3831.0);deaths.add(3677.0);deaths.add(3454.0);deaths.add(3169.0);deaths.add(2833.0);deaths.add(2464.0);deaths.add(2079.0);deaths.add(1699.0);deaths.add(1343.0);deaths.add(1024.0);deaths.add(2226.0);} else if (cohort.equals("non-Hispanic black population")) {deaths.add(1266.0);deaths.add(71.0);deaths.add(44.0);deaths.add(36.0);deaths.add(27.0);deaths.add(24.0);deaths.add(21.0);deaths.add(19.0);deaths.add(17.0);deaths.add(14.0);deaths.add(12.0);deaths.add(13.0);deaths.add(18.0);deaths.add(28.0);deaths.add(42.0);deaths.add(56.0);deaths.add(69.0);deaths.add(81.0);deaths.add(93.0);deaths.add(104.0);deaths.add(117.0);deaths.add(130.0);deaths.add(140.0);deaths.add(145.0);deaths.add(145.0);deaths.add(144.0);deaths.add(145.0);deaths.add(146.0);deaths.add(149.0);deaths.add(155.0);deaths.add(162.0);deaths.add(169.0);deaths.add(178.0);deaths.add(184.0);deaths.add(190.0);deaths.add(198.0);deaths.add(207.0);deaths.add(219.0);deaths.add(235.0);deaths.add(255.0);deaths.add(277.0);deaths.add(300.0);deaths.add(327.0);deaths.add(355.0);deaths.add(386.0);deaths.add(416.0);deaths.add(448.0);deaths.add(486.0);deaths.add(531.0);deaths.add(584.0);deaths.add(640.0);deaths.add(697.0);deaths.add(754.0);deaths.add(812.0);deaths.add(868.0);deaths.add(929.0);deaths.add(992.0);deaths.add(1052.0);deaths.add(1107.0);deaths.add(1160.0);deaths.add(1215.0);deaths.add(1278.0);deaths.add(1346.0);deaths.add(1418.0);deaths.add(1491.0);deaths.add(1568.0);deaths.add(1644.0);deaths.add(1714.0);deaths.add(1779.0);deaths.add(1841.0);deaths.add(1894.0);deaths.add(1946.0);deaths.add(2020.0);deaths.add(2106.0);deaths.add(2205.0);deaths.add(2310.0);deaths.add(2394.0);deaths.add(2483.0);deaths.add(2571.0);deaths.add(2623.0);deaths.add(2671.0);deaths.add(2702.0);deaths.add(2729.0);deaths.add(2780.0);deaths.add(2783.0);deaths.add(2770.0);deaths.add(2731.0);deaths.add(2666.0);deaths.add(2574.0);deaths.add(2457.0);deaths.add(2315.0);deaths.add(2152.0);deaths.add(1972.0);deaths.add(1779.0);deaths.add(1579.0);deaths.add(1377.0);deaths.add(1179.0);deaths.add(990.0);deaths.add(814.0);deaths.add(656.0);deaths.add(1888.0);} else if (cohort.equals("non-Hispanic black males")) {deaths.add(1394.0);deaths.add(80.0);deaths.add(49.0);deaths.add(36.0);deaths.add(32.0);deaths.add(28.0);deaths.add(26.0);deaths.add(23.0);deaths.add(19.0);deaths.add(14.0);deaths.add(10.0);deaths.add(9.0);deaths.add(17.0);deaths.add(34.0);deaths.add(58.0);deaths.add(82.0);deaths.add(103.0);deaths.add(123.0);deaths.add(141.0);deaths.add(158.0);deaths.add(178.0);deaths.add(197.0);deaths.add(211.0);deaths.add(217.0);deaths.add(216.0);deaths.add(212.0);deaths.add(210.0);deaths.add(209.0);deaths.add(212.0);deaths.add(218.0);deaths.add(225.0);deaths.add(233.0);deaths.add(244.0);deaths.add(246.0);deaths.add(251.0);deaths.add(257.0);deaths.add(266.0);deaths.add(277.0);deaths.add(293.0);deaths.add(312.0);deaths.add(335.0);deaths.add(360.0);deaths.add(389.0);deaths.add(421.0);deaths.add(456.0);deaths.add(492.0);deaths.add(531.0);deaths.add(578.0);deaths.add(638.0);deaths.add(709.0);deaths.add(784.0);deaths.add(860.0);deaths.add(939.0);deaths.add(1018.0);deaths.add(1098.0);deaths.add(1183.0);deaths.add(1271.0);deaths.add(1349.0);deaths.add(1411.0);deaths.add(1463.0);deaths.add(1514.0);deaths.add(1572.0);deaths.add(1638.0);deaths.add(1715.0);deaths.add(1796.0);deaths.add(1881.0);deaths.add(1961.0);deaths.add(2028.0);deaths.add(2079.0);deaths.add(2117.0);deaths.add(2139.0);deaths.add(2163.0);deaths.add(2216.0);deaths.add(2283.0);deaths.add(2372.0);deaths.add(2471.0);deaths.add(2543.0);deaths.add(2609.0);deaths.add(2659.0);deaths.add(2682.0);deaths.add(2683.0);deaths.add(2652.0);deaths.add(2630.0);deaths.add(2585.0);deaths.add(2517.0);deaths.add(2427.0);deaths.add(2315.0);deaths.add(2184.0);deaths.add(2034.0);deaths.add(1870.0);deaths.add(1696.0);deaths.add(1515.0);deaths.add(1333.0);deaths.add(1153.0);deaths.add(980.0);deaths.add(818.0);deaths.add(670.0);deaths.add(537.0);deaths.add(422.0);deaths.add(325.0);deaths.add(811.0);} else if (cohort.equals("non-Hispanic black females")) {deaths.add(1134.0);deaths.add(58.0);deaths.add(38.0);deaths.add(34.0);deaths.add(22.0);deaths.add(20.0);deaths.add(16.0);deaths.add(14.0);deaths.add(13.0);deaths.add(13.0);deaths.add(13.0);deaths.add(15.0);deaths.add(18.0);deaths.add(21.0);deaths.add(25.0);deaths.add(30.0);deaths.add(34.0);deaths.add(39.0);deaths.add(43.0);deaths.add(48.0);deaths.add(54.0);deaths.add(60.0);deaths.add(66.0);deaths.add(70.0);deaths.add(73.0);deaths.add(76.0);deaths.add(80.0);deaths.add(83.0);deaths.add(88.0);deaths.add(94.0);deaths.add(101.0);deaths.add(109.0);deaths.add(118.0);deaths.add(126.0);deaths.add(134.0);deaths.add(143.0);deaths.add(153.0);deaths.add(166.0);deaths.add(183.0);deaths.add(203.0);deaths.add(224.0);deaths.add(246.0);deaths.add(270.0);deaths.add(296.0);deaths.add(322.0);deaths.add(348.0);deaths.add(375.0);deaths.add(404.0);deaths.add(436.0);deaths.add(473.0);deaths.add(512.0);deaths.add(551.0);deaths.add(591.0);deaths.add(628.0);deaths.add(665.0);deaths.add(703.0);deaths.add(744.0);deaths.add(788.0);deaths.add(836.0);deaths.add(890.0);deaths.add(950.0);deaths.add(1016.0);deaths.add(1086.0);deaths.add(1154.0);deaths.add(1221.0);deaths.add(1290.0);deaths.add(1362.0);deaths.add(1436.0);deaths.add(1512.0);deaths.add(1593.0);deaths.add(1671.0);deaths.add(1746.0);deaths.add(1839.0);deaths.add(1944.0);deaths.add(2057.0);deaths.add(2170.0);deaths.add(2270.0);deaths.add(2384.0);deaths.add(2509.0);deaths.add(2590.0);deaths.add(2684.0);deaths.add(2780.0);deaths.add(2860.0);deaths.add(2990.0);deaths.add(3069.0);deaths.add(3117.0);deaths.add(3131.0);deaths.add(3115.0);deaths.add(3065.0);deaths.add(2982.0);deaths.add(2863.0);deaths.add(2713.0);deaths.add(2532.0);deaths.add(2327.0);deaths.add(2102.0);deaths.add(1865.0);deaths.add(1622.0);deaths.add(1383.0);deaths.add(1154.0);deaths.add(940.0);deaths.add(2775.0);}return deaths;}static public JPanel fill10LeadingCausesOfDeathByAgeGroupPanel(String ageGroup) {JLabel conditionsAffectingLifeExpectancyGraphHeaderForAgeJLabel = new JLabel();JPanel factorsUsedInDeterminingLifeExpectencyJPanel = new JPanel(new GridBagLayout());JLabel causeOfDeath1JLabel = new JLabel();JLabel causeOfDeath2JLabel = new JLabel();JLabel causeOfDeath3JLabel = new JLabel();JLabel causeOfDeath3BJLabel = new JLabel();JLabel causeOfDeath4JLabel = new JLabel();JLabel causeOfDeath5JLabel = new JLabel();JLabel causeOfDeath5BJLabel = new JLabel();JLabel causeOfDeath6JLabel = new JLabel();JLabel causeOfDeath6BJLabel = new JLabel();JLabel causeOfDeath7JLabel = new JLabel();JLabel causeOfDeath8JLabel = new JLabel();JLabel causeOfDeath9JLabel = new JLabel();JLabel causeOfDeath9BJLabel = new JLabel();JLabel causeOfDeath10JLabel = new JLabel();JLabel causeOfDeath10BJLabel = new JLabel();JLabel causeOfDeathPusherJLabel = new JLabel();GridBagConstraints factorsUsedInDeterminingLifeExpectencyPanelConstraints = new GridBagConstraints();factorsUsedInDeterminingLifeExpectencyJPanel.setOpaque(false);factorsUsedInDeterminingLifeExpectencyJPanel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));if (ageGroup.equals("all ages")) {conditionsAffectingLifeExpectancyGraphHeaderForAgeJLabel.setText("Ten leading causes of death for all ages:");} else if (ageGroup.equals("0")) {conditionsAffectingLifeExpectancyGraphHeaderForAgeJLabel.setText("Ten leading causes of death before age 1:");} else {conditionsAffectingLifeExpectancyGraphHeaderForAgeJLabel.setText("Ten leading causes of death for ages " + ageGroup + ":");}factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 0;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridwidth = 2;factorsUsedInDeterminingLifeExpectencyPanelConstraints.anchor = GridBagConstraints.WEST;factorsUsedInDeterminingLifeExpectencyJPanel.add(conditionsAffectingLifeExpectancyGraphHeaderForAgeJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridwidth = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;if (ageGroup.equals("all ages")) {causeOfDeath1JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath1JLabel.setName("191.4");causeOfDeath2JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath2JLabel.setName("184.6");causeOfDeath3JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath3JLabel.setName("46.6");causeOfDeath4JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath4JLabel.setName("41.4");causeOfDeath5JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath5JLabel.setName("60.5");causeOfDeath6JLabel.setText("Alzheimer's disease (G30)");causeOfDeath6JLabel.setName("27.2");causeOfDeath7JLabel.setText("Diabetes mellitus (E10-E14)");causeOfDeath7JLabel.setName("23.5");causeOfDeath8JLabel.setText("Influenza and pneumonia (J09-J18)");causeOfDeath8JLabel.setName("17.2");causeOfDeath9JLabel.setText("Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)");causeOfDeath9BJLabel.setText("(N00-N07,N17-N19,N25-N27)");causeOfDeath9JLabel.setName("14.7");causeOfDeath10JLabel.setText("Intentional self-harm (suicide)");causeOfDeath10JLabel.setName("12.3");factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("0")) {causeOfDeath1JLabel.setText("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)");causeOfDeath1JLabel.setName("126.1");causeOfDeath2JLabel.setText("Disorders related to short gestation and low birth weight, not elsewhere classified (P07)");causeOfDeath2JLabel.setName("104.1");causeOfDeath3JLabel.setText("Sudden infant death syndrome (R95)");causeOfDeath3JLabel.setName("43.3");causeOfDeath4JLabel.setText("Newborn affected by maternal complications of pregnancy (P01)");causeOfDeath4JLabel.setName("39.9");causeOfDeath5JLabel.setText("Accidents (unintentional injuries) (V01-X59)");causeOfDeath5JLabel.setName("27.5");causeOfDeath6JLabel.setText("Newborn affected by complications of placenta, cord and membranes (P02)");causeOfDeath6JLabel.setName("25.1");causeOfDeath7JLabel.setText("Bacterial sepsis of newborn (P36)");causeOfDeath7JLabel.setName("13.3");causeOfDeath8JLabel.setText("Respiratory distress of newborn (P22)");causeOfDeath8JLabel.setName("13.0");causeOfDeath9JLabel.setText("Diseases of the circulatory system (I00-I99)");causeOfDeath9JLabel.setName("12.5");causeOfDeath10JLabel.setText("Neonatal hemorrhage (P50-P52,P54)");causeOfDeath10JLabel.setName("11.2");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("1 to 4")) {causeOfDeath1JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath1JLabel.setName("8.3");causeOfDeath2JLabel.setText("Congenital malformations, deformations and chromosomal abnormalities (Q00-Q99)");causeOfDeath2JLabel.setName("3.0");causeOfDeath3JLabel.setText("Assault (homocide) (U01-U02,X85-Y09,Y87.1)");causeOfDeath3JLabel.setName("2.3");causeOfDeath4JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath4JLabel.setName("2.2");causeOfDeath5JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath5JLabel.setName("1.0");causeOfDeath6JLabel.setText("Influenza and pneumonia (J09-J18)");causeOfDeath6JLabel.setName("0.6");causeOfDeath7JLabel.setText("Septicemia (A40-A41)");causeOfDeath7JLabel.setName("0.4");causeOfDeath8JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath8JLabel.setName("0.3");causeOfDeath9JLabel.setText("In situ neoplasms, benign neoplasms, and neoplasms of");causeOfDeath9BJLabel.setText("   uncertain or unknown behavior behavior (D00-D48)");causeOfDeath9JLabel.setName("0.3");causeOfDeath10JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath10JLabel.setName("0.3");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("5 to 14")) {causeOfDeath1JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath1JLabel.setName("7.8");causeOfDeath2JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath2JLabel.setName("2.1");causeOfDeath3JLabel.setText("Congenital malformations, deformations and");causeOfDeath3BJLabel.setText("   chromosomal abnormalities (Q00-Q99)");causeOfDeath3JLabel.setName("0.9");causeOfDeath4JLabel.setText("Intentional self harm (suicide) (U03,X60-X84,Y87.0)");causeOfDeath4JLabel.setName("0.7");causeOfDeath5JLabel.setText("Assault (homocide) (U01-U02,X85-Y09,Y87.1)");causeOfDeath5JLabel.setName("0.7");causeOfDeath6JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath6JLabel.setName("0.5");causeOfDeath7JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath7JLabel.setName("0.3");causeOfDeath8JLabel.setText("Influenza and pneumonia (J09-J18)");causeOfDeath8JLabel.setName("0.3");causeOfDeath9JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath9JLabel.setName("0.2");causeOfDeath10JLabel.setText("In situ neoplasms, benign neoplasms, and neoplasms");causeOfDeath10BJLabel.setText("   of uncertain or unknown behavior (D00-D48)");causeOfDeath10JLabel.setName("0.2");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("15 to 24")) {causeOfDeath1JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath1JLabel.setName("27.5");causeOfDeath2JLabel.setText("Intentional self harm (suicide) (U03,X60-X84,Y87.0)");causeOfDeath2JLabel.setName("10.7");causeOfDeath3JLabel.setText("Assault (homocide) (U01-U02,X85-Y09,Y87.1)");causeOfDeath3JLabel.setName("10.3");causeOfDeath4JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath4JLabel.setName("3.7");causeOfDeath5JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath5JLabel.setName("2.2");causeOfDeath6JLabel.setText("Congenital malformations, deformations and");causeOfDeath6BJLabel.setText("   chromosomal abnormalities (Q00-Q99)");causeOfDeath6JLabel.setName("1.0");causeOfDeath7JLabel.setText("Influenza and pneumonia (J09-J18)");causeOfDeath7JLabel.setName("0.5");causeOfDeath8JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath8JLabel.setName("0.4");causeOfDeath9JLabel.setText("Pregnancy, child birth, and the");causeOfDeath9BJLabel.setText("   and the puerperium (O00-O99)");causeOfDeath9JLabel.setName("0.4");causeOfDeath10JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath10JLabel.setName("0.4");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("25 to 44")) {causeOfDeath1JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath1JLabel.setName("35.7");causeOfDeath2JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath2JLabel.setName("18.5");causeOfDeath3JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath3JLabel.setName("16.4");causeOfDeath4JLabel.setText("Intentional self harm (suicide) (U03,X60-X84,Y87.0)");causeOfDeath4JLabel.setName("14.9");causeOfDeath5JLabel.setText("Assault (homocide) (U01-U02,X85-Y09,Y87.1)");causeOfDeath5JLabel.setName("8.1");causeOfDeath6JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath6JLabel.setName("3.5");causeOfDeath7JLabel.setText("Diabetes mellitus (E10-E14)");causeOfDeath7JLabel.setName("3.0");causeOfDeath8JLabel.setText("Human immunodeficiency virus (HIV) disease (B20-B24)");causeOfDeath8JLabel.setName("2.7");causeOfDeath9JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath9JLabel.setName("2.7");causeOfDeath10JLabel.setText("Influenza and pneumonia (J09-J18)");causeOfDeath10JLabel.setName("1.6");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("45 to 64")) {causeOfDeath1JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath1JLabel.setName("194.6");causeOfDeath2JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath2JLabel.setName("126.9");causeOfDeath3JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath3JLabel.setName("30.1");causeOfDeath4JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath4JLabel.setName("23.7");causeOfDeath5JLabel.setText("Chronic liver disease and cirrhosis (K70,K73-K74)");causeOfDeath5JLabel.setName("23.6");causeOfDeath6JLabel.setText("Diabetes mellitus (E10-E14)");causeOfDeath6JLabel.setName("22.4");causeOfDeath7JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath7JLabel.setName("20.4");causeOfDeath8JLabel.setText("Intentional self harm (suicide) (U03,X60-X84,Y87.0)");causeOfDeath8JLabel.setName("17.9");causeOfDeath9JLabel.setText("Septicemia (A40-A41)");causeOfDeath9JLabel.setName("8.9");causeOfDeath10JLabel.setText("Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)");causeOfDeath10JLabel.setName("8.2");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);} else if (ageGroup.equals("65 years and older")) {causeOfDeath1JLabel.setText("Diseases of heart (I00-I09,I11,I13,I20-I51)");causeOfDeath1JLabel.setName("1150.5");causeOfDeath2JLabel.setText("Malignant neoplasms (C00-C97)");causeOfDeath2JLabel.setName("957.0");causeOfDeath3JLabel.setText("Chronic lower respiratory diseases (J40-J47)");causeOfDeath3JLabel.setName("295.6");causeOfDeath4JLabel.setText("Cerebrovascular diseases (I60-I69)");causeOfDeath4JLabel.setName("264.3");causeOfDeath5JLabel.setText("Alzheimer's disease (G30)");causeOfDeath5JLabel.setName("202.3");causeOfDeath6JLabel.setText("Diabetes mellitus (E10-E14)");causeOfDeath6JLabel.setName("125.8");causeOfDeath7JLabel.setText("Influenza and pneumonia (J09-J18)");causeOfDeath7JLabel.setName("109.5");causeOfDeath8JLabel.setText("Accidents (unintentional injuries) (V01-X59,Y85-Y86)");causeOfDeath8JLabel.setName("103.0");causeOfDeath9JLabel.setText("Nephritis, nephrotic syndrome and");causeOfDeath9BJLabel.setText("nephrosis (N00-N07,N17-N19,N25-N27)");causeOfDeath9JLabel.setName("91.6");causeOfDeath10JLabel.setText("Septicemia (A40-A41)");causeOfDeath10JLabel.setName("64.3");factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 0, 0, 5);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath1JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 2;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath2JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 3;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath3JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath4JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath5JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridx = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy = 1;factorsUsedInDeterminingLifeExpectencyPanelConstraints.insets = new Insets(0, 5, 0, 0);factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath6JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath7JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath8JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath9BJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeath10JLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);factorsUsedInDeterminingLifeExpectencyPanelConstraints.gridy++;factorsUsedInDeterminingLifeExpectencyJPanel.add(causeOfDeathPusherJLabel, factorsUsedInDeterminingLifeExpectencyPanelConstraints);}conditionsAffectingLifeExpectancyGraphHeaderForAgeJLabel.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));return factorsUsedInDeterminingLifeExpectencyJPanel;}}// EOF