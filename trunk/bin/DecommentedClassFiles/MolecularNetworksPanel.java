/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.BasicStroke;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Point;import java.awt.RenderingHints;import java.util.Vector;import javax.swing.JButton;import javax.swing.JPanel;import javax.swing.SwingConstants;import javax.swing.border.LineBorder;class MolecularNetworksPanel extends JPanel {String caller = "regular";int biomoietyButtonWidth = 100;int biomoietyButtonHeight = 30;Vector<Vector<Vector<String>>> primaryNetworksBiomoietyButtonsPrimitives = new Vector<Vector<Vector<String>>>();Vector<Vector<Vector<String>>> secondaryNetworksBiomoietyButtonsPrimitives = new Vector<Vector<Vector<String>>>();int leftmostPrimaryNetworksPixelX = 0;int rightmostPrimaryNetworksPixelX = 0;int topmostPrimaryNetworksPixelY = 0;int bottommostPrimaryNetworksPixelY = 0;int leftmostTertiaryNetworksPixelX = 0;int rightmostTertiaryNetworksPixelX = 0;int topmostTertiaryNetworksPixelY = 0;int bottommostTertiaryNetworksPixelY = 0;int userSelectedTertiaryNetworkNumber = 0;int biomoietyFontSize = 17;int coOcurreLineLength = 99;Vector secondaryNetworksGridVectLinearPreTargets;Vector primaryNetworksAllBiomoietyPointLocations;Vector secondaryNetworksAllBiomoietyPointLocations;Vector<Vector<String[]>> biomoietyAttributes = new Vector<Vector<String[]>>();Vector<Vector<Integer>> primaryNetworksGraphicsPolylines = new Vector<Vector<Integer>>();Vector<Point> primaryNetworksRootLocationPoints = new Vector<Point>();int networkStructureTicWidth = 320;int nodalNum;Color goldenYellow = Color.YELLOW;Color greenLineColor = new Color(160, 255, 160);Color blueTertiaryNetworksNonTrialBiomoietyNodeButtonColor = new Color((greenLineColor.getRed() + 255) / 3, (greenLineColor.getGreen() + 255) / 3, 255);Color orangeLineColor = Color.ORANGE;boolean newGraphics = false;Graphics canned;MolecularNetworksPanel() {setLayout(null);setBackground(Color.BLACK);setOpaque(true);}@Overridepublic void paintComponent(Graphics can) {super.paintComponent(can);if (newGraphics) {can = paintBiomoietyNetworksPanel(can, "biomoietyNetworksPanel");}}public Graphics paintBiomoietyNetworksPanel(Graphics pCan, String callingObject) {int xAdjustment = -leftmostPrimaryNetworksPixelX;int yAdjustment = -topmostPrimaryNetworksPixelY;if (callingObject.equals("biomoietyNetworksPanel")) {int ind = 0;while (ind < getComponentCount()) {if (getComponent(ind) instanceof JButton) {remove(ind);}ind++;}} else {int xTranslation = 6;int yTranslation = -(bottommostPrimaryNetworksPixelY - topmostPrimaryNetworksPixelY) / 10 + Device.device.workspace.decisionSupportWindow.biomoietyNetworksRadarPanel.getHeight() - 10;pCan.translate(xTranslation, yTranslation);}int gridRootDotInd = 0;int gridLineInd = 0;int secondaryNetworksInd = 1;boolean stop = false;((Graphics2D) pCan).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);BasicStroke basicStroke = new BasicStroke(2);((Graphics2D) pCan).setStroke(basicStroke);pCan.setColor(greenLineColor);while (gridLineInd < primaryNetworksGraphicsPolylines.size()) {int lineBeginPointX = primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(0) + xAdjustment;int lineBeginPointY = primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(1) + yAdjustment;int lineEndPointX = primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(2) + xAdjustment;int lineEndPointY = primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(3) + yAdjustment;if (callingObject.equals("biomoietyNetworksRadarPanel")) {lineBeginPointX = Math.round((float) lineBeginPointX / (float) 10);lineBeginPointY = Math.round((float) lineBeginPointY / (float) 10);lineEndPointX = Math.round((float) lineEndPointX / (float) 10);lineEndPointY = Math.round((float) lineEndPointY / (float) 10);}try {pCan.drawLine(lineBeginPointX, lineBeginPointY, lineEndPointX, lineEndPointY);pCan.drawLine(lineBeginPointX + 1, lineBeginPointY, lineEndPointX + 1, lineEndPointY);pCan.drawLine(lineBeginPointX, lineBeginPointY + 1, lineEndPointX, lineEndPointY + 1);} catch (Exception e) {System.out.println("Erred with gridLineInd: " + gridLineInd + ", (0): " + primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(0) + ", (1): " + primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(1) + ", (2): " + primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(2) + ", (3): " + primaryNetworksGraphicsPolylines.elementAt(gridLineInd).elementAt(3));}gridLineInd++;}pCan.setColor(new Color(255, 128, 0));int ovalX = 0;int ovalY = 0;while (gridRootDotInd < primaryNetworksRootLocationPoints.size()) {ovalX = primaryNetworksRootLocationPoints.elementAt(gridRootDotInd).x + xAdjustment;ovalY = primaryNetworksRootLocationPoints.elementAt(gridRootDotInd).y + yAdjustment;if (callingObject.equals("biomoietyNetworksRadarPanel")) {ovalX = Math.round((float) ovalX / (float) 10);ovalY = Math.round((float) ovalY / (float) 10);pCan.fillOval(ovalX - 1, ovalY, 3, 3);} else {pCan.fillOval(ovalX - 3, ovalY, 6, 6);}gridRootDotInd++;}pCan.setColor(blueTertiaryNetworksNonTrialBiomoietyNodeButtonColor);int[] intsX = null;int[] intsY = null;while (!stop && secondaryNetworksInd < MolecularAssembler.tertiaryNetworksPolyLinePointsX.size()) {if (Device.device.workspace.decisionSupportWindow.cycleTherapeuticTargetsParameterString.equals("ONE")) {secondaryNetworksInd = userSelectedTertiaryNetworkNumber;stop = true;}intsX = MolecularAssembler.tertiaryNetworksPolyLinePointsX.elementAt(secondaryNetworksInd);intsY = MolecularAssembler.tertiaryNetworksPolyLinePointsY.elementAt(secondaryNetworksInd);int ind = 0;while (ind < intsX.length) {intsX[ind] = Math.round((float) intsX[ind] + xAdjustment);intsY[ind] = Math.round((float) intsY[ind] + yAdjustment);ind++;}ind = 0;while (callingObject.equals("biomoietyNetworksRadarPanel") && ind < intsX.length) {intsX[ind] = Math.round((float) intsX[ind] / (float) 10);intsY[ind] = Math.round((float) intsY[ind] / (float) 10);ind++;}pCan.drawPolyline(intsX, intsY, intsX.length);secondaryNetworksInd++;}int structureInd = 1;int biomoietyInd = 0;if (primaryNetworksBiomoietyButtonsPrimitives != null) {System.out.println("10" + caller + " primaryNetworksBiomoietyButtonsPrimitives.size(): " + primaryNetworksBiomoietyButtonsPrimitives.size());}while (structureInd < primaryNetworksBiomoietyButtonsPrimitives.size()) {biomoietyInd = 0;while (biomoietyInd < ((Vector) primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).size()) {JButton primaryBiomoietyJButton = new JButton(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(biomoietyInd).elementAt(0));primaryBiomoietyJButton.setActionCommand(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(biomoietyInd).elementAt(1));primaryBiomoietyJButton.setBounds(Integer.valueOf(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(biomoietyInd).elementAt(2)), Integer.valueOf(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(biomoietyInd).elementAt(3)), biomoietyButtonWidth, biomoietyButtonHeight);primaryBiomoietyJButton.addActionListener(Device.device.workspace.decisionSupportWindow);primaryBiomoietyJButton.addMouseListener(Device.device.workspace.decisionSupportWindow);primaryBiomoietyJButton.setName("primaryBiomoietyJButton");primaryBiomoietyJButton.setFont(new Font(Font.MONOSPACED, Font.BOLD, biomoietyFontSize));primaryBiomoietyJButton.setContentAreaFilled(false);primaryBiomoietyJButton.setBorder(null);if (MolecularAssembler.referencePublications.elementAt(Integer.valueOf(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(biomoietyInd).elementAt(4)))[9].toLowerCase().contains(" trial")) {primaryBiomoietyJButton.setBorder(new LineBorder(orangeLineColor, 4, true));}primaryBiomoietyJButton.setHorizontalAlignment(SwingConstants.LEFT);primaryBiomoietyJButton.setForeground(new Color(0, 255, 128));add(primaryBiomoietyJButton);biomoietyInd++;}structureInd++;}structureInd = 1;biomoietyInd = 0;while (structureInd < secondaryNetworksBiomoietyButtonsPrimitives.size()) {biomoietyInd = 0;while (biomoietyInd < ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).size()) {JButton secondaryBiomoietyJButton = new JButton((String) ((Vector) ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).elementAt(biomoietyInd)).elementAt(0));secondaryBiomoietyJButton.setActionCommand((String) ((Vector) ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).elementAt(biomoietyInd)).elementAt(1));secondaryBiomoietyJButton.setBounds((Integer) ((Vector) ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).elementAt(biomoietyInd)).elementAt(2), (Integer) ((Vector) ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).elementAt(biomoietyInd)).elementAt(3), (Integer) ((Vector) ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).elementAt(biomoietyInd)).elementAt(4), (Integer) ((Vector) ((Vector) secondaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd)).elementAt(biomoietyInd)).elementAt(5));secondaryBiomoietyJButton.addActionListener(Device.device.workspace.decisionSupportWindow);secondaryBiomoietyJButton.addMouseListener(Device.device.workspace.decisionSupportWindow);secondaryBiomoietyJButton.setName("secondaryBiomoietyJButton");secondaryBiomoietyJButton.setFont(new Font(Font.MONOSPACED, Font.BOLD, biomoietyFontSize));secondaryBiomoietyJButton.setContentAreaFilled(false);secondaryBiomoietyJButton.setBorder(null);if (MolecularAssembler.referencePublications.elementAt(Integer.valueOf(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(biomoietyInd).elementAt(4)))[9].toLowerCase().contains(" trial")) {secondaryBiomoietyJButton.setBorder(new LineBorder(orangeLineColor, 4, true));}secondaryBiomoietyJButton.setHorizontalAlignment(SwingConstants.LEFT);secondaryBiomoietyJButton.setForeground(new Color(0, 255, 128));add(secondaryBiomoietyJButton);biomoietyInd++;}structureInd++;}setPreferredSize(new Dimension(rightmostPrimaryNetworksPixelX - leftmostPrimaryNetworksPixelX + 120, bottommostPrimaryNetworksPixelY - topmostPrimaryNetworksPixelY + 40));return pCan;}public void calculatePrimaryNetworks(Vector gridVector, Vector locationVector, int[] primaryNetworksRootLocationPoint, int rootLevel) {int vInd = 0;int biomoietyInd = 0;int numNodes;int[] primaryNetworksNodeLocation = new int[2];if (primaryNetworksRootLocationPoint == null) {primaryNetworksRootLocationPoint = new int[2];primaryNetworksRootLocationPoint[0] = 0;primaryNetworksRootLocationPoint[1] = 0;primaryNetworksNodeLocation[0] = 0;primaryNetworksNodeLocation[1] = 0;leftmostPrimaryNetworksPixelX = 0;rightmostPrimaryNetworksPixelX = 0;topmostPrimaryNetworksPixelY = 0;bottommostPrimaryNetworksPixelY = 0;primaryNetworksBiomoietyButtonsPrimitives.clear();primaryNetworksBiomoietyButtonsPrimitives.add(null);}while (vInd < gridVector.size()) {biomoietyInd++;String biomoiety = (((String[]) (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(0))).elementAt(0))))[0];if (biomoiety.length() > 7) {biomoiety = biomoiety.substring(0, 6);}biomoietyAttributes.add((((Vector<String[]>) (((Vector) (gridVector.elementAt(vInd))).elementAt(0)))));numNodes = gridVector.size();nodalNum = vInd + 1;int widthFactorIncrease = 8;int nudgeHorizontalPx = 0;if (rootLevel > 1 && rootLevel < 8) {nudgeHorizontalPx = (int) (widthFactorIncrease * (rootLevel - 1) * Math.cos(nodalNum * 3.14159 / (numNodes + 1)));}if (rootLevel != 0) {primaryNetworksNodeLocation[0] = primaryNetworksRootLocationPoint[0] - (int) (coOcurreLineLength * Math.cos(nodalNum * 3.14159 / (numNodes + 1))) + nudgeHorizontalPx;int levelForOddOrEven = rootLevel;int ind = 0;while (ind < rootLevel) {levelForOddOrEven = levelForOddOrEven - 2;ind = ind + 2;}if (levelForOddOrEven == 0) {primaryNetworksNodeLocation[1] = primaryNetworksRootLocationPoint[1] - (int) (coOcurreLineLength * Math.sin(nodalNum * 3.14159 / (numNodes + 1)));} else {primaryNetworksNodeLocation[1] = primaryNetworksRootLocationPoint[1] - (int) (coOcurreLineLength * Math.sin(nodalNum * 3.14159 / (numNodes + 1))) + (int) (20 * Math.cos(nodalNum * 3.14159 / (numNodes + 1)));}primaryNetworksGraphicsPolylines.add(new Vector<Integer>(4, 1));primaryNetworksGraphicsPolylines.lastElement().add(primaryNetworksNodeLocation[0]);primaryNetworksGraphicsPolylines.lastElement().add(primaryNetworksNodeLocation[1]);primaryNetworksGraphicsPolylines.lastElement().add(primaryNetworksRootLocationPoint[0]);primaryNetworksGraphicsPolylines.lastElement().add(primaryNetworksRootLocationPoint[1]);primaryNetworksBiomoietyButtonsPrimitives.lastElement().add(new Vector<String>(5));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(0, biomoiety);primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(1, (((String[]) (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(0))).elementAt(0))))[8] + "|" + (biomoietyAttributes.size() - 1));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(2, String.valueOf(primaryNetworksNodeLocation[0]));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(3, String.valueOf(primaryNetworksNodeLocation[1]));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(4, (((String[]) (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(0))).elementAt(0))))[8]);((Vector) (((Vector) (locationVector.elementAt(vInd))).elementAt(0))).add(new Point(primaryNetworksNodeLocation[0], primaryNetworksNodeLocation[1]));if (leftmostPrimaryNetworksPixelX > primaryNetworksNodeLocation[0]) {leftmostPrimaryNetworksPixelX = primaryNetworksNodeLocation[0];}if (rightmostPrimaryNetworksPixelX < primaryNetworksNodeLocation[0]) {rightmostPrimaryNetworksPixelX = primaryNetworksNodeLocation[0];}if (topmostPrimaryNetworksPixelY > primaryNetworksNodeLocation[1]) {System.out.println("nodeLocation[1]: " + primaryNetworksNodeLocation[1]);topmostPrimaryNetworksPixelY = primaryNetworksNodeLocation[1];}} else {primaryNetworksBiomoietyButtonsPrimitives.add(new Vector<Vector<String>>(5));primaryNetworksBiomoietyButtonsPrimitives.lastElement().add(new Vector<String>(5));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(0, biomoiety);primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(1, (((String[]) (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(0))).elementAt(0))))[8] + "|" + (biomoietyAttributes.size() - 1));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(2, String.valueOf(primaryNetworksRootLocationPoint[0]));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(3, String.valueOf(primaryNetworksRootLocationPoint[1]));primaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(4, (((String[]) (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(0))).elementAt(0))))[8]);primaryNetworksRootLocationPoints.add(new Point());primaryNetworksRootLocationPoints.lastElement().x = primaryNetworksRootLocationPoint[0];primaryNetworksRootLocationPoints.lastElement().y = primaryNetworksRootLocationPoint[1];((Vector) (((Vector) (locationVector.elementAt(vInd))).elementAt(0))).add(new Point(primaryNetworksRootLocationPoint[0], primaryNetworksRootLocationPoint[1]));}if (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(1))).size() != 0) {int[] nextLocation = new int[2];if (rootLevel != 0) {nextLocation[0] = primaryNetworksNodeLocation[0];nextLocation[1] = primaryNetworksNodeLocation[1];} else {nextLocation[0] = primaryNetworksRootLocationPoint[0];nextLocation[1] = primaryNetworksRootLocationPoint[1];}calculatePrimaryNetworks(((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(1))), ((Vector) (((Vector) (locationVector.elementAt(vInd))).elementAt(1))), nextLocation, rootLevel + 1);}vInd++;if (rootLevel == 0) {primaryNetworksRootLocationPoint[0] = vInd * networkStructureTicWidth;primaryNetworksRootLocationPoint[1] = 0;}}if (rootLevel == 0) {primaryNetworksRootLocationPoint[0] = vInd * networkStructureTicWidth;primaryNetworksRootLocationPoint[1] = 0;primaryNetworksAllBiomoietyPointLocations = locationVector;int structureInd = 1;int buttonInd = 0;while (structureInd < primaryNetworksBiomoietyButtonsPrimitives.size()) {buttonInd = 0;while (buttonInd < primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).size()) {primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(buttonInd).setElementAt(String.valueOf(Integer.valueOf(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(buttonInd).elementAt(2)) - leftmostPrimaryNetworksPixelX), 2);primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(buttonInd).setElementAt(String.valueOf(Integer.valueOf(primaryNetworksBiomoietyButtonsPrimitives.elementAt(structureInd).elementAt(buttonInd).elementAt(3)) - topmostPrimaryNetworksPixelY), 3);buttonInd++;}structureInd++;}newGraphics = true;}}public void calculateSecondaryNetworks(Vector gridVector, Vector locationVector, int[] rootLocation, int rootLevel) {int vInd = 0;int biomoietyInd = 0;int numNodes;int[] nodeLocation = new int[2];if (rootLocation == null) {rootLocation = new int[2];rootLocation[0] = 0;rootLocation[1] = 0;nodeLocation[0] = rootLocation[0];nodeLocation[1] = rootLocation[1];secondaryNetworksBiomoietyButtonsPrimitives.clear();secondaryNetworksBiomoietyButtonsPrimitives.add(null);secondaryNetworksBiomoietyButtonsPrimitives.add(new Vector<Vector<String>>(5));}while (vInd < gridVector.size()) {biomoietyInd++;String biomoiety = (((String[]) (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(0))).elementAt(0))))[0];if (biomoiety.length() > 7) {biomoiety = biomoiety.substring(0, 6);}biomoietyAttributes.add((((Vector<String[]>) (((Vector) (gridVector.elementAt(vInd))).elementAt(0)))));numNodes = gridVector.size();nodalNum = vInd + 1;int widthFactorIncrease = 8;int nudgeHorizontalPx = 0;if (rootLevel > 1 && rootLevel < 8) {nudgeHorizontalPx = (int) (widthFactorIncrease * (rootLevel - 1) * Math.cos(nodalNum * 3.14159 / (numNodes + 1)));}if (rootLevel != 0) {nodeLocation[0] = rootLocation[0] - (int) (coOcurreLineLength * Math.cos(nodalNum * 3.14159 / (numNodes + 1))) + nudgeHorizontalPx;int levelForOddOrEven = rootLevel;int ind = 0;while (ind < rootLevel) {levelForOddOrEven = levelForOddOrEven - 2;ind = ind + 2;}if (levelForOddOrEven == 0) {nodeLocation[1] = rootLocation[1] - (int) (coOcurreLineLength * Math.sin(nodalNum * 3.14159 / (numNodes + 1)));} else {nodeLocation[1] = rootLocation[1] - (int) (coOcurreLineLength * Math.sin(nodalNum * 3.14159 / (numNodes + 1))) + (int) (20 * Math.cos(nodalNum * 3.14159 / (numNodes + 1)));}((Vector) (((Vector) (locationVector.elementAt(vInd))).elementAt(0))).add(new Point(nodeLocation[0], nodeLocation[1]));} else {((Vector) (((Vector) (locationVector.elementAt(vInd))).elementAt(0))).add(new Point(rootLocation[0], rootLocation[1]));}if (((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(1))).size() != 0) {int[] nextLocation = new int[2];if (rootLevel != 0) {nextLocation[0] = nodeLocation[0];nextLocation[1] = nodeLocation[1];} else {nextLocation[0] = rootLocation[0];nextLocation[1] = rootLocation[1];}calculateSecondaryNetworks(((Vector) (((Vector) (gridVector.elementAt(vInd))).elementAt(1))), ((Vector) (((Vector) (locationVector.elementAt(vInd))).elementAt(1))), nextLocation, rootLevel + 1);}vInd++;if (rootLevel == 0) {rootLocation[0] = vInd * networkStructureTicWidth;rootLocation[1] = 0;}}if (rootLevel == 0) {rootLocation[0] = vInd * networkStructureTicWidth;rootLocation[1] = 0;secondaryNetworksAllBiomoietyPointLocations = locationVector;}}public void createTertiaryNetworkPathButtons(int tertiaryNetworksPolyLinePointsXInd, String tertiaryNetworkLoopsBackOntoPrimaryNetworks) {int lastPathNodeToDraw;if (tertiaryNetworkLoopsBackOntoPrimaryNetworks.equals("looped")) {lastPathNodeToDraw = MolecularAssembler.tertiaryNetworks.elementAt(tertiaryNetworksPolyLinePointsXInd).size() - 2;} else {lastPathNodeToDraw = MolecularAssembler.tertiaryNetworks.elementAt(tertiaryNetworksPolyLinePointsXInd).size() - 1;}secondaryNetworksBiomoietyButtonsPrimitives.lastElement().add(new Vector<String>(5));int referenceArticleInd;int ind = 0;while (ind <= lastPathNodeToDraw) {secondaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(0, MolecularAssembler.tertiaryNetworks.elementAt(tertiaryNetworksPolyLinePointsXInd).elementAt(ind).elementAt(0)[0]);secondaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(1, (((String[]) (((Vector) (MolecularAssembler.tertiaryNetworks.elementAt(tertiaryNetworksPolyLinePointsXInd).elementAt(ind))).elementAt(0))))[8] + "|" + (biomoietyAttributes.size() - 1));secondaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(2, String.valueOf(MolecularAssembler.tertiaryNetworksPolyLinePointsX.elementAt(tertiaryNetworksPolyLinePointsXInd)[ind]));((Vector) (secondaryNetworksBiomoietyButtonsPrimitives.lastElement())).add(3, String.valueOf(MolecularAssembler.tertiaryNetworksPolyLinePointsY.elementAt(tertiaryNetworksPolyLinePointsXInd)[ind]));secondaryNetworksBiomoietyButtonsPrimitives.lastElement().lastElement().add(4, (((String[]) (((Vector) (MolecularAssembler.tertiaryNetworks.elementAt(tertiaryNetworksPolyLinePointsXInd).elementAt(ind))).elementAt(0))))[8]);biomoietyAttributes.add((((Vector) (MolecularAssembler.tertiaryNetworks.elementAt(tertiaryNetworksPolyLinePointsXInd).elementAt(ind)))));ind++;}}}// EOF