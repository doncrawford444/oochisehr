/** Copyright 2014 Donald Ray Crawford* * This file is part of Oochis EHR.* * Oochis EHR is free software: you can redistribute it and/or modify* it under the terms of the GNU General Public License as published by* the Free Software Foundation, either version 3 of the License, or* (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>.*/package oochisCore;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.Event;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.KeyEvent;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import javax.swing.AbstractAction;import javax.swing.Action;import javax.swing.ImageIcon;import javax.swing.InputMap;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTextField;import javax.swing.JTextPane;import javax.swing.JToggleButton;import javax.swing.KeyStroke;import javax.swing.SwingConstants;import javax.swing.border.BevelBorder;import javax.swing.border.CompoundBorder;import javax.swing.border.LineBorder;import javax.swing.border.MatteBorder;import javax.swing.event.PopupMenuEvent;import javax.swing.event.PopupMenuListener;import javax.swing.event.UndoableEditEvent;import javax.swing.event.UndoableEditListener;import javax.swing.filechooser.FileFilter;import javax.swing.plaf.basic.BasicFileChooserUI;import javax.swing.text.AttributeSet;import javax.swing.text.BadLocationException;import javax.swing.text.DefaultEditorKit;import javax.swing.text.SimpleAttributeSet;import javax.swing.text.StyleConstants;import javax.swing.text.html.HTMLDocument;import javax.swing.text.html.HTMLEditorKit;import javax.swing.undo.CannotRedoException;import javax.swing.undo.CannotUndoException;import javax.swing.undo.UndoManager;public class NotePad extends Window implements ActionListener, FocusListener, PopupMenuListener, MouseListener {boolean isNoteOpen = false;String savedString = "";JPanel notesJPanel = new JPanel(new GridBagLayout());JTextPane notePadJTextPane = new JTextPane();HTMLEditorKit hTMLEditorKit = new HTMLEditorKit();JPopupMenu closeWithOrWithoutSavingPromptJPopupMenu = new JPopupMenu();static JButton saveNoteAndCloseJButton = new JButton(" Save note and close ");static JButton closeWithoutSavingJButton = new JButton(" Close without saving ");JScrollPane notePadJScrollPane = new JScrollPane(notePadJTextPane);JMenuBar menuBar = new JMenuBar();JPanel menuBarJPanel = new JPanel(new GridBagLayout());String noteName;JPopupMenu newNoteJPopupMenu = new JPopupMenu();JPanel newNoteNamePusherJPanel = new JPanel(new GridBagLayout());static JLabel newNoteNameJLabel = new JLabel("      Enter name of new note: ");static JTextField newNoteNameJTextField = new JTextField(20);static JButton newNoteNameOkJButton = new JButton(" Ok ");static JButton newNoteJButton = new JButton(" New ");static JButton openNoteJButton = new JButton(" Open ");static JButton closeNoteJButton = new JButton(" Close ");static JButton saveNoteJButton = new JButton(" Save ");static JButton saveAsJButton = new JButton(" Save as ");JPanel openNoteFileChooserJPanel = new JPanel(new GridBagLayout());static JButton openFileFileChooserJButton = new JButton(" Open ");static JButton saveCopyOfFileFileChooserJButton = new JButton(" Save ");static JButton cancelOpenFileFileChooserJButton = new JButton(" Cancel ");static JButton cancelSaveCopyOfFileFileChooserJButton = new JButton(" Cancel ");JPanel saveCopyFileChooserJPanel = new JPanel(new GridBagLayout());JPanel fileChooserJPanel = new JPanel(new GridBagLayout());JPanel fileChooserPusherJPanel = new JPanel(new GridBagLayout());JFileChooser saveCopyJFileChooser = new JFileChooser("/narrative");JFileChooser openNoteJFileChooser = new JFileChooser("/narrative");static JButton attachToCurrentOrderJButton = new JButton(" Attach to current order ");static JButton sendAsNoteJButton = new JButton(" Send as note ");static JButton printJButton = new JButton(" Print ");protected UndoAction undoAction = new UndoAction();protected RedoAction redoAction = new RedoAction();protected UndoManager undo = new UndoManager();static JButton undoJButton = new JButton(" Undo ");static JButton redoJButton = new JButton(" Redo ");static JButton findJButton = new JButton(" Find ");static JButton replaceJButton = new JButton(" Replace ");JPanel threeDHumanJPanel = new JPanel(new GridBagLayout());static JMenu threeDHumanJMenu = new JMenu(" Anatomy ");JPanel fontJPanel = new JPanel(new GridBagLayout());static JLabel fontSizeJLabel = new JLabel(" Font size: ");static JTextField fontSizeJTextField = new JTextField(3);static JButton arielJButton = new JButton(" Ariel ");static JButton serifJButton = new JButton(" Serif ");static JToggleButton boldJToggleButton = new JToggleButton(" Bold ");static JToggleButton italicJToggleButton = new JToggleButton(" Italic ");static JToggleButton underlineJToggleButton = new JToggleButton(" Underline ");GridBagConstraints menuBarPanelConstraints = new GridBagConstraints();GridBagConstraints threeDHumanPanelConstraints = new GridBagConstraints();GridBagConstraints openNoteFileChooserPanelConstraints = new GridBagConstraints();GridBagConstraints saveCopyFileChooserPanelConstraints = new GridBagConstraints();GridBagConstraints notesPanelConstraints = new GridBagConstraints();GridBagConstraints noteTemplatesPanelConstraints = new GridBagConstraints();GridBagConstraints fileChooserPanelConstraints = new GridBagConstraints();GridBagConstraints newNotePopupMenuConstraints = new GridBagConstraints();GridBagConstraints closeWithoutSavingPopupMenuConstraints = new GridBagConstraints();GridBagConstraints fontPanelConstraints = new GridBagConstraints();NotePad() {setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 1, 0, 0, Color.WHITE), new MatteBorder(0, 0, 1, 1, Color.DARK_GRAY)), new CompoundBorder(new MatteBorder(0, 1, 0, 0, Color.WHITE), new MatteBorder(0, 0, 1, 1, Color.DARK_GRAY))));notesJPanel.setBorder(new MatteBorder(0, 8, 8, 8, SystemWindow.quintessentialThemeColor));saveNoteAndCloseJButton.setFocusPainted(false);saveNoteAndCloseJButton.addActionListener(this);saveNoteAndCloseJButton.setActionCommand("saveNoteAndCloseJButton");saveNoteAndCloseJButton.setBackground(SystemWindow.buttonColor);saveNoteAndCloseJButton.setBorder(null);closeWithoutSavingJButton.setFocusPainted(false);closeWithoutSavingJButton.addActionListener(this);closeWithoutSavingJButton.setActionCommand("closeWithoutSavingJButton");closeWithoutSavingJButton.setBackground(SystemWindow.buttonColor);closeWithoutSavingJButton.setBorder(null);closeWithOrWithoutSavingPromptJPopupMenu.addPopupMenuListener(this);closeWithOrWithoutSavingPromptJPopupMenu.setLayout(new GridBagLayout());closeWithoutSavingPopupMenuConstraints.insets = new Insets(9, 9, 9, 9);closeWithOrWithoutSavingPromptJPopupMenu.add(saveNoteAndCloseJButton, closeWithoutSavingPopupMenuConstraints);closeWithoutSavingPopupMenuConstraints.gridy = 1;closeWithoutSavingPopupMenuConstraints.insets = new Insets(0, 9, 9, 9);closeWithOrWithoutSavingPromptJPopupMenu.add(closeWithoutSavingJButton, closeWithoutSavingPopupMenuConstraints);newNoteNameJTextField.addActionListener(this);newNoteNameJTextField.setActionCommand("newNoteNameJTextField");newNoteNamePusherJPanel.setOpaque(false);newNoteJPopupMenu.addPopupMenuListener(this);newNoteJPopupMenu.setBorder(new LineBorder(Color.BLACK, 1));newNoteJPopupMenu.setBackground(SystemWindow.lightQuintessentialThemeColor);newNoteJPopupMenu.setOpaque(false);newNoteJPopupMenu.setLayout(new GridBagLayout());newNoteJPopupMenu.add(newNoteNameJLabel, newNotePopupMenuConstraints);newNotePopupMenuConstraints.insets = new Insets(9, 9, 9, 9);newNotePopupMenuConstraints.gridx = 1;newNotePopupMenuConstraints.weightx = 1;newNotePopupMenuConstraints.fill = GridBagConstraints.HORIZONTAL;newNoteJPopupMenu.add(newNoteNameJTextField, newNotePopupMenuConstraints);newNotePopupMenuConstraints.gridx = 2;newNotePopupMenuConstraints.weightx = 0;newNoteJPopupMenu.add(newNoteNameOkJButton, newNotePopupMenuConstraints);newNotePopupMenuConstraints.gridx = 3;newNotePopupMenuConstraints.fill = GridBagConstraints.HORIZONTAL;newNotePopupMenuConstraints.weightx = 1;newNoteJPopupMenu.add(newNoteNamePusherJPanel, newNotePopupMenuConstraints);newNoteNameOkJButton.setFocusPainted(false);newNoteNameOkJButton.addActionListener(this);newNoteNameOkJButton.setActionCommand("newNoteNameOkJButton");newNoteNameOkJButton.setBackground(SystemWindow.buttonColor);openNoteJButton.setFocusPainted(false);openNoteJButton.addMouseListener(this);openNoteJButton.setName("openNoteJButton");openNoteJButton.setContentAreaFilled(false);openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setFocusPainted(false);saveAsJButton.addMouseListener(this);saveAsJButton.setName("saveAsJButton");saveAsJButton.setContentAreaFilled(false);saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));sendAsNoteJButton.setFocusPainted(false);sendAsNoteJButton.addMouseListener(this);sendAsNoteJButton.setName("sendAsNoteJButton");sendAsNoteJButton.setContentAreaFilled(false);sendAsNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));printJButton.setFocusPainted(false);printJButton.addMouseListener(this);printJButton.setName("printJButton");printJButton.setContentAreaFilled(false);printJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));findJButton.setFocusPainted(false);findJButton.addMouseListener(this);findJButton.setName("findJButton");findJButton.setContentAreaFilled(false);findJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));replaceJButton.setFocusPainted(false);replaceJButton.addMouseListener(this);replaceJButton.setName("replaceJButton");replaceJButton.setContentAreaFilled(false);replaceJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));newNoteJButton.setFocusPainted(false);newNoteJButton.addMouseListener(this);newNoteJButton.setName("newNoteJButton");newNoteJButton.setContentAreaFilled(false);newNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));closeNoteJButton.setFocusPainted(false);closeNoteJButton.addActionListener(this);closeNoteJButton.setActionCommand("closeNoteJButton");closeNoteJButton.addMouseListener(this);closeNoteJButton.setName("closeNoteJButton");closeNoteJButton.setContentAreaFilled(false);closeNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveNoteJButton.setFocusPainted(false);saveNoteJButton.addActionListener(this);saveNoteJButton.setActionCommand("saveNoteJButton");saveNoteJButton.addMouseListener(this);saveNoteJButton.setName("saveNoteJButton");saveNoteJButton.setContentAreaFilled(false);saveNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));attachToCurrentOrderJButton.setFocusPainted(false);attachToCurrentOrderJButton.addMouseListener(this);attachToCurrentOrderJButton.setName("attachToOrderJButton");attachToCurrentOrderJButton.setContentAreaFilled(false);attachToCurrentOrderJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));undoJButton.setFocusPainted(false);undoJButton.addMouseListener(this);undoJButton.addActionListener(undoAction);undoJButton.setName("undoJButton");undoJButton.setContentAreaFilled(false);undoJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));redoJButton.setFocusPainted(false);redoJButton.addMouseListener(this);redoJButton.addActionListener(redoAction);redoJButton.setName("redoJButton");redoJButton.setContentAreaFilled(false);redoJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openFileFileChooserJButton.setFocusPainted(false);openFileFileChooserJButton.addActionListener(this);openFileFileChooserJButton.setActionCommand("openFileFileChooserJButton");openFileFileChooserJButton.setBackground(SystemWindow.buttonColor);saveCopyOfFileFileChooserJButton.setFocusPainted(false);saveCopyOfFileFileChooserJButton.addActionListener(this);saveCopyOfFileFileChooserJButton.setActionCommand("saveCopyOfFileFileChooserJButton");saveCopyOfFileFileChooserJButton.setBackground(SystemWindow.buttonColor);cancelOpenFileFileChooserJButton.setFocusPainted(false);cancelOpenFileFileChooserJButton.addActionListener(this);cancelOpenFileFileChooserJButton.setActionCommand("cancelOpenFileFileChooserJButton");cancelOpenFileFileChooserJButton.setBackground(SystemWindow.buttonColor);cancelSaveCopyOfFileFileChooserJButton.setFocusPainted(false);cancelSaveCopyOfFileFileChooserJButton.addActionListener(this);cancelSaveCopyOfFileFileChooserJButton.setActionCommand("cancelSaveCopyOfFileFileChooserJButton");cancelSaveCopyOfFileFileChooserJButton.setBackground(SystemWindow.buttonColor);FileFilter imageFilter = new FileFilter() {@Overridepublic boolean accept(File file) {if (file.isDirectory()) {return true;}int separator = file.getName().lastIndexOf(".");String extension = file.getName().substring(separator + 1, file.getName().length());if (extension != null) {if (extension.equals(".rtf")) {return true;} else {return false;}}return false;}@Overridepublic String getDescription() {return "Notes are text and rich-text documents only.";}};openNoteJFileChooser.setCurrentDirectory(new File(Device.binDir + "narrative"));openNoteJFileChooser.addActionListener(this);openNoteJFileChooser.setControlButtonsAreShown(false);openNoteJFileChooser.setMultiSelectionEnabled(false);openNoteJFileChooser.setName("openNoteJFileChooser");openNoteFileChooserPanelConstraints.gridy = 0;openNoteFileChooserPanelConstraints.gridx = 0;openNoteFileChooserPanelConstraints.gridwidth = 2;openNoteFileChooserJPanel.add(openNoteJFileChooser, openNoteFileChooserPanelConstraints);openNoteFileChooserPanelConstraints.gridy = 1;openNoteFileChooserPanelConstraints.gridwidth = 1;openNoteFileChooserJPanel.add(openFileFileChooserJButton, openNoteFileChooserPanelConstraints);openNoteFileChooserPanelConstraints.gridx = 1;openNoteFileChooserJPanel.add(cancelOpenFileFileChooserJButton, openNoteFileChooserPanelConstraints);saveCopyJFileChooser.setDialogType(JFileChooser.SAVE_DIALOG);saveCopyJFileChooser.addActionListener(this);saveCopyJFileChooser.setControlButtonsAreShown(false);saveCopyJFileChooser.setMultiSelectionEnabled(false);saveCopyJFileChooser.setName("saveCopyJFileChooser");saveCopyFileChooserPanelConstraints.gridy = 0;saveCopyFileChooserPanelConstraints.gridx = 0;saveCopyFileChooserPanelConstraints.gridwidth = 2;saveCopyFileChooserJPanel.add(saveCopyJFileChooser, saveCopyFileChooserPanelConstraints);saveCopyFileChooserPanelConstraints.gridy = 1;saveCopyFileChooserPanelConstraints.gridwidth = 1;saveCopyFileChooserJPanel.add(saveCopyOfFileFileChooserJButton, saveCopyFileChooserPanelConstraints);saveCopyFileChooserPanelConstraints.gridx = 1;saveCopyFileChooserJPanel.add(cancelSaveCopyOfFileFileChooserJButton, saveCopyFileChooserPanelConstraints);openNoteJButton.setHorizontalTextPosition(SwingConstants.LEFT);sendAsNoteJButton.setHorizontalTextPosition(SwingConstants.LEFT);findJButton.setHorizontalTextPosition(SwingConstants.LEFT);saveAsJButton.setHorizontalTextPosition(SwingConstants.LEFT);printJButton.setHorizontalTextPosition(SwingConstants.LEFT);replaceJButton.setHorizontalTextPosition(SwingConstants.LEFT);menuBar.add(newNoteJButton);menuBar.add(closeNoteJButton);menuBar.add(openNoteJButton);menuBar.add(saveNoteJButton);menuBar.add(saveAsJButton);menuBar.add(undoJButton);menuBar.add(redoJButton);menuBar.add(printJButton);menuBar.add(findJButton);menuBar.add(sendAsNoteJButton);menuBar.add(attachToCurrentOrderJButton);menuBar.setBackground(SystemWindow.quintessentialThemeColor);menuBar.setBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 0, Color.WHITE), new MatteBorder(0, 0, 1, 0, Color.BLACK)));menuBarPanelConstraints.insets = new Insets(0, 7, 0, 0);menuBarPanelConstraints.weightx = 1;menuBarPanelConstraints.fill = GridBagConstraints.HORIZONTAL;menuBarJPanel.setBackground(SystemWindow.quintessentialThemeColor);menuBarJPanel.add(menuBar, menuBarPanelConstraints);notePadJTextPane.setEditorKit(hTMLEditorKit);notePadJTextPane.addFocusListener(this);notePadJTextPane.addMouseListener(this);notePadJTextPane.setName("notePadJTextPane");notePadJTextPane.setEditable(false);notePadJTextPane.setBackground(SystemWindow.lightQuintessentialThemeColor);notesPanelConstraints.weighty = 1;notesPanelConstraints.weightx = 1;notesPanelConstraints.gridy = 0;notesPanelConstraints.gridx = 0;notesPanelConstraints.gridheight = 3;notesPanelConstraints.fill = GridBagConstraints.BOTH;notesJPanel.add(fileChooserJPanel, notesPanelConstraints);notesPanelConstraints.gridheight = 1;notesPanelConstraints.weighty = 0;notesPanelConstraints.weightx = 1;notesPanelConstraints.fill = GridBagConstraints.HORIZONTAL;notesPanelConstraints.gridy = 1;notesPanelConstraints.weightx = 1;notesPanelConstraints.fill = GridBagConstraints.NONE;notesPanelConstraints.anchor = GridBagConstraints.WEST;notesPanelConstraints.insets = new Insets(5, 0, 0, 0);notesJPanel.add(fontJPanel, notesPanelConstraints);notesPanelConstraints.gridy = 2;notesPanelConstraints.weighty = 1;notesPanelConstraints.weightx = 1;notesPanelConstraints.fill = GridBagConstraints.BOTH;notesPanelConstraints.anchor = GridBagConstraints.CENTER;notesJPanel.add(notePadJScrollPane, notesPanelConstraints);fileChooserPusherJPanel.setOpaque(false);fileChooserJPanel.setOpaque(false);fileChooserPanelConstraints.gridy = 1;fileChooserPanelConstraints.gridx = 1;fileChooserPanelConstraints.weighty = 1;fileChooserPanelConstraints.weightx = 1;fileChooserPanelConstraints.fill = GridBagConstraints.BOTH;fileChooserJPanel.add(fileChooserPusherJPanel, fileChooserPanelConstraints);fileChooserPanelConstraints.gridy = 0;fileChooserPanelConstraints.gridx = 0;fileChooserPanelConstraints.weighty = 0;fileChooserPanelConstraints.weightx = 0;fileChooserPanelConstraints.fill = GridBagConstraints.NONE;fileChooserPanelConstraints.anchor = GridBagConstraints.NORTHWEST;fileChooserJPanel.add(openNoteFileChooserJPanel, fileChooserPanelConstraints);fileChooserJPanel.add(saveCopyFileChooserJPanel, fileChooserPanelConstraints);openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);openNoteFileChooserJPanel.setBorder(new LineBorder(Color.BLACK, 1));saveCopyFileChooserJPanel.setBorder(new LineBorder(Color.BLACK, 1));threeDHumanPanelConstraints.weighty = 1;threeDHumanPanelConstraints.weightx = 1;threeDHumanPanelConstraints.fill = GridBagConstraints.BOTH;threeDHumanJMenu.add(threeDHumanJPanel);threeDHumanJPanel.add(new JLabel(new ImageIcon("C:/Documents and Settings/Kathy Guard/Device/body.gif")), threeDHumanPanelConstraints);threeDHumanJMenu.setContentAreaFilled(false);ImageIcon threeDBodyImageIcon = new ImageIcon("C:/Documents and Settings/Kathy Guard/Device/body.gif");threeDHumanJMenu.setIcon(new ImageIcon("C:/Documents and Settings/Kathy Guard/Device/bodyIcon.gif"));threeDHumanJMenu.setActionCommand("threeDBodyJButton");threeDHumanJMenu.addActionListener(this);noteTemplatesPanelConstraints.fill = GridBagConstraints.BOTH;noteTemplatesPanelConstraints.weighty = 0;noteTemplatesPanelConstraints.weightx = 1;fontSizeJTextField.setHorizontalAlignment(SwingConstants.CENTER);fontSizeJTextField.setText("20");fontSizeJTextField.addActionListener(this);fontSizeJTextField.setActionCommand("fontSizeJTextField");fontSizeJTextField.setBorder(new BevelBorder(BevelBorder.LOWERED));arielJButton.setFocusPainted(false);arielJButton.addActionListener(this);arielJButton.setActionCommand("arielJButton");arielJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));arielJButton.setContentAreaFilled(false);serifJButton.setFocusPainted(false);serifJButton.addActionListener(this);serifJButton.setActionCommand("serifJButton");serifJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));serifJButton.setContentAreaFilled(false);boldJToggleButton.setFocusPainted(false);boldJToggleButton.addMouseListener(this);boldJToggleButton.setName("boldJToggleButton");boldJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));boldJToggleButton.setContentAreaFilled(false);italicJToggleButton.setFocusPainted(false);italicJToggleButton.addMouseListener(this);italicJToggleButton.setName("italicJToggleButton");italicJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));italicJToggleButton.setContentAreaFilled(false);underlineJToggleButton.setFocusPainted(false);underlineJToggleButton.addMouseListener(this);underlineJToggleButton.setName("underlineJToggleButton");underlineJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));underlineJToggleButton.setContentAreaFilled(false);fontJPanel.setOpaque(false);fontPanelConstraints.gridx = 0;fontPanelConstraints.insets = new Insets(5, 0, 5, 10);fontJPanel.add(arielJButton, fontPanelConstraints);fontPanelConstraints.gridx = 1;fontJPanel.add(serifJButton, fontPanelConstraints);fontPanelConstraints.gridx = 2;fontJPanel.add(fontSizeJLabel, fontPanelConstraints);fontPanelConstraints.gridx = 3;fontJPanel.add(fontSizeJTextField, fontPanelConstraints);fontPanelConstraints.gridx = 4;fontJPanel.add(boldJToggleButton, fontPanelConstraints);fontPanelConstraints.gridx = 5;fontJPanel.add(italicJToggleButton, fontPanelConstraints);fontPanelConstraints.gridx = 6;fontJPanel.add(underlineJToggleButton, fontPanelConstraints);InputMap inputMap = notePadJTextPane.getInputMap();KeyStroke key = KeyStroke.getKeyStroke(KeyEvent.VK_B, Event.CTRL_MASK);inputMap.put(key, DefaultEditorKit.backwardAction);key = KeyStroke.getKeyStroke(KeyEvent.VK_F, Event.CTRL_MASK);inputMap.put(key, DefaultEditorKit.forwardAction);key = KeyStroke.getKeyStroke(KeyEvent.VK_P, Event.CTRL_MASK);inputMap.put(key, DefaultEditorKit.upAction);key = KeyStroke.getKeyStroke(KeyEvent.VK_N, Event.CTRL_MASK);inputMap.put(key, DefaultEditorKit.downAction);key = KeyStroke.getKeyStroke(KeyEvent.VK_Z, Event.CTRL_MASK);inputMap.put(key, undoAction);key = KeyStroke.getKeyStroke(KeyEvent.VK_Y, Event.CTRL_MASK);inputMap.put(key, redoAction);notesJPanel.setBackground(SystemWindow.quintessentialThemeColor);setLocation(50, 50);setSize(new Dimension(100, 100));setPreferredSize(new Dimension(100, 100));GridBagConstraints thisContraints = new GridBagConstraints();thisContraints.weighty = 1;thisContraints.weightx = 1;thisContraints.fill = GridBagConstraints.BOTH;setLayout(new BorderLayout(0, 0));add(menuBarJPanel, BorderLayout.NORTH);add(notesJPanel, BorderLayout.CENTER);}@Overridepublic void actionPerformed(ActionEvent e) {if (e.getActionCommand().equals("closeWithoutSavingJButton")) {notePadJTextPane.setText("");closeWithOrWithoutSavingPromptJPopupMenu.setVisible(false);closeNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));notePadJTextPane.setText("");savedString = "";notePadJTextPane.setEditable(false);notePadJTextPane.setBackground(SystemWindow.lightQuintessentialThemeColor);isNoteOpen = false;addTalkbackText("Note \"" + noteName + "\" closed without saving", null, false);repaint();} else if (e.getActionCommand().equals("saveNoteAndCloseJButton")) {saveNoteJButton.doClick();notePadJTextPane.setText("");notePadJTextPane.setEditable(false);notePadJTextPane.setBackground(SystemWindow.lightQuintessentialThemeColor);closeWithOrWithoutSavingPromptJPopupMenu.setVisible(false);closeNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));notePadJTextPane.setText("");savedString = "";notePadJTextPane.setEditable(false);isNoteOpen = false;addTalkbackText("Note \"" + noteName + "\" saved and closed", null, false);repaint();} else if (e.getActionCommand().equals("openFileFileChooserJButton")) {openNoteJFileChooser.approveSelection();try {InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(openNoteJFileChooser.getSelectedFile().getAbsolutePath()));notePadJTextPane.getEditorKit().read(inputStreamReader, notePadJTextPane.getDocument(), 0);inputStreamReader.close();savedString = notePadJTextPane.getDocument().getText(0, notePadJTextPane.getDocument().getLength());((HTMLDocument) notePadJTextPane.getDocument()).addUndoableEditListener(new MyUndoableEditListener());notePadJTextPane.setCharacterAttributes(getFontAttributes(), false);notePadJTextPane.setEditable(true);notePadJTextPane.setBackground(Color.WHITE);notePadJTextPane.requestFocusInWindow();isNoteOpen = true;addTalkbackText(openNoteJFileChooser.getSelectedFile().getName() + " opened", null, false);} catch (Exception e1) {addTalkbackText("Error opening " + openNoteJFileChooser.getSelectedFile().getName(), null, true);e1.printStackTrace();}openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);repaint();} else if (e.getActionCommand().equals("saveCopyOfFileFileChooserJButton")) {saveCopyJFileChooser.approveSelection();BasicFileChooserUI ui = (BasicFileChooserUI) saveCopyJFileChooser.getUI();ui.getApproveSelectionAction().actionPerformed(null);noteName = saveCopyJFileChooser.getSelectedFile().getName();System.out.println("copied and saved note name: " + noteName);try {BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream("narrative" + File.separator + noteName + ".html"));OutputStreamWriter outputStreamWriter = new OutputStreamWriter(bufferedOutputStream);outputStreamWriter.write(((HTMLDocument) notePadJTextPane.getDocument()).getText(0, ((HTMLDocument) notePadJTextPane.getDocument()).getLength()));outputStreamWriter.close();savedString = notePadJTextPane.getDocument().getText(0, notePadJTextPane.getDocument().getLength());addTalkbackText(noteName + " saved", null, false);} catch (Exception e1) {addTalkbackText("Failed to save " + openNoteJFileChooser.getSelectedFile().getName(), null, true);System.out.println("Error saving " + openNoteJFileChooser.getSelectedFile().getName());e1.printStackTrace();}saveCopyFileChooserJPanel.setVisible(false);saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));validate();repaint();} else if (e.getActionCommand().equals("newNoteNameJTextField") || e.getActionCommand().equals("newNoteNameOkJButton")) {noteName = newNoteNameJTextField.getText();newNoteNameJTextField.setText("");HTMLDocument hTMLDocument = (HTMLDocument) hTMLEditorKit.createDefaultDocument();hTMLDocument.addUndoableEditListener(new MyUndoableEditListener());notePadJTextPane.setCharacterAttributes(getFontAttributes(), false);notePadJTextPane.setDocument(hTMLDocument);notePadJTextPane.setEditable(true);notePadJTextPane.setBackground(Color.WHITE);notePadJTextPane.requestFocusInWindow();isNoteOpen = true;try {savedString = notePadJTextPane.getDocument().getText(0, notePadJTextPane.getDocument().getLength());} catch (BadLocationException e2) {System.out.println("NotePad BadLocationException e2");e2.printStackTrace();}addTalkbackText("New note \"" + noteName + "\" created", null, false);newNoteJPopupMenu.setVisible(false);newNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));} else if (e.getActionCommand().equals("arielJButton")) {arielJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));serifJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));notePadJTextPane.requestFocusInWindow();} else if (e.getActionCommand().equals("serifJButton")) {serifJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));arielJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));notePadJTextPane.requestFocusInWindow();} else if (e.getActionCommand().equals("cancelOpenFileFileChooserJButton")) {openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);repaint();} else if (e.getActionCommand().equals("cancelSaveCopyOfFileFileChooserJButton")) {saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (e.getActionCommand().equals("titleBarCloseJButton")) {setVisible(false);}}private AttributeSet getFontAttributes() {SimpleAttributeSet attrs = new SimpleAttributeSet();if (boldJToggleButton.isSelected()) {StyleConstants.setBold(attrs, true);} else {StyleConstants.setBold(attrs, false);}if (italicJToggleButton.isSelected()) {StyleConstants.setItalic(attrs, true);} else {StyleConstants.setItalic(attrs, false);}if (underlineJToggleButton.isSelected()) {StyleConstants.setUnderline(attrs, true);} else {StyleConstants.setUnderline(attrs, false);}try {int fontSize = Integer.parseInt(fontSizeJTextField.getText());if (fontSize < 48 && fontSize > 8) {StyleConstants.setFontSize(attrs, fontSize);} else {fontSizeJTextField.setText("18");StyleConstants.setFontSize(attrs, 18);}} catch (Exception e) {addTalkbackText("Font size must be between 10 and 48", null, true);StyleConstants.setFontSize(attrs, 18);}if (arielJButton.isSelected()) {StyleConstants.setFontFamily(attrs, "Ariel");} else {StyleConstants.setFontFamily(attrs, "Serif");}return attrs;}@Overridepublic void focusGained(FocusEvent fe) {openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);validate();repaint();}@Overridepublic void focusLost(FocusEvent fe) {}@Overridepublic void popupMenuCanceled(PopupMenuEvent arg0) {newNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));closeNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}@Overridepublic void popupMenuWillBecomeInvisible(PopupMenuEvent arg0) {}@Overridepublic void popupMenuWillBecomeVisible(PopupMenuEvent arg0) {}private void resetFont() {if (isNoteOpen) {if (notePadJTextPane.getCharacterAttributes().containsAttribute(StyleConstants.Bold, true)) {boldJToggleButton.setSelected(true);boldJToggleButton.setBorder(new BevelBorder(BevelBorder.LOWERED));} else {boldJToggleButton.setSelected(false);boldJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}if (notePadJTextPane.getCharacterAttributes().containsAttribute(StyleConstants.Italic, true)) {italicJToggleButton.setBorder(new BevelBorder(BevelBorder.LOWERED));} else {italicJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}if (notePadJTextPane.getCharacterAttributes().containsAttribute(StyleConstants.Underline, true)) {underlineJToggleButton.setBorder(new BevelBorder(BevelBorder.LOWERED));} else {System.out.println("not underlined");underlineJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}if (notePadJTextPane.getCharacterAttributes().getAttribute(StyleConstants.FontFamily) != null) {if (notePadJTextPane.getCharacterAttributes().getAttribute(StyleConstants.FontFamily).equals("Serif")) {serifJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));arielJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));} else {arielJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));serifJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}}fontSizeJTextField.setText(String.valueOf((Integer) (notePadJTextPane.getCharacterAttributes().getAttribute(StyleConstants.FontSize))));repaint();}}public void mouseClicked(MouseEvent m) {if (((Component) (m.getSource())).getName().equals("notePadJTextPane")) {resetFont();} else if (((Component) (m.getSource())).getName().equals("boldJToggleButton")) {openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);SimpleAttributeSet attrs = new SimpleAttributeSet();if (boldJToggleButton.isSelected()) {StyleConstants.setBold(attrs, true);notePadJTextPane.setCharacterAttributes(attrs, false);boldJToggleButton.setBorder(new BevelBorder(BevelBorder.LOWERED));} else {StyleConstants.setBold(attrs, false);notePadJTextPane.setCharacterAttributes(attrs, false);boldJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}notePadJTextPane.requestFocusInWindow();repaint();} else if (((Component) (m.getSource())).getName().equals("italicJToggleButton")) {openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);SimpleAttributeSet attrs = new SimpleAttributeSet();if (italicJToggleButton.isSelected()) {StyleConstants.setItalic(attrs, true);notePadJTextPane.setCharacterAttributes(attrs, false);italicJToggleButton.setBorder(new BevelBorder(BevelBorder.LOWERED));} else {StyleConstants.setItalic(attrs, false);notePadJTextPane.setCharacterAttributes(attrs, false);italicJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}notePadJTextPane.requestFocusInWindow();repaint();} else if (((Component) (m.getSource())).getName().equals("underlineJToggleButton")) {openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);SimpleAttributeSet attrs = new SimpleAttributeSet();if (underlineJToggleButton.isSelected()) {StyleConstants.setUnderline(attrs, true);notePadJTextPane.setCharacterAttributes(attrs, false);underlineJToggleButton.setBorder(new BevelBorder(BevelBorder.LOWERED));} else {StyleConstants.setUnderline(attrs, false);notePadJTextPane.setCharacterAttributes(attrs, false);underlineJToggleButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));}notePadJTextPane.requestFocusInWindow();repaint();}}public void mousePressed(MouseEvent m) {if (((Component) (m.getSource())).getName().equals("newNoteJButton")) {openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);if (!isNoteOpen) {newNoteJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));newNoteJPopupMenu.setPreferredSize(new Dimension(talkbackJPanel.getSize().width, talkbackJPanel.getSize().height + 2));addTalkbackText("", null, false);newNoteJPopupMenu.show(talkbackJPanel, 0, -2);} else {addTalkbackText("Please close the open note before creating a new note", null, true);}} else if (((Component) (m.getSource())).getName().equals("closeNoteJButton")) {closeNoteJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));if (isNoteOpen) {try {if (savedString.equals(notePadJTextPane.getDocument().getText(0, notePadJTextPane.getDocument().getLength()))) {notePadJTextPane.setText("");savedString = "";notePadJTextPane.setEditable(false);notePadJTextPane.setBackground(SystemWindow.lightQuintessentialThemeColor);isNoteOpen = false;addTalkbackText("Note \"" + noteName + "\" closed", null, false);} else {closeWithOrWithoutSavingPromptJPopupMenu.show(closeNoteJButton, 0, closeNoteJButton.getHeight());}} catch (BadLocationException e1) {System.out.println("Fail - NotePad.actionPerformed(...): e.getActionCommand().equals(\"closeNoteJButton\")");e1.printStackTrace();}} else {addTalkbackText("There is no opened chart to close", null, true);}} else if (((Component) (m.getSource())).getName().equals("openNoteJButton")) {saveCopyFileChooserJPanel.setVisible(false);openNoteJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));if (!isNoteOpen) {openNoteFileChooserJPanel.setVisible(true);validate();repaint();} else {addTalkbackText("Please close the open note before opening another note", null, true);}} else if (((Component) (m.getSource())).getName().equals("saveNoteJButton")) {saveNoteJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));if (isNoteOpen) {try {BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream("narrative" + File.separator + noteName + ".html"));OutputStreamWriter outputStreamWriter = new OutputStreamWriter(bufferedOutputStream);outputStreamWriter.write(notePadJTextPane.getText());outputStreamWriter.close();savedString = notePadJTextPane.getDocument().getText(0, notePadJTextPane.getDocument().getLength());addTalkbackText(noteName + " saved", null, false);} catch (Exception e1) {addTalkbackText("Failed to save " + openNoteJFileChooser.getSelectedFile().getName(), null, true);System.out.println("Error saving " + openNoteJFileChooser.getSelectedFile().getName());e1.printStackTrace();}repaint();} else {addTalkbackText("There is no open note to save", null, true);}} else if (((Component) (m.getSource())).getName().equals("saveAsJButton")) {saveAsJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);if (isNoteOpen) {saveCopyFileChooserJPanel.setVisible(true);} else {addTalkbackText("There is no open note to copy", null, true);}repaint();} else if (((Component) (m.getSource())).getName().equals("printJButton")) {printJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (((Component) (m.getSource())).getName().equals("undoJButton")) {undoJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (((Component) (m.getSource())).getName().equals("redoJButton")) {redoJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (((Component) (m.getSource())).getName().equals("findJButton")) {findJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (((Component) (m.getSource())).getName().equals("replaceJButton")) {replaceJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (((Component) (m.getSource())).getName().equals("sendAsNoteJButton")) {sendAsNoteJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);repaint();} else if (((Component) (m.getSource())).getName().equals("attachToOrderJButton")) {attachToCurrentOrderJButton.setBorder(new BevelBorder(BevelBorder.LOWERED));openNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));saveAsJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));openNoteFileChooserJPanel.setVisible(false);saveCopyFileChooserJPanel.setVisible(false);addTalkbackText("Attached note as narrative to item 4, page 3, demographics section.", null, false);validate();repaint();}super.mousePressed(m);}public void mouseEntered(MouseEvent e) {}public void mouseExited(MouseEvent e) {}public void mouseReleased(MouseEvent m) {if (((Component) (m.getSource())).getName().equals("notePadJTextPane")) {resetFont();} else if (((Component) (m.getSource())).getName().equals("saveNoteJButton")) {saveNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("closeNoteJButton") && !closeWithOrWithoutSavingPromptJPopupMenu.isShowing()) {closeNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("printJButton")) {printJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("undoJButton")) {undoJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("redoJButton")) {redoJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("findJButton")) {findJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("sendAsNoteJButton")) {sendAsNoteJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("attachToOrderJButton")) {attachToCurrentOrderJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();} else if (((Component) (m.getSource())).getName().equals("replaceJButton")) {replaceJButton.setBorder(new LineBorder(new Color(170, 170, 170, 0), 2));repaint();}super.mouseReleased(m);}class UndoAction extends AbstractAction {public UndoAction() {super("Undo");setEnabled(false);}public void actionPerformed(ActionEvent e) {try {undo.undo();} catch (CannotUndoException ex) {System.out.println("Unable to undo: " + ex);ex.printStackTrace();}updateUndoState();redoAction.updateRedoState();}protected void updateUndoState() {if (undo.canUndo()) {setEnabled(true);putValue(Action.NAME, undo.getUndoPresentationName());} else {setEnabled(false);putValue(Action.NAME, "Undo");}}}class RedoAction extends AbstractAction {public RedoAction() {super("Redo");setEnabled(false);}public void actionPerformed(ActionEvent e) {try {undo.redo();} catch (CannotRedoException ex) {System.out.println("Unable to redo: " + ex);ex.printStackTrace();}updateRedoState();undoAction.updateUndoState();}protected void updateRedoState() {if (undo.canRedo()) {setEnabled(true);putValue(Action.NAME, undo.getRedoPresentationName());} else {setEnabled(false);putValue(Action.NAME, "Redo");}}}protected class MyUndoableEditListener implements UndoableEditListener {public void undoableEditHappened(UndoableEditEvent e) {undo.addEdit(e.getEdit());undoAction.updateUndoState();redoAction.updateRedoState();}}}// EOF