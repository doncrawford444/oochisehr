MolecularAssembler__________________primaryNetworksEndPoints : Vector<Point[]>primaryNetworksDistancesBetweenEndPoints : Vector<Double> = new Vector<Double>primaryNetworksPaths : Vector<Vector<Vector<String[]>>>primaryNetworksPointLocations : Vector<Vector<Vector<Point>>>secondaryNetworksPaths : Vector<Vector<Vector<String[]>>>tertiaryNetworks : Vector<Vector<Vector<String[]>>>tertiaryNetworksPolyLinePointsX : Vector<int[]>tertiaryNetworksPolyLinePointsY : Vector<int[]>primaryNetworksLinearPointLocations : Vector<Vector<Vector<Vector<Point>>>> = new Vector<Vector<Vector<Vector<Point>>>>secondaryNetworksLinearPointLocations : Vector<Vector<Vector<Vector<Point>>>> = new Vector<Vector<Vector<Vector<Point>>>>primaryNetworksLinearPathsFromRootToCommonBiomoieties : Vector<Vector<Vector<Vector<String[]>>>> = new Vector<Vector<Vector<Vector<String[]>>>>secondaryNetworksLinearPathsFromRootToCommonBiomoieties : Vector<Vector<Vector<Vector<String[]>>>> = new Vector<Vector<Vector<Vector<String[]>>>>copiedBiomoietyGridLoci : VectorprimaryNetworksCommonBiomoietyIndiceLocations : Vector<Vector<Integer>>secondaryNetworksCommonBiomoietyIndiceLocations : Vector<Vector<Integer>>locationsOfIdenticalBiomoieties : VectornumElements : inttestAbstractBlurbInd : int = 0overRidePubMedRetrievalWithLocalFiles : boolean = truepublicationSentencesWithMoreThanOneBiomoiety : Vector<Vector<Vector<String[]>>> = new Vector<Vector<Vector<String[]>>>biomoietyPairs : Vector<Vector<Vector<String[]>>>primaryNetworksBiomoietyPairs : Vector<Vector<Vector<String[]>>>primaryNetworksBiomoietyGridLoci : Vector<Vector<Vector<String[]>>>secondaryNetworksBiomoietyGridLoci : Vector<Vector<Vector<String[]>>>calculateSecondaryNetworks : boolean = falsereferencePublications : Vector<String[]>biomoietyDictionaryAliasTerms : Vector<String[]> = new Vector<String[]>theTotalNumberOfPublications : intbiomoietyDictionaryEntryTerms : Vector<Vector<String>> = new Vector<Vector<String>>(28000, 20)sentencesInTheAbstract : Vector<Vector<String>> = new Vector<Vector<String>>biomoietyGridLoci : Vector = new Vector__________________________________________________________________________________________________________________________________________________makeDictionaryTermVector() : vgetBiomoietyLocations(pPublicationBlurbs : Vector<String[]>) : Vector<Vector<String[]>>getPublicationsAndTagTheBiomoieties(parsedQuery : String) : Vector<Vector<String[]>>translateArticlesWithBiomoietiesToArticleSentencesWithMoreThanOneBiomoiety(articles : Vector<Vector<String[]>>) : Vector<Vector<Vector<String[]>>>translateArticleSentencesWithMoreThanOneBiomoietyToGridVector(firstOrderPathways : Vector<Vector<Vector<String[]>>>) : VectorcountOfStringArrayVectorElements(vector : Vector) : intassemble(targetStructure : Vector, addingStructure : Vector, addingStructureInd : int, hUGOIDsOfBiomoietiesFromRoot : Vector<String>, location : Vector<Integer>, added : boolean) : booleanfillCommonBiomoietyLocationVector(biomoietyGridLociOne : Vector, biomoietyGridLociTwo : Vector, commonBiomoietyIndiceLocations : Vector<Vector<Integer>>, location : Vector<Integer>) : Vector<Vector<Integer>>searchForBiomoiety(vector : Vector, biomoietyHUGOID : String, location : Vector<Integer>, found : boolean) : booleancreateLinearPathsBetweenRootAndCommonBiomoieties(commonBiomoietyLocations : Vector<Vector<Integer>>, primaryOrSecondaryNetworks : String) : vprintLocations(vector : Vector, callingObjectStructure : String, location : Vector<Integer>) : vgetFullNetworkPaths(primaryOrSecondaryNetworks : String) : Object[]printLinears(linear : Vector<Vector<Vector<Vector<String[]>>>>) : vcopyComplexStringArrayVector(vector : Vector) : VectoraddNewBiomoietyPairAsNewRootFan(biomoiety1 : String[], biomoiety2 : String[]) : vaddNewBiomoietyPairToExistingRootFan(rootBiomoiety : String[], nodalBiomoiety : String[], locationInStructure : Vector<Integer>) : vprintV(v : Vector, vectorID : String, nodeLocation : int[], level : int) : vparseQuery(query : String) : StringcreateNLMFileConnectionBufferedReader(pQuery : String) : BufferedReaderprintB(vector : Vector, callingObjectStructure : String, location : Vector<Integer>) : vcalculateSecondaryNetworksPaths(primaryNetworksPathsAndPointLocations : Object[], secondaryNetworksPathsAndPointLocations : Object[]) : vprintCombined(pathsObject : Object[]) : vcalculateIntersectingTertiaryNetworksGraphicPrimitives() : vcalculateTertiaryNetworksPathPoints(pSecondaryNetworksInd : int, loopedOrUnlooped : String) : vpolygonSegmentToSegmentAndEndpointAngles(pathSize : double, segmentLength : double, distBetweenPrimaryNetworksPoints : double, returnPathInd : int) : double[]// EOF