<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" type="text/css" href="oochis manual.css">
</head>
<body>
<h2 id="sectionHeader">3.3 Customizing</h2>
<p>
It is common practice for health care providers to customize their health software with in-house expertise and/or biomedical informatics personnel or services. The larger and more complex the starting source code is, the more time and consultation is required to install and maintain the new software system (or HIS). Managing &quotcomplex meaning,&quot and information overload is absolutely critical at the outset of an implementation.
<br><br>
The global standard health information technology language is object-oriented. Instead of using narrative, or colloquial English, object language only has constructs for objects and their relations. One may describe objects in metaphor, analogy, and precisely. Medical object language may be used in the precise language of machine instructions (software programming) and straightforwardly transliterated into and between formal medical requirements. These formal medical (executive) requirements are considered business objects, and business objects and software objects are always treated as the same one converged meta-object with a singular purpose (and concept), which helps one, focus on the reality rather than tangentile, or impractical or unimplementable projects, and prevent them from being weldable at the table/outset a professional project (or task). The same medical business object (see &quotMeta-object universe&quot) has many attribute (or component) objects, and many perspectives (views of data). Solving complex meaning and information overload and practical, working {associative} limits, and perform any desired technical medical process change {STOP}.
<br><br>
Oochis EHR's event-based object interface means that with the exception of data-entry, every user activity in Oochis can be operated with a mouse, as well as a sequence of shortcuts. Situational awareness is handled visio-spacially with on-screen medical objects. Every visible object and function that the onscreen objects deliver are precisely described in the user guide - and especially so in the OOCHIS crystal diagram (that includes mappings to machine code). Software components from alternative systems may be modeled in the OOCHIS diagram - if not comletely, then at least with high-level abstraction. All EHR software should come with a structural diagram of how it processes things, generally and precisely, perhaps semantically, but it has to be useable, wieldable, and precise.
<br><br>
Front-end and back-end data:
<br><br>
Select the right domain of data, concepts or areas of specific use (functionality) that serve to identify the meta object (the business object). Some aspects of the meta object may only be describing the user experience (the graphical objects and interface, and manipulation of health information content) while any process or technical aspects are handled in technical object-oriented medical English. The open sourced CHIS/EHR paradigm architecture removes confounding, superfluous, obsolete, and outright confounding software concepts and layers. software and architectural layers (architectural, semantic, and pragmatic [component level]). Processing in English through to source code.
<br><br>
Examples of customized changes are unique medical form layouts, special controls (buttons, check boxes, widgets), specialized graphics and themes, and arbitrary changes in data routing (service or protocol changes), integrations beyond reading shared data files (such as data streams for your favorite database app, or object request-brokering. CHIS data exchange events integrates with EHR events at the meta-object-level. The resulting model is nearly infinite on programmatic possibilities (see &quotMedical object processing protocol&quot) networked systems engineering, and thusly, no other software is required to completely describe the system.
<br><br>
An example of customizing is adding new window-frames or extending the Window class, adding a corresponding start button to the task bar, and modifying a method that switches windows when buttons are clicked ('switchActiveWindowTo').
<br><br>
Also, [software] some components may easily be removed from the workspace in 'System' &#8594 'Set up'.
<br><br>
The basic features of modern EHR solutions reflect the NCO's certification criteria. See, &quot-ONC certification criteria,&quot for a detailed description of areas covered by both NCO certification criteria, and Oochis EHR. Oochis EHR is not (yet) an NCO-certified EHR solution (Oochis EHR is currently in developmental stage, concomitant with this draft user guide).
<br><br>
The five main Oochis EHR windows and Access are named after the category of medical features they contain. All-together, these six concepts contain all the programmatic features (and business objects) of the EHR solution. These six concepts provide the mental and practical framework to help guide modifications, and to contain and explain all working health IT concepts in a comprehensible and intuitive working model. Moreover, any programmatic concept that cannot fit within this framework, may fit in the workspace object (and source code file). Above this, are integrations to other, arbitrary software through for example, CORBA.
<br><br>
Each Oochis EHR software component combines the graphical machine instructions with their associated rules and processes for the data they capture and relay. Each main software component's machine instructions are described, at the highest level (the semantic working and modeled level), by a unique text (source code) file of the same name. Example: the charting software component displays a medical chart on-screen with recognizable chart objects (tabs, sections, papers, CPOE panel); the business processes and rules associated with these chart objects are in the same text (source code) file.
<br><br>
There must (always) exist a minimum set of requirements (NCO criteria, &quotmeaningful use,&quot and other regulatory stipulations, licensed use of standards), and expectations (executive requirements) in any processing system. This minimum set must be understood by the physician, as he is the author of the requirements. when the processes of medical technology go beyond the call of the physician, they are packaged as precise objects understandable by the human physician as sufficing, and nothing more. Processes that use medical information must be presented (as in able to be presented) to the physician as ordered.
<br><br>
CHIS/EHR architecture
<br>
The source code files are useful in discussing medical topics and transliterating the language (logic) of the source code in formal medical business objects. These formal medical business objects can be used in confidence in vetting and working with formal linguistic items (&quotblurbs&quot) in: evaluations; boardroom meetings; diagramming and project planning, and creating (and completing) health IT project deliverables. convenient inexpensive and powerful leveraging the entities; objects; models; of the CHIS/EHR criteria- and- standards- forming bodies).
<br><br>
Furthermore, the six-tiered EHR system is an exhaustive hierarchy of medical concepts. Explicitly, all medical concepts are included somewhere in this model scheme. Even so, many features and helper classes are outside the six main classes mentioned. Nonetheless, the user controls are all found on and in, only these six (for example, the note pad's control [open button] is found within the ChartingWindow so narrative can be entered into a chart, yet the note pad's source is in a separate class).
</p>
</body>
</html>
