/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.Color;import java.util.Vector;import javax.swing.ImageIcon;class AdministratorData {	static Vector<String> recentChartID = new Vector<String>();	static Vector<Object> defaultLogoff = new Vector<Object>(20, 20);	static Vector<Object> defaultCharts = new Vector<Object>(20, 20);	static Vector defaultDecisionSupport = new Vector(20, 20);	static Vector<Vector<Object>> rootDecisionSupportStatisticsMedicalCodeGroups = new Vector<Vector<Object>>(20, 20);	static Vector<Vector<Object>> rootDecisionSupportStatisticsPatientChartGroups = new Vector<Vector<Object>>(20, 20);	static Vector<Vector<Object>> rootDecisionSupportStatisticsTimeRangeGroups = new Vector<Vector<Object>>(20, 20);	static Vector<Vector<Vector<Object>>> rootDecisionSupportDecisionAnalysisTreatmentCostsAnalysisICERValues = new Vector<Vector<Vector<Object>>>();	static Vector<Vector<Vector<Object>>> rootDecisionSupportDecisionAnalysisCostEffectivenessOrUtilityAnalyses = new Vector<Vector<Vector<Object>>>();	static Vector<Object> defaultSystem = new Vector<Object>(20, 20);	static Vector<Object> defaultMessaging = new Vector<Object>(20, 20);	static Vector defaultPracticeAssistant = new Vector(20, 20);	static Vector<Vector<Object>> allUserData = new Vector<Vector<Object>>();	static Vector<Object> individualUserData = new Vector<Object>();	static Vector userSystem = new Vector();	static Vector userCharting = new Vector();	static Vector userMessaging = new Vector();	static Vector userDecisionSupport = new Vector();	static Vector userPracticeAssistant = new Vector();	static Vector userInternetBrowser = new Vector();	static Vector userQuery = new Vector();	static Vector userStatistics = new Vector();	static Vector userTreatmentAnalyses = new Vector();	static Vector userRules = new Vector();	static Vector userTranslationalMedicine = new Vector();	static Vector<Vector<Object>> userCostAnalyses = new Vector<Vector<Object>>();	static Vector<Vector<Object>> userEffectCurves = new Vector<Vector<Object>>();	static Vector<Vector<Object>> userPlanModels = new Vector<Vector<Object>>();	static Vector<Vector<Vector<Vector<Object>>>> rootPracticeAssistantAppointments = new Vector<Vector<Vector<Vector<Object>>>>();	static Vector<Vector<String>> rootPracticeAssistantUserGroups = new Vector<Vector<String>>(20, 20);	static Vector<Object> templates = new Vector<Object>();	static int defaultMaxUsers = 20;	static Vector chartLog = new Vector(1, 1);	static Vector<Vector<Vector<Object>>> chartIndexInformation = new Vector<Vector<Vector<Object>>>();	static Vector<Vector<Vector<String>>> rootUserIndex = new Vector<Vector<Vector<String>>>();	static String[] systemInformation = new String[21];	static Vector defaultDataStruct = new Vector(10);	static long loginReattemptTimeOut = 1000;	static int loginAttemptsAllowed = 12;	static Vector<Object> defaultChartsDemographics = new Vector<Object>(20, 20);	static Vector defaultChartsDemographicsPageContent = new Vector(1002);	static ImageIcon defaultPatientPhoto = null;	static Vector defaultChartsTreatments = new Vector(20, 20);	static Vector defaultChartsHistory = new Vector(20, 20);	static Vector defaultChartsInsurance = new Vector(20, 20);	static ImageIcon defaultWallpaper = null;	static String defaultWallpaperScaleType = "zoom";	static int numAuthorizationOptions = 11;	static Color defaultColor = new Color(84, 42, 0);	static String defaultTheme = "SLATE";	static Vector<String> medicalCodesOutputDirectories = new Vector<String>();	static String defaultFontChoice = "Electron";	static int defaultFontSize = 12;	static int defaultTransparency = 128;	static int defaultNumTotalCharts = 0;	static Vector defaultMessages = new Vector(400, 50);	static Vector defaultContacts = new Vector(100, 20);	AdministratorData() {	}	static void createLogoffFrameDefaultDataStruct() {		Vector<Vector> blankDefaultDataStruct = new Vector<Vector>();		rootUserIndex.add(new Vector<Vector<String>>());		Vector<Vector<String>> rootAdministratorUserIndexInformation = rootUserIndex.elementAt(0);		rootUserIndex.elementAt(0).add(new Vector<String>());		rootUserIndex.elementAt(0).elementAt(0).add("vitality|");		rootUserIndex.elementAt(0).elementAt(0).add("default");		rootUserIndex.elementAt(0).add(new Vector<String>());		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).elementAt(1).add("");		rootUserIndex.elementAt(0).add(new Vector<String>());		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).elementAt(2).add("no access");		rootUserIndex.elementAt(0).add(new Vector<String>());		rootUserIndex.elementAt(0).elementAt(3).add("");		rootUserIndex.elementAt(0).add(new Vector<String>());		rootUserIndex.elementAt(0).elementAt(4).add("");		rootUserIndex.elementAt(0).add(new Vector<String>());		rootUserIndex.elementAt(0).elementAt(5).add(0, "TRUE");		rootUserIndex.elementAt(0).elementAt(5).add(1, "TRUE");		rootUserIndex.elementAt(0).elementAt(5).add(2, "TRUE");		rootUserIndex.elementAt(0).elementAt(5).add(3, "TRUE");		rootUserIndex.elementAt(0).elementAt(5).add(4, "TRUE");		rootUserIndex.elementAt(0).elementAt(5).add(5, "TRUE");		defaultLogoff.add(0, loginReattemptTimeOut);		defaultLogoff.add(1, loginAttemptsAllowed);		defaultSystem.add(0, rootUserIndex);		defaultSystem.add(1, null);		defaultSystem.add(2, numAuthorizationOptions);		defaultSystem.add(3, null);		defaultSystem.add(4, defaultMaxUsers);		defaultSystem.add(5, null);		defaultSystem.add(6, null);		defaultSystem.add(7, systemInformation);		defaultSystem.add(8, defaultColor);		defaultSystem.add(9, defaultTheme);		defaultSystem.add(10, medicalCodesOutputDirectories);		defaultSystem.add(11, defaultWallpaper);		defaultSystem.add(12, defaultWallpaperScaleType);		defaultSystem.add(13, defaultFontChoice);		defaultSystem.add(14, defaultFontSize);		defaultSystem.add(15, defaultTransparency);		defaultSystem.add(16, templates);		defaultMessaging.add(0, defaultContacts);		defaultMessaging.add(1, defaultMessages);		defaultChartsDemographics.add(0, "nulled");		templates.add(null);		chartIndexInformation.add(null);		defaultCharts.add(0, chartIndexInformation);		defaultCharts.add(1, defaultChartsDemographics);		defaultCharts.add(2, defaultChartsTreatments);		defaultCharts.add(3, defaultChartsHistory);		defaultCharts.add(4, defaultChartsInsurance);		defaultCharts.add(5, recentChartID);		defaultPracticeAssistant.add(0, rootPracticeAssistantUserGroups);		defaultPracticeAssistant.add(1, rootPracticeAssistantAppointments);		userTreatmentAnalyses.add(userCostAnalyses);		userTreatmentAnalyses.add(userEffectCurves);		userTreatmentAnalyses.add(userPlanModels);		userTreatmentAnalyses.add(userPlanModels);		userDecisionSupport.add(userInternetBrowser);		userDecisionSupport.add(userQuery);		userDecisionSupport.add(userStatistics);		userDecisionSupport.add(userTreatmentAnalyses);		userDecisionSupport.add(userRules);		userDecisionSupport.add(userTranslationalMedicine);		individualUserData.add("vitality|");		individualUserData.add(userSystem);		individualUserData.add(userCharting);		individualUserData.add(userMessaging);		individualUserData.add(userDecisionSupport);		individualUserData.add(userPracticeAssistant);		allUserData.add(individualUserData);		blankDefaultDataStruct.add(0, defaultLogoff);		blankDefaultDataStruct.add(1, defaultCharts);		blankDefaultDataStruct.add(2, defaultDecisionSupport);		blankDefaultDataStruct.add(3, defaultSystem);		blankDefaultDataStruct.add(4, defaultMessaging);		blankDefaultDataStruct.add(5, defaultPracticeAssistant);		blankDefaultDataStruct.add(6, allUserData);		Access.rootAdministrator = blankDefaultDataStruct;	}	public static void createAndAddIndividualuserDataToRoot(String newUserID) {		Vector individualUserData = new Vector();		individualUserData.add(newUserID);		individualUserData.add(new Vector());		individualUserData.add(new Vector());		individualUserData.add(new Vector());		individualUserData.add(new Vector());		((Vector) (individualUserData.lastElement())).add(new Vector());		((Vector) (individualUserData.lastElement())).add(new Vector());		((Vector) (individualUserData.lastElement())).add(new Vector());		((Vector) (individualUserData.lastElement())).add(new Vector());		((Vector) (((Vector) (individualUserData.lastElement())).lastElement())).add(new Vector());		((Vector) (((Vector) (individualUserData.lastElement())).lastElement())).add(new Vector());		((Vector) (((Vector) (individualUserData.lastElement())).lastElement())).add(new Vector());		((Vector) (individualUserData.lastElement())).add(new Vector());		((Vector) (individualUserData.lastElement())).add(new Vector());		individualUserData.add(new Vector());		((Vector) (Access.rootAdministrator.elementAt(6))).add(individualUserData);	}}// EOF