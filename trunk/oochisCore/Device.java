/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.Color;import java.awt.Dimension;import java.awt.GraphicsDevice;import java.awt.GraphicsEnvironment;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Image;import java.awt.Toolkit;import java.io.IOException;import java.util.Vector;import javax.swing.ImageIcon;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;public class Device extends JFrame {	Io io = new Io();	int licenseNumber = 1;	boolean isPHR = false;	public Access access = new Access();	public Workspace workspace;	public JPanel wallpaper = new JPanel(new GridBagLayout());	public byte[] raw = { 0x01, 0x00, 0x05, 0x06, 0x04, 0x05, 0x03, 0x0b, 0x08, 0x09, 0x0a, 0x07, 0x0c, 0x0f, 0x0e, 0x0d };	static String binDir = System.getProperty("user.home") + "/Desktop/Oochisv0.1.1.1/bin/";	static int frameRate = 60;	static JPanel browserJPanel = new JPanel(new GridBagLayout());	static String[] systemOptions = new String[4];	static int translucency = 128;	static Color translucentFrameCoverColor = new Color(0, 0, 0, 128);	static int halfScreenWidth = (int) GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint().getX();	static int halfScreenHeight = (int) GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint().getY();	static boolean fullscreen = getOption("fullscreen");	static Dimension screenSize = new Dimension(Toolkit.getDefaultToolkit().getScreenSize());	static Vector imagesVector;	static Device device = new Device();	Device() {		try {			Io.in("sys", "system", raw);			SystemWindow.println("Reading in, 'system_vitality.dat'.");		} catch (Exception ex) {			SystemWindow.println("DefaultDataStruct didn't load; ");			AdministratorData.createLogoffFrameDefaultDataStruct();			SystemWindow.println("system_vitality.dat was not read in.");		}		try {			Io.images();		} catch (Exception ex) {			SystemWindow.println("Images could not load.");		}		try {			Io.biomoietyDictionary("HUGO");		} catch (Exception ex) {			SystemWindow.println("HUGO could not load.");		}		browserJPanel.setBackground(Color.WHITE);		browserJPanel.setOpaque(false);		GridBagConstraints browserPanelConstraints = new GridBagConstraints();		browserPanelConstraints.fill = GridBagConstraints.BOTH;		browserPanelConstraints.weighty = 1;		browserPanelConstraints.weightx = 1;		browserJPanel.validate();		browserJPanel.setDoubleBuffered(true);		browserJPanel.setVisible(false);		getLayeredPane().add(access, 0);		workspace = new Workspace();		wallpaper.setPreferredSize(Device.screenSize);		wallpaper.setSize(Device.screenSize);		addWallpaper("stretch", "masterPane");		workspace.setVisible(false);		getLayeredPane().add(workspace, 1);		getLayeredPane().add(wallpaper, 2);		getContentPane().add(browserJPanel);		MolecularAssembler.makeDictionaryTermVector();				setFrame();		access.setVisible(true);		access.enterUserIDJTextField.requestFocusInWindow();	}		public void setFrame() {		GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();		GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice();		if (graphicsDevice.isFullScreenSupported() && (fullscreen != false)) {			setUndecorated(true);			GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().setFullScreenWindow(this);		} else {			setSize(Device.screenSize);			setUndecorated(false);			setTitle("Oochis EHR");		}	}	static ImageIcon newImageIcon(String option) {		return new ImageIcon(option);	}	public static boolean getOption(String option) {		if (option.equals("isFullscreen")) {			return true;		} else if (option.equals("isBrowserSupported")) {		}		return true;	}	public void addWallpaper(String scaleType, String callingEntity) {		int imageWidth;		int imageHeight;		ImageIcon img = null;		Image img2;		if (callingEntity.equals("masterPane") | callingEntity.equals("workspace")) {			img = new ImageIcon((byte[]) Device.imagesVector.elementAt(16));		} else {			img = determineWallpaper();		}		wallpaper.removeAll();		img2 = img.getImage();		imageWidth = img.getIconWidth();		imageHeight = img.getIconHeight();		if (scaleType.equals("stretch")) {			img2 = img2.getScaledInstance(Device.screenSize.width, Device.screenSize.height, Image.SCALE_SMOOTH);		} else if (scaleType.equals("fit")) {			if (imageWidth / imageHeight <= Device.screenSize.width / Device.screenSize.height) {				img2 = img2.getScaledInstance((int) (imageWidth * Device.screenSize.height / imageHeight), Device.screenSize.height, Image.SCALE_SMOOTH);			} else {				img2 = img2.getScaledInstance(Device.screenSize.width, (int) (imageHeight * Device.screenSize.width / imageWidth), Image.SCALE_SMOOTH);			}		}		wallpaper.removeAll();		wallpaper.add(new JLabel(new ImageIcon(img2)));		validate();	}	public static ImageIcon determineWallpaper() {		String scaleType;		if (Access.isUserLoggedIn && (ImageIcon) SystemWindow.getElement(11, "userWallpaper", null) != null && Access.getUser(Access.loggedOnUserID, "systemAppearanceAuthorization").equals("manage")) {			scaleType = (String) SystemWindow.getElement(12, "userWallpaperScaleType", null);			return (ImageIcon) SystemWindow.getElement(11, "userWallpaper", null);		} else if ((ImageIcon) SystemWindow.getElement(11, "defaultWallpaper", null) != null) {			System.out.println("return (ImageIcon) SystemFrame.getElement(11, \"defaultWallpaper\", null);");			scaleType = (String) SystemWindow.getElement(12, "defaultWallpaperScaleType", null);			return (ImageIcon) SystemWindow.getElement(11, "defaultWallpaper", null);		} else {			scaleType = "stretch";			return new ImageIcon((byte[]) Device.imagesVector.elementAt(16));		}	}}// EOF