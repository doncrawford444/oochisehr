/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.border.LineBorder;public class EffectCurveGraphPanel extends JPanel implements ActionListener, MouseListener {	JLabel survivalJLabel = new JLabel("Effect");	JLabel timeJLabel = new JLabel("Time");	static int originX = 50;	static int originY = 30;	static int graphHeight = 380;	static int graphWidth = 380;	Color treatmentColor = new Color(0, 96, 96);	Color controlColor = new Color(96, 0, 96);	JLabel survivalCurveHeaderJLabel = new JLabel("Treatment effect curve:");	JButton treatmentPointJButton;	JPanel treatmentPointTimeTicMarkXJPanel;	JLabel treatmentPointEffectTicMarkYJLabel;	JLabel treatmentPointTimeTicMarkTicXJLabel;	JLabel treatmentPointTimeTicMarkContentXJLabel;	JButton controlPointJButton;	JPanel controlPointTimeTicMarkXJPanel;	JLabel controlPointEffectTicMarkYJLabel;	JLabel controlPointTimeTicMarkTicXJLabel;	JLabel controlPointTimeTicMarkContentXJLabel;	GridBagConstraints treatmentPointTimeTicMarkXPanelConstraints = new GridBagConstraints();	GridBagConstraints controlPointTimeTicMarkXPanelConstraints = new GridBagConstraints();	int pointInd;	double largestEffectY = 0;	double largestTimeX = 0;	double smallestEffectY = 100000;	double smallestTimeX = 100000;	double[] pTreatmentEffectDoublesY;	double[] pTreatmentTimeDoublesX;	double[] pControlEffectDoublesY;	double[] pControlTimeDoublesX;	int[] pTreatmentEffectIntsY;	int[] pTreatmentTimeIntsX;	int[] pControlEffectIntsY;	int[] pControlTimeIntsX;	double stretchX = -1;	double stretchY = -1;	boolean placePointXsInMiddle = false;	boolean placePointYsInMiddle = false;	EffectCurveGraphPanel(double[] treatmentEffectDoublesY, double[] treatmentTimeDoublesX, double[] controlEffectDoublesY, double[] controlTimeDoublesX) {		int ind;		setBackground(Color.WHITE);		setLayout(null);		timeJLabel.setBounds(graphWidth + 19, graphHeight + 20, 100, 40);		survivalJLabel.setBounds(31, 0, 100, 40);		survivalCurveHeaderJLabel.setHorizontalTextPosition(JLabel.CENTER);		survivalCurveHeaderJLabel.setBounds(originX + graphWidth / 2 - 100, 0, 200, 40);		add(survivalJLabel);		add(timeJLabel);		add(survivalCurveHeaderJLabel);		if (null != treatmentTimeDoublesX) {			pTreatmentEffectDoublesY = treatmentEffectDoublesY;			pTreatmentTimeDoublesX = treatmentTimeDoublesX;			pTreatmentEffectIntsY = new int[treatmentEffectDoublesY.length];			pTreatmentTimeIntsX = new int[treatmentTimeDoublesX.length];			ind = 0;			while (ind < treatmentEffectDoublesY.length) {				if (largestEffectY < treatmentEffectDoublesY[ind]) {					largestEffectY = treatmentEffectDoublesY[ind];				}				if (smallestEffectY > treatmentEffectDoublesY[ind]) {					smallestEffectY = treatmentEffectDoublesY[ind];				}				if (largestTimeX < treatmentTimeDoublesX[ind]) {					largestTimeX = treatmentTimeDoublesX[ind];				}				if (smallestTimeX > treatmentTimeDoublesX[ind]) {					smallestTimeX = treatmentTimeDoublesX[ind];				}				ind++;			}			stretchX = -1;			stretchY = -1;			ind = 0;			if ((largestTimeX - smallestTimeX) != 0) {				stretchX = 0.75 * graphWidth / (largestTimeX - smallestTimeX);			} else {				stretchX = -1;				placePointXsInMiddle = true;			}			stretchY = 0.75 * graphWidth / (largestEffectY - smallestEffectY);		}		if (null != controlTimeDoublesX) {			pControlEffectDoublesY = controlEffectDoublesY;			pControlTimeDoublesX = controlTimeDoublesX;			pControlEffectIntsY = new int[controlEffectDoublesY.length];			pControlTimeIntsX = new int[controlTimeDoublesX.length];			ind = 0;			while (ind < controlEffectDoublesY.length) {				if (largestEffectY < controlEffectDoublesY[ind]) {					largestEffectY = controlEffectDoublesY[ind];				}				if (smallestEffectY > controlEffectDoublesY[ind]) {					smallestEffectY = controlEffectDoublesY[ind];				}				if (largestTimeX < controlTimeDoublesX[ind]) {					largestTimeX = controlTimeDoublesX[ind];				}				if (smallestTimeX > controlTimeDoublesX[ind]) {					smallestTimeX = controlTimeDoublesX[ind];				}				ind++;			}			stretchX = -1;			stretchY = -1;			ind = 0;			if ((largestTimeX - smallestTimeX) != 0) {				stretchX = 0.75 * graphWidth / (largestTimeX - smallestTimeX);			} else {				stretchX = -1;				placePointXsInMiddle = true;			}			stretchY = 0.75 * graphWidth / (largestEffectY - smallestEffectY);		}		if (null != treatmentTimeDoublesX) {			ind = 0;			while (ind < pTreatmentTimeDoublesX.length) {				String pTreatmentTimeDoublesXString = String.valueOf(pTreatmentTimeDoublesX[ind]);				String pTreatmentEffectDoublesYString = String.valueOf(pTreatmentEffectDoublesY[ind]);				pTreatmentTimeIntsX[ind] = (int) (Math.round(stretchX * (treatmentTimeDoublesX[ind] - smallestTimeX)) + 0.125 * graphWidth + originX);				pTreatmentEffectIntsY[ind] = -(int) (Math.round(stretchY * (treatmentEffectDoublesY[ind] - smallestEffectY)) + 0.125 * graphHeight) + originY + graphHeight;				if (pTreatmentTimeDoublesXString.length() > 6) {					pTreatmentTimeDoublesXString = pTreatmentTimeDoublesXString.substring(0, 6);				}				if (pTreatmentEffectDoublesYString.length() > 6) {					pTreatmentEffectDoublesYString = pTreatmentEffectDoublesYString.substring(0, 6);				}				pTreatmentEffectDoublesYString = pTreatmentEffectDoublesYString + "-";				treatmentPointJButton = new JButton(String.valueOf(pTreatmentTimeDoublesX[ind]) + ", " + String.valueOf(pTreatmentEffectDoublesY[ind]));				treatmentPointJButton.addMouseListener(this);				treatmentPointJButton.setName("treatmentPointJButton|" + ind);				treatmentPointJButton.setBounds(pTreatmentTimeIntsX[ind] - 3, pTreatmentEffectIntsY[ind] - 3, 7, 7);				treatmentPointJButton.setBorder(new LineBorder(treatmentColor, 2));				treatmentPointJButton.setContentAreaFilled(false);				treatmentPointEffectTicMarkYJLabel = new JLabel(pTreatmentEffectDoublesYString);				treatmentPointEffectTicMarkYJLabel.setBounds(0, pTreatmentEffectIntsY[ind] - 8, 120, 20);				treatmentPointEffectTicMarkYJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));				treatmentPointTimeTicMarkContentXJLabel = new JLabel(pTreatmentTimeDoublesXString);				treatmentPointTimeTicMarkContentXJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));				treatmentPointTimeTicMarkTicXJLabel = new JLabel("-");				treatmentPointTimeTicMarkTicXJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));				treatmentPointTimeTicMarkXJPanel = new JPanel(new GridBagLayout());				treatmentPointTimeTicMarkXJPanel.setOpaque(false);				treatmentPointTimeTicMarkXJPanel.setBounds(pTreatmentTimeIntsX[ind] - 3 - 57, graphHeight + 26, 120, 40);				treatmentPointTimeTicMarkXPanelConstraints.gridy = 0;				treatmentPointTimeTicMarkXJPanel.add(treatmentPointTimeTicMarkTicXJLabel, treatmentPointTimeTicMarkXPanelConstraints);				treatmentPointTimeTicMarkXPanelConstraints.gridy = 1;				treatmentPointTimeTicMarkXJPanel.add(treatmentPointTimeTicMarkContentXJLabel, treatmentPointTimeTicMarkXPanelConstraints);				add(treatmentPointJButton);				add(treatmentPointEffectTicMarkYJLabel);				add(treatmentPointTimeTicMarkXJPanel);				ind++;			}		}		if (null != controlTimeDoublesX) {			ind = 0;			while (ind < pControlTimeDoublesX.length) {				String pControlTimeDoublesXString = String.valueOf(pControlTimeDoublesX[ind]);				String pControlEffectDoublesYString = String.valueOf(pControlEffectDoublesY[ind]);				pControlTimeIntsX[ind] = (int) (Math.round(stretchX * (controlTimeDoublesX[ind] - smallestTimeX)) + 0.125 * graphWidth + originX);				pControlEffectIntsY[ind] = -(int) (Math.round(stretchY * (controlEffectDoublesY[ind] - smallestEffectY)) + 0.125 * graphHeight) + originY + graphHeight;				if (pControlTimeDoublesXString.length() > 6) {					pControlTimeDoublesXString = pControlTimeDoublesXString.substring(0, 6);				}				if (pControlEffectDoublesYString.length() > 6) {					pControlEffectDoublesYString = pControlEffectDoublesYString.substring(0, 6);				}				pControlEffectDoublesYString = pControlEffectDoublesYString + "-";				controlPointJButton = new JButton(String.valueOf(pControlTimeDoublesX[ind]) + ", " + String.valueOf(pTreatmentEffectDoublesY[ind]));				controlPointJButton.addMouseListener(this);				controlPointJButton.setName("controlPointJButton|" + ind);				controlPointJButton.setBounds(pControlTimeIntsX[ind] - 3, pControlEffectIntsY[ind] - 3, 7, 7);				controlPointJButton.setBorder(new LineBorder(controlColor, 2));				controlPointJButton.setContentAreaFilled(false);				controlPointEffectTicMarkYJLabel = new JLabel(pControlEffectDoublesYString);				controlPointEffectTicMarkYJLabel.setBounds(0, pControlEffectIntsY[ind] - 8, 120, 20);				controlPointEffectTicMarkYJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));				controlPointTimeTicMarkContentXJLabel = new JLabel(pControlTimeDoublesXString);				controlPointTimeTicMarkContentXJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));				controlPointTimeTicMarkTicXJLabel = new JLabel("-");				controlPointTimeTicMarkTicXJLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 12));				controlPointTimeTicMarkXJPanel = new JPanel(new GridBagLayout());				controlPointTimeTicMarkXJPanel.setOpaque(false);				controlPointTimeTicMarkXJPanel.setBounds(pControlTimeIntsX[ind] - 3 - 57, graphHeight + 26, 120, 40);				controlPointTimeTicMarkXPanelConstraints.gridy = 0;				controlPointTimeTicMarkXJPanel.add(controlPointTimeTicMarkTicXJLabel, controlPointTimeTicMarkXPanelConstraints);				controlPointTimeTicMarkXPanelConstraints.gridy = 1;				controlPointTimeTicMarkXJPanel.add(controlPointTimeTicMarkContentXJLabel, controlPointTimeTicMarkXPanelConstraints);				add(controlPointJButton);				add(controlPointEffectTicMarkYJLabel);				add(controlPointTimeTicMarkXJPanel);				ind++;			}		}	}	@Override	public void paintComponent(Graphics can) {		super.paintComponent(can);		can.setColor(Color.DARK_GRAY);		can.drawLine(originX, originY, originX, graphHeight + originY);		can.drawLine(originX + 1, originY, originX + 1, graphHeight + originY);		can.drawLine(originX, graphHeight + originY, graphWidth + originX, graphHeight + originY);		can.drawLine(originX, graphHeight + originY + 1, graphWidth + originX, graphHeight + originY + 1);		if (null != pTreatmentTimeIntsX) {			can.setColor(treatmentColor);			can.drawPolyline(pTreatmentTimeIntsX, pTreatmentEffectIntsY, pTreatmentTimeIntsX.length);		}		if (null != pControlTimeIntsX) {			can.setColor(controlColor);			can.drawPolyline(pControlTimeIntsX, pControlEffectIntsY, pControlTimeIntsX.length);		}	}	@Override	public void actionPerformed(ActionEvent e) {	}	@Override	public void mouseClicked(MouseEvent m) {	}	@Override	public void mouseEntered(MouseEvent m) {		m.getComponent().setBounds(m.getComponent().getX(), m.getComponent().getY(), 380, 80);		validate();		m.getComponent().validate();		m.getComponent().repaint();	}	@Override	public void mouseExited(MouseEvent m) {		m.getComponent().setBounds(m.getComponent().getX(), m.getComponent().getY(), 4, 4);		m.getComponent().repaint();	}	@Override	public void mousePressed(MouseEvent m) {	}	@Override	public void mouseReleased(MouseEvent m) {	}}// EOF