/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.Color;import java.awt.Image;import java.util.Vector;import javax.swing.ImageIcon;class PatientData implements Cloneable {	int patientMaxUsers = 20;	int patientNumUserInformationCategories = 10;	int patientNumUserInformationLines = 30;	String[][][] patientUserIndex = new String[patientMaxUsers + 1][patientNumUserInformationCategories][patientNumUserInformationLines];	Vector patientLogoff = new Vector(20, 20);	long patientLoginReattemptTimeOut = 1000;	int patientLoginAttemptsAllowed = 12;	Vector patientChart;	Image patientPhoto;	Vector patientDecisionSupport = new Vector(20, 20);	Vector patientSystem = new Vector(20, 20);	ImageIcon patientWallpaper;	static String patientDefaultWallpaperScaleType = "stretch";	static String patientFontChoice = "arial";	static int patientFontSize = 17;	String patientWallpaperDirectory;	int patientNumAuthorizationOptions = 11;	static int patientTransparency = 128;	Color patientColor = new Color(192, 255, 255);	String patientTheme = "SLICK";	Vector patientMessaging = new Vector(20, 20);	Vector patientMessages = new Vector(400, 50);	Vector patientContacts = new Vector(100, 20);	Vector patientPracticeManagement = new Vector(20, 20);	PatientData() {	}	void putPhotoInPatientData(ImageIcon pDefaultPhoto) {	}	void createBlankPatientDataStructWithTemplateAndPutInLoggoffFrame(int pChartTemplateChoiceIndice) {		Vector patientDataStruct = new Vector(6);		patientLogoff.add(0, patientLoginReattemptTimeOut);		patientLogoff.add(1, patientLoginAttemptsAllowed);		patientSystem.add(0, patientUserIndex);		patientSystem.add(1, patientWallpaperDirectory);		patientSystem.add(2, patientNumAuthorizationOptions);		patientSystem.add(3, null);		patientSystem.add(4, patientMaxUsers);		patientSystem.add(5, patientNumUserInformationCategories);		patientSystem.add(6, patientNumUserInformationLines);		patientSystem.add(7, null);		patientSystem.add(8, patientColor);		patientSystem.add(9, patientTheme);		patientSystem.add(10, null);		patientSystem.add(11, patientWallpaper);		patientSystem.add(12, patientDefaultWallpaperScaleType);		patientSystem.add(13, patientFontChoice);		patientSystem.add(14, patientFontSize);		patientSystem.add(15, patientTransparency);		patientMessaging.add(0, patientContacts);		patientMessaging.add(1, patientMessages);		patientChart = ((Vector) (((Vector) (((Vector) ((Vector) Access.rootAdministrator.elementAt(3)).elementAt(16))).elementAt(pChartTemplateChoiceIndice))).clone());		patientDataStruct.add(0, patientLogoff);		patientDataStruct.add(1, patientChart);		patientDataStruct.add(2, patientDecisionSupport);		patientDataStruct.add(3, patientSystem);		patientDataStruct.add(4, patientMessaging);		patientDataStruct.add(5, patientPracticeManagement);		Access.patientDataStruct = (Vector) patientDataStruct.clone();	}	int uniqueElementsInArray(int ppNumLinesOnForm, int[][] ppInstructionLineLengthAndRank) {		int count = 0;		int ind1 = 1;		int ind2 = 1;		do {			ind2 = 1;			do {				if ((ppInstructionLineLengthAndRank[ind1][0] == ppInstructionLineLengthAndRank[ind2][0]) && (ind1 > ind2) && (ppInstructionLineLengthAndRank[ind2][2] != 1)) {					count++;					ppInstructionLineLengthAndRank[ind2][2] = 1;				}				ind2++;			} while (ind2 <= ppNumLinesOnForm);			ind1++;		} while (ind1 <= ppNumLinesOnForm);		return (ppNumLinesOnForm - count);	}}// EOF