/* * Copyright 2014 Donald Ray Crawford Jr. *  * This file is part of Oochis EHR. *  * Oochis EHR is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with Oochis EHR.  If not, see <http://www.gnu.org/licenses/>. */package oochisCore;import java.awt.Color;import java.awt.Container;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Point;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.MouseMotionListener;import java.util.Calendar;import java.util.Date;import java.util.Vector;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JLayeredPane;import javax.swing.JPanel;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.JToggleButton;import javax.swing.Timer;import javax.swing.border.CompoundBorder;import javax.swing.border.MatteBorder;public class Workspace extends JLayeredPane implements ActionListener, MouseListener, MouseMotionListener {	static Dimension systemFrameSizeDimension = new Dimension(600, 725);	static Color practiceAssistantColor = new Color(180, 175, 207);	static Color decisionSupportColor = Color.LIGHT_GRAY;	static Font windowFrameButtonFont = new Font("Electron", Font.BOLD, 14);	Color loginColor = new Color(180, 207, 177);	Color systemFrameColor = new Color(193, 211, 222);	double systemFrameYShear = -0.18;	double chartsFrameYShear = -0.04;	double messagingFrameYShear = 0.0;	double decisionSupportFrameYShear = 0.04;	double practiceAssistantFrameYShear = 0.18;	double notePadYShear = 0.0;	int iconImageWidth = ((2 * Device.halfScreenWidth / 5) - 4);	Point systemWindowIconHomePosition = new Point(10, Device.device.halfScreenHeight - iconImageWidth / 2);	Point chartingWindowIconHomePosition = new Point(20 + iconImageWidth, (int) (Device.device.halfScreenHeight - iconImageWidth / 2 - Math.abs(chartsFrameYShear) * iconImageWidth));	Point messagingWindowIconHomePosition = new Point(30 + 2 * iconImageWidth, (int) (Device.device.halfScreenHeight - iconImageWidth / 2 - Math.abs(chartsFrameYShear) * iconImageWidth));	Point decisionSupportWindowIconHomePosition = new Point(40 + 3 * iconImageWidth, (int) (Device.device.halfScreenHeight - iconImageWidth / 2 - Math.abs(chartsFrameYShear) * iconImageWidth));	Point practiceWindowIconHomePosition = new Point(50 + 4 * iconImageWidth, Device.device.halfScreenHeight - iconImageWidth / 2);	Point notePadWindowIconHomePosition = new Point(50 + 4 * iconImageWidth, Device.device.halfScreenHeight - iconImageWidth / 2);	int initialPanelX;	int initialPanelY;	int initialMouseX;	int initialMouseY;	boolean initiateMouseEvent = true;	int printerOriginalX = 0;	int printerOriginalY = 0;	int printerOriginalMouseX = 0;	int printerOriginalMouseY = 0;	int originalX = 0;	int originalY = 0;	int originalMouseX = 0;	int originalMouseY = 0;	byte[] raw = { 0x01, 0x00, 0x05, 0x06, 0x04, 0x05, 0x03, 0x0b, 0x08, 0x09, 0x0a, 0x07, 0x0c, 0x0f, 0x0e, 0x0d };	GridBagConstraints slammedIconLabelConstraints = new GridBagConstraints();	JLabel desktopBarBasePanelPusherJLabel = new JLabel(" ");	JLabel vitalityIconJLabel = new JLabel("  Oochis EHR  ");	static Color taskBarColor = new Color(135, 155, 155);	Color menuBarDisabledColor;	Date clockDate = new Date();	JLabel clockJLabel = new JLabel("  " + clockDate.toString() + "  ");	Timer clockTimer;	ChartingWindow chartingWindow = new ChartingWindow();	DecisionSupportWindow decisionSupportWindow = new DecisionSupportWindow();	MessagingWindow messagingWindow = new MessagingWindow();	PracticeWindow practiceAssistantWindow = new PracticeWindow();	SystemWindow systemWindow = new SystemWindow();	NotePad notePad = new NotePad();	String[] monthName = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };	String[] dayName = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };	String[] amPm = { "AM", "PM" };	Calendar calendar;	String calendarSecond;	String calendarMinute;	String calendarHour;	JButton loginJButton = new JButton("   Log in   ");	JButton chartingJButton = new JButton("   Charts   ");	JButton decisionSupportJButton = new JButton("   Decision Support   ");	static JButton systemJButton = new JButton("   System   ");	static JButton messagingJButton = new JButton("   Messaging   ");	JButton practiceAssistantJButton = new JButton("   Practice Assistant   ");	JButton toPrinterJButton = new JButton(" To printer ");	JPanel desktopBarBaseJPanel = new JPanel(new GridBagLayout());	JPanel taskBarJPanel = new JPanel(new GridBagLayout());	JLabel desktopBarDividerJLabel = new JLabel(" ||| ");	GridBagConstraints desktopBarBasePanelConstraints = new GridBagConstraints();	GridBagConstraints taskBarPanelConstraints = new GridBagConstraints();	Workspace() {		setSubsystemFramesAndIconButtons();		setSize(Device.screenSize);		clockJLabel.setFont(new Font("Electron", Font.BOLD, 18));		clockTimer = new Timer(1000, clock);		clockTimer.start();		SystemWindow.println("Instantiated the workspace at " + Calendar.getInstance().getTime() + " in " + Calendar.getInstance().getAvailableLocales()[0] + "     " + Calendar.getInstance().getAvailableLocales()[1]);	}	ActionListener clock = new ActionListener() {		@SuppressWarnings("deprecation")		public void actionPerformed(ActionEvent evt) {			calendar = Calendar.getInstance();			calendarSecond = String.valueOf(calendar.get(Calendar.SECOND));			calendarMinute = String.valueOf(calendar.get(Calendar.MINUTE));			calendarHour = String.valueOf(calendar.get(Calendar.HOUR));			if (calendarSecond.length() < 2) {				calendarSecond = "0" + calendarSecond;			}			if (calendarMinute.length() < 2) {				calendarMinute = "0" + calendarMinute;			}			if (calendarHour.length() < 2) {				calendarHour = "0" + calendarHour;			}			clockJLabel.setText(monthName[calendar.get(Calendar.MONTH)] + " " + calendar.get(Calendar.DAY_OF_MONTH) + ", " + calendarHour + ":" + calendarMinute + ":" + calendarSecond + " " + amPm[calendar.get(Calendar.AM_PM)]);		}	};	public void setSubsystemFramesAndIconButtons() {		taskBarJPanel.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(1, 0, 0, 0, new Color(160, 160, 160)), new MatteBorder(1, 0, 0, 0, new Color(85, 85, 85))), new CompoundBorder(new MatteBorder(1, 0, 0, 0, new Color(72, 72, 72)), new MatteBorder(1, 0, 0, 0, new Color(55, 55, 55)))));		desktopBarBasePanelConstraints.weightx = 1;		desktopBarBasePanelConstraints.weighty = 1;		desktopBarBasePanelConstraints.fill = GridBagConstraints.BOTH;		desktopBarBasePanelConstraints.gridx = 0;		desktopBarBasePanelConstraints.gridy = 0;		desktopBarBasePanelPusherJLabel.setOpaque(false);		desktopBarBaseJPanel.add(desktopBarBasePanelPusherJLabel, desktopBarBasePanelConstraints);		desktopBarBasePanelConstraints.gridy = 1;		desktopBarBasePanelConstraints.weighty = 0;		desktopBarBasePanelConstraints.fill = GridBagConstraints.HORIZONTAL;		desktopBarBaseJPanel.add(taskBarJPanel, desktopBarBasePanelConstraints);		desktopBarBaseJPanel.setOpaque(false);		vitalityIconJLabel.setForeground(new Color(180, 223, 186));		vitalityIconJLabel.setBackground(new Color(0, 0, 0, 128));		vitalityIconJLabel.setFont(new Font("Ariel", Font.ITALIC + Font.BOLD, 12));		vitalityIconJLabel.setOpaque(true);		desktopBarDividerJLabel.setOpaque(true);		desktopBarDividerJLabel.setBackground(new Color(90, 90, 90, 60));		taskBarJPanel.setBackground(taskBarColor);		taskBarPanelConstraints.anchor = GridBagConstraints.CENTER;		taskBarPanelConstraints.insets = new Insets(0, 0, 0, 6);		taskBarPanelConstraints.gridx = 0;		taskBarPanelConstraints.weighty = 1;		taskBarPanelConstraints.fill = GridBagConstraints.VERTICAL;		taskBarJPanel.add(vitalityIconJLabel, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 1;		taskBarPanelConstraints.weighty = 0;		taskBarPanelConstraints.fill = GridBagConstraints.NONE;		taskBarPanelConstraints.insets = new Insets(5, 0, 2, 12);		taskBarJPanel.add(loginJButton, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 2;		taskBarPanelConstraints.weighty = 1;		taskBarJPanel.add(desktopBarDividerJLabel, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 3;		taskBarPanelConstraints.weighty = 0;		taskBarPanelConstraints.fill = GridBagConstraints.NONE;		taskBarJPanel.add(systemJButton, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 4;		taskBarJPanel.add(chartingJButton, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 5;		taskBarJPanel.add(messagingJButton, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 6;		taskBarJPanel.add(decisionSupportJButton, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 7;		taskBarJPanel.add(practiceAssistantJButton, taskBarPanelConstraints);		taskBarPanelConstraints.gridx = 8;		clockJLabel.setFont(new Font("arial", Font.BOLD, 15));		taskBarPanelConstraints.gridx = 9;		taskBarPanelConstraints.weightx = 1;		taskBarPanelConstraints.fill = GridBagConstraints.HORIZONTAL;		taskBarPanelConstraints.insets = new Insets(5, 0, 2, 5);		taskBarJPanel.add(clockJLabel, taskBarPanelConstraints);		desktopBarBaseJPanel.setPreferredSize(Device.screenSize);		desktopBarBaseJPanel.setSize(Device.screenSize);		loginJButton.addActionListener(this);		loginJButton.setActionCommand("loginRoundedJButton");		loginJButton.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128)), new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80))), new CompoundBorder(new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 201)), new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 80)))));		loginJButton.setBackground(loginColor);		loginJButton.setFont(windowFrameButtonFont);		loginJButton.setMnemonic('L');		systemJButton.setActionCommand("systemRoundedJButton");		systemJButton.addActionListener(this);		systemJButton.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128)), new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80))), new CompoundBorder(new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 201)), new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 80)))));		systemJButton.setBackground(systemFrameColor);		systemJButton.setFont(windowFrameButtonFont);		systemJButton.setMnemonic('S');		chartingJButton.addActionListener(this);		chartingJButton.setActionCommand("chartingJButton");		chartingJButton.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128)), new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80))), new CompoundBorder(new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 201)), new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 80)))));		chartingJButton.setFont(windowFrameButtonFont);		chartingJButton.setMnemonic('C');		chartingJButton.setBackground(SystemWindow.manillaColor);		decisionSupportJButton.addActionListener(this);		decisionSupportJButton.setActionCommand("decisionSupportRoundedJButton");		decisionSupportJButton.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128)), new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80))), new CompoundBorder(new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 201)), new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 80)))));		decisionSupportJButton.setBackground(decisionSupportColor);		decisionSupportJButton.setFont(windowFrameButtonFont);		decisionSupportJButton.setMnemonic('D');		messagingJButton.addActionListener(this);		messagingJButton.setActionCommand("messagingRoundedJButton");		messagingJButton.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128)), new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80))), new CompoundBorder(new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 201)), new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 80)))));		messagingJButton.setBackground(SystemWindow.lightQuintessentialThemeColor);		messagingJButton.setFont(windowFrameButtonFont);		messagingJButton.setMnemonic('M');		practiceAssistantJButton.setActionCommand("practiceAssistantRoundedJButton");		practiceAssistantJButton.addActionListener(this);		practiceAssistantJButton.setBorder(new CompoundBorder(new CompoundBorder(new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 128)), new MatteBorder(0, 0, 1, 1, new Color(0, 0, 0, 80))), new CompoundBorder(new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 201)), new MatteBorder(1, 1, 0, 0, new Color(255, 255, 255, 80)))));		practiceAssistantJButton.setBackground(practiceAssistantColor);		practiceAssistantJButton.setFont(windowFrameButtonFont);		practiceAssistantJButton.setMnemonic('P');		systemWindow.animatedWindowIconJButton.addMouseListener(this);		systemWindow.animatedWindowIconJButton.setName("systemFrameAnimatedWindowIconJButton");		systemWindow.animatedWindowIconJButton.addMouseMotionListener(this);		systemWindow.animatedWindowIconJButton.windowShear = systemFrameYShear;		systemWindow.animatedWindowIconJButton.animatedWindowIconHomePositionX = systemWindowIconHomePosition.x;		systemWindow.animatedWindowIconJButton.animatedWindowIconHomePositionY = systemWindowIconHomePosition.y;		chartingWindow.animatedWindowIconJButton.addMouseListener(this);		chartingWindow.animatedWindowIconJButton.setName("chartsFrameAnimatedWindowIconJButton");		chartingWindow.animatedWindowIconJButton.addMouseMotionListener(this);		chartingWindow.animatedWindowIconJButton.windowShear = chartsFrameYShear;		chartingWindow.animatedWindowIconJButton.animatedWindowIconHomePositionX = chartingWindowIconHomePosition.x;		chartingWindow.animatedWindowIconJButton.animatedWindowIconHomePositionY = chartingWindowIconHomePosition.y;		messagingWindow.animatedWindowIconJButton.addMouseListener(this);		messagingWindow.animatedWindowIconJButton.setName("messagingFrameAnimatedWindowIconJButton");		messagingWindow.animatedWindowIconJButton.addMouseMotionListener(this);		messagingWindow.animatedWindowIconJButton.windowShear = messagingFrameYShear;		messagingWindow.animatedWindowIconJButton.animatedWindowIconHomePositionX = messagingWindowIconHomePosition.x;		messagingWindow.animatedWindowIconJButton.animatedWindowIconHomePositionY = messagingWindowIconHomePosition.y;		decisionSupportWindow.animatedWindowIconJButton.addMouseListener(this);		decisionSupportWindow.animatedWindowIconJButton.setName("decisionSupportFrameAnimatedWindowIconJButton");		decisionSupportWindow.animatedWindowIconJButton.addMouseMotionListener(this);		decisionSupportWindow.animatedWindowIconJButton.windowShear = decisionSupportFrameYShear;		decisionSupportWindow.animatedWindowIconJButton.animatedWindowIconHomePositionX = decisionSupportWindowIconHomePosition.x;		decisionSupportWindow.animatedWindowIconJButton.animatedWindowIconHomePositionY = decisionSupportWindowIconHomePosition.y;		practiceAssistantWindow.animatedWindowIconJButton.addMouseListener(this);		practiceAssistantWindow.animatedWindowIconJButton.setName("practiceAssistantFrameAnimatedWindowIconJButton");		practiceAssistantWindow.animatedWindowIconJButton.addMouseMotionListener(this);		practiceAssistantWindow.animatedWindowIconJButton.windowShear = practiceAssistantFrameYShear;		practiceAssistantWindow.animatedWindowIconJButton.animatedWindowIconHomePositionX = practiceWindowIconHomePosition.x;		practiceAssistantWindow.animatedWindowIconJButton.animatedWindowIconHomePositionY = practiceWindowIconHomePosition.y;		notePad.animatedWindowIconJButton.addMouseListener(this);		notePad.animatedWindowIconJButton.setName("notePadFrameAnimatedWindowIconJPanel");		notePad.animatedWindowIconJButton.addMouseMotionListener(this);		notePad.animatedWindowIconJButton.windowShear = notePadYShear;		notePad.animatedWindowIconJButton.animatedWindowIconHomePositionX = notePadWindowIconHomePosition.x;		notePad.animatedWindowIconJButton.animatedWindowIconHomePositionY = notePadWindowIconHomePosition.y;		systemWindow.setVisible(true);		add(desktopBarBaseJPanel);		add(chartingWindow);		add(decisionSupportWindow);		add(systemWindow);		add(messagingWindow);		add(practiceAssistantWindow);		add(notePad);		add(systemWindow.animatedWindowIconJButton);		add(chartingWindow.animatedWindowIconJButton);		add(messagingWindow.animatedWindowIconJButton);		add(decisionSupportWindow.animatedWindowIconJButton);		add(practiceAssistantWindow.animatedWindowIconJButton);		add(notePad.animatedWindowIconJButton);		validate();	}	public void switchActiveWindowTo(Window activeWindow) {		systemWindow.mainPanelCoverJPanel.setVisible(true);		systemWindow.titleBarCenterJPanel.setBackground(Window.titleBarDisabledColor);		systemWindow.titleBarCenterJPanel.setBorder(Window.titleBarDisabledTopBorder);		systemWindow.setBorder(Access.disabledWindowBorder);		systemWindow.titleBarBaseJPanel.setBackground(Access.disabledBorderColor);		chartingWindow.mainPanelCoverJPanel.setVisible(true);		chartingWindow.setBorder(Access.disabledWindowBorder);		chartingWindow.titleBarCenterJPanel.setBorder(Window.titleBarDisabledTopBorder);		chartingWindow.titleBarCenterJPanel.setBackground(Window.titleBarDisabledColor);		chartingWindow.titleBarBaseJPanel.setBackground(Access.disabledBorderColor);		messagingWindow.mainPanelCoverJPanel.setVisible(true);		messagingWindow.setBorder(Access.disabledWindowBorder);		messagingWindow.titleBarCenterJPanel.setBorder(Window.titleBarDisabledTopBorder);		messagingWindow.titleBarCenterJPanel.setBackground(Window.titleBarDisabledColor);		messagingWindow.titleBarBaseJPanel.setBackground(Access.disabledBorderColor);		decisionSupportWindow.mainPanelCoverJPanel.setVisible(true);		decisionSupportWindow.titleBarCenterJPanel.setBackground(Window.titleBarDisabledColor);		decisionSupportWindow.titleBarCenterJPanel.setBorder(Window.titleBarDisabledTopBorder);		decisionSupportWindow.setBorder(Access.disabledWindowBorder);		decisionSupportWindow.titleBarBaseJPanel.setBackground(Access.disabledBorderColor);		practiceAssistantWindow.mainPanelCoverJPanel.setVisible(true);		practiceAssistantWindow.titleBarCenterJPanel.setBackground(Window.titleBarDisabledColor);		practiceAssistantWindow.titleBarCenterJPanel.setBorder(Window.titleBarDisabledTopBorder);		practiceAssistantWindow.setBorder(Access.disabledWindowBorder);		practiceAssistantWindow.titleBarBaseJPanel.setBackground(Access.disabledBorderColor);		systemWindow.titleBarLeftRoundedCornerPanelCardLayout.show(systemWindow.titleBarLeftRoundedCornerCardedJPanel, "titleBarDisabledLeftRoundedCornerJPanel");		systemWindow.titleBarRightRoundedCornerPanelCardLayout.show(systemWindow.titleBarRightRoundedCornerCardedJPanel, "titleBarDisabledRightRoundedCornerJPanel");		chartingWindow.titleBarLeftRoundedCornerPanelCardLayout.show(chartingWindow.titleBarLeftRoundedCornerCardedJPanel, "titleBarDisabledLeftRoundedCornerJPanel");		chartingWindow.titleBarRightRoundedCornerPanelCardLayout.show(chartingWindow.titleBarRightRoundedCornerCardedJPanel, "titleBarDisabledRightRoundedCornerJPanel");		messagingWindow.titleBarLeftRoundedCornerPanelCardLayout.show(messagingWindow.titleBarLeftRoundedCornerCardedJPanel, "titleBarDisabledLeftRoundedCornerJPanel");		messagingWindow.titleBarRightRoundedCornerPanelCardLayout.show(messagingWindow.titleBarRightRoundedCornerCardedJPanel, "titleBarDisabledRightRoundedCornerJPanel");		decisionSupportWindow.titleBarLeftRoundedCornerPanelCardLayout.show(decisionSupportWindow.titleBarLeftRoundedCornerCardedJPanel, "titleBarDisabledLeftRoundedCornerJPanel");		decisionSupportWindow.titleBarRightRoundedCornerPanelCardLayout.show(decisionSupportWindow.titleBarRightRoundedCornerCardedJPanel, "titleBarDisabledRightRoundedCornerJPanel");		practiceAssistantWindow.titleBarLeftRoundedCornerPanelCardLayout.show(practiceAssistantWindow.titleBarLeftRoundedCornerCardedJPanel, "titleBarDisabledLeftRoundedCornerJPanel");		practiceAssistantWindow.titleBarRightRoundedCornerPanelCardLayout.show(practiceAssistantWindow.titleBarRightRoundedCornerCardedJPanel, "titleBarDisabledRightRoundedCornerJPanel");		activeWindow.mainPanelCoverJPanel.setVisible(false);		activeWindow.titleBarCenterJPanel.setBackground(Window.titleBarEnabledColor);		activeWindow.titleBarCenterJPanel.setBorder(Window.titleBarEnabledTopBorder);		activeWindow.titleBarBaseJPanel.setBackground(Access.translucentColorTheme);		activeWindow.titleBarLeftRoundedCornerPanelCardLayout.show(activeWindow.titleBarLeftRoundedCornerCardedJPanel, "titleBarEnabledLeftRoundedCornerJPanel");		activeWindow.titleBarRightRoundedCornerPanelCardLayout.show(activeWindow.titleBarRightRoundedCornerCardedJPanel, "titleBarEnabledRightRoundedCornerJPanel");		activeWindow.setBorder(Access.windowBorder);		activeWindow.moveToFront();		activeWindow.setVisible(true);		activeWindow.animatedWindowIconJButton.setVisible(false);		validate();		repaint();	}	@Override	public void actionPerformed(ActionEvent e) {		if (e.getActionCommand().equals("loginRoundedJButton")) {			switchToLoginScreen();		} else if (e.getActionCommand().equals("chartingJButton")) {			switchActiveWindowTo(chartingWindow);		} else if (e.getActionCommand().equals("decisionSupportRoundedJButton")) {			switchActiveWindowTo(decisionSupportWindow);		} else if (e.getActionCommand().equals("systemRoundedJButton")) {			switchActiveWindowTo(systemWindow);		} else if (e.getActionCommand().equals("messagingRoundedJButton")) {			switchActiveWindowTo(messagingWindow);		} else if (e.getActionCommand().equals("practiceAssistantRoundedJButton")) {			switchActiveWindowTo(practiceAssistantWindow);		}	}	private byte[] combineCharArraysAndReturnPasswordBytes(char[] pvitalityPassword, char[] selectedNewUserPasswordChars) {		char[] pSuperNewPasswordChars = new char[16];		byte[] pSuperNewPasswordBytes = new byte[16];		int ind = 0;		do {			pSuperNewPasswordChars[ind] = pvitalityPassword[ind];			ind++;		} while (ind < pvitalityPassword.length);		do {			pSuperNewPasswordChars[ind] = selectedNewUserPasswordChars[ind - pvitalityPassword.length];			ind++;		} while (ind < 16);		ind = 0;		do {			pSuperNewPasswordBytes[ind] = (byte) pSuperNewPasswordChars[ind];			ind++;		} while (ind < 16);		return pSuperNewPasswordBytes;	}	private byte[] makeRawFromPassword(char[] pSelectedNewUserPassword) {		char[] vitalityPassword1 = "z5T3zIi93F".toCharArray();		char[] vitalityPassword2 = "S8n952odk".toCharArray();		char[] vitalityPassword3 = "0lkqv63p".toCharArray();		char[] vitalityPassword4 = "Jbn4cW7".toCharArray();		char[] vitalityPassword5 = "tK807p".toCharArray();		byte[] superPasswordBytes = new byte[16];		if (pSelectedNewUserPassword.length == 6) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(vitalityPassword1, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 7) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(vitalityPassword2, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 8) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(vitalityPassword3, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 9) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(vitalityPassword4, pSelectedNewUserPassword);		}		if (pSelectedNewUserPassword.length == 10) {			superPasswordBytes = combineCharArraysAndReturnPasswordBytes(vitalityPassword5, pSelectedNewUserPassword);		}		return superPasswordBytes;	}	private void switchToLoginScreen() {		if (ChartingWindow.chartIsOpen) {			ChartingWindow.closeChartWithoutSigningOffJButton.doClick();		}		if (Access.isUserLoggedIn) {			try {				char[] foundPassword = null;				boolean found = false;				int ind = 0;				while ((!found) && (ind < (int) ((Integer) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(4))))) {					if (Access.loggedOnUserID.equals(((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind)).elementAt(0).elementAt(0))) {						found = true;						foundPassword = ((Vector<Vector<String>>) ((Vector) (((Vector) (Access.rootAdministrator.elementAt(3))).elementAt(0))).elementAt(ind)).elementAt(0).elementAt(1).toCharArray();					}					ind++;				}				Io.out("usr", Access.user, Access.loggedOnUserID + "_vitality.dat", makeRawFromPassword(foundPassword));				SystemWindow.println("user saved on logoff");				Access.exitOk = true;			} catch (Exception ex) {				ex.printStackTrace();				SystemWindow.println("ERROR: user not saved.");			}		}		try {			SystemWindow.println("rootAdministrator saved on exit.");			Io.out("sys", Access.rootAdministrator, "system_vitality.dat", raw);			Access.exitOk = true;		} catch (Exception ep) {			SystemWindow.println("ERROR: rootAdministrator not saved.");		}		try {			SystemWindow.println("calling default workspace wallpaper for login screen");			Device.device.addWallpaper("stretch", "workspace");			Device.device.repaint();		} catch (Exception we) {			SystemWindow.println("Wallpaper try error in Workspace");		}		Access.isUserLoggedIn = false;		Access.loggedOnUserID = "LOGGED_OUT";		Access.isRootAdministratorLoggedIn = false;		Device.device.access.setVisible(true);		moveToFront(Device.device.access);		setVisible(false);		resetWorkspace();		Device.device.validate();		Device.device.repaint();	}	public void resetWorkspace() {		clearAllTextObjects(systemWindow);		clearAllTextObjects(chartingWindow);		clearAllTextObjects(messagingWindow);		clearAllTextObjects(decisionSupportWindow);		clearAllTextObjects(practiceAssistantWindow);		deselectAllButtons(systemWindow);		deselectAllButtons(chartingWindow);		deselectAllButtons(messagingWindow);		deselectAllButtons(decisionSupportWindow);		deselectAllButtons(practiceAssistantWindow);		SystemWindow.setFonts();		systemWindow.reSize(false, "administrationJPanel");		practiceAssistantWindow.reSize();		decisionSupportWindow.reSize();		chartingWindow.reSize();		messagingWindow.reSize();		systemWindow.setPreferredSize(systemFrameSizeDimension);		chartingWindow.setSize(Device.screenSize.width - chartingWindow.chartingWindowLocation.width - 10, Device.screenSize.height - chartingWindow.chartingWindowLocation.height - 33);		messagingWindow.setSize(Device.screenSize.width - messagingWindow.messagingFrameLocation.width - 10, Device.screenSize.height - messagingWindow.messagingFrameLocation.height - 33);		decisionSupportWindow.setSize(Device.screenSize.width - decisionSupportWindow.decisionSupportLocation.width - 10, Device.screenSize.height - decisionSupportWindow.decisionSupportLocation.height - 33);		practiceAssistantWindow.setSize(Device.screenSize.width - practiceAssistantWindow.practiceLocation.width - 10, Device.screenSize.height - practiceAssistantWindow.practiceLocation.height);		systemWindow.userAccountsJToggleButton.doClick();		systemWindow.systemAppearanceJToggleButton.doClick();		systemWindow.authorizationInputAuthorizationsApplyToAllChartsJToggleButton.doClick();		decisionSupportWindow.actuarialLifeExpectancyJToggleButton.setSelected(true);		practiceAssistantWindow.mainCardLayout.show(practiceAssistantWindow.mainCardedJPanel, "mainCardedBlankJPanel");		decisionSupportWindow.decisionSupportMainPanelCardLayout.show(decisionSupportWindow.decisionSupportMainJPanel, "dSCoverJPanel");		systemWindow.setLocation(systemWindow.systemFrameLocation.width, systemWindow.systemFrameLocation.height);		chartingWindow.setLocation(chartingWindow.chartingWindowLocation.width, chartingWindow.chartingWindowLocation.height);		messagingWindow.setLocation(messagingWindow.messagingFrameLocation.width, messagingWindow.messagingFrameLocation.height);		decisionSupportWindow.setLocation(decisionSupportWindow.decisionSupportLocation.width, decisionSupportWindow.decisionSupportLocation.height);		practiceAssistantWindow.setLocation(practiceAssistantWindow.practiceLocation.width, practiceAssistantWindow.practiceLocation.height);		systemWindow.animatedWindowIconJButton.setVisible(false);		chartingWindow.animatedWindowIconJButton.setVisible(false);		messagingWindow.animatedWindowIconJButton.setVisible(false);		decisionSupportWindow.animatedWindowIconJButton.setVisible(false);		practiceAssistantWindow.animatedWindowIconJButton.setVisible(false);		validate();		repaint();	}	public void clearAllTextObjects(Container container) {		int ind = 0;		while (ind < container.getComponentCount()) {			if (container.getComponent(ind) instanceof JTextField) {				((JTextField) (container.getComponent(ind))).setText("");			} else if (container.getComponent(ind) instanceof JTextArea) {				((JTextArea) (container.getComponent(ind))).setText("");			} else if (container.getComponent(ind) instanceof Container) {				clearAllTextObjects(((Container) (container.getComponent(ind))));			}			ind++;		}	}	public void deselectAllButtons(Container container) {		int ind = 0;		while (ind < container.getComponentCount()) {			if (container.getComponent(ind) instanceof JButton) {				((JButton) (container.getComponent(ind))).setSelected(false);				((JButton) (container.getComponent(ind))).setFocusable(false);			} else if (container.getComponent(ind) instanceof JToggleButton) {				((JToggleButton) (container.getComponent(ind))).setSelected(false);				((JToggleButton) (container.getComponent(ind))).setFocusable(false);			} else if (container.getComponent(ind) instanceof Container) {				deselectAllButtons(((Container) (container.getComponent(ind))));			}			ind++;		}	}	@Override	public void mouseDragged(MouseEvent m) {		if (initiateMouseEvent) {			initialPanelX = ((JComponent) (m.getSource())).getX();			initialPanelY = ((JComponent) (m.getSource())).getY();			initialMouseX = m.getXOnScreen();			initialMouseY = m.getYOnScreen();			initiateMouseEvent = false;		}		Device.device.workspace.setComponentZOrder(((JComponent) (m.getSource())), 7);		((JComponent) (m.getSource())).setLocation(initialPanelX + m.getXOnScreen() - initialMouseX, initialPanelY + m.getYOnScreen() - initialMouseY);	}	@Override	public void mouseMoved(MouseEvent m) {	}	@Override	public void mouseClicked(MouseEvent m) {		if (((JComponent) m.getSource()).getName().equals("printerIconJButton")) {		} else if (((JComponent) m.getSource()).getName().equals("systemFrameAnimatedWindowIconJButton")) {			switchActiveWindowTo(systemWindow);		} else if (((JComponent) m.getSource()).getName().equals("chartsFrameAnimatedWindowIconJButton")) {			switchActiveWindowTo(chartingWindow);		} else if (((JComponent) m.getSource()).getName().equals("messagingFrameAnimatedWindowIconJButton")) {			switchActiveWindowTo(messagingWindow);		} else if (((JComponent) m.getSource()).getName().equals("decisionSupportFrameAnimatedWindowIconJButton")) {			switchActiveWindowTo(decisionSupportWindow);		} else if (((JComponent) m.getSource()).getName().equals("practiceAssistantFrameAnimatedWindowIconJButton")) {			switchActiveWindowTo(practiceAssistantWindow);		}	}	@Override	public void mouseEntered(MouseEvent m) {	}	@Override	public void mouseExited(MouseEvent m) {	}	@Override	public void mousePressed(MouseEvent m) {		if (((JComponent) m.getSource()).getName().equals("animatedWindowIconJButton")) {			originalX = getX();			originalX = getX();			originalMouseX = m.getXOnScreen();			originalMouseY = m.getYOnScreen();			while (((JButton) m.getSource()).isSelected()) {				((JButton) m.getSource()).setLocation(m.getXOnScreen() - originalX, m.getYOnScreen() - originalY);				((JButton) m.getSource()).paintImmediately(0, 0, ((JButton) m.getSource()).getWidth(), ((JButton) m.getSource()).getHeight());			}		}	}	@Override	public void mouseReleased(MouseEvent m) {		if (toPrinterJButton.getBounds().contains(m.getPoint())) {			System.out.println("chartsFrame.printNowJButton.doClick()");			Device.device.workspace.chartingWindow.printNowJButton.doClick();		}	}}// EOF